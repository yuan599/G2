"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9600],{19430:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(67170);var t={}},91956:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(95900);var t={}},55452:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(43574);var t={}},24481:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(53813);var t={}},2346:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(4805);var t={}},32154:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(84362);var t={}},57645:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50795);var t={}},45705:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(16366);var t={}},31562:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(29805);var t={}},36918:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(18669);var t={}},59513:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(16195);var t={}},31268:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(96831);var t={}},30365:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(93083);var t={}},84349:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(69656);var t={}},89762:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(25815);var t={}},45833:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(1285);var t={}},28827:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(92536);var t={}},90221:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(91078);var t={}},86061:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(74623);var t={}},38090:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(52516);var t={}},63977:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(40632);var t={}},69607:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(47860);var t={}},46082:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(11444);var t={}},23519:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(26641);var t={}},8788:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(62090);var t={}},33140:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(78556);var t={}},46381:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(66125);var t={}},38293:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(74242);var t={}},14783:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(30321);var t={}},53906:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(15989);var t={}},21060:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(85192);var t={}},85944:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(48922);var t={}},4396:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(92642);var t={}},4229:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(95061);var t={}},83862:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70523);var t={}},29532:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(49054);var t={}},38258:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57534);var t={}},45926:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(36783);var t={}},45790:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(89417);var t={}},53947:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57014);var t={}},52528:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(31859);var t={}},16994:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(60615);var t={}},84817:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(73869);var t={}},15347:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(11181);var t={}},59017:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57233);var t={}},69805:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(60118);var t={}},80579:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(23105);var t={}},15106:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(47870);var t={}},8376:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(13997);var t={}},32764:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(94067);var t={}},8570:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(26498);var t={}},32380:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(48750);var t={}},49490:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(97422);var t={}},57106:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(331);var t={}},57851:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(77230);var t={}},15142:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(21026);var t={}},13661:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(43907);var t={}},91414:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(77196);var t={}},42760:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(59465);var t={}},54269:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57025);var t={}},26927:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(15584);var t={}},7782:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(30601);var t={}},84596:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(51315);var t={}},99448:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(20971);var t={}},97806:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71836);var t={}},77859:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(66854);var t={}},63016:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(8544);var t={}},48425:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(3327);var t={}},38310:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(20976);var t={}},17615:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(12638);var t={}},4992:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(66234);var t={}},88956:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70865);var t={}},10561:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(28613);var t={}},52522:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(66973);var t={}},82719:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(44969);var t={}},72357:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(48270);var t={}},20123:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(12570);var t={}},72697:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(22922);var t={}},94881:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(7457);var t={}},3370:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(92154);var t={}},62878:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87543);var t={}},26608:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70762);var t={}},15509:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(46396);var t={}},80615:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(27331);var t={}},17427:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50382);var t={}},19903:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(83600);var t={}},65900:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(53289);var t={}},31315:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(38971);var t={}},87353:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(26169);var t={}},92370:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(38731);var t={}},17816:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(81193);var t={}},27551:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(65694);var t={}},16486:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87433);var t={}},94836:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(42412);var t={}},24004:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(47341);var t={}},76139:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(17360);var t={}},51399:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(38978);var t={}},13558:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(84625);var t={}},56989:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(1549);var t={}},65476:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(81436);var t={}},32405:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(8050);var t={}},58549:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(40654);var t={}},72599:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70071);var t={}},97193:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57213);var t={}},7140:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(12813);var t={}},23515:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(48714);var t={}},61640:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(54088);var t={}},40833:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(83883);var t={}},38953:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(81743);var t={}},95617:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(34232);var t={}},71811:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50579);var t={}},1048:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(63699);var t={}},86965:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(81462);var t={}},38349:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(45294);var t={}},14269:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(95759);var t={}},61233:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(80258);var t={}},47967:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(64059);var t={}},78944:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(91958);var t={}},93158:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(5243);var t={}},61082:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(29949);var t={}},32338:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(88026);var t={}},5947:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(75977);var t={}},15570:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(307);var t={}},42043:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50857);var t={}},16522:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(34077);var t={}},28011:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(53081);var t={}},63773:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(95156);var t={}},90560:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(97296);var t={}},23660:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(3714);var t={}},8633:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(10400);var t={}},53605:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(12317);var t={}},5498:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(45710);var t={}},85077:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(54178);var t={}},51752:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(40579);var t={}},88151:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(84244);var t={}},88293:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57435);var t={}},93596:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87958);var t={}},13149:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57516);var t={}},81352:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(36010);var t={}},97428:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(56932);var t={}},20670:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(4065);var t={}},40039:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(10898);var t={}},25413:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(13628);var t={}},64847:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(88060);var t={}},65711:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(55965);var t={}},52317:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(28067);var t={}},86877:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(20848);var t={}},29724:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(84427);var t={}},46067:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(1353);var t={}},28574:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(61166);var t={}},80688:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(92427);var t={}},54782:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(25510);var t={}},32374:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(83648);var t={}},16825:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(12647);var t={}},51333:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(67568);var t={}},56330:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(41149);var t={}},38161:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(64327);var t={}},70930:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(6953);var t={}},24718:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(23060);var t={}},35245:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(74572);var t={}},32477:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(43092);var t={}},65076:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(44581);var t={}},12720:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(73276);var t={}},54667:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(15147);var t={}},30490:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(81161);var t={}},91484:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(67);var t={}},55562:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(60109);var t={}},26698:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(195);var t={}},90645:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(79216);var t={}},75189:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71905);var t={}},58060:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(66262);var t={}},42501:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(6348);var t={}},84833:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(8944);var t={}},9133:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(21331);var t={}},50299:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(47313);var t={}},99703:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(47646);var t={}},97749:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(88312);var t={}},45908:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(42295);var t={}},93133:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(34584);var t={}},39743:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(72597);var t={}},7705:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(2304);var t={}},65235:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70089);var t={}},33904:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(53427);var t={}},43593:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(86668);var t={}},22246:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(8342);var t={}},83504:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70602);var t={}},28951:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(84087);var t={}},35781:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(38747);var t={}},57244:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(59930);var t={}},70232:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(8973);var t={}},58696:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(93112);var t={}},34376:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(37996);var t={}},12917:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(78764);var t={}},18113:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(54331);var t={}},5659:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(19683);var t={}},70407:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(26035);var t={}},23015:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(90290);var t={}},92492:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(56497);var t={}},94638:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(3550);var t={}},9035:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(42729);var t={}},79547:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(88157);var t={}},71244:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(43713);var t={}},61164:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(75726);var t={}},43175:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71673);var t={}},7916:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50870);var t={}},97697:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(36004);var t={}},38028:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(26510);var t={}},96921:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(47139);var t={}},39224:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(67170);const t=[{value:"Chart 用于提供创建 canvas、添加 Mark 标记、自适应图表大小等能力。",paraId:0},{value:"const chart = new Chart({\n  container: 'container',\n  width: 640,\n  height: 480,\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"API",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"container",paraId:2,tocIndex:1},{value:"指定 chart 绘制的 DOM，可以传入 DOM id，也可以直接传入 dom 实例",paraId:2,tocIndex:1},{value:"string | HTMLElement",paraId:2,tocIndex:1},{value:"width",paraId:2,tocIndex:1},{value:"图表宽度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"640",paraId:2,tocIndex:1},{value:"height",paraId:2,tocIndex:1},{value:"图表高度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"480",paraId:2,tocIndex:1},{value:"depth",paraId:2,tocIndex:1},{value:"图表深度，在 3D 图表中使用",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"renderer",paraId:2,tocIndex:1},{value:"指定渲染引擎，默认使用 canvas。",paraId:2,tocIndex:1},{value:"plugins",paraId:2,tocIndex:1},{value:"指定渲染时使用的插件 ，具体见 ",paraId:2,tocIndex:1},{value:"plugin",paraId:3,tocIndex:1},{value:"any[]",paraId:2,tocIndex:1},{value:"autoFit",paraId:2,tocIndex:1},{value:"图表是否自适应容器宽高，默认为 ",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"，用户需要手动设置 ",paraId:2,tocIndex:1},{value:"width",paraId:2,tocIndex:1},{value:" 和 ",paraId:2,tocIndex:1},{value:"height",paraId:2,tocIndex:1},{value:"。",paraId:2,tocIndex:1},{value:"当 ",paraId:2,tocIndex:1},{value:"autoFit: true",paraId:2,tocIndex:1},{value:" 时，会自动取图表容器的宽高，如果用户设置了 ",paraId:2,tocIndex:1},{value:"height",paraId:2,tocIndex:1},{value:"，那么会以用户设置的 ",paraId:2,tocIndex:1},{value:"height",paraId:2,tocIndex:1},{value:" 为准。",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"图表内边距",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"30",paraId:2,tocIndex:1},{value:"创建 Chart 实例。",paraId:4,tocIndex:3},{value:"chart.interval",paraId:5},{value:"添加 interval 图形，具体见 ",paraId:6,tocIndex:4},{value:"mark",paraId:7,tocIndex:4},{value:"。",paraId:6,tocIndex:4},{value:"chart.rect",paraId:5},{value:"添加 rect 图形，具体见 ",paraId:8,tocIndex:5},{value:"mark",paraId:9,tocIndex:5},{value:"。",paraId:8,tocIndex:5},{value:"chart.point",paraId:5},{value:"添加 point 图形，具体见 ",paraId:10,tocIndex:6},{value:"mark",paraId:11,tocIndex:6},{value:"。",paraId:10,tocIndex:6},{value:"chart.area",paraId:5},{value:"添加 area 图形，具体见 ",paraId:12,tocIndex:7},{value:"mark",paraId:13,tocIndex:7},{value:"。",paraId:12,tocIndex:7},{value:"chart.line",paraId:5},{value:"添加 line 图形，具体见 ",paraId:14,tocIndex:8},{value:"mark",paraId:15,tocIndex:8},{value:"。",paraId:14,tocIndex:8},{value:"chart.vector",paraId:5},{value:"添加 vector 图形，具体见 ",paraId:16,tocIndex:9},{value:"mark",paraId:17,tocIndex:9},{value:"。",paraId:16,tocIndex:9},{value:"chart.link",paraId:5},{value:"添加 link 图形，具体见 ",paraId:18,tocIndex:10},{value:"mark",paraId:19,tocIndex:10},{value:"。",paraId:18,tocIndex:10},{value:"chart.polygon",paraId:5},{value:"添加 polygon 图形，具体见 ",paraId:20,tocIndex:11},{value:"mark",paraId:21,tocIndex:11},{value:"。",paraId:20,tocIndex:11},{value:"chart.image",paraId:5},{value:"添加 image 图形，具体见 ",paraId:22,tocIndex:12},{value:"mark",paraId:23,tocIndex:12},{value:"。",paraId:22,tocIndex:12},{value:"chart.text",paraId:5},{value:"添加 text 图形，具体见 ",paraId:24,tocIndex:13},{value:"mark",paraId:25,tocIndex:13},{value:"。",paraId:24,tocIndex:13},{value:"chart.lineX",paraId:5},{value:"添加 lineX 图形，具体见 ",paraId:26,tocIndex:14},{value:"mark",paraId:27,tocIndex:14},{value:"。",paraId:26,tocIndex:14},{value:"chart.lineY",paraId:5},{value:"添加 lineY 图形，具体见 ",paraId:28,tocIndex:15},{value:"mark",paraId:29,tocIndex:15},{value:"。",paraId:28,tocIndex:15},{value:"chart.range",paraId:5},{value:"添加 range 图形，具体见 ",paraId:30,tocIndex:16},{value:"mark",paraId:31,tocIndex:16},{value:"。",paraId:30,tocIndex:16},{value:"chart.rangeX",paraId:5},{value:"添加 rangeX 图形，具体见 ",paraId:32,tocIndex:17},{value:"mark",paraId:33,tocIndex:17},{value:"。",paraId:32,tocIndex:17},{value:"chart.rangeY",paraId:5},{value:"添加 rangeY 图形，具体见 ",paraId:34,tocIndex:18},{value:"mark",paraId:35,tocIndex:18},{value:"。",paraId:34,tocIndex:18},{value:"chart.connector",paraId:5},{value:"添加 connector 图形，具体见 ",paraId:36,tocIndex:19},{value:"mark",paraId:37,tocIndex:19},{value:"。",paraId:36,tocIndex:19},{value:"chart.sankey",paraId:5},{value:"添加 sankey 图形，具体见 ",paraId:38,tocIndex:20},{value:"graph",paraId:39,tocIndex:20},{value:"。",paraId:38,tocIndex:20},{value:"chart.treemap",paraId:5},{value:"添加 treemap 图形，具体见 ",paraId:40,tocIndex:21},{value:"graph",paraId:41,tocIndex:21},{value:"。",paraId:40,tocIndex:21},{value:"chart.boxplot",paraId:5},{value:"添加 boxplot 图形，具体见 ",paraId:42,tocIndex:22},{value:"mark",paraId:43,tocIndex:22},{value:"。",paraId:42,tocIndex:22},{value:"chart.density",paraId:5},{value:"添加 density 图形，具体见 ",paraId:44,tocIndex:23},{value:"mark",paraId:45,tocIndex:23},{value:"。",paraId:44,tocIndex:23},{value:"chart.heatmap",paraId:5},{value:"添加 heatmap 图形，具体见 ",paraId:46,tocIndex:24},{value:"mark",paraId:47,tocIndex:24},{value:"。",paraId:46,tocIndex:24},{value:"chart.shape",paraId:5},{value:"添加 shape 图形，具体见 ",paraId:48,tocIndex:25},{value:"mark",paraId:49,tocIndex:25},{value:"。",paraId:48,tocIndex:25},{value:"chart.pack",paraId:5},{value:"添加 pack 图形，具体见 ",paraId:50,tocIndex:26},{value:"graph",paraId:51,tocIndex:26},{value:"。",paraId:50,tocIndex:26},{value:"chart.forceGraph",paraId:5},{value:"添加 forceGraph 图形，具体见 ",paraId:52,tocIndex:27},{value:"graph",paraId:53,tocIndex:27},{value:"。",paraId:52,tocIndex:27},{value:"chart.tree",paraId:5},{value:"添加 tree 图形，具体见 ",paraId:54,tocIndex:28},{value:"graph",paraId:55,tocIndex:28},{value:"。",paraId:54,tocIndex:28},{value:"chart.wordCloud",paraId:5},{value:"添加 wordCloud 图形，具体见 ",paraId:56,tocIndex:29},{value:"mark",paraId:57,tocIndex:29},{value:"。",paraId:56,tocIndex:29},{value:"chart.gauge",paraId:5},{value:"添加 gauge 图形，具体见 ",paraId:58,tocIndex:30},{value:"mark",paraId:59,tocIndex:30},{value:"。",paraId:58,tocIndex:30},{value:"chart.view",paraId:5},{value:"添加 view 图形，具体见 ",paraId:60,tocIndex:31},{value:"api",paraId:61,tocIndex:31},{value:"。",paraId:60,tocIndex:31},{value:"chart.spaceLayer",paraId:5},{value:"添加 spaceLayer 图形，具体见 ",paraId:62,tocIndex:32},{value:"composition",paraId:63,tocIndex:32},{value:"。",paraId:62,tocIndex:32},{value:"chart.spaceFlex",paraId:5},{value:"添加 spaceFlex 图形，具体见 ",paraId:64,tocIndex:33},{value:"composition",paraId:65,tocIndex:33},{value:"。",paraId:64,tocIndex:33},{value:"chart.facetRect",paraId:5},{value:"添加 facetRect 图形，具体见 ",paraId:66,tocIndex:34},{value:"composition",paraId:67,tocIndex:34},{value:"。",paraId:66,tocIndex:34},{value:"chart.facetCircle",paraId:5},{value:"添加 facetCircle 图形，具体见 ",paraId:68,tocIndex:35},{value:"composition",paraId:69,tocIndex:35},{value:"。",paraId:68,tocIndex:35},{value:"chart.repeatMatrix",paraId:5},{value:"添加 repeatMatrix 图形，具体见 ",paraId:70,tocIndex:36},{value:"composition",paraId:71,tocIndex:36},{value:"。",paraId:70,tocIndex:36},{value:"chart.geoView",paraId:5},{value:"添加 geoView 图形，具体见 ",paraId:72,tocIndex:37},{value:"geo",paraId:73,tocIndex:37},{value:"。",paraId:72,tocIndex:37},{value:"chart.geoPath",paraId:5},{value:"添加 geoPath 图形，具体见 ",paraId:74,tocIndex:38},{value:"geo",paraId:75,tocIndex:38},{value:"。",paraId:74,tocIndex:38},{value:"chart.timingKeyframe",paraId:5},{value:"添加 timingKeyframe 图形，具体见 ",paraId:76,tocIndex:39},{value:"composition",paraId:77,tocIndex:39},{value:"。",paraId:76,tocIndex:39},{value:"chart.point3D",paraId:5},{value:"添加 point3D 图形，具体见 ",paraId:78,tocIndex:40},{value:"3d",paraId:79,tocIndex:40},{value:"。",paraId:78,tocIndex:40},{value:"chart.interval3D",paraId:5},{value:"添加 interval3D 图形，具体见 ",paraId:80,tocIndex:41},{value:"3d",paraId:81,tocIndex:41},{value:"。",paraId:80,tocIndex:41},{value:"chart.line3D",paraId:5},{value:"添加 line3D 图形，具体见 ",paraId:82,tocIndex:42},{value:"3d",paraId:83,tocIndex:42},{value:"。",paraId:82,tocIndex:42},{value:"chart.width",paraId:5},{value:"设置或获取图表的 width。",paraId:84,tocIndex:44},{value:"chart.height",paraId:5},{value:"设置或获取图表的 height。",paraId:85,tocIndex:45},{value:"chart.title",paraId:5},{value:"设置或获取图表的 title。",paraId:86,tocIndex:46},{value:"chart.options",paraId:5},{value:"获取图表的配置项。",paraId:87,tocIndex:47},{value:"chart.data",paraId:5},{value:"设置图形的数据，支持多种数据来源和数据变换，具体见 ",paraId:88,tocIndex:48},{value:"data",paraId:89,tocIndex:48},{value:"。",paraId:88,tocIndex:48},{value:"chart.encode",paraId:5},{value:"设置图形每个通道的字段名称，具体见 ",paraId:90,tocIndex:49},{value:"encode",paraId:91,tocIndex:49},{value:"。",paraId:90,tocIndex:49},{value:"chart.scale",paraId:5},{value:"设置图形每个通道的比例尺，具体见 ",paraId:92,tocIndex:50},{value:"scale",paraId:93,tocIndex:50},{value:"。",paraId:92,tocIndex:50},{value:"chart.legend",paraId:5},{value:"设置图形的图例，具体见 ",paraId:94,tocIndex:51},{value:"legend",paraId:95,tocIndex:51},{value:"。",paraId:94,tocIndex:51},{value:"chart.tooltip",paraId:5},{value:"设置图形的 Tooltip，具体见 ",paraId:96,tocIndex:52},{value:"tooltip",paraId:97,tocIndex:52},{value:"。",paraId:96,tocIndex:52},{value:"chart.axis",paraId:5},{value:"设置图形的坐标轴，具体见 ",paraId:98,tocIndex:53},{value:"axis",paraId:99,tocIndex:53},{value:"。",paraId:98,tocIndex:53},{value:"chart.slider",paraId:5},{value:"设置图形的坐标轴，具体见 ",paraId:100,tocIndex:54},{value:"slider",paraId:101,tocIndex:54},{value:"。",paraId:100,tocIndex:54},{value:"chart.label",paraId:5},{value:"设置图形的标签，具体见 ",paraId:102,tocIndex:55},{value:"label",paraId:103,tocIndex:55},{value:"。",paraId:102,tocIndex:55},{value:"chart.style",paraId:5},{value:"设置图形的样式，具体见 ",paraId:104,tocIndex:56},{value:"style",paraId:105,tocIndex:56},{value:"。",paraId:104,tocIndex:56},{value:"chart.theme",paraId:5},{value:"设置图形的主题，具体见 ",paraId:106,tocIndex:57},{value:"theme",paraId:107,tocIndex:57},{value:"。",paraId:106,tocIndex:57},{value:"chart.labelTransform",paraId:5},{value:"设置图形的 labelTransform，具体见 ",paraId:108,tocIndex:58},{value:"label",paraId:109,tocIndex:58},{value:"chart.render",paraId:5},{value:"调用图表的渲染方法。",paraId:110,tocIndex:60},{value:"chart.destroy",paraId:5},{value:"销毁图表容器和 Canvas 画布。",paraId:111,tocIndex:61},{value:"chart.clear",paraId:5},{value:"清空图表配置和 Canvas 画布。",paraId:112,tocIndex:62},{value:"chart.show",paraId:5},{value:"显示当前节点渲染的图形。",paraId:113,tocIndex:63},{value:"chart.hide",paraId:5},{value:"隐藏当前节点渲染的图形。",paraId:114,tocIndex:64},{value:"chart.changeData",paraId:5},{value:"更改图形的数据来源并重新渲染整个图表。",paraId:115,tocIndex:65},{value:"chart.changeSize",paraId:5},{value:"改变图表的宽高，并重新渲染。",paraId:116,tocIndex:66},{value:"chart.forceFit",paraId:5},{value:"自动根据外部 DOM 容器大小调整画布并重新渲染。",paraId:117,tocIndex:67},{value:"chart.getContainer",paraId:5},{value:"获取图表的 HTML 容器。",paraId:118,tocIndex:69},{value:"chart.getContext",paraId:5},{value:"返回 chart 的 context 信息。",paraId:119,tocIndex:70},{value:"chart.getView",paraId:5},{value:"返回 chart 渲染时的 view 实例。",paraId:120,tocIndex:71},{value:"chart.getCoordinate",paraId:5},{value:"返回 chart 渲染时的 coordinate 实例。",paraId:121,tocIndex:72},{value:"chart.getTheme",paraId:5},{value:"返回 chart 渲染时的 theme 实例。",paraId:122,tocIndex:73},{value:"chart.getGroup",paraId:5},{value:"返回 chart 渲染时的 canvas group 实例。",paraId:123,tocIndex:74},{value:"chart.getScale",paraId:5},{value:"返回 chart 渲染时所有的 scale 实例。",paraId:124,tocIndex:75},{value:"chart.getScaleByChannel",paraId:5},{value:"通过通道名称查找返回 chart 渲染时对应的 scale 实例。",paraId:125,tocIndex:76},{value:"chart.on",paraId:5},{value:"监听 chart 上的事件。",paraId:126,tocIndex:77},{value:"chart.once",paraId:5},{value:"监听 chart 上的事件，仅触发一次。",paraId:127,tocIndex:78},{value:"chart.emit",paraId:5},{value:"触发 chart 上的事件。",paraId:128,tocIndex:79},{value:"chart.off",paraId:5},{value:"写在 chart 上的监听事件。",paraId:129,tocIndex:80},{value:"chart.getNodesByType",paraId:5},{value:"通过 type 查找所有的 node 子节点。",paraId:130,tocIndex:81},{value:"chart.getNodeByKey",paraId:5},{value:"通过 key 找到当前 node 的子节点。",paraId:131,tocIndex:82},{value:"chart.append",paraId:5},{value:"创建一个新的 Node 并添加在 chart 的子节点上。",paraId:132,tocIndex:83},{value:"事件",paraId:133,tocIndex:85},{value:"描述",paraId:133,tocIndex:85},{value:"beforerender",paraId:133,tocIndex:85},{value:"图表渲染前执行该事件",paraId:133,tocIndex:85},{value:"afterrender",paraId:133,tocIndex:85},{value:"图表渲染后执行该事件",paraId:133,tocIndex:85},{value:"beforepaint",paraId:133,tocIndex:85},{value:"图表布局计算后，绘制前执行该事件",paraId:133,tocIndex:85},{value:"afterpaint",paraId:133,tocIndex:85},{value:"图表绘制后执行该事件",paraId:133,tocIndex:85},{value:"beforechangedata",paraId:133,tocIndex:85},{value:"图表更新数据前执行该事件",paraId:133,tocIndex:85},{value:"afterchangedata",paraId:133,tocIndex:85},{value:"图表更新数据后执行该事件",paraId:133,tocIndex:85},{value:"beforechangesize",paraId:133,tocIndex:85},{value:"图表更新尺寸前执行该事件",paraId:133,tocIndex:85},{value:"afterchangesize",paraId:133,tocIndex:85},{value:"图表更新尺寸后执行该事件",paraId:133,tocIndex:85},{value:"beforedestroy",paraId:133,tocIndex:85},{value:"图表销毁前执行该事件",paraId:133,tocIndex:85},{value:"afterdestroy",paraId:133,tocIndex:85},{value:"图表销毁后执行该事件",paraId:133,tocIndex:85},{value:"通过 ",paraId:134,tocIndex:85},{value:"chart.on()",paraId:134,tocIndex:85},{value:" 来申明生命周期事件。例如：",paraId:134,tocIndex:85},{value:"chart.on('afterrender', (e) => {\n  console.log('Chart has been rendered!');\n});\n",paraId:135,tocIndex:85},{value:"如何使用 svg 进行图表渲染？",paraId:136,tocIndex:87},{value:"import { Renderer as GRenderer } from '@antv/g-svg';\nconst chart = new Chart({\n  container: 'container',\n  width: 640,\n  height: 480,\n  renderer: GRenderer,\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render();\n",paraId:137,tocIndex:87}]},12542:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(95900);const t=[{value:"import { Chart } from '@antv/g2';\n\nconst M = [\n  'Jan.',\n  'Feb.',\n  'Mar.',\n  'Apr.',\n  'May',\n  'Jun.',\n  'Jul.',\n  'Aug.',\n  'Sept.',\n  'Oct.',\n  'Nov.',\n  'Dec.',\n];\nconst N = ['A', 'B', 'C', 'D'];\nconst data = M.flatMap((month) =>\n  N.map((name) => ({\n    month,\n    name,\n    value: Math.random(),\n  })),\n);\n\nconst chart = new Chart({\n  container: 'container',\n  width: 480,\n  height: 480,\n});\n\nconst facetCircle = chart.facetCircle().data(data).encode('position', 'month');\n\nfacetCircle\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'name');\n\nchart.render();\n",paraId:0,tocIndex:0},{value:"facetCircle.interval",paraId:1},{value:"添加 interval 图形，具体见 ",paraId:2,tocIndex:2},{value:"mark",paraId:3,tocIndex:2},{value:"。",paraId:2,tocIndex:2},{value:"facetCircle.rect",paraId:1},{value:"添加 rect 图形，具体见 ",paraId:4,tocIndex:3},{value:"mark",paraId:5,tocIndex:3},{value:"。",paraId:4,tocIndex:3},{value:"facetCircle.point",paraId:1},{value:"添加 point 图形，具体见 ",paraId:6,tocIndex:4},{value:"mark",paraId:7,tocIndex:4},{value:"。",paraId:6,tocIndex:4},{value:"facetCircle.area",paraId:1},{value:"添加 area 图形，具体见 ",paraId:8,tocIndex:5},{value:"mark",paraId:9,tocIndex:5},{value:"。",paraId:8,tocIndex:5},{value:"facetCircle.line",paraId:1},{value:"添加 line 图形，具体见 ",paraId:10,tocIndex:6},{value:"mark",paraId:11,tocIndex:6},{value:"。",paraId:10,tocIndex:6},{value:"facetCircle.vector",paraId:1},{value:"添加 vector 图形，具体见 ",paraId:12,tocIndex:7},{value:"mark",paraId:13,tocIndex:7},{value:"。",paraId:12,tocIndex:7},{value:"facetCircle.link",paraId:1},{value:"添加 link 图形，具体见 ",paraId:14,tocIndex:8},{value:"mark",paraId:15,tocIndex:8},{value:"。",paraId:14,tocIndex:8},{value:"facetCircle.polygon",paraId:1},{value:"添加 polygon 图形，具体见 ",paraId:16,tocIndex:9},{value:"mark",paraId:17,tocIndex:9},{value:"。",paraId:16,tocIndex:9},{value:"facetCircle.image",paraId:1},{value:"添加 image 图形，具体见 ",paraId:18,tocIndex:10},{value:"mark",paraId:19,tocIndex:10},{value:"。",paraId:18,tocIndex:10},{value:"facetCircle.text",paraId:1},{value:"添加 text 图形，具体见 ",paraId:20,tocIndex:11},{value:"mark",paraId:21,tocIndex:11},{value:"。",paraId:20,tocIndex:11},{value:"facetCircle.lineX",paraId:1},{value:"添加 lineX 图形，具体见 ",paraId:22,tocIndex:12},{value:"mark",paraId:23,tocIndex:12},{value:"。",paraId:22,tocIndex:12},{value:"facetCircle.lineY",paraId:1},{value:"添加 lineY 图形，具体见 ",paraId:24,tocIndex:13},{value:"mark",paraId:25,tocIndex:13},{value:"。",paraId:24,tocIndex:13},{value:"facetCircle.range",paraId:1},{value:"添加 range 图形，具体见 ",paraId:26,tocIndex:14},{value:"mark",paraId:27,tocIndex:14},{value:"。",paraId:26,tocIndex:14},{value:"facetCircle.rangeX",paraId:1},{value:"添加 rangeX 图形，具体见 ",paraId:28,tocIndex:15},{value:"mark",paraId:29,tocIndex:15},{value:"。",paraId:28,tocIndex:15},{value:"facetCircle.rangeY",paraId:1},{value:"添加 rangeY 图形，具体见 ",paraId:30,tocIndex:16},{value:"mark",paraId:31,tocIndex:16},{value:"。",paraId:30,tocIndex:16},{value:"facetCircle.connector",paraId:1},{value:"添加 connector 图形，具体见 ",paraId:32,tocIndex:17},{value:"mark",paraId:33,tocIndex:17},{value:"。",paraId:32,tocIndex:17},{value:"facetCircle.sankey",paraId:1},{value:"添加 sankey 图形，具体见 ",paraId:34,tocIndex:18},{value:"graph",paraId:35,tocIndex:18},{value:"。",paraId:34,tocIndex:18},{value:"facetCircle.treemap",paraId:1},{value:"添加 treemap 图形，具体见 ",paraId:36,tocIndex:19},{value:"graph",paraId:37,tocIndex:19},{value:"。",paraId:36,tocIndex:19},{value:"facetCircle.boxplot",paraId:1},{value:"添加 boxplot 图形，具体见 ",paraId:38,tocIndex:20},{value:"mark",paraId:39,tocIndex:20},{value:"。",paraId:38,tocIndex:20},{value:"facetCircle.shape",paraId:1},{value:"添加 shape 图形，具体见 ",paraId:40,tocIndex:21},{value:"mark",paraId:41,tocIndex:21},{value:"。",paraId:40,tocIndex:21},{value:"facetCircle.pack",paraId:1},{value:"添加 pack 图形，具体见 ",paraId:42,tocIndex:22},{value:"graph",paraId:43,tocIndex:22},{value:"。",paraId:42,tocIndex:22},{value:"facetCircle.forceGraph",paraId:1},{value:"添加 forceGraph 图形，具体见 ",paraId:44,tocIndex:23},{value:"graph",paraId:45,tocIndex:23},{value:"。",paraId:44,tocIndex:23},{value:"facetCircle.tree",paraId:1},{value:"添加 tree 图形，具体见 ",paraId:46,tocIndex:24},{value:"graph",paraId:47,tocIndex:24},{value:"。",paraId:46,tocIndex:24},{value:"facetCircle.wordCloud",paraId:1},{value:"添加 wordCloud 图形，具体见 ",paraId:48,tocIndex:25},{value:"mark",paraId:49,tocIndex:25},{value:"。",paraId:48,tocIndex:25},{value:"facetCircle.gauge",paraId:1},{value:"添加 gauge 图形，具体见 ",paraId:50,tocIndex:26},{value:"mark",paraId:51,tocIndex:26},{value:"。",paraId:50,tocIndex:26},{value:"facetCircle.attr",paraId:1},{value:"获取或设置图表的配置项。",paraId:52,tocIndex:28},{value:"facetCircle.data",paraId:1},{value:"设置图形的数据，支持多种数据来源和数据变换，具体见 ",paraId:53,tocIndex:29},{value:"data",paraId:54,tocIndex:29},{value:"。",paraId:53,tocIndex:29},{value:"facetCircle.scale",paraId:1},{value:"设置图形每个通道的比例尺，具体见 ",paraId:55,tocIndex:30},{value:"scale",paraId:56,tocIndex:30},{value:"。",paraId:55,tocIndex:30},{value:"facetCircle.legend",paraId:1},{value:"设置图形的图例，具体见 ",paraId:57,tocIndex:31},{value:"legend",paraId:58,tocIndex:31},{value:"。",paraId:57,tocIndex:31},{value:"facetCircle.axis",paraId:1},{value:"设置图形的坐标轴，具体见 ",paraId:59,tocIndex:32},{value:"axis",paraId:60,tocIndex:32},{value:"。",paraId:59,tocIndex:32},{value:"facetCircle.style",paraId:1},{value:"设置图形的样式，具体见 ",paraId:61,tocIndex:33},{value:"style",paraId:62,tocIndex:33},{value:"。",paraId:61,tocIndex:33},{value:"facetCircle.theme",paraId:1},{value:"设置图形的主题，具体见 ",paraId:63,tocIndex:34},{value:"theme",paraId:64,tocIndex:34},{value:"。",paraId:63,tocIndex:34}]},8302:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(43574);const t=[{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 928,\n  height: 270,\n  paddingBottom: 50,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .attr('paddingBottom', 50)\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n  })\n  .encode('x', 'series');\n\nfacetRect\n  .point()\n  .attr('inset', 10)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .style('stroke', '#000');\n\nchart.render();\n",paraId:0,tocIndex:0},{value:"facetRect.[mark]",paraId:1},{value:"设置图表的 Mark 标记，具体见 ",paraId:2,tocIndex:2},{value:"mark",paraId:3,tocIndex:2},{value:"。",paraId:2,tocIndex:2},{value:"facetRect.attr",paraId:1},{value:"获取或设置图表的配置项。",paraId:4,tocIndex:4},{value:"facetRect.data",paraId:1},{value:"设置图形的数据，支持多种数据来源和数据变换，具体见 ",paraId:5,tocIndex:5},{value:"data",paraId:6,tocIndex:5},{value:"。",paraId:5,tocIndex:5},{value:"facetRect.scale",paraId:1},{value:"设置图形每个通道的比例尺，具体见 ",paraId:7,tocIndex:6},{value:"scale",paraId:8,tocIndex:6},{value:"。",paraId:7,tocIndex:6},{value:"facetRect.legend",paraId:1},{value:"设置图形的图例，具体见 ",paraId:9,tocIndex:7},{value:"legend",paraId:10,tocIndex:7},{value:"。",paraId:9,tocIndex:7},{value:"facetRect.axis",paraId:1},{value:"设置图形的坐标轴，具体见 ",paraId:11,tocIndex:8},{value:"axis",paraId:12,tocIndex:8},{value:"。",paraId:11,tocIndex:8},{value:"facetRect.style",paraId:1},{value:"设置图形的样式，具体见 ",paraId:13,tocIndex:9},{value:"style",paraId:14,tocIndex:9},{value:"。",paraId:13,tocIndex:9},{value:"facetRect.theme",paraId:1},{value:"设置图形的主题，具体见 ",paraId:15,tocIndex:10},{value:"theme",paraId:16,tocIndex:10},{value:"。",paraId:15,tocIndex:10}]},1037:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(53813);const t=[{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson';\nimport { geoPolyconic, geoRectangularPolyconic } from 'd3-geo-projection';\n\nfetch('https://assets.antv.antgroup.com/g2/countries-50m.json')\n  .then((res) => res.json())\n  .then((world) => {\n    const land = feature(world, world.objects.land).features;\n    const worldMap = (node, projection, color, opacity = 0.7) => {\n      const geoView = node.geoView().coordinate({\n        type: projection,\n        size: 'fitWidth',\n      });\n      geoView\n        .geoPath()\n        .data(land)\n        .style('fill', color)\n        .style('opacity', opacity);\n      geoView\n        .geoPath()\n        .data({ type: 'graticule10' })\n        .style('stroke', color)\n        .style('strokeOpacity', 0.3);\n\n      geoView.geoPath().data({ type: 'sphere' }).style('stroke', color);\n    };\n    const chart = new Chart({\n      container: 'container',\n      autoFit: true,\n    });\n    const layer = chart.spaceLayer();\n    layer\n      .call(worldMap, geoPolyconic, '#f00')\n      .call(worldMap, geoRectangularPolyconic, '#00f');\n\n    chart.render();\n  });\n",paraId:0,tocIndex:0},{value:"geoView.interval",paraId:1},{value:"添加 interval 图形，具体见 ",paraId:2,tocIndex:2},{value:"mark",paraId:3,tocIndex:2},{value:"。",paraId:2,tocIndex:2},{value:"geoView.rect",paraId:1},{value:"添加 rect 图形，具体见 ",paraId:4,tocIndex:3},{value:"mark",paraId:5,tocIndex:3},{value:"。",paraId:4,tocIndex:3},{value:"geoView.point",paraId:1},{value:"添加 point 图形，具体见 ",paraId:6,tocIndex:4},{value:"mark",paraId:7,tocIndex:4},{value:"。",paraId:6,tocIndex:4},{value:"geoView.area",paraId:1},{value:"添加 area 图形，具体见 ",paraId:8,tocIndex:5},{value:"mark",paraId:9,tocIndex:5},{value:"。",paraId:8,tocIndex:5},{value:"geoView.line",paraId:1},{value:"添加 line 图形，具体见 ",paraId:10,tocIndex:6},{value:"mark",paraId:11,tocIndex:6},{value:"。",paraId:10,tocIndex:6},{value:"geoView.vector",paraId:1},{value:"添加 vector 图形，具体见 ",paraId:12,tocIndex:7},{value:"mark",paraId:13,tocIndex:7},{value:"。",paraId:12,tocIndex:7},{value:"geoView.link",paraId:1},{value:"添加 link 图形，具体见 ",paraId:14,tocIndex:8},{value:"mark",paraId:15,tocIndex:8},{value:"。",paraId:14,tocIndex:8},{value:"geoView.polygon",paraId:1},{value:"添加 polygon 图形，具体见 ",paraId:16,tocIndex:9},{value:"mark",paraId:17,tocIndex:9},{value:"。",paraId:16,tocIndex:9},{value:"geoView.image",paraId:1},{value:"添加 image 图形，具体见 ",paraId:18,tocIndex:10},{value:"mark",paraId:19,tocIndex:10},{value:"。",paraId:18,tocIndex:10},{value:"geoView.text",paraId:1},{value:"添加 text 图形，具体见 ",paraId:20,tocIndex:11},{value:"mark",paraId:21,tocIndex:11},{value:"。",paraId:20,tocIndex:11},{value:"geoView.lineX",paraId:1},{value:"添加 lineX 图形，具体见 ",paraId:22,tocIndex:12},{value:"mark",paraId:23,tocIndex:12},{value:"。",paraId:22,tocIndex:12},{value:"geoView.lineY",paraId:1},{value:"添加 lineY 图形，具体见 ",paraId:24,tocIndex:13},{value:"mark",paraId:25,tocIndex:13},{value:"。",paraId:24,tocIndex:13},{value:"geoView.range",paraId:1},{value:"添加 range 图形，具体见 ",paraId:26,tocIndex:14},{value:"mark",paraId:27,tocIndex:14},{value:"。",paraId:26,tocIndex:14},{value:"geoView.rangeX",paraId:1},{value:"添加 rangeX 图形，具体见 ",paraId:28,tocIndex:15},{value:"mark",paraId:29,tocIndex:15},{value:"。",paraId:28,tocIndex:15},{value:"geoView.rangeY",paraId:1},{value:"添加 rangeY 图形，具体见 ",paraId:30,tocIndex:16},{value:"mark",paraId:31,tocIndex:16},{value:"。",paraId:30,tocIndex:16},{value:"geoView.connector",paraId:1},{value:"添加 connector 图形，具体见 ",paraId:32,tocIndex:17},{value:"mark",paraId:33,tocIndex:17},{value:"。",paraId:32,tocIndex:17},{value:"geoView.sankey",paraId:1},{value:"添加 sankey 图形，具体见 ",paraId:34,tocIndex:18},{value:"mark",paraId:35,tocIndex:18},{value:"。",paraId:34,tocIndex:18},{value:"geoView.treemap",paraId:1},{value:"添加 treemap 图形，具体见 ",paraId:36,tocIndex:19},{value:"graph",paraId:37,tocIndex:19},{value:"。",paraId:36,tocIndex:19},{value:"geoView.boxplot",paraId:1},{value:"添加 boxplot 图形，具体见 ",paraId:38,tocIndex:20},{value:"mark",paraId:39,tocIndex:20},{value:"。",paraId:38,tocIndex:20},{value:"geoView.shape",paraId:1},{value:"添加 shape 图形，具体见 ",paraId:40,tocIndex:21},{value:"mark",paraId:41,tocIndex:21},{value:"。",paraId:40,tocIndex:21},{value:"geoView.pack",paraId:1},{value:"添加 pack 图形，具体见 ",paraId:42,tocIndex:22},{value:"graph",paraId:43,tocIndex:22},{value:"。",paraId:42,tocIndex:22},{value:"geoView.forceGraph",paraId:1},{value:"添加 forceGraph 图形，具体见 ",paraId:44,tocIndex:23},{value:"graph",paraId:45,tocIndex:23},{value:"。",paraId:44,tocIndex:23},{value:"geoView.tree",paraId:1},{value:"添加 tree 图形，具体见 ",paraId:46,tocIndex:24},{value:"graph",paraId:47,tocIndex:24},{value:"。",paraId:46,tocIndex:24},{value:"geoView.wordCloud",paraId:1},{value:"添加 wordCloud 图形，具体见 ",paraId:48,tocIndex:25},{value:"mark",paraId:49,tocIndex:25},{value:"。",paraId:48,tocIndex:25},{value:"geoView.gauge",paraId:1},{value:"添加 gauge 图形，具体见 ",paraId:50,tocIndex:26},{value:"mark",paraId:51,tocIndex:26},{value:"。",paraId:50,tocIndex:26},{value:"geoView.attr",paraId:1},{value:"获取或设置图表的配置项。",paraId:52,tocIndex:28},{value:"geoView.data",paraId:1},{value:"设置图形的数据，支持多种数据来源和数据变换，具体见 ",paraId:53,tocIndex:29},{value:"data",paraId:54,tocIndex:29},{value:"。",paraId:53,tocIndex:29},{value:"geoView.encode",paraId:1},{value:"设置图形每个通道的字段名称，具体见 ",paraId:55,tocIndex:30},{value:"encode",paraId:56,tocIndex:30},{value:"。",paraId:55,tocIndex:30},{value:"geoView.scale",paraId:1},{value:"设置图形每个通道的比例尺，具体见 ",paraId:57,tocIndex:31},{value:"scale",paraId:58,tocIndex:31},{value:"。",paraId:57,tocIndex:31},{value:"geoView.legend",paraId:1},{value:"设置图形的图例，具体见 ",paraId:59,tocIndex:32},{value:"legend",paraId:60,tocIndex:32},{value:"。",paraId:59,tocIndex:32},{value:"geoView.tooltip",paraId:1},{value:"设置图形的 Tooltip，具体见 ",paraId:61,tocIndex:33},{value:"tooltip",paraId:62,tocIndex:33},{value:"。",paraId:61,tocIndex:33},{value:"geoView.axis",paraId:1},{value:"设置图形的坐标轴，具体见 ",paraId:63,tocIndex:34},{value:"axis",paraId:64,tocIndex:34},{value:"。",paraId:63,tocIndex:34},{value:"geoView.label",paraId:1},{value:"设置图形的标签，具体见 ",paraId:65,tocIndex:35},{value:"label",paraId:66,tocIndex:35},{value:"。",paraId:65,tocIndex:35},{value:"geoView.style",paraId:1},{value:"设置图形的样式，具体见 ",paraId:67,tocIndex:36},{value:"style",paraId:68,tocIndex:36},{value:"。",paraId:67,tocIndex:36},{value:"geoView.theme",paraId:1},{value:"设置图形的主题，具体见 ",paraId:69,tocIndex:37},{value:"theme",paraId:70,tocIndex:37},{value:"。",paraId:69,tocIndex:37}]},83814:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(4805);const t=[{value:"const chart = new Chart({\n  container: 'container',\n  width: 640,\n  height: 480,\n});\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render();\n",paraId:0,tocIndex:0},{value:"mark.attr",paraId:1},{value:"获取或设置图表的配置项。",paraId:2,tocIndex:3},{value:"mark.data",paraId:1},{value:"设置图形的数据，支持多种数据来源和数据变换，具体见 ",paraId:3,tocIndex:4},{value:"data",paraId:4,tocIndex:4},{value:"。",paraId:3,tocIndex:4},{value:"chart.changeData",paraId:1},{value:"更改图形的数据并重新渲染图表。",paraId:5,tocIndex:5},{value:"mark.encode",paraId:1},{value:"设置图形每个通道的字段名称，具体见 ",paraId:6,tocIndex:6},{value:"encode",paraId:7,tocIndex:6},{value:"。",paraId:6,tocIndex:6},{value:"mark.scale",paraId:1},{value:"设置图形每个通道的比例尺，具体见 ",paraId:8,tocIndex:7},{value:"scale",paraId:9,tocIndex:7},{value:"。",paraId:8,tocIndex:7},{value:"mark.label",paraId:1},{value:"设置图形的标签，具体见 ",paraId:10,tocIndex:8},{value:"label",paraId:11,tocIndex:8},{value:"。",paraId:10,tocIndex:8},{value:"mark.style",paraId:1},{value:"设置图形的样式，具体见 ",paraId:12,tocIndex:9},{value:"style",paraId:13,tocIndex:9},{value:"。",paraId:12,tocIndex:9},{value:"mark.theme",paraId:1},{value:"设置图形的主题，具体见 ",paraId:14,tocIndex:10},{value:"theme",paraId:15,tocIndex:10},{value:"。",paraId:14,tocIndex:10},{value:"mark.animate",paraId:1},{value:"设置图形的动画，具体见 ",paraId:16,tocIndex:11},{value:"style",paraId:17,tocIndex:11},{value:"。",paraId:16,tocIndex:11},{value:"mark.axis",paraId:1},{value:"设置图形的坐标轴 ",paraId:18,tocIndex:12},{value:"style",paraId:19,tocIndex:12},{value:"。",paraId:18,tocIndex:12},{value:"mark.legend",paraId:1},{value:"设置图形的图例，具体见 ",paraId:20,tocIndex:13},{value:"style",paraId:21,tocIndex:13},{value:"。",paraId:20,tocIndex:13},{value:"mark.slider",paraId:1},{value:"设置图形的缩略轴，具体见 ",paraId:22,tocIndex:14},{value:"style",paraId:23,tocIndex:14},{value:"。",paraId:22,tocIndex:14},{value:"mark.scrollbar",paraId:1},{value:"设置图形的滚动条，具体见 ",paraId:24,tocIndex:15},{value:"style",paraId:25,tocIndex:15},{value:"。",paraId:24,tocIndex:15},{value:"mark.state",paraId:1},{value:"设置图形的状态样式，具体见 ",paraId:26,tocIndex:16},{value:"style",paraId:27,tocIndex:16},{value:"。",paraId:26,tocIndex:16},{value:"mark.tooltip",paraId:1},{value:"设置图形的 Tooltip，具体见 ",paraId:28,tocIndex:17},{value:"style",paraId:29,tocIndex:17},{value:"。",paraId:28,tocIndex:17},{value:"chart.getGroup",paraId:1},{value:"返回 chart 渲染时的 canvas group 实例。",paraId:30,tocIndex:19},{value:"chart.getScale",paraId:1},{value:"返回 chart 渲染时所有的 scale 实例。",paraId:31,tocIndex:20},{value:"chart.getScaleByChannel",paraId:1},{value:"通过通道名称查找返回 chart 渲染时对应的 scale 实例。",paraId:32,tocIndex:21}]},70167:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(84362);const t=[{value:"提供简洁的命令式 API，一句话生成图表。",paraId:0},{value:"Chart",paraId:1},{value:"new Chart",paraId:2,tocIndex:1},{value:" - 创建 Chart 实例。",paraId:3,tocIndex:1},{value:"chart.",paraId:4,tocIndex:1},{value:"interval",paraId:4,tocIndex:1},{value:" - 添加 interval 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:5,tocIndex:1},{value:"rect",paraId:5,tocIndex:1},{value:" - 添加 rect 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:6,tocIndex:1},{value:"point",paraId:6,tocIndex:1},{value:" - 添加 point 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:7,tocIndex:1},{value:"area",paraId:7,tocIndex:1},{value:" - 添加 area 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:8,tocIndex:1},{value:"line",paraId:8,tocIndex:1},{value:" - 添加 line 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:9,tocIndex:1},{value:"vector",paraId:9,tocIndex:1},{value:" - 添加 vector 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:10,tocIndex:1},{value:"link",paraId:10,tocIndex:1},{value:" - 添加 link 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:11,tocIndex:1},{value:"polygon",paraId:11,tocIndex:1},{value:" - 添加 polygon 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:12,tocIndex:1},{value:"image",paraId:12,tocIndex:1},{value:" - 添加 image 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:13,tocIndex:1},{value:"text",paraId:13,tocIndex:1},{value:" - 添加 text 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:14,tocIndex:1},{value:"lineX",paraId:14,tocIndex:1},{value:" - 添加 lineX 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:15,tocIndex:1},{value:"lineY",paraId:15,tocIndex:1},{value:" - 添加 lineY 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:16,tocIndex:1},{value:"range",paraId:16,tocIndex:1},{value:" - 添加 range 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:17,tocIndex:1},{value:"rangeX",paraId:17,tocIndex:1},{value:" - 添加 rangeX 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:18,tocIndex:1},{value:"rangeY",paraId:18,tocIndex:1},{value:" - 添加 rangeY 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:19,tocIndex:1},{value:"connector",paraId:19,tocIndex:1},{value:" - 添加 connector 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:20,tocIndex:1},{value:"sankey",paraId:20,tocIndex:1},{value:" - 添加 sankey 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:21,tocIndex:1},{value:"treemap",paraId:21,tocIndex:1},{value:" - 添加 treemap 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:22,tocIndex:1},{value:"boxplot",paraId:22,tocIndex:1},{value:" - 添加 boxplot 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:23,tocIndex:1},{value:"density",paraId:23,tocIndex:1},{value:" - 添加 density 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:24,tocIndex:1},{value:"heatmap",paraId:24,tocIndex:1},{value:" - 添加 heatmap 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:25,tocIndex:1},{value:"shape",paraId:25,tocIndex:1},{value:" - 添加 shape 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:26,tocIndex:1},{value:"pack",paraId:26,tocIndex:1},{value:" - 添加 pack 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:27,tocIndex:1},{value:"forceGraph",paraId:27,tocIndex:1},{value:" - 添加 forceGraph 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:28,tocIndex:1},{value:"tree",paraId:28,tocIndex:1},{value:" - 添加 tree 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:29,tocIndex:1},{value:"wordCloud",paraId:29,tocIndex:1},{value:" - 添加 wordCloud 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:30,tocIndex:1},{value:"gauge",paraId:30,tocIndex:1},{value:" - 添加 gauge 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:31,tocIndex:1},{value:"view",paraId:31,tocIndex:1},{value:" - 添加 view 到该图表。",paraId:3,tocIndex:1},{value:"chart.",paraId:32,tocIndex:1},{value:"spaceLayer",paraId:32,tocIndex:1},{value:"- 添加 spaceLayer 到该图表。",paraId:3,tocIndex:1},{value:"chart.",paraId:33,tocIndex:1},{value:"spaceFlex",paraId:33,tocIndex:1},{value:" - 添加 spaceFlex 到该图表。",paraId:3,tocIndex:1},{value:"chart.",paraId:34,tocIndex:1},{value:"facetRect",paraId:34,tocIndex:1},{value:" - 添加 facetRect 到该图表。",paraId:3,tocIndex:1},{value:"chart.",paraId:35,tocIndex:1},{value:"facetCircle",paraId:35,tocIndex:1},{value:" - 添加 facetCircle 到该图表。",paraId:3,tocIndex:1},{value:"chart.",paraId:36,tocIndex:1},{value:"repeatMatrix",paraId:36,tocIndex:1},{value:" - 添加 repeatMatrix 到该图表。",paraId:3,tocIndex:1},{value:"chart.",paraId:37,tocIndex:1},{value:"timingKeyframe",paraId:37,tocIndex:1},{value:" - 添加 timingKeyframe 到该图表。",paraId:3,tocIndex:1},{value:"chart.",paraId:38,tocIndex:1},{value:"geoView",paraId:38,tocIndex:1},{value:" - 添加 geoView 到该图表。",paraId:3,tocIndex:1},{value:"chart.",paraId:39,tocIndex:1},{value:"geoPath",paraId:39,tocIndex:1},{value:" - 添加 geoPath 到该图表。",paraId:3,tocIndex:1},{value:"chart.",paraId:40,tocIndex:1},{value:"point3D",paraId:40,tocIndex:1},{value:" - 添加 point3D 标记到该视图。",paraId:3,tocIndex:1},{value:"chart.",paraId:41,tocIndex:2},{value:"attr",paraId:41,tocIndex:2},{value:" - 设置或获取 chart 的属性。",paraId:42,tocIndex:2},{value:"chart.",paraId:43,tocIndex:2},{value:"width",paraId:43,tocIndex:2},{value:" - 设置或获取 width 的属性。",paraId:42,tocIndex:2},{value:"chart.",paraId:44,tocIndex:2},{value:"height",paraId:44,tocIndex:2},{value:" - 设置或获取 height 的属性。",paraId:42,tocIndex:2},{value:"chart.",paraId:45,tocIndex:2},{value:"title",paraId:45,tocIndex:2},{value:" - 设置或获取 title 的属性。",paraId:42,tocIndex:2},{value:"chart.",paraId:46,tocIndex:2},{value:"encode",paraId:46,tocIndex:2},{value:" - 设置或获得 chart 的 encode。",paraId:42,tocIndex:2},{value:"chart.",paraId:47,tocIndex:2},{value:"options",paraId:47,tocIndex:2},{value:" - 设置或获取视图上的属性。",paraId:42,tocIndex:2},{value:"chart.",paraId:48,tocIndex:2},{value:"data",paraId:48,tocIndex:2},{value:" - 设置或获取该视图的 data。",paraId:42,tocIndex:2},{value:"chart.",paraId:49,tocIndex:2},{value:"transform",paraId:49,tocIndex:2},{value:" - 设置或获取该视图的 transform。",paraId:42,tocIndex:2},{value:"chart.",paraId:50,tocIndex:2},{value:"theme",paraId:50,tocIndex:2},{value:" - 设置或获取该视图的 theme。",paraId:42,tocIndex:2},{value:"chart.",paraId:51,tocIndex:2},{value:"style",paraId:51,tocIndex:2},{value:" - 设置或获取该视图的 style。",paraId:42,tocIndex:2},{value:"chart.",paraId:52,tocIndex:2},{value:"scale",paraId:52,tocIndex:2},{value:" - 设置或获取该视图的 scale。",paraId:42,tocIndex:2},{value:"chart.",paraId:53,tocIndex:2},{value:"coordinate",paraId:53,tocIndex:2},{value:" - 设置或获取该视图的 coordinate。",paraId:42,tocIndex:2},{value:"chart.",paraId:54,tocIndex:2},{value:"axis",paraId:54,tocIndex:2},{value:" - 设置或获取该视图的 axis。",paraId:42,tocIndex:2},{value:"chart.",paraId:55,tocIndex:2},{value:"legend",paraId:55,tocIndex:2},{value:" - 设置或获取该视图的 legend。",paraId:42,tocIndex:2},{value:"chart.",paraId:56,tocIndex:2},{value:"labelTransform",paraId:56,tocIndex:2},{value:" - 设置或获取该视图的 labelTransform。",paraId:42,tocIndex:2},{value:"chart.",paraId:57,tocIndex:3},{value:"getNodeByKey",paraId:57,tocIndex:3},{value:" - 根据 key 获取 mark。",paraId:58,tocIndex:3},{value:"chart.",paraId:59,tocIndex:3},{value:"getNodeByType",paraId:59,tocIndex:3},{value:" - 根据 type 获取 mark 数组。",paraId:58,tocIndex:3},{value:"chart.",paraId:60,tocIndex:3},{value:"getContext",paraId:60,tocIndex:3},{value:" - 获取视图的 context 信息。",paraId:58,tocIndex:3},{value:"chart.",paraId:61,tocIndex:3},{value:"getContainer",paraId:61,tocIndex:3},{value:" - 获取视图的外部容器。",paraId:58,tocIndex:3},{value:"chart.",paraId:62,tocIndex:3},{value:"getView",paraId:62,tocIndex:3},{value:" - 获取视图的 view 实例。",paraId:58,tocIndex:3},{value:"chart.",paraId:63,tocIndex:3},{value:"getCoordinate",paraId:63,tocIndex:3},{value:" - 获取视图的 coordinate 实例。",paraId:58,tocIndex:3},{value:"chart.",paraId:64,tocIndex:3},{value:"getGroup",paraId:64,tocIndex:3},{value:" - 获取视图的 canvas group 实例。",paraId:58,tocIndex:3},{value:"chart.",paraId:65,tocIndex:3},{value:"getScale",paraId:65,tocIndex:3},{value:" - 获取该视图的 scale。",paraId:58,tocIndex:3},{value:"chart.",paraId:66,tocIndex:3},{value:"getScaleByChannel",paraId:66,tocIndex:3},{value:" - 获取指定通道的比例尺。",paraId:58,tocIndex:3},{value:"chart.",paraId:67,tocIndex:4},{value:"render",paraId:67,tocIndex:4},{value:" - 渲染图表。",paraId:68,tocIndex:4},{value:"chart.",paraId:69,tocIndex:4},{value:"clear",paraId:69,tocIndex:4},{value:" - 清空图表。",paraId:68,tocIndex:4},{value:"chart.",paraId:70,tocIndex:4},{value:"destroy",paraId:70,tocIndex:4},{value:" - 清空该视图并销毁 canvas 画布。",paraId:68,tocIndex:4},{value:"chart.",paraId:71,tocIndex:4},{value:"changeSize",paraId:71,tocIndex:4},{value:" - 修改图表尺寸。",paraId:68,tocIndex:4},{value:"chart.",paraId:72,tocIndex:4},{value:"changeData",paraId:72,tocIndex:4},{value:" - 修改图表数据。",paraId:68,tocIndex:4},{value:"chart.",paraId:73,tocIndex:4},{value:"forceFit",paraId:73,tocIndex:4},{value:" - 强制自适应布局。",paraId:68,tocIndex:4},{value:"chart.",paraId:74,tocIndex:4},{value:"show",paraId:74,tocIndex:4},{value:" - 显示图表。",paraId:68,tocIndex:4},{value:"chart.",paraId:75,tocIndex:4},{value:"hide",paraId:75,tocIndex:4},{value:" - 隐藏图表。",paraId:68,tocIndex:4},{value:"chart.",paraId:76,tocIndex:5},{value:"on",paraId:76,tocIndex:5},{value:" - 监听图表事件。",paraId:77,tocIndex:5},{value:"chart.",paraId:78,tocIndex:5},{value:"once",paraId:78,tocIndex:5},{value:" - 监听图表事件(仅允许执行一次)。",paraId:77,tocIndex:5},{value:"chart.",paraId:79,tocIndex:5},{value:"emit",paraId:79,tocIndex:5},{value:" - 触发视图事件。",paraId:77,tocIndex:5},{value:"chart.",paraId:80,tocIndex:5},{value:"off",paraId:80,tocIndex:5},{value:" - 销毁视图事件。",paraId:77,tocIndex:5},{value:"Mark",paraId:81,tocIndex:5},{value:"mark.",paraId:82,tocIndex:7},{value:"attr",paraId:82,tocIndex:7},{value:" - 设置或获取 mark 的属性。",paraId:83,tocIndex:7},{value:"mark.",paraId:84,tocIndex:7},{value:"data",paraId:84,tocIndex:7},{value:" - 设置或获取 mark 的 data。",paraId:83,tocIndex:7},{value:"mark.",paraId:85,tocIndex:7},{value:"encode",paraId:85,tocIndex:7},{value:" - 设置或获取 mark 的 encode。",paraId:83,tocIndex:7},{value:"mark.",paraId:86,tocIndex:7},{value:"transform",paraId:86,tocIndex:7},{value:" - 设置或获取 mark 的 transform。",paraId:83,tocIndex:7},{value:"mark.",paraId:87,tocIndex:7},{value:"scale",paraId:87,tocIndex:7},{value:" - 设置或获取 mark 的 scale。",paraId:83,tocIndex:7},{value:"mark.",paraId:88,tocIndex:7},{value:"interaction",paraId:88,tocIndex:7},{value:" - 设置或获取 mark 的 interaction。",paraId:83,tocIndex:7},{value:"mark.",paraId:89,tocIndex:7},{value:"label",paraId:89,tocIndex:7},{value:" - 设置或获取 mark 的 label。",paraId:83,tocIndex:7},{value:"mark.",paraId:90,tocIndex:7},{value:"animate",paraId:90,tocIndex:7},{value:" - 设置或获取 mark 的 animate。",paraId:83,tocIndex:7},{value:"mark.",paraId:91,tocIndex:7},{value:"coordinate",paraId:91,tocIndex:7},{value:" - 设置或获取 mark 的 coordinate。",paraId:83,tocIndex:7},{value:"mark.",paraId:92,tocIndex:7},{value:"axis",paraId:92,tocIndex:7},{value:" - 设置或获取 mark 的 axis。",paraId:83,tocIndex:7},{value:"mark.",paraId:93,tocIndex:7},{value:"legend",paraId:93,tocIndex:7},{value:" - 设置或获取 mark 的 legend。",paraId:83,tocIndex:7},{value:"mark.",paraId:94,tocIndex:7},{value:"slider",paraId:94,tocIndex:7},{value:" - 设置或获取 mark 的 slider。",paraId:83,tocIndex:7},{value:"mark.",paraId:95,tocIndex:7},{value:"scrollbar",paraId:95,tocIndex:7},{value:" - 设置或获取 mark 的 scrollbar。",paraId:83,tocIndex:7},{value:"mark.",paraId:96,tocIndex:7},{value:"state",paraId:96,tocIndex:7},{value:" - 设置或获取 mark 的 state。",paraId:83,tocIndex:7},{value:"mark.",paraId:97,tocIndex:7},{value:"tooltip",paraId:97,tocIndex:7},{value:" - 设置或获取 mark 的 tooltip。",paraId:83,tocIndex:7},{value:"mark.",paraId:98,tocIndex:8},{value:"changeData",paraId:98,tocIndex:8},{value:" - 修改 mark 数据。",paraId:99,tocIndex:8},{value:"mark.",paraId:100,tocIndex:8},{value:"getMark",paraId:100,tocIndex:8},{value:" - 获取 mark 实例。",paraId:99,tocIndex:8},{value:"mark.",paraId:101,tocIndex:8},{value:"getScale",paraId:101,tocIndex:8},{value:" - 获取 scale 实例。",paraId:99,tocIndex:8},{value:"mark.",paraId:102,tocIndex:8},{value:"getScaleByChannel",paraId:102,tocIndex:8},{value:" - 获取指定通道的 scale 实例。",paraId:99,tocIndex:8},{value:"mark.",paraId:103,tocIndex:8},{value:"getGroup",paraId:103,tocIndex:8},{value:" - 获取 canvas group 实例。",paraId:99,tocIndex:8},{value:"View",paraId:104,tocIndex:8},{value:"view.",paraId:105,tocIndex:10},{value:"interval",paraId:105,tocIndex:10},{value:" - 添加 interval 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:107,tocIndex:10},{value:"rect",paraId:107,tocIndex:10},{value:" - 添加 rect 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:108,tocIndex:10},{value:"point",paraId:108,tocIndex:10},{value:" - 添加 point 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:109,tocIndex:10},{value:"area",paraId:109,tocIndex:10},{value:" - 添加 area 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:110,tocIndex:10},{value:"line",paraId:110,tocIndex:10},{value:" - 添加 line 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:111,tocIndex:10},{value:"vector",paraId:111,tocIndex:10},{value:" - 添加 vector 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:112,tocIndex:10},{value:"link",paraId:112,tocIndex:10},{value:" - 添加 link 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:113,tocIndex:10},{value:"polygon",paraId:113,tocIndex:10},{value:" - 添加 polygon 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:114,tocIndex:10},{value:"image",paraId:114,tocIndex:10},{value:" - 添加 image 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:115,tocIndex:10},{value:"text",paraId:115,tocIndex:10},{value:" - 添加 text 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:116,tocIndex:10},{value:"lineX",paraId:116,tocIndex:10},{value:" - 添加 lineX 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:117,tocIndex:10},{value:"lineY",paraId:117,tocIndex:10},{value:" - 添加 lineY 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:118,tocIndex:10},{value:"range",paraId:118,tocIndex:10},{value:" - 添加 range 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:119,tocIndex:10},{value:"rangeX",paraId:119,tocIndex:10},{value:" - 添加 rangeX 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:120,tocIndex:10},{value:"rangeY",paraId:120,tocIndex:10},{value:" - 添加 rangeY 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:121,tocIndex:10},{value:"connector",paraId:121,tocIndex:10},{value:" - 添加 connector 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:122,tocIndex:10},{value:"sankey",paraId:122,tocIndex:10},{value:" - 添加 sankey 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:123,tocIndex:10},{value:"treemap",paraId:123,tocIndex:10},{value:" - 添加 treemap 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:124,tocIndex:10},{value:"boxplot",paraId:124,tocIndex:10},{value:" - 添加 boxplot 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:125,tocIndex:10},{value:"shape",paraId:125,tocIndex:10},{value:" - 添加 shape 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:126,tocIndex:10},{value:"pack",paraId:126,tocIndex:10},{value:" - 添加 pack 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:127,tocIndex:10},{value:"forceGraph",paraId:127,tocIndex:10},{value:" - 添加 forceGraph 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:128,tocIndex:10},{value:"tree",paraId:128,tocIndex:10},{value:" - 添加 tree 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:129,tocIndex:10},{value:"wordCloud",paraId:129,tocIndex:10},{value:" - 添加 wordCloud 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:130,tocIndex:10},{value:"gauge",paraId:130,tocIndex:10},{value:" - 添加 gauge 标记到该视图。",paraId:106,tocIndex:10},{value:"view.",paraId:131,tocIndex:11},{value:"attr",paraId:131,tocIndex:11},{value:" - 设置或获取该视图的属性。",paraId:132,tocIndex:11},{value:"view.",paraId:133,tocIndex:11},{value:"coordinate",paraId:133,tocIndex:11},{value:" - 声明该视图的 coordinate。",paraId:132,tocIndex:11},{value:"view.",paraId:134,tocIndex:11},{value:"data",paraId:134,tocIndex:11},{value:" - 设置或获取该视图的 data。",paraId:132,tocIndex:11},{value:"view.",paraId:135,tocIndex:11},{value:"transform",paraId:135,tocIndex:11},{value:" - 设置或获取该视图的 transform。",paraId:132,tocIndex:11},{value:"view.",paraId:136,tocIndex:11},{value:"interaction",paraId:136,tocIndex:11},{value:" - 设置或获取 view 的 interaction。",paraId:132,tocIndex:11},{value:"view.",paraId:137,tocIndex:11},{value:"theme",paraId:137,tocIndex:11},{value:" - 设置或获取该视图的主题。",paraId:132,tocIndex:11},{value:"view.",paraId:138,tocIndex:11},{value:"style",paraId:138,tocIndex:11},{value:" - 设置或获取该视图的 style。",paraId:132,tocIndex:11},{value:"view.",paraId:139,tocIndex:11},{value:"scale",paraId:139,tocIndex:11},{value:" - 设置或获取该视图的 scale。",paraId:132,tocIndex:11},{value:"view.",paraId:140,tocIndex:11},{value:"axis",paraId:140,tocIndex:11},{value:" - 设置或获取该视图的 axis。",paraId:132,tocIndex:11},{value:"view.",paraId:141,tocIndex:11},{value:"legend",paraId:141,tocIndex:11},{value:" - 设置或获取该视图的 legend。",paraId:132,tocIndex:11},{value:"view.",paraId:142,tocIndex:11},{value:"labelTransform",paraId:142,tocIndex:11},{value:" - 设置或获取该视图的 labelTransform。",paraId:132,tocIndex:11},{value:"view.",paraId:143,tocIndex:12},{value:"getNodeByKey",paraId:143,tocIndex:12},{value:" - 根据 key 获取标记。",paraId:144,tocIndex:12},{value:"view.",paraId:145,tocIndex:12},{value:"getNodeByType",paraId:145,tocIndex:12},{value:" - 根据 key 获取标记数组。",paraId:144,tocIndex:12},{value:"view.",paraId:146,tocIndex:12},{value:"getView",paraId:146,tocIndex:12},{value:" - 获取视图的 view 实例。",paraId:144,tocIndex:12},{value:"view.",paraId:147,tocIndex:12},{value:"getCoordinate",paraId:147,tocIndex:12},{value:" - 获取视图的 coordinate 实例。",paraId:144,tocIndex:12},{value:"view.",paraId:148,tocIndex:12},{value:"getGroup",paraId:148,tocIndex:12},{value:" - 获取视图的 canvas group 实例。",paraId:144,tocIndex:12},{value:"view.",paraId:149,tocIndex:12},{value:"getView",paraId:149,tocIndex:12},{value:" - 获取视图的 view 实例。",paraId:144,tocIndex:12},{value:"view.",paraId:150,tocIndex:12},{value:"getCoordinate",paraId:150,tocIndex:12},{value:" - 获取视图的 coordinate 实例。",paraId:144,tocIndex:12},{value:"view.",paraId:151,tocIndex:12},{value:"getGroup",paraId:151,tocIndex:12},{value:" - 获取视图的 canvas group 实例。",paraId:144,tocIndex:12},{value:"view.",paraId:152,tocIndex:12},{value:"getScale",paraId:152,tocIndex:12},{value:" - 获取该视图的 scale。",paraId:144,tocIndex:12},{value:"view.",paraId:153,tocIndex:12},{value:"getScaleByChannel",paraId:153,tocIndex:12},{value:" - 获取指定通道的比例尺。",paraId:144,tocIndex:12},{value:"GeoView",paraId:154,tocIndex:12},{value:"geoView.",paraId:155,tocIndex:14},{value:"view",paraId:155,tocIndex:14},{value:" - 添加 view 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:157,tocIndex:14},{value:"interval",paraId:157,tocIndex:14},{value:" - 添加 interval 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:158,tocIndex:14},{value:"rect",paraId:158,tocIndex:14},{value:" - 添加 rect 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:159,tocIndex:14},{value:"point",paraId:159,tocIndex:14},{value:" - 添加 point 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:160,tocIndex:14},{value:"area",paraId:160,tocIndex:14},{value:" - 添加 area 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:161,tocIndex:14},{value:"line",paraId:161,tocIndex:14},{value:" - 添加 line 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:162,tocIndex:14},{value:"vector",paraId:162,tocIndex:14},{value:" - 添加 vector 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:163,tocIndex:14},{value:"link",paraId:163,tocIndex:14},{value:" - 添加 link 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:164,tocIndex:14},{value:"polygon",paraId:164,tocIndex:14},{value:" - 添加 polygon 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:165,tocIndex:14},{value:"image",paraId:165,tocIndex:14},{value:" - 添加 image 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:166,tocIndex:14},{value:"text",paraId:166,tocIndex:14},{value:" - 添加 text 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:167,tocIndex:14},{value:"lineX",paraId:167,tocIndex:14},{value:" - 添加 lineX 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:168,tocIndex:14},{value:"lineY",paraId:168,tocIndex:14},{value:" - 添加 lineY 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:169,tocIndex:14},{value:"range",paraId:169,tocIndex:14},{value:" - 添加 range 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:170,tocIndex:14},{value:"rangeX",paraId:170,tocIndex:14},{value:" - 添加 rangeX 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:171,tocIndex:14},{value:"rangeY",paraId:171,tocIndex:14},{value:" - 添加 rangeY 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:172,tocIndex:14},{value:"connector",paraId:172,tocIndex:14},{value:" - 添加 connector 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:173,tocIndex:14},{value:"sankey",paraId:173,tocIndex:14},{value:" - 添加 sankey 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:174,tocIndex:14},{value:"treemap",paraId:174,tocIndex:14},{value:" - 添加 treemap 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:175,tocIndex:14},{value:"boxplot",paraId:175,tocIndex:14},{value:" - 添加 boxplot 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:176,tocIndex:14},{value:"shape",paraId:176,tocIndex:14},{value:" - 添加 shape 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:177,tocIndex:14},{value:"pack",paraId:177,tocIndex:14},{value:" - 添加 pack 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:178,tocIndex:14},{value:"forceGraph",paraId:178,tocIndex:14},{value:" - 添加 forceGraph 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:179,tocIndex:14},{value:"tree",paraId:179,tocIndex:14},{value:" - 添加 tree 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:180,tocIndex:14},{value:"wordCloud",paraId:180,tocIndex:14},{value:" - 添加 wordCloud 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:181,tocIndex:14},{value:"gauge",paraId:181,tocIndex:14},{value:" - 添加 gauge 标记到该地理视图。",paraId:156,tocIndex:14},{value:"geoView.",paraId:182,tocIndex:15},{value:"attr",paraId:182,tocIndex:15},{value:" - 设置或获取该复合视图的属性。",paraId:183,tocIndex:15},{value:"geoView.",paraId:184,tocIndex:15},{value:"data",paraId:184,tocIndex:15},{value:" - 设置或获取该复合视图的 data。",paraId:183,tocIndex:15},{value:"geoView.",paraId:185,tocIndex:15},{value:"transform",paraId:185,tocIndex:15},{value:" - 设置或获取该复合视图的 transform。",paraId:183,tocIndex:15},{value:"geoView.",paraId:186,tocIndex:15},{value:"coordinate",paraId:186,tocIndex:15},{value:" - 设置或获取该复合视图的 coordinate。",paraId:183,tocIndex:15},{value:"geoView.",paraId:187,tocIndex:15},{value:"theme",paraId:187,tocIndex:15},{value:" - 设置或获取该复合视图的主题。",paraId:183,tocIndex:15},{value:"geoView.",paraId:188,tocIndex:15},{value:"style",paraId:188,tocIndex:15},{value:" - 设置或获取该复合视图的 style。",paraId:183,tocIndex:15},{value:"geoView.",paraId:189,tocIndex:15},{value:"scale",paraId:189,tocIndex:15},{value:" - 设置或获取该复合视图的 scale。",paraId:183,tocIndex:15},{value:"geoView.",paraId:190,tocIndex:15},{value:"legend",paraId:190,tocIndex:15},{value:" - 设置或获取该复合视图的 legend。",paraId:183,tocIndex:15},{value:"SpaceLayer",paraId:191,tocIndex:15},{value:"spaceLayer.",paraId:192,tocIndex:17},{value:"view",paraId:192,tocIndex:17},{value:" - 添加 view 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:194,tocIndex:17},{value:"interval",paraId:194,tocIndex:17},{value:" - 添加 interval 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:195,tocIndex:17},{value:"rect",paraId:195,tocIndex:17},{value:" - 添加 rect 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:196,tocIndex:17},{value:"point",paraId:196,tocIndex:17},{value:" - 添加 point 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:197,tocIndex:17},{value:"area",paraId:197,tocIndex:17},{value:" - 添加 area 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:198,tocIndex:17},{value:"line",paraId:198,tocIndex:17},{value:" - 添加 line 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:199,tocIndex:17},{value:"vector",paraId:199,tocIndex:17},{value:" - 添加 vector 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:200,tocIndex:17},{value:"link",paraId:200,tocIndex:17},{value:" - 添加 link 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:201,tocIndex:17},{value:"polygon",paraId:201,tocIndex:17},{value:" - 添加 polygon 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:202,tocIndex:17},{value:"image",paraId:202,tocIndex:17},{value:" - 添加 image 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:203,tocIndex:17},{value:"text",paraId:203,tocIndex:17},{value:" - 添加 text 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:204,tocIndex:17},{value:"lineX",paraId:204,tocIndex:17},{value:" - 添加 lineX 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:205,tocIndex:17},{value:"lineY",paraId:205,tocIndex:17},{value:" - 添加 lineY 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:206,tocIndex:17},{value:"range",paraId:206,tocIndex:17},{value:" - 添加 range 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:207,tocIndex:17},{value:"rangeX",paraId:207,tocIndex:17},{value:" - 添加 rangeX 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:208,tocIndex:17},{value:"rangeY",paraId:208,tocIndex:17},{value:" - 添加 rangeY 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:209,tocIndex:17},{value:"connector",paraId:209,tocIndex:17},{value:" - 添加 connector 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:210,tocIndex:17},{value:"sankey",paraId:210,tocIndex:17},{value:" - 添加 sankey 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:211,tocIndex:17},{value:"treemap",paraId:211,tocIndex:17},{value:" - 添加 treemap 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:212,tocIndex:17},{value:"boxplot",paraId:212,tocIndex:17},{value:" - 添加 boxplot 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:213,tocIndex:17},{value:"shape",paraId:213,tocIndex:17},{value:" - 添加 shape 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:214,tocIndex:17},{value:"pack",paraId:214,tocIndex:17},{value:" - 添加 pack 标记到该复合视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:215,tocIndex:17},{value:"forceGraph",paraId:215,tocIndex:17},{value:" - 添加 forceGraph 标记到该视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:216,tocIndex:17},{value:"tree",paraId:216,tocIndex:17},{value:" - 添加 tree 标记到该视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:217,tocIndex:17},{value:"wordCloud",paraId:217,tocIndex:17},{value:" - 添加 wordCloud 标记到该视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:218,tocIndex:17},{value:"gauge",paraId:218,tocIndex:17},{value:" - 添加 gauge 标记到该视图。",paraId:193,tocIndex:17},{value:"spaceLayer.",paraId:219,tocIndex:18},{value:"data",paraId:219,tocIndex:18},{value:" - 设置或获取该复合视图的 data。",paraId:220,tocIndex:18},{value:"SpaceFlex",paraId:221,tocIndex:18},{value:"spaceFlex.",paraId:222,tocIndex:20},{value:"view",paraId:222,tocIndex:20},{value:" - 添加 view 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:224,tocIndex:20},{value:"interval",paraId:224,tocIndex:20},{value:" - 添加 interval 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:225,tocIndex:20},{value:"rect",paraId:225,tocIndex:20},{value:" - 添加 rect 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:226,tocIndex:20},{value:"point",paraId:226,tocIndex:20},{value:" - 添加 point 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:227,tocIndex:20},{value:"area",paraId:227,tocIndex:20},{value:" - 添加 area 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:228,tocIndex:20},{value:"line",paraId:228,tocIndex:20},{value:" - 添加 line 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:229,tocIndex:20},{value:"vector",paraId:229,tocIndex:20},{value:" - 添加 vector 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:230,tocIndex:20},{value:"link",paraId:230,tocIndex:20},{value:" - 添加 link 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:231,tocIndex:20},{value:"polygon",paraId:231,tocIndex:20},{value:" - 添加 polygon 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:232,tocIndex:20},{value:"image",paraId:232,tocIndex:20},{value:" - 添加 image 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:233,tocIndex:20},{value:"text",paraId:233,tocIndex:20},{value:" - 添加 text 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:234,tocIndex:20},{value:"lineX",paraId:234,tocIndex:20},{value:" - 添加 lineX 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:235,tocIndex:20},{value:"lineY",paraId:235,tocIndex:20},{value:" - 添加 lineY 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:236,tocIndex:20},{value:"range",paraId:236,tocIndex:20},{value:" - 添加 range 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:237,tocIndex:20},{value:"rangeX",paraId:237,tocIndex:20},{value:" - 添加 rangeX 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:238,tocIndex:20},{value:"rangeY",paraId:238,tocIndex:20},{value:" - 添加 rangeY 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:239,tocIndex:20},{value:"connector",paraId:239,tocIndex:20},{value:" - 添加 connector 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:240,tocIndex:20},{value:"sankey",paraId:240,tocIndex:20},{value:" - 添加 sankey 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:241,tocIndex:20},{value:"treemap",paraId:241,tocIndex:20},{value:" - 添加 treemap 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:242,tocIndex:20},{value:"boxplot",paraId:242,tocIndex:20},{value:" - 添加 boxplot 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:243,tocIndex:20},{value:"shape",paraId:243,tocIndex:20},{value:" - 添加 shape 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:244,tocIndex:20},{value:"pack",paraId:244,tocIndex:20},{value:" - 添加 pack 标记到该复合视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:245,tocIndex:20},{value:"forceGraph",paraId:245,tocIndex:20},{value:" - 添加 forceGraph 标记到该视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:246,tocIndex:20},{value:"tree",paraId:246,tocIndex:20},{value:" - 添加 tree 标记到该视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:247,tocIndex:20},{value:"wordCloud",paraId:247,tocIndex:20},{value:" - 添加 wordCloud 标记到该视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:248,tocIndex:20},{value:"gauge",paraId:248,tocIndex:20},{value:" - 添加 gauge 标记到该视图。",paraId:223,tocIndex:20},{value:"spaceFlex.",paraId:249,tocIndex:21},{value:"attr",paraId:249,tocIndex:21},{value:" - 设置或获取该复合视图的属性。",paraId:250,tocIndex:21},{value:"spaceFlex.",paraId:251,tocIndex:21},{value:"data",paraId:251,tocIndex:21},{value:" - 设置或获取该复合视图的 data。",paraId:250,tocIndex:21},{value:"FacetRect",paraId:252,tocIndex:21},{value:"facetRect.",paraId:253,tocIndex:23},{value:"view",paraId:253,tocIndex:23},{value:" - 添加 view 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:255,tocIndex:23},{value:"interval",paraId:255,tocIndex:23},{value:" - 添加 interval 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:256,tocIndex:23},{value:"rect",paraId:256,tocIndex:23},{value:" - 添加 rect 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:257,tocIndex:23},{value:"point",paraId:257,tocIndex:23},{value:" - 添加 point 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:258,tocIndex:23},{value:"area",paraId:258,tocIndex:23},{value:" - 添加 area 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:259,tocIndex:23},{value:"line",paraId:259,tocIndex:23},{value:" - 添加 line 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:260,tocIndex:23},{value:"vector",paraId:260,tocIndex:23},{value:" - 添加 vector 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:261,tocIndex:23},{value:"link",paraId:261,tocIndex:23},{value:" - 添加 link 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:262,tocIndex:23},{value:"polygon",paraId:262,tocIndex:23},{value:" - 添加 polygon 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:263,tocIndex:23},{value:"image",paraId:263,tocIndex:23},{value:" - 添加 image 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:264,tocIndex:23},{value:"text",paraId:264,tocIndex:23},{value:" - 添加 text 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:265,tocIndex:23},{value:"lineX",paraId:265,tocIndex:23},{value:" - 添加 lineX 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:266,tocIndex:23},{value:"lineY",paraId:266,tocIndex:23},{value:" - 添加 lineY 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:267,tocIndex:23},{value:"range",paraId:267,tocIndex:23},{value:" - 添加 range 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:268,tocIndex:23},{value:"rangeX",paraId:268,tocIndex:23},{value:" - 添加 rangeX 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:269,tocIndex:23},{value:"rangeY",paraId:269,tocIndex:23},{value:" - 添加 rangeY 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:270,tocIndex:23},{value:"connector",paraId:270,tocIndex:23},{value:" - 添加 connector 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:271,tocIndex:23},{value:"sankey",paraId:271,tocIndex:23},{value:" - 添加 sankey 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:272,tocIndex:23},{value:"treemap",paraId:272,tocIndex:23},{value:" - 添加 treemap 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:273,tocIndex:23},{value:"boxplot",paraId:273,tocIndex:23},{value:" - 添加 boxplot 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:274,tocIndex:23},{value:"shape",paraId:274,tocIndex:23},{value:" - 添加 shape 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:275,tocIndex:23},{value:"pack",paraId:275,tocIndex:23},{value:" - 添加 pack 标记到该复合视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:276,tocIndex:23},{value:"forceGraph",paraId:276,tocIndex:23},{value:" - 添加 forceGraph 标记到该视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:277,tocIndex:23},{value:"tree",paraId:277,tocIndex:23},{value:" - 添加 tree 标记到该视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:278,tocIndex:23},{value:"wordCloud",paraId:278,tocIndex:23},{value:" - 添加 wordCloud 标记到该视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:279,tocIndex:23},{value:"gauge",paraId:279,tocIndex:23},{value:" - 添加 gauge 标记到该视图。",paraId:254,tocIndex:23},{value:"facetRect.",paraId:280,tocIndex:24},{value:"attr",paraId:280,tocIndex:24},{value:" - 设置或获取该复合视图的属性。",paraId:281,tocIndex:24},{value:"facetRect.",paraId:282,tocIndex:24},{value:"data",paraId:282,tocIndex:24},{value:" - 设置或获取该复合视图的 data。",paraId:281,tocIndex:24},{value:"facetRect.",paraId:283,tocIndex:24},{value:"transform",paraId:283,tocIndex:24},{value:" - 设置或获取该复合视图的 transform。",paraId:281,tocIndex:24},{value:"facetRect.",paraId:284,tocIndex:24},{value:"theme",paraId:284,tocIndex:24},{value:" - 设置或获取该复合视图的主题。",paraId:281,tocIndex:24},{value:"facetRect.",paraId:285,tocIndex:24},{value:"style",paraId:285,tocIndex:24},{value:" - 设置或获取该复合视图的 style。",paraId:281,tocIndex:24},{value:"facetRect.",paraId:286,tocIndex:24},{value:"scale",paraId:286,tocIndex:24},{value:" - 设置或获取该复合视图的 scale。",paraId:281,tocIndex:24},{value:"facetRect.",paraId:287,tocIndex:24},{value:"axis",paraId:287,tocIndex:24},{value:" - 设置或获取该复合视图的 axis。",paraId:281,tocIndex:24},{value:"facetRect.",paraId:288,tocIndex:24},{value:"legend",paraId:288,tocIndex:24},{value:" - 设置或获取该复合视图的 legend。",paraId:281,tocIndex:24},{value:"FacetCircle",paraId:289,tocIndex:24},{value:"facetCircle.",paraId:290,tocIndex:26},{value:"view",paraId:290,tocIndex:26},{value:" - 添加 view 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:292,tocIndex:26},{value:"interval",paraId:292,tocIndex:26},{value:" - 添加 interval 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:293,tocIndex:26},{value:"rect",paraId:293,tocIndex:26},{value:" - 添加 rect 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:294,tocIndex:26},{value:"point",paraId:294,tocIndex:26},{value:" - 添加 point 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:295,tocIndex:26},{value:"area",paraId:295,tocIndex:26},{value:" - 添加 area 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:296,tocIndex:26},{value:"line",paraId:296,tocIndex:26},{value:" - 添加 line 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:297,tocIndex:26},{value:"vector",paraId:297,tocIndex:26},{value:" - 添加 vector 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:298,tocIndex:26},{value:"link",paraId:298,tocIndex:26},{value:" - 添加 link 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:299,tocIndex:26},{value:"polygon",paraId:299,tocIndex:26},{value:" - 添加 polygon 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:300,tocIndex:26},{value:"image",paraId:300,tocIndex:26},{value:" - 添加 image 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:301,tocIndex:26},{value:"text",paraId:301,tocIndex:26},{value:" - 添加 text 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:302,tocIndex:26},{value:"lineX",paraId:302,tocIndex:26},{value:" - 添加 lineX 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:303,tocIndex:26},{value:"lineY",paraId:303,tocIndex:26},{value:" - 添加 lineY 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:304,tocIndex:26},{value:"range",paraId:304,tocIndex:26},{value:" - 添加 range 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:305,tocIndex:26},{value:"rangeX",paraId:305,tocIndex:26},{value:" - 添加 rangeX 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:306,tocIndex:26},{value:"rangeY",paraId:306,tocIndex:26},{value:" - 添加 rangeY 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:307,tocIndex:26},{value:"connector",paraId:307,tocIndex:26},{value:" - 添加 connector 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:308,tocIndex:26},{value:"sankey",paraId:308,tocIndex:26},{value:" - 添加 sankey 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:309,tocIndex:26},{value:"treemap",paraId:309,tocIndex:26},{value:" - 添加 treemap 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:310,tocIndex:26},{value:"boxplot",paraId:310,tocIndex:26},{value:" - 添加 boxplot 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:311,tocIndex:26},{value:"shape",paraId:311,tocIndex:26},{value:" - 添加 shape 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:312,tocIndex:26},{value:"pack",paraId:312,tocIndex:26},{value:" - 添加 pack 标记到该复合视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:313,tocIndex:26},{value:"forceGraph",paraId:313,tocIndex:26},{value:" - 添加 forceGraph 标记到该视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:314,tocIndex:26},{value:"tree",paraId:314,tocIndex:26},{value:" - 添加 tree 标记到该视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:315,tocIndex:26},{value:"wordCloud",paraId:315,tocIndex:26},{value:" - 添加 wordCloud 标记到该视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:316,tocIndex:26},{value:"gauge",paraId:316,tocIndex:26},{value:" - 添加 gauge 标记到该视图。",paraId:291,tocIndex:26},{value:"facetCircle.",paraId:317,tocIndex:27},{value:"attr",paraId:317,tocIndex:27},{value:" - 设置或获取该复合视图的属性。",paraId:318,tocIndex:27},{value:"facetCircle.",paraId:319,tocIndex:27},{value:"data",paraId:319,tocIndex:27},{value:" - 设置或获取该复合视图的 data。",paraId:318,tocIndex:27},{value:"facetCircle.",paraId:320,tocIndex:27},{value:"transform",paraId:320,tocIndex:27},{value:" - 设置或获取该复合视图的 transform。",paraId:318,tocIndex:27},{value:"facetCircle.",paraId:321,tocIndex:27},{value:"theme",paraId:321,tocIndex:27},{value:" - 设置或获取该复合视图的主题。",paraId:318,tocIndex:27},{value:"facetCircle.",paraId:322,tocIndex:27},{value:"style",paraId:322,tocIndex:27},{value:" - 设置或获取该复合视图的 style。",paraId:318,tocIndex:27},{value:"facetCircle.",paraId:323,tocIndex:27},{value:"scale",paraId:323,tocIndex:27},{value:" - 设置或获取该复合视图的 scale。",paraId:318,tocIndex:27},{value:"facetCircle.",paraId:324,tocIndex:27},{value:"axis",paraId:324,tocIndex:27},{value:" - 设置或获取该复合视图的 axis。",paraId:318,tocIndex:27},{value:"facetCircle.",paraId:325,tocIndex:27},{value:"legend",paraId:325,tocIndex:27},{value:" - 设置或获取该复合视图的 legend。",paraId:318,tocIndex:27},{value:"RepeatMatrix",paraId:326,tocIndex:27},{value:"repeatMatrix.",paraId:327,tocIndex:29},{value:"view",paraId:327,tocIndex:29},{value:" - 添加 view 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:329,tocIndex:29},{value:"interval",paraId:329,tocIndex:29},{value:" - 添加 interval 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:330,tocIndex:29},{value:"rect",paraId:330,tocIndex:29},{value:" - 添加 rect 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:331,tocIndex:29},{value:"point",paraId:331,tocIndex:29},{value:" - 添加 point 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:332,tocIndex:29},{value:"area",paraId:332,tocIndex:29},{value:" - 添加 area 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:333,tocIndex:29},{value:"line",paraId:333,tocIndex:29},{value:" - 添加 line 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:334,tocIndex:29},{value:"vector",paraId:334,tocIndex:29},{value:" - 添加 vector 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:335,tocIndex:29},{value:"link",paraId:335,tocIndex:29},{value:" - 添加 link 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:336,tocIndex:29},{value:"polygon",paraId:336,tocIndex:29},{value:" - 添加 polygon 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:337,tocIndex:29},{value:"image",paraId:337,tocIndex:29},{value:" - 添加 image 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:338,tocIndex:29},{value:"text",paraId:338,tocIndex:29},{value:" - 添加 text 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:339,tocIndex:29},{value:"lineX",paraId:339,tocIndex:29},{value:" - 添加 lineX 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:340,tocIndex:29},{value:"lineY",paraId:340,tocIndex:29},{value:" - 添加 lineY 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:341,tocIndex:29},{value:"range",paraId:341,tocIndex:29},{value:" - 添加 range 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:342,tocIndex:29},{value:"rangeX",paraId:342,tocIndex:29},{value:" - 添加 rangeX 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:343,tocIndex:29},{value:"rangeY",paraId:343,tocIndex:29},{value:" - 添加 rangeY 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:344,tocIndex:29},{value:"connector",paraId:344,tocIndex:29},{value:" - 添加 connector 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:345,tocIndex:29},{value:"sankey",paraId:345,tocIndex:29},{value:" - 添加 sankey 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:346,tocIndex:29},{value:"treemap",paraId:346,tocIndex:29},{value:" - 添加 treemap 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:347,tocIndex:29},{value:"boxplot",paraId:347,tocIndex:29},{value:" - 添加 boxplot 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:348,tocIndex:29},{value:"shape",paraId:348,tocIndex:29},{value:" - 添加 shape 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:349,tocIndex:29},{value:"pack",paraId:349,tocIndex:29},{value:" - 添加 pack 标记到该复合视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:350,tocIndex:29},{value:"forceGraph",paraId:350,tocIndex:29},{value:" - 添加 forceGraph 标记到该视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:351,tocIndex:29},{value:"tree",paraId:351,tocIndex:29},{value:" - 添加 tree 标记到该视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:352,tocIndex:29},{value:"wordCloud",paraId:352,tocIndex:29},{value:" - 添加 wordCloud 标记到该视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:353,tocIndex:29},{value:"gauge",paraId:353,tocIndex:29},{value:" - 添加 gauge 标记到该视图。",paraId:328,tocIndex:29},{value:"repeatMatrix.",paraId:354,tocIndex:30},{value:"attr",paraId:354,tocIndex:30},{value:" - 设置或获取该复合视图的属性。",paraId:355,tocIndex:30},{value:"repeatMatrix.",paraId:356,tocIndex:30},{value:"data",paraId:356,tocIndex:30},{value:" - 设置或获取该复合视图的 data。",paraId:355,tocIndex:30},{value:"repeatMatrix.",paraId:357,tocIndex:30},{value:"transform",paraId:357,tocIndex:30},{value:" - 设置或获取该复合视图的 transform。",paraId:355,tocIndex:30},{value:"repeatMatrix.",paraId:358,tocIndex:30},{value:"theme",paraId:358,tocIndex:30},{value:" - 设置或获取该复合视图的主题。",paraId:355,tocIndex:30},{value:"repeatMatrix.",paraId:359,tocIndex:30},{value:"style",paraId:359,tocIndex:30},{value:" - 设置或获取该复合视图的 style。",paraId:355,tocIndex:30},{value:"repeatMatrix.",paraId:360,tocIndex:30},{value:"scale",paraId:360,tocIndex:30},{value:" - 设置或获取该复合视图的 scale。",paraId:355,tocIndex:30},{value:"repeatMatrix.",paraId:361,tocIndex:30},{value:"axis",paraId:361,tocIndex:30},{value:" - 设置或获取该复合视图的 axis。",paraId:355,tocIndex:30},{value:"repeatMatrix.",paraId:362,tocIndex:30},{value:"legend",paraId:362,tocIndex:30},{value:" - 设置或获取该复合视图的 legend。",paraId:355,tocIndex:30},{value:"TimingKeyframe",paraId:363,tocIndex:30},{value:"timingKeyframe.",paraId:364,tocIndex:32},{value:"interval",paraId:364,tocIndex:32},{value:" - 添加 interval 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:366,tocIndex:32},{value:"rect",paraId:366,tocIndex:32},{value:" - 添加 rect 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:367,tocIndex:32},{value:"point",paraId:367,tocIndex:32},{value:" - 添加 point 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:368,tocIndex:32},{value:"area",paraId:368,tocIndex:32},{value:" - 添加 area 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:369,tocIndex:32},{value:"line",paraId:369,tocIndex:32},{value:" - 添加 line 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:370,tocIndex:32},{value:"vector",paraId:370,tocIndex:32},{value:" - 添加 vector 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:371,tocIndex:32},{value:"link",paraId:371,tocIndex:32},{value:" - 添加 link 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:372,tocIndex:32},{value:"polygon",paraId:372,tocIndex:32},{value:" - 添加 polygon 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:373,tocIndex:32},{value:"image",paraId:373,tocIndex:32},{value:" - 添加 image 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:374,tocIndex:32},{value:"text",paraId:374,tocIndex:32},{value:" - 添加 text 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:375,tocIndex:32},{value:"lineX",paraId:375,tocIndex:32},{value:" - 添加 lineX 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:376,tocIndex:32},{value:"lineY",paraId:376,tocIndex:32},{value:" - 添加 lineY 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:377,tocIndex:32},{value:"range",paraId:377,tocIndex:32},{value:" - 添加 range 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:378,tocIndex:32},{value:"rangeX",paraId:378,tocIndex:32},{value:" - 添加 rangeX 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:379,tocIndex:32},{value:"rangeY",paraId:379,tocIndex:32},{value:" - 添加 rangeY 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:380,tocIndex:32},{value:"connector",paraId:380,tocIndex:32},{value:" - 添加 connector 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:381,tocIndex:32},{value:"sankey",paraId:381,tocIndex:32},{value:" - 添加 sankey 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:382,tocIndex:32},{value:"treemap",paraId:382,tocIndex:32},{value:" - 添加 treemap 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:383,tocIndex:32},{value:"boxplot",paraId:383,tocIndex:32},{value:" - 添加 boxplot 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:384,tocIndex:32},{value:"shape",paraId:384,tocIndex:32},{value:" - 添加 shape 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:385,tocIndex:32},{value:"pack",paraId:385,tocIndex:32},{value:" - 添加 pack 标记到该复合视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:386,tocIndex:32},{value:"forceGraph",paraId:386,tocIndex:32},{value:" - 添加 forceGraph 标记到该视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:387,tocIndex:32},{value:"tree",paraId:387,tocIndex:32},{value:" - 添加 tree 标记到该视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:388,tocIndex:32},{value:"wordCloud",paraId:388,tocIndex:32},{value:" - 添加 wordCloud 标记到该视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:389,tocIndex:32},{value:"gauge",paraId:389,tocIndex:32},{value:" - 添加 gauge 标记到该视图。",paraId:365,tocIndex:32},{value:"timingKeyframe.",paraId:390,tocIndex:33},{value:"attr",paraId:390,tocIndex:33},{value:" - 设置或获取该复合视图的属性。",paraId:391,tocIndex:33}]},26906:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50795);const t=[{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 300,\n  height: 720,\n  paddingLeft: 50,\n  paddingBottom: 60,\n});\n\nconst repeatMatrix = chart\n  .repeatMatrix()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/weather.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ({ date, ...d }) => ({\n          ...d,\n          date: new Date(date).getMonth() + '',\n        }),\n      },\n    ],\n  })\n  .encode('y', ['temp_max', 'precipitation', 'wind'])\n  .encode('x', 'date');\n\nrepeatMatrix\n  .line()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('color', 'location')\n  .scale('y', { zero: true });\n\nchart.render();\n",paraId:0,tocIndex:0},{value:"repeatMatrix.interval",paraId:1},{value:"添加 interval 图形，具体见 ",paraId:2,tocIndex:2},{value:"mark",paraId:3,tocIndex:2},{value:"。",paraId:2,tocIndex:2},{value:"repeatMatrix.rect",paraId:1},{value:"添加 rect 图形，具体见 ",paraId:4,tocIndex:3},{value:"mark",paraId:5,tocIndex:3},{value:"。",paraId:4,tocIndex:3},{value:"repeatMatrix.point",paraId:1},{value:"添加 point 图形，具体见 ",paraId:6,tocIndex:4},{value:"mark",paraId:7,tocIndex:4},{value:"。",paraId:6,tocIndex:4},{value:"repeatMatrix.area",paraId:1},{value:"添加 area 图形，具体见 ",paraId:8,tocIndex:5},{value:"mark",paraId:9,tocIndex:5},{value:"。",paraId:8,tocIndex:5},{value:"repeatMatrix.line",paraId:1},{value:"添加 line 图形，具体见 ",paraId:10,tocIndex:6},{value:"mark",paraId:11,tocIndex:6},{value:"。",paraId:10,tocIndex:6},{value:"repeatMatrix.vector",paraId:1},{value:"添加 vector 图形，具体见 ",paraId:12,tocIndex:7},{value:"mark",paraId:13,tocIndex:7},{value:"。",paraId:12,tocIndex:7},{value:"repeatMatrix.link",paraId:1},{value:"添加 link 图形，具体见 ",paraId:14,tocIndex:8},{value:"mark",paraId:15,tocIndex:8},{value:"。",paraId:14,tocIndex:8},{value:"repeatMatrix.polygon",paraId:1},{value:"添加 polygon 图形，具体见 ",paraId:16,tocIndex:9},{value:"mark",paraId:17,tocIndex:9},{value:"。",paraId:16,tocIndex:9},{value:"repeatMatrix.image",paraId:1},{value:"添加 image 图形，具体见 ",paraId:18,tocIndex:10},{value:"mark",paraId:19,tocIndex:10},{value:"。",paraId:18,tocIndex:10},{value:"repeatMatrix.text",paraId:1},{value:"添加 text 图形，具体见 ",paraId:20,tocIndex:11},{value:"mark",paraId:21,tocIndex:11},{value:"。",paraId:20,tocIndex:11},{value:"repeatMatrix.lineX",paraId:1},{value:"添加 lineX 图形，具体见 ",paraId:22,tocIndex:12},{value:"mark",paraId:23,tocIndex:12},{value:"。",paraId:22,tocIndex:12},{value:"repeatMatrix.lineY",paraId:1},{value:"添加 lineY 图形，具体见 ",paraId:24,tocIndex:13},{value:"mark",paraId:25,tocIndex:13},{value:"。",paraId:24,tocIndex:13},{value:"repeatMatrix.range",paraId:1},{value:"添加 range 图形，具体见 ",paraId:26,tocIndex:14},{value:"mark",paraId:27,tocIndex:14},{value:"。",paraId:26,tocIndex:14},{value:"repeatMatrix.rangeX",paraId:1},{value:"添加 rangeX 图形，具体见 ",paraId:28,tocIndex:15},{value:"mark",paraId:29,tocIndex:15},{value:"。",paraId:28,tocIndex:15},{value:"repeatMatrix.rangeY",paraId:1},{value:"添加 rangeY 图形，具体见 ",paraId:30,tocIndex:16},{value:"mark",paraId:31,tocIndex:16},{value:"。",paraId:30,tocIndex:16},{value:"repeatMatrix.connector",paraId:1},{value:"添加 connector 图形，具体见 ",paraId:32,tocIndex:17},{value:"mark",paraId:33,tocIndex:17},{value:"。",paraId:32,tocIndex:17},{value:"repeatMatrix.sankey",paraId:1},{value:"添加 sankey 图形，具体见 ",paraId:34,tocIndex:18},{value:"graph",paraId:35,tocIndex:18},{value:"。",paraId:34,tocIndex:18},{value:"repeatMatrix.treemap",paraId:1},{value:"添加 treemap 图形，具体见 ",paraId:36,tocIndex:19},{value:"graph",paraId:37,tocIndex:19},{value:"。",paraId:36,tocIndex:19},{value:"repeatMatrix.boxplot",paraId:1},{value:"添加 boxplot 图形，具体见 ",paraId:38,tocIndex:20},{value:"mark",paraId:39,tocIndex:20},{value:"。",paraId:38,tocIndex:20},{value:"repeatMatrix.shape",paraId:1},{value:"添加 shape 图形，具体见 ",paraId:40,tocIndex:21},{value:"mark",paraId:41,tocIndex:21},{value:"。",paraId:40,tocIndex:21},{value:"repeatMatrix.pack",paraId:1},{value:"添加 pack 图形，具体见 ",paraId:42,tocIndex:22},{value:"graph",paraId:43,tocIndex:22},{value:"。",paraId:42,tocIndex:22},{value:"repeatMatrix.forceGraph",paraId:1},{value:"添加 forceGraph 图形，具体见 ",paraId:44,tocIndex:23},{value:"graph",paraId:45,tocIndex:23},{value:"。",paraId:44,tocIndex:23},{value:"repeatMatrix.tree",paraId:1},{value:"添加 tree 图形，具体见 ",paraId:46,tocIndex:24},{value:"graph",paraId:47,tocIndex:24},{value:"。",paraId:46,tocIndex:24},{value:"repeatMatrix.wordCloud",paraId:1},{value:"添加 wordCloud 图形，具体见 ",paraId:48,tocIndex:25},{value:"mark",paraId:49,tocIndex:25},{value:"。",paraId:48,tocIndex:25},{value:"repeatMatrix.gauge",paraId:1},{value:"添加 gauge 图形，具体见 ",paraId:50,tocIndex:26},{value:"mark",paraId:51,tocIndex:26},{value:"。",paraId:50,tocIndex:26},{value:"repeatMatrix.attr",paraId:1},{value:"获取或设置图表的配置项。",paraId:52,tocIndex:28},{value:"repeatMatrix.data",paraId:1},{value:"设置图形的数据，支持多种数据来源和数据变换，具体见 ",paraId:53,tocIndex:29},{value:"data",paraId:54,tocIndex:29},{value:"。",paraId:53,tocIndex:29},{value:"repeatMatrix.encode",paraId:1},{value:"设置图形每个通道的字段名称，具体见 ",paraId:55,tocIndex:30},{value:"encode",paraId:56,tocIndex:30},{value:"。",paraId:55,tocIndex:30},{value:"repeatMatrix.scale",paraId:1},{value:"设置图形每个通道的比例尺，具体见 ",paraId:57,tocIndex:31},{value:"scale",paraId:58,tocIndex:31},{value:"。",paraId:57,tocIndex:31},{value:"repeatMatrix.legend",paraId:1},{value:"设置图形的图例，具体见 ",paraId:59,tocIndex:32},{value:"legend",paraId:60,tocIndex:32},{value:"。",paraId:59,tocIndex:32},{value:"repeatMatrix.tooltip",paraId:1},{value:"设置图形的 Tooltip，具体见 ",paraId:61,tocIndex:33},{value:"tooltip",paraId:62,tocIndex:33},{value:"。",paraId:61,tocIndex:33},{value:"repeatMatrix.axis",paraId:1},{value:"设置图形的坐标轴，具体见 ",paraId:63,tocIndex:34},{value:"axis",paraId:64,tocIndex:34},{value:"。",paraId:63,tocIndex:34},{value:"repeatMatrix.slider",paraId:1},{value:"设置图形的坐标轴，具体见 ",paraId:65,tocIndex:35},{value:"slider",paraId:66,tocIndex:35},{value:"。",paraId:65,tocIndex:35},{value:"repeatMatrix.label",paraId:1},{value:"设置图形的标签，具体见 ",paraId:67,tocIndex:36},{value:"label",paraId:68,tocIndex:36},{value:"。",paraId:67,tocIndex:36},{value:"repeatMatrix.style",paraId:1},{value:"设置图形的样式，具体见 ",paraId:69,tocIndex:37},{value:"style",paraId:70,tocIndex:37},{value:"。",paraId:69,tocIndex:37},{value:"repeatMatrix.theme",paraId:1},{value:"设置图形的主题，具体见 ",paraId:71,tocIndex:38},{value:"theme",paraId:72,tocIndex:38},{value:"。",paraId:71,tocIndex:38}]},49437:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(16366);const t=[{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n});\n\nconst flex = chart\n  .spaceFlex()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .attr('direction', 'col')\n  .attr('ratio', [1, 2]);\n\nflex\n  .interval()\n  .attr('paddingBottom', 0)\n  .attr('paddingRight', 300)\n  .transform({ type: 'groupX', y: 'max' })\n  .axis('x', false)\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', 'temp_max')\n  .encode('color', 'steelblue');\n\nflex\n  .spaceFlex()\n  .attr('ratio', [2, 1])\n  .call((node) =>\n    node\n      .cell()\n      .attr('paddingRight', 0)\n      .attr('paddingBottom', 50)\n      .transform({ type: 'group', color: 'max' })\n      .encode('x', (d) => new Date(d.date).getUTCDate())\n      .encode('y', (d) => new Date(d.date).getUTCMonth())\n      .encode('color', 'temp_max')\n      .style('inset', 0.5)\n      .axis('x', { title: 'Date' })\n      .axis('y', { title: 'Month' })\n      .legend({ color: false })\n      .scale('color', {\n        type: 'sequential',\n        palette: 'gnBu',\n      }),\n  )\n  .call((node) =>\n    node\n      .spaceFlex()\n      .coordinate({ transform: [{ type: 'transpose' }] })\n      .interval()\n      .attr('paddingBottom', 50)\n      .transform({ type: 'groupX', y: 'max' })\n      .axis('x', false)\n      .encode('x', (d) => new Date(d.date).getUTCMonth())\n      .encode('y', 'temp_max')\n      .encode('color', 'steelblue'),\n  );\n\nchart.render();\n",paraId:0,tocIndex:0},{value:"spaceFlex.interval",paraId:1},{value:"添加 interval 图形，具体见 ",paraId:2,tocIndex:2},{value:"mark",paraId:3,tocIndex:2},{value:"。",paraId:2,tocIndex:2},{value:"spaceFlex.rect",paraId:1},{value:"添加 rect 图形，具体见 ",paraId:4,tocIndex:3},{value:"mark",paraId:5,tocIndex:3},{value:"。",paraId:4,tocIndex:3},{value:"spaceFlex.point",paraId:1},{value:"添加 point 图形，具体见 ",paraId:6,tocIndex:4},{value:"mark",paraId:7,tocIndex:4},{value:"。",paraId:6,tocIndex:4},{value:"spaceFlex.area",paraId:1},{value:"添加 area 图形，具体见 ",paraId:8,tocIndex:5},{value:"mark",paraId:9,tocIndex:5},{value:"。",paraId:8,tocIndex:5},{value:"spaceFlex.line",paraId:1},{value:"添加 line 图形，具体见 ",paraId:10,tocIndex:6},{value:"mark",paraId:11,tocIndex:6},{value:"。",paraId:10,tocIndex:6},{value:"spaceFlex.vector",paraId:1},{value:"添加 vector 图形，具体见 ",paraId:12,tocIndex:7},{value:"mark",paraId:13,tocIndex:7},{value:"。",paraId:12,tocIndex:7},{value:"spaceFlex.link",paraId:1},{value:"添加 link 图形，具体见 ",paraId:14,tocIndex:8},{value:"mark",paraId:15,tocIndex:8},{value:"。",paraId:14,tocIndex:8},{value:"spaceFlex.polygon",paraId:1},{value:"添加 polygon 图形，具体见 ",paraId:16,tocIndex:9},{value:"mark",paraId:17,tocIndex:9},{value:"。",paraId:16,tocIndex:9},{value:"spaceFlex.image",paraId:1},{value:"添加 image 图形，具体见 ",paraId:18,tocIndex:10},{value:"mark",paraId:19,tocIndex:10},{value:"。",paraId:18,tocIndex:10},{value:"spaceFlex.text",paraId:1},{value:"添加 text 图形，具体见 ",paraId:20,tocIndex:11},{value:"mark",paraId:21,tocIndex:11},{value:"。",paraId:20,tocIndex:11},{value:"spaceFlex.lineX",paraId:1},{value:"添加 lineX 图形，具体见 ",paraId:22,tocIndex:12},{value:"mark",paraId:23,tocIndex:12},{value:"。",paraId:22,tocIndex:12},{value:"spaceFlex.lineY",paraId:1},{value:"添加 lineY 图形，具体见 ",paraId:24,tocIndex:13},{value:"mark",paraId:25,tocIndex:13},{value:"。",paraId:24,tocIndex:13},{value:"spaceFlex.range",paraId:1},{value:"添加 range 图形，具体见 ",paraId:26,tocIndex:14},{value:"mark",paraId:27,tocIndex:14},{value:"。",paraId:26,tocIndex:14},{value:"spaceFlex.rangeX",paraId:1},{value:"添加 rangeX 图形，具体见 ",paraId:28,tocIndex:15},{value:"mark",paraId:29,tocIndex:15},{value:"。",paraId:28,tocIndex:15},{value:"spaceFlex.rangeY",paraId:1},{value:"添加 rangeY 图形，具体见 ",paraId:30,tocIndex:16},{value:"mark",paraId:31,tocIndex:16},{value:"。",paraId:30,tocIndex:16},{value:"spaceFlex.connector",paraId:1},{value:"添加 connector 图形，具体见 ",paraId:32,tocIndex:17},{value:"mark",paraId:33,tocIndex:17},{value:"。",paraId:32,tocIndex:17},{value:"spaceFlex.sankey",paraId:1},{value:"添加 sankey 图形，具体见 ",paraId:34,tocIndex:18},{value:"graph",paraId:35,tocIndex:18},{value:"。",paraId:34,tocIndex:18},{value:"spaceFlex.treemap",paraId:1},{value:"添加 treemap 图形，具体见 ",paraId:36,tocIndex:19},{value:"graph",paraId:37,tocIndex:19},{value:"。",paraId:36,tocIndex:19},{value:"spaceFlex.boxplot",paraId:1},{value:"添加 boxplot 图形，具体见 ",paraId:38,tocIndex:20},{value:"mark",paraId:39,tocIndex:20},{value:"。",paraId:38,tocIndex:20},{value:"spaceFlex.shape",paraId:1},{value:"添加 shape 图形，具体见 ",paraId:40,tocIndex:21},{value:"mark",paraId:41,tocIndex:21},{value:"。",paraId:40,tocIndex:21},{value:"spaceFlex.pack",paraId:1},{value:"添加 pack 图形，具体见 ",paraId:42,tocIndex:22},{value:"graph",paraId:43,tocIndex:22},{value:"。",paraId:42,tocIndex:22},{value:"spaceFlex.forceGraph",paraId:1},{value:"添加 forceGraph 图形，具体见 ",paraId:44,tocIndex:23},{value:"graph",paraId:45,tocIndex:23},{value:"。",paraId:44,tocIndex:23},{value:"spaceFlex.tree",paraId:1},{value:"添加 tree 图形，具体见 ",paraId:46,tocIndex:24},{value:"graph",paraId:47,tocIndex:24},{value:"。",paraId:46,tocIndex:24},{value:"spaceFlex.wordCloud",paraId:1},{value:"添加 wordCloud 图形，具体见 ",paraId:48,tocIndex:25},{value:"mark",paraId:49,tocIndex:25},{value:"。",paraId:48,tocIndex:25},{value:"spaceFlex.gauge",paraId:1},{value:"添加 gauge 图形，具体见 ",paraId:50,tocIndex:26},{value:"mark",paraId:51,tocIndex:26},{value:"。",paraId:50,tocIndex:26},{value:"spaceFlex.attr",paraId:1},{value:"获取或设置图表的配置项。",paraId:52,tocIndex:28},{value:"spaceFlex.data",paraId:1},{value:"设置图形的数据，支持多种数据来源和数据变换，具体见 ",paraId:53,tocIndex:29},{value:"data",paraId:54,tocIndex:29},{value:"。",paraId:53,tocIndex:29}]},93424:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(29805);const t=[{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst scaleColor = (node) =>\n  node.scale('color', {\n    palette: 'cool',\n    offset: (t) => t * 0.8 + 0.1,\n  });\n\nconst layer = chart.spaceLayer().data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  format: 'csv',\n});\n\nlayer\n  .interval()\n  .attr('paddingLeft', 50)\n  .transform({ type: 'sortX', reverse: true, by: 'y' })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .call(scaleColor);\n\nlayer\n  .spaceLayer()\n  .attr('x', 300)\n  .attr('y', 50)\n  .attr('width', 300)\n  .attr('height', 300)\n  .coordinate({ type: 'theta' })\n  .interval()\n  .transform({ type: 'stackY' })\n  .legend(false)\n  .scale('color', {\n    palette: 'cool',\n    offset: (t) => t * 0.8 + 0.1,\n  })\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .call(scaleColor);\n\nchart.render();\n",paraId:0,tocIndex:0},{value:"spaceLayer.interval",paraId:1},{value:"添加 interval 图形，具体见 ",paraId:2,tocIndex:2},{value:"mark",paraId:3,tocIndex:2},{value:"。",paraId:2,tocIndex:2},{value:"spaceLayer.rect",paraId:1},{value:"添加 rect 图形，具体见 ",paraId:4,tocIndex:3},{value:"mark",paraId:5,tocIndex:3},{value:"。",paraId:4,tocIndex:3},{value:"spaceLayer.point",paraId:1},{value:"添加 point 图形，具体见 ",paraId:6,tocIndex:4},{value:"mark",paraId:7,tocIndex:4},{value:"。",paraId:6,tocIndex:4},{value:"spaceLayer.area",paraId:1},{value:"添加 area 图形，具体见 ",paraId:8,tocIndex:5},{value:"mark",paraId:9,tocIndex:5},{value:"。",paraId:8,tocIndex:5},{value:"spaceLayer.line",paraId:1},{value:"添加 line 图形，具体见 ",paraId:10,tocIndex:6},{value:"mark",paraId:11,tocIndex:6},{value:"。",paraId:10,tocIndex:6},{value:"spaceLayer.vector",paraId:1},{value:"添加 vector 图形，具体见 ",paraId:12,tocIndex:7},{value:"mark",paraId:13,tocIndex:7},{value:"。",paraId:12,tocIndex:7},{value:"spaceLayer.link",paraId:1},{value:"添加 link 图形，具体见 ",paraId:14,tocIndex:8},{value:"mark",paraId:15,tocIndex:8},{value:"。",paraId:14,tocIndex:8},{value:"spaceLayer.polygon",paraId:1},{value:"添加 polygon 图形，具体见 ",paraId:16,tocIndex:9},{value:"mark",paraId:17,tocIndex:9},{value:"。",paraId:16,tocIndex:9},{value:"spaceLayer.image",paraId:1},{value:"添加 image 图形，具体见 ",paraId:18,tocIndex:10},{value:"mark",paraId:19,tocIndex:10},{value:"。",paraId:18,tocIndex:10},{value:"spaceLayer.text",paraId:1},{value:"添加 text 图形，具体见 ",paraId:20,tocIndex:11},{value:"mark",paraId:21,tocIndex:11},{value:"。",paraId:20,tocIndex:11},{value:"spaceLayer.lineX",paraId:1},{value:"添加 lineX 图形，具体见 ",paraId:22,tocIndex:12},{value:"mark",paraId:23,tocIndex:12},{value:"。",paraId:22,tocIndex:12},{value:"spaceLayer.lineY",paraId:1},{value:"添加 lineY 图形，具体见 ",paraId:24,tocIndex:13},{value:"mark",paraId:25,tocIndex:13},{value:"。",paraId:24,tocIndex:13},{value:"spaceLayer.range",paraId:1},{value:"添加 range 图形，具体见 ",paraId:26,tocIndex:14},{value:"mark",paraId:27,tocIndex:14},{value:"。",paraId:26,tocIndex:14},{value:"spaceLayer.rangeX",paraId:1},{value:"添加 rangeX 图形，具体见 ",paraId:28,tocIndex:15},{value:"mark",paraId:29,tocIndex:15},{value:"。",paraId:28,tocIndex:15},{value:"spaceLayer.rangeY",paraId:1},{value:"添加 rangeY 图形，具体见 ",paraId:30,tocIndex:16},{value:"mark",paraId:31,tocIndex:16},{value:"。",paraId:30,tocIndex:16},{value:"spaceLayer.connector",paraId:1},{value:"添加 connector 图形，具体见 ",paraId:32,tocIndex:17},{value:"mark",paraId:33,tocIndex:17},{value:"。",paraId:32,tocIndex:17},{value:"spaceLayer.sankey",paraId:1},{value:"添加 sankey 图形，具体见 ",paraId:34,tocIndex:18},{value:"graph",paraId:35,tocIndex:18},{value:"。",paraId:34,tocIndex:18},{value:"spaceLayer.treemap",paraId:1},{value:"添加 treemap 图形，具体见 ",paraId:36,tocIndex:19},{value:"graph",paraId:37,tocIndex:19},{value:"。",paraId:36,tocIndex:19},{value:"spaceLayer.boxplot",paraId:1},{value:"添加 boxplot 图形，具体见 ",paraId:38,tocIndex:20},{value:"mark",paraId:39,tocIndex:20},{value:"。",paraId:38,tocIndex:20},{value:"spaceLayer.shape",paraId:1},{value:"添加 shape 图形，具体见 ",paraId:40,tocIndex:21},{value:"mark",paraId:41,tocIndex:21},{value:"。",paraId:40,tocIndex:21},{value:"spaceLayer.pack",paraId:1},{value:"添加 pack 图形，具体见 ",paraId:42,tocIndex:22},{value:"graph",paraId:43,tocIndex:22},{value:"。",paraId:42,tocIndex:22},{value:"spaceLayer.forceGraph",paraId:1},{value:"添加 forceGraph 图形，具体见 ",paraId:44,tocIndex:23},{value:"graph",paraId:45,tocIndex:23},{value:"。",paraId:44,tocIndex:23},{value:"spaceLayer.tree",paraId:1},{value:"添加 tree 图形，具体见 ",paraId:46,tocIndex:24},{value:"graph",paraId:47,tocIndex:24},{value:"。",paraId:46,tocIndex:24},{value:"spaceLayer.wordCloud",paraId:1},{value:"添加 wordCloud 图形，具体见 ",paraId:48,tocIndex:25},{value:"mark",paraId:49,tocIndex:25},{value:"。",paraId:48,tocIndex:25},{value:"spaceLayer.gauge",paraId:1},{value:"添加 gauge 图形，具体见 ",paraId:50,tocIndex:26},{value:"mark",paraId:51,tocIndex:26},{value:"。",paraId:50,tocIndex:26},{value:"spaceLayer.attr",paraId:1},{value:"获取或设置图表的配置项。",paraId:52,tocIndex:28},{value:"spaceLayer.data",paraId:1},{value:"设置图形的数据，支持多种数据来源和数据变换，具体见 ",paraId:53,tocIndex:29},{value:"data",paraId:54,tocIndex:29},{value:"。",paraId:53,tocIndex:29}]},78651:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(18669);const t=[{value:"import { Chart } from '@antv/g2';\n\nconst sex = [\n  { city: 'A', sex: '男', value: 52 },\n  { city: 'A', sex: '女', value: 48 },\n  { city: 'B', sex: '男', value: 130 },\n  { city: 'B', sex: '女', value: 70 },\n];\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  paddingTop: 60,\n  paddingLeft: 100,\n});\n\nconst keyframe = chart.timingKeyframe();\n\nkeyframe\n  .interval()\n  .data(sex)\n  .transform({ type: 'groupX', y: 'sum' })\n  .encode('x', 'city')\n  .encode('y', 'value')\n  .encode('key', 'city');\n\nkeyframe\n  .interval()\n  .data(sex)\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'city')\n  .encode('y', 'value')\n  .encode('color', 'sex')\n  .encode('groupKey', 'city');\n\nchart.render();\n",paraId:0,tocIndex:0},{value:"timingKeyFrame.interval",paraId:1},{value:"添加 interval 图形，具体见 ",paraId:2,tocIndex:2},{value:"mark",paraId:3,tocIndex:2},{value:"。",paraId:2,tocIndex:2},{value:"timingKeyFrame.rect",paraId:1},{value:"添加 rect 图形，具体见 ",paraId:4,tocIndex:3},{value:"mark",paraId:5,tocIndex:3},{value:"。",paraId:4,tocIndex:3},{value:"timingKeyFrame.point",paraId:1},{value:"添加 point 图形，具体见 ",paraId:6,tocIndex:4},{value:"mark",paraId:7,tocIndex:4},{value:"。",paraId:6,tocIndex:4},{value:"timingKeyFrame.area",paraId:1},{value:"添加 area 图形，具体见 ",paraId:8,tocIndex:5},{value:"mark",paraId:9,tocIndex:5},{value:"。",paraId:8,tocIndex:5},{value:"timingKeyFrame.line",paraId:1},{value:"添加 line 图形，具体见 ",paraId:10,tocIndex:6},{value:"mark",paraId:11,tocIndex:6},{value:"。",paraId:10,tocIndex:6},{value:"timingKeyFrame.vector",paraId:1},{value:"添加 vector 图形，具体见 ",paraId:12,tocIndex:7},{value:"mark",paraId:13,tocIndex:7},{value:"。",paraId:12,tocIndex:7},{value:"timingKeyFrame.link",paraId:1},{value:"添加 link 图形，具体见 ",paraId:14,tocIndex:8},{value:"mark",paraId:15,tocIndex:8},{value:"。",paraId:14,tocIndex:8},{value:"timingKeyFrame.polygon",paraId:1},{value:"添加 polygon 图形，具体见 ",paraId:16,tocIndex:9},{value:"mark",paraId:17,tocIndex:9},{value:"。",paraId:16,tocIndex:9},{value:"timingKeyFrame.image",paraId:1},{value:"添加 image 图形，具体见 ",paraId:18,tocIndex:10},{value:"mark",paraId:19,tocIndex:10},{value:"。",paraId:18,tocIndex:10},{value:"timingKeyFrame.text",paraId:1},{value:"添加 text 图形，具体见 ",paraId:20,tocIndex:11},{value:"mark",paraId:21,tocIndex:11},{value:"。",paraId:20,tocIndex:11},{value:"timingKeyFrame.lineX",paraId:1},{value:"添加 lineX 图形，具体见 ",paraId:22,tocIndex:12},{value:"mark",paraId:23,tocIndex:12},{value:"。",paraId:22,tocIndex:12},{value:"timingKeyFrame.lineY",paraId:1},{value:"添加 lineY 图形，具体见 ",paraId:24,tocIndex:13},{value:"mark",paraId:25,tocIndex:13},{value:"。",paraId:24,tocIndex:13},{value:"timingKeyFrame.range",paraId:1},{value:"添加 range 图形，具体见 ",paraId:26,tocIndex:14},{value:"mark",paraId:27,tocIndex:14},{value:"。",paraId:26,tocIndex:14},{value:"timingKeyFrame.rangeX",paraId:1},{value:"添加 rangeX 图形，具体见 ",paraId:28,tocIndex:15},{value:"mark",paraId:29,tocIndex:15},{value:"。",paraId:28,tocIndex:15},{value:"timingKeyFrame.rangeY",paraId:1},{value:"添加 rangeY 图形，具体见 ",paraId:30,tocIndex:16},{value:"mark",paraId:31,tocIndex:16},{value:"。",paraId:30,tocIndex:16},{value:"timingKeyFrame.connector",paraId:1},{value:"添加 connector 图形，具体见 ",paraId:32,tocIndex:17},{value:"mark",paraId:33,tocIndex:17},{value:"。",paraId:32,tocIndex:17},{value:"timingKeyFrame.sankey",paraId:1},{value:"添加 sankey 图形，具体见 ",paraId:34,tocIndex:18},{value:"graph",paraId:35,tocIndex:18},{value:"。",paraId:34,tocIndex:18},{value:"timingKeyFrame.treemap",paraId:1},{value:"添加 treemap 图形，具体见 ",paraId:36,tocIndex:19},{value:"graph",paraId:37,tocIndex:19},{value:"。",paraId:36,tocIndex:19},{value:"timingKeyFrame.boxplot",paraId:1},{value:"添加 boxplot 图形，具体见 ",paraId:38,tocIndex:20},{value:"mark",paraId:39,tocIndex:20},{value:"。",paraId:38,tocIndex:20},{value:"timingKeyFrame.shape",paraId:1},{value:"添加 shape 图形，具体见 ",paraId:40,tocIndex:21},{value:"mark",paraId:41,tocIndex:21},{value:"。",paraId:40,tocIndex:21},{value:"timingKeyFrame.pack",paraId:1},{value:"添加 pack 图形，具体见 ",paraId:42,tocIndex:22},{value:"graph",paraId:43,tocIndex:22},{value:"。",paraId:42,tocIndex:22},{value:"timingKeyFrame.forceGraph",paraId:1},{value:"添加 forceGraph 图形，具体见 ",paraId:44,tocIndex:23},{value:"graph",paraId:45,tocIndex:23},{value:"。",paraId:44,tocIndex:23},{value:"timingKeyFrame.tree",paraId:1},{value:"添加 tree 图形，具体见 ",paraId:46,tocIndex:24},{value:"graph",paraId:47,tocIndex:24},{value:"。",paraId:46,tocIndex:24},{value:"timingKeyFrame.wordCloud",paraId:1},{value:"添加 wordCloud 图形，具体见 ",paraId:48,tocIndex:25},{value:"mark",paraId:49,tocIndex:25},{value:"。",paraId:48,tocIndex:25},{value:"timingKeyFrame.gauge",paraId:1},{value:"添加 gauge 图形，具体见 ",paraId:50,tocIndex:26},{value:"mark",paraId:51,tocIndex:26},{value:"。",paraId:50,tocIndex:26},{value:"timingKeyFrame.attr",paraId:1},{value:"获取或设置图表的配置项。",paraId:52,tocIndex:28}]},75890:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(16195);const t=[{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\nconst scaleColor = (node) =>\n  node.scale('color', {\n    palette: 'cool',\n    offset: (t) => t * 0.8 + 0.1,\n  });\nconst layer = chart.spaceLayer().data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  format: 'csv',\n});\nlayer\n  .interval()\n  .attr('paddingLeft', 50)\n  .transform({ type: 'sortX', reverse: true, by: 'y' })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .call(scaleColor);\nlayer\n  .view()\n  .attr('x', 300)\n  .attr('y', 50)\n  .attr('width', 300)\n  .attr('height', 300)\n  .coordinate({ type: 'theta' })\n  .interval()\n  .transform({ type: 'stackY' })\n  .legend(false)\n  .scale('color', {\n    palette: 'cool',\n    offset: (t) => t * 0.8 + 0.1,\n  })\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .call(scaleColor);\nchart.render();\n",paraId:0,tocIndex:0},{value:"view.interval",paraId:1},{value:"添加 interval 图形，具体见 ",paraId:2,tocIndex:2},{value:"mark",paraId:3,tocIndex:2},{value:"。",paraId:2,tocIndex:2},{value:"view.rect",paraId:1},{value:"添加 rect 图形，具体见 ",paraId:4,tocIndex:3},{value:"mark",paraId:5,tocIndex:3},{value:"。",paraId:4,tocIndex:3},{value:"view.point",paraId:1},{value:"添加 point 图形，具体见 ",paraId:6,tocIndex:4},{value:"mark",paraId:7,tocIndex:4},{value:"。",paraId:6,tocIndex:4},{value:"view.area",paraId:1},{value:"添加 area 图形，具体见 ",paraId:8,tocIndex:5},{value:"mark",paraId:9,tocIndex:5},{value:"。",paraId:8,tocIndex:5},{value:"view.line",paraId:1},{value:"添加 line 图形，具体见 ",paraId:10,tocIndex:6},{value:"mark",paraId:11,tocIndex:6},{value:"。",paraId:10,tocIndex:6},{value:"view.vector",paraId:1},{value:"添加 vector 图形，具体见 ",paraId:12,tocIndex:7},{value:"mark",paraId:13,tocIndex:7},{value:"。",paraId:12,tocIndex:7},{value:"view.link",paraId:1},{value:"添加 link 图形，具体见 ",paraId:14,tocIndex:8},{value:"mark",paraId:15,tocIndex:8},{value:"。",paraId:14,tocIndex:8},{value:"view.polygon",paraId:1},{value:"添加 polygon 图形，具体见 ",paraId:16,tocIndex:9},{value:"mark",paraId:17,tocIndex:9},{value:"。",paraId:16,tocIndex:9},{value:"view.image",paraId:1},{value:"添加 image 图形，具体见 ",paraId:18,tocIndex:10},{value:"mark",paraId:19,tocIndex:10},{value:"。",paraId:18,tocIndex:10},{value:"view.text",paraId:1},{value:"添加 text 图形，具体见 ",paraId:20,tocIndex:11},{value:"mark",paraId:21,tocIndex:11},{value:"。",paraId:20,tocIndex:11},{value:"view.lineX",paraId:1},{value:"添加 lineX 图形，具体见 ",paraId:22,tocIndex:12},{value:"mark",paraId:23,tocIndex:12},{value:"。",paraId:22,tocIndex:12},{value:"view.lineY",paraId:1},{value:"添加 lineY 图形，具体见 ",paraId:24,tocIndex:13},{value:"mark",paraId:25,tocIndex:13},{value:"。",paraId:24,tocIndex:13},{value:"view.range",paraId:1},{value:"添加 range 图形，具体见 ",paraId:26,tocIndex:14},{value:"mark",paraId:27,tocIndex:14},{value:"。",paraId:26,tocIndex:14},{value:"view.rangeX",paraId:1},{value:"添加 rangeX 图形，具体见 ",paraId:28,tocIndex:15},{value:"mark",paraId:29,tocIndex:15},{value:"。",paraId:28,tocIndex:15},{value:"view.rangeY",paraId:1},{value:"添加 rangeY 图形，具体见 ",paraId:30,tocIndex:16},{value:"mark",paraId:31,tocIndex:16},{value:"。",paraId:30,tocIndex:16},{value:"view.connector",paraId:1},{value:"添加 connector 图形，具体见 ",paraId:32,tocIndex:17},{value:"mark",paraId:33,tocIndex:17},{value:"。",paraId:32,tocIndex:17},{value:"view.sankey",paraId:1},{value:"添加 sankey 图形，具体见 ",paraId:34,tocIndex:18},{value:"graph",paraId:35,tocIndex:18},{value:"。",paraId:34,tocIndex:18},{value:"view.treemap",paraId:1},{value:"添加 treemap 图形，具体见 ",paraId:36,tocIndex:19},{value:"graph",paraId:37,tocIndex:19},{value:"。",paraId:36,tocIndex:19},{value:"view.boxplot",paraId:1},{value:"添加 boxplot 图形，具体见 ",paraId:38,tocIndex:20},{value:"mark",paraId:39,tocIndex:20},{value:"。",paraId:38,tocIndex:20},{value:"chart.density",paraId:1},{value:"添加 density 图形，具体见 ",paraId:40,tocIndex:21},{value:"mark",paraId:41,tocIndex:21},{value:"。",paraId:40,tocIndex:21},{value:"chart.heatmap",paraId:1},{value:"添加 heatmap 图形，具体见 ",paraId:42,tocIndex:22},{value:"mark",paraId:43,tocIndex:22},{value:"。",paraId:42,tocIndex:22},{value:"view.shape",paraId:1},{value:"添加 shape 图形，具体见 ",paraId:44,tocIndex:23},{value:"mark",paraId:45,tocIndex:23},{value:"。",paraId:44,tocIndex:23},{value:"view.pack",paraId:1},{value:"添加 pack 图形，具体见 ",paraId:46,tocIndex:24},{value:"graph",paraId:47,tocIndex:24},{value:"。",paraId:46,tocIndex:24},{value:"view.forceGraph",paraId:1},{value:"添加 forceGraph 图形，具体见 ",paraId:48,tocIndex:25},{value:"graph",paraId:49,tocIndex:25},{value:"。",paraId:48,tocIndex:25},{value:"view.tree",paraId:1},{value:"添加 tree 图形，具体见 ",paraId:50,tocIndex:26},{value:"graph",paraId:51,tocIndex:26},{value:"。",paraId:50,tocIndex:26},{value:"view.wordCloud",paraId:1},{value:"添加 wordCloud 图形，具体见 ",paraId:52,tocIndex:27},{value:"mark",paraId:53,tocIndex:27},{value:"。",paraId:52,tocIndex:27},{value:"view.gauge",paraId:1},{value:"添加 gauge 图形，具体见 ",paraId:54,tocIndex:28},{value:"mark",paraId:55,tocIndex:28},{value:"。",paraId:54,tocIndex:28},{value:"view.attr",paraId:1},{value:"获取或设置图表的配置项。",paraId:56,tocIndex:30},{value:"view.data",paraId:1},{value:"设置图形的数据，支持多种数据来源和数据变换，具体见 ",paraId:57,tocIndex:31},{value:"data",paraId:58,tocIndex:31},{value:"。",paraId:57,tocIndex:31},{value:"view.encode",paraId:1},{value:"设置图形每个通道的字段名称，具体见 ",paraId:59,tocIndex:32},{value:"encode",paraId:60,tocIndex:32},{value:"。",paraId:59,tocIndex:32},{value:"view.scale",paraId:1},{value:"设置图形每个通道的比例尺，具体见 ",paraId:61,tocIndex:33},{value:"scale",paraId:62,tocIndex:33},{value:"。",paraId:61,tocIndex:33},{value:"view.legend",paraId:1},{value:"设置图形的图例，具体见 ",paraId:63,tocIndex:34},{value:"legend",paraId:64,tocIndex:34},{value:"。",paraId:63,tocIndex:34},{value:"view.tooltip",paraId:1},{value:"设置图形的 Tooltip，具体见 ",paraId:65,tocIndex:35},{value:"tooltip",paraId:66,tocIndex:35},{value:"。",paraId:65,tocIndex:35},{value:"view.axis",paraId:1},{value:"设置图形的坐标轴，具体见 ",paraId:67,tocIndex:36},{value:"axis",paraId:68,tocIndex:36},{value:"。",paraId:67,tocIndex:36},{value:"view.slider",paraId:1},{value:"设置图形的坐标轴，具体见 ",paraId:69,tocIndex:37},{value:"slider",paraId:70,tocIndex:37},{value:"。",paraId:69,tocIndex:37},{value:"view.label",paraId:1},{value:"设置图形的标签，具体见 ",paraId:71,tocIndex:38},{value:"label",paraId:72,tocIndex:38},{value:"。",paraId:71,tocIndex:38},{value:"view.style",paraId:1},{value:"设置图形的样式，具体见 ",paraId:73,tocIndex:39},{value:"style",paraId:74,tocIndex:39},{value:"。",paraId:73,tocIndex:39},{value:"view.theme",paraId:1},{value:"设置图形的主题，具体见 ",paraId:75,tocIndex:40},{value:"theme",paraId:76,tocIndex:40},{value:"。",paraId:75,tocIndex:40},{value:"view.getView",paraId:1},{value:"返回 view 渲染时的 view 实例。",paraId:77,tocIndex:42},{value:"view.getCoordinate",paraId:1},{value:"返回 view 渲染时的 coordinate 实例。",paraId:78,tocIndex:43},{value:"view.getTheme",paraId:1},{value:"返回 view 渲染时的 theme 实例。",paraId:79,tocIndex:44},{value:"view.getGroup",paraId:1},{value:"返回 view 渲染时的 canvas group 实例。",paraId:80,tocIndex:45},{value:"view.getScale",paraId:1},{value:"返回 view 渲染时所有的 scale 实例。",paraId:81,tocIndex:46},{value:"view.getScaleByChannel",paraId:1},{value:"通过通道名称查找返回 view 渲染时对应的 scale 实例。",paraId:82,tocIndex:47},{value:"view.getNodesByType",paraId:1},{value:"通过 type 查找所有的 node 子节点。",paraId:83,tocIndex:48},{value:"view.getNodeByKey",paraId:1},{value:"通过 key 找到当前 node 的子节点。",paraId:84,tocIndex:49}]},23743:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(96831);const t=[{value:"在使用 AntV G2 绘制图表时，手动设置 ",paraId:0,tocIndex:1},{value:"padding",paraId:0,tocIndex:1},{value:" 可能会导致图表标题无法正常显示或完全消失。",paraId:0,tocIndex:1},{value:"相关问题：",paraId:1,tocIndex:1},{value:"设置完 title 不显示",paraId:1,tocIndex:1},{value:"G2 默认会动态计算所有组件所需的间距，但一旦指定了固定的 ",paraId:2,tocIndex:2},{value:"padding",paraId:2,tocIndex:2},{value:" 值，这个自动调整的逻辑就会被跳过，可能导致组件显示不完整。",paraId:2,tocIndex:2},{value:"有两种方式可以解决这个问题：",paraId:3,tocIndex:3},{value:"让 G2 自动计算最佳间距，确保所有组件正常显示：",paraId:4,tocIndex:4},{value:"chart\n  .interval()\n  .encode('x', 'category')\n  .encode('y', 'value')\n  .encode('color', 'type');\n",paraId:5,tocIndex:4},{value:"如果确实需要手动设置 ",paraId:6,tocIndex:5},{value:"padding",paraId:6,tocIndex:5},{value:"，请确保为动态生成的组件预留足够空间：",paraId:6,tocIndex:5},{value:"chart\n  .padding(50)\n  .interval()\n  .encode('x', 'category')\n  .encode('y', 'value')\n  .encode('color', 'type');\n",paraId:7,tocIndex:5},{value:"手动设置 ",paraId:8,tocIndex:6},{value:"padding",paraId:8,tocIndex:6},{value:" 时，建议通过调试确定合适的数值",paraId:8,tocIndex:6},{value:"需要考虑标题、图例等组件的空间需求",paraId:8,tocIndex:6},{value:"在不需要特定布局时，优先使用 G2 的自动布局功能",paraId:8,tocIndex:6}]},62189:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(93083);const t=[{value:"G2 中动画是可视化中很重要的一部分，可以提高可视化的表现力。动画可以声明在标记层级：",paraId:0},{value:"({\n  type: 'interval',\n  animate: {\n    enter: {\n      type: 'scaleInX',\n      duration: 100,\n      delay: 10,\n    },\n    update: {\n      type: 'morphing',\n    },\n  },\n});\n",paraId:1},{value:"// API\n// 第一种方式\nchart\n  .interval()\n  .animate('enter', { type: 'scaleInX', duration: 100, delay: 10 })\n  .animate('update', { type: 'morphing' });\n\n// 第二种方式\nchart.interval().animate({\n  enter: {\n    type: 'scaleInX',\n    duration: 100,\n    delay: 10,\n  },\n  update: {\n    type: 'morphing',\n  },\n});\n",paraId:2},{value:"标记是通过 ",paraId:3,tocIndex:0},{value:"mark.animate",paraId:3,tocIndex:0},{value:" 指定动画属性的，一共有三个部分的动画可以指定：",paraId:3,tocIndex:0},{value:"enter",paraId:4,tocIndex:0},{value:" - 新增的图形",paraId:4,tocIndex:0},{value:"update",paraId:4,tocIndex:0},{value:" - 更新的图形",paraId:4,tocIndex:0},{value:"exit",paraId:4,tocIndex:0},{value:" - 删除的图形",paraId:4,tocIndex:0},{value:"而每部分的动画有以下的属性：",paraId:5,tocIndex:0},{value:"type",paraId:6,tocIndex:0},{value:" - 种类",paraId:6,tocIndex:0},{value:"duration",paraId:6,tocIndex:0},{value:" - 持续时间",paraId:6,tocIndex:0},{value:"delay",paraId:6,tocIndex:0},{value:" - 延迟时间",paraId:6,tocIndex:0},{value:"easing",paraId:6,tocIndex:0},{value:" - 缓动函数",paraId:6,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .animate('enter', {\n      type: 'scaleInY', // 指定入场动画的类型\n      duration: 1000, // 指定入场动画的执行时间\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:7,tocIndex:0},{value:"在 G2 中动画属性可以作为一种通道，也可以编码数据。比如下面甘特图中，每个条的出现和持续时间是和数据线性相关的。",paraId:8,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ transform: [{ type: 'transpose' }] })\n    .data([\n      { name: 'event planning', startTime: 1, endTime: 4 },\n      { name: 'layout logistics', startTime: 3, endTime: 13 },\n      { name: 'select vendors', startTime: 5, endTime: 8 },\n      { name: 'hire venue', startTime: 9, endTime: 13 },\n      { name: 'hire caterer', startTime: 10, endTime: 14 },\n      { name: 'hire event decorators', startTime: 12, endTime: 17 },\n      { name: 'rehearsal', startTime: 14, endTime: 16 },\n      { name: 'event celebration', startTime: 17, endTime: 18 },\n    ])\n    .encode('x', 'name')\n    .encode('y', ['endTime', 'startTime'])\n    .encode('color', 'name')\n    .encode('enterDuration', (d) => d.endTime - d.startTime) // 计算持续时间，并且编码\n    .encode('enterDelay', 'startTime'); // 指定出现的时间，并且编码\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:9,tocIndex:1},{value:"G2 也提供了 StackEnter 标记转换来实现分组动画，该标记转换会先将图形进行分组，然后将它们的出现时间和持续时间在空间上进行堆叠，从而实现依次出现的效果。",paraId:10,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { type: 'Apple', year: '2001', value: 260 },\n      { type: 'Orange', year: '2001', value: 100 },\n      { type: 'Banana', year: '2001', value: 90 },\n      { type: 'Apple', year: '2002', value: 210 },\n      { type: 'Orange', year: '2002', value: 150 },\n      { type: 'Banana', year: '2002', value: 30 },\n    ])\n    // 按照颜色分组，依次出现\n    .transform({ type: 'stackEnter', groupBy: 'color' })\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .encode('color', 'type')\n    .encode('series', 'type')\n    .encode('enterDuration', 1000); // 每一组的持续时间为 1000\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:11,tocIndex:2},{value:"上面的动画都是过渡动画，不涉及到数据的更新，G2 也提供了制作关键帧动画的能力。使用 ",paraId:12,tocIndex:3},{value:"chart.timingKeyframe",paraId:12,tocIndex:3},{value:" 创建一个时间容器，用于放置一系列视图，它会对这些视图中有关系的图形元素应用平滑的过渡效果。而对应关系通过 ",paraId:12,tocIndex:3},{value:"key",paraId:12,tocIndex:3},{value:" 和 ",paraId:12,tocIndex:3},{value:"groupKey",paraId:12,tocIndex:3},{value:" 两个通道指定。",paraId:12,tocIndex:3},{value:"(async () => {\n  const data = await fetch(\n    'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  ).then((res) => res.json());\n\n  const chart = new G2.Chart();\n\n  // 参考 css animation 的描述\n  const keyframe = chart\n    .timingKeyframe() // 创建容器\n    .attr('iterationCount', 2) // 迭代次数\n    .attr('direction', 'alternate') // 方向\n    .attr('duration', 1000); // 持续时间\n\n  keyframe\n    .interval()\n    .transform({ type: 'groupX', y: 'mean' })\n    .data(data)\n    .encode('x', 'gender')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('key', 'gender'); // 指定 key\n\n  keyframe\n    .point()\n    .data(data)\n    .encode('x', 'height')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('shape', 'point')\n    .encode('groupKey', 'gender'); // 指定 groupKey\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:13,tocIndex:3},{value:"时序动画（timingSequence）",paraId:14,tocIndex:4},{value:" 还在开发中，敬请期待。",paraId:14,tocIndex:4}]},85560:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(69656);const t=[{value:"G2 设计了一套",paraId:0},{value:"规范（Spec）",paraId:0},{value:" 去描述可以绘制的可视化，使得用户可以通过调用 ",paraId:0},{value:"chart.options(options)",paraId:0},{value:" 根据指定的满足规范的",paraId:0},{value:"选项（options）",paraId:0},{value:" 去渲染图表，比如绘制一个如下基本的条形图：",paraId:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: {\n      x: 'genre',\n      y: 'sold',\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:1},{value:"基于底层的 Spec，为了提供更多样化和灵活地声明图表的能力，G2 也提供了一系列函数式 API 来声明图表，比如声明上面简单的条形图：",paraId:2,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:3,tocIndex:0},{value:"简单来讲：",paraId:4,tocIndex:0},{value:"调用函数形式 API 只是在生成内部的 options，两者没有什么本质区别，两者的绘制能力相同，更多的只是一个风格上的选择",paraId:4,tocIndex:0},{value:"。比如当调用 ",paraId:4,tocIndex:0},{value:"chart.interval",paraId:4,tocIndex:0},{value:" 的时候是添加一个 Interval 标记到 ",paraId:4,tocIndex:0},{value:"children",paraId:4,tocIndex:0},{value:" 里面：",paraId:4,tocIndex:0},{value:"({\n  type: 'view',\n  children: [{ type: 'interval' }],\n});\n",paraId:5,tocIndex:0},{value:"chart.interval().encode('x', 'genre')",paraId:6,tocIndex:0},{value:" 只是设置 options 里面的 ",paraId:6,tocIndex:0},{value:"encode",paraId:6,tocIndex:0},{value:"：",paraId:6,tocIndex:0},{value:"({\n  type: 'view',\n  children: [{ type: 'interval', encode: { x: 'genre' } }],\n});\n",paraId:7,tocIndex:0},{value:"所以理解函数式 API 和 Options 的映射关系很重要，在后面的介绍中都会先介绍 Spec，然后介绍对应的 API。",paraId:8,tocIndex:0},{value:"G2 的 Spec 总体来讲是一个有层级结构的",paraId:9,tocIndex:1},{value:"视图树（View Tree）",paraId:9,tocIndex:1},{value:"，由不同的节点构成。节点通过 ",paraId:9,tocIndex:1},{value:"node.type",paraId:9,tocIndex:1},{value:" 指定类型，不同的类型有不同的作用，同时通过 ",paraId:9,tocIndex:1},{value:"node.children",paraId:9,tocIndex:1},{value:" 来进行嵌套。",paraId:9,tocIndex:1},{value:"({\n  type: 'spaceFlex',\n  children: [\n    {\n      type: 'view',\n      children: [{ type: 'line' }, { type: 'point' }],\n    },\n    {\n      type: 'interval',\n    },\n  ],\n});\n",paraId:10,tocIndex:1},{value:"其中视图可以简单理解为图表，或者",paraId:11,tocIndex:1},{value:"单视图图表（Single View Plot）",paraId:11,tocIndex:1},{value:"。这颗“树”通过不同的容器节点在时间和空间上管理视图，从而在时间和空间上管理我们的视图，从而绘制",paraId:11,tocIndex:1},{value:"多视图图表（Multiple View Plots）",paraId:11,tocIndex:1},{value:"。",paraId:11,tocIndex:1},{value:"API 是通过 ",paraId:12,tocIndex:1},{value:"parent.[child]()",paraId:12,tocIndex:1},{value:" 的形式给指定的 ",paraId:12,tocIndex:1},{value:"parent",paraId:12,tocIndex:1},{value:" 添加对应的 ",paraId:12,tocIndex:1},{value:"child",paraId:12,tocIndex:1},{value:" 节点来声明层次关系的，比如上面的层次关系用 API 需要如下声明：",paraId:12,tocIndex:1},{value:"const spaceFlex = chart.spaceFlex();\n\nconst view = spaceFlex.view();\n\nview.line();\n\nview.point();\n\nspaceFlex.interval();\n",paraId:13,tocIndex:1},{value:"接下来介绍三种节点：",paraId:14,tocIndex:1},{value:"标记节点",paraId:15,tocIndex:1},{value:"视图节点",paraId:15,tocIndex:1},{value:"复合节点",paraId:15,tocIndex:1},{value:"标记节点是该树上的叶子节点，不可继续嵌套，也就是不能再包含 ",paraId:16,tocIndex:2},{value:"children",paraId:16,tocIndex:2},{value:" 属性。标记类似图表的概念，比如一个 Interval 标记可以绘制一个条形图。",paraId:16,tocIndex:2},{value:"({\n  type: 'interval',\n});\n",paraId:17,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval', // 标记节点\n    data: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: {\n      x: 'genre',\n      y: 'sold',\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:18,tocIndex:2},{value:"如果是希望图表中有多个标记，这个时候就需要把它们放入视图节点中，绘制单视图图表。视图节点只能嵌套标记节点。",paraId:19,tocIndex:3},{value:"({\n  type: 'view',\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n",paraId:20,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'view', // 视图节点\n    data: [\n      { year: '1991', value: 3 },\n      { year: '1992', value: 4 },\n      { year: '1993', value: 3.5 },\n      { year: '1994', value: 5 },\n      { year: '1995', value: 4.9 },\n      { year: '1996', value: 6 },\n      { year: '1997', value: 7 },\n      { year: '1998', value: 9 },\n      { year: '1999', value: 13 },\n    ],\n    encode: {\n      x: 'year',\n      y: 'value',\n    },\n    children: [\n      { type: 'line' }, // Line 标记\n      { type: 'point' }, // Point 标记\n    ],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:21,tocIndex:3},{value:"用于在一个图表里面绘制多个视图（多视图图表）。它可以嵌套复合节点，视图节点和标记节点。",paraId:22,tocIndex:4},{value:"({\n  type: 'spaceFlex',\n  children: [\n    { type: 'spaceFlex' }, // 复合节点\n    { type: 'view' }, // 视图节点\n    { type: 'interval' }, // 标记节点\n  ],\n});\n",paraId:23,tocIndex:4},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'spaceFlex',\n    width: 800,\n    height: 400,\n    children: [\n      {\n        type: 'interval',\n        padding: 'auto',\n        data: [\n          { genre: 'Shooter', sold: 350 },\n          { genre: 'Sports', sold: 275 },\n          { genre: 'Other', sold: 150 },\n          { genre: 'Action', sold: 120 },\n          { genre: 'Strategy', sold: 115 },\n        ],\n        encode: { x: 'genre', y: 'sold' },\n      },\n      {\n        type: 'interval',\n        padding: 'auto',\n        data: [\n          { genre: 'Shooter', sold: 350 },\n          { genre: 'Sports', sold: 275 },\n          { genre: 'Other', sold: 150 },\n          { genre: 'Action', sold: 120 },\n          { genre: 'Strategy', sold: 115 },\n        ],\n        encode: { y: 'sold', color: 'genre' },\n        transform: [{ type: 'stackY' }],\n        coordinate: { type: 'theta' },\n        legend: { color: false },\n      },\n    ],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:24,tocIndex:4}]},92002:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(25815);const t=[{value:"G2 中的",paraId:0},{value:"坐标轴（Axis）",paraId:0},{value:" 可以理解为是空间通道（x，y 和 position）对应比例尺的可视化。",paraId:0},{value:"坐标轴可以在 Mark 层级配置：",paraId:1},{value:"({\n  type: 'interval',\n  axis: {\n    x: { labelFormatter: '%0' },\n    y: { tickCount: 5 },\n  },\n});\n",paraId:2},{value:"// API\n// 第一种方式\nchart\n  .interval()\n  .axis('x', { labelFormatter: '%0' })\n  .axis('y', { tickCount: 5 });\n\n// 第二种方式\nchart.interval().axis({\n  x: { labelFormatter: '%0' },\n  y: { tickCount: 5 },\n});\n",paraId:3},{value:"坐标轴也可以在 View 层级配置：",paraId:4},{value:"({\n  type: 'view',\n  axis: {\n    x: { labelFormatter: '%0' },\n    y: { tickCount: 5 },\n  },\n});\n",paraId:5},{value:"// API\n// 第一种方式\nchart.axis('x', { labelFormatter: '%0' }).axis('y', { tickCount: 5 });\n\n// 第二种方式\nchart.axis({\n  x: { labelFormatter: '%0' },\n  y: { tickCount: 5 },\n});\n",paraId:6},{value:"在 G2 中每个标记都有自己的坐标轴。如果标记对应比例尺是同步的，那么坐标轴也会合并。",paraId:7,tocIndex:0},{value:"坐标轴具有传递性。视图上声明的坐标轴会传递给 ",paraId:8,tocIndex:1},{value:"children",paraId:8,tocIndex:1},{value:" 声明的标记，如果该标记有对应通道的坐标轴，就合并；否则不影响。",paraId:8,tocIndex:1},{value:"隐藏每个通道的坐标轴：",paraId:9,tocIndex:2},{value:"({\n  type: 'interval',\n  axis: { y: false }, // 隐藏 y 方向坐标轴\n});\n",paraId:10,tocIndex:2},{value:"隐藏多个坐标轴：",paraId:11,tocIndex:2},{value:"({\n  type: 'interval',\n  axis: false,\n});\n",paraId:12,tocIndex:2}]},53907:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(1285);const t=[{value:"G2 的大部分能力通过 ",paraId:0},{value:"Chart",paraId:0},{value:" 对象暴露给用户，比如绘制一个简单的条形图：",paraId:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:1},{value:"接下来我们就来看看 ",paraId:2},{value:"Chart",paraId:2},{value:" 的核心使用方式。",paraId:2},{value:"每个 G2 的可视化都是通过实例化 ",paraId:3,tocIndex:0},{value:"Chart",paraId:3,tocIndex:0},{value:" 对象创建一个新的",paraId:3,tocIndex:0},{value:"图表实例",paraId:3,tocIndex:0},{value:"：",paraId:3,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  /* 图表选项 */\n});\n",paraId:4,tocIndex:0},{value:"可以通 ",paraId:5,tocIndex:1},{value:"new Chart(options)",paraId:5,tocIndex:1},{value:" 指定一些全局选项：比如挂载的容器，宽度，高度等。所有的选项都是",paraId:5,tocIndex:1},{value:"可选的",paraId:5,tocIndex:1},{value:"。",paraId:5,tocIndex:1},{value:"// 按需指定选项\nconst chart = new Chart({\n  width: 800, // 图表高度\n  height: 400, // 图表宽度\n  container: 'chart', // 挂载容器的 ID\n});\n",paraId:6,tocIndex:1},{value:"图表实例只有挂载了之后才能被渲染到屏幕上，其中有两种挂载的方式。",paraId:7,tocIndex:2},{value:'<div id="chart"></div>\n',paraId:8,tocIndex:2},{value:"第一种，自动挂载。",paraId:9,tocIndex:2},{value:"const chart = new Chart({\n  container: 'chart', // 指定挂载容器 id\n});\n\n// 或者\nconst chart = new Chart({\n  container: document.getElementById('chart'), // 指定挂载容器\n});\n",paraId:10,tocIndex:2},{value:"第二种，手动挂载。",paraId:11,tocIndex:2},{value:"const chart = new Chart();\n\n// 声明可视化\n// ...\n\nconst container = chart.getContainer(); // 获得挂载的容器\ndocument.getElementById('chart').appendChild(container);\n",paraId:12,tocIndex:2},{value:"当然，在能看见图表之前，还需要调用 ",paraId:13,tocIndex:3},{value:"chart.render",paraId:13,tocIndex:3},{value:"。",paraId:13,tocIndex:3},{value:"// 创建图表实例\nconst chart = new Chart({\n  container: 'chart',\n});\n\n// 声明可视化\n// ...\n\n// 渲染\nchart\n  .render()\n  .then(() => {\n    // 渲染成功\n  })\n  .catch((error) => {\n    // 渲染失败\n  });\n",paraId:14,tocIndex:3},{value:"当通过图表实例提供的 API 修改了声明的可视化之后，只用再次调用 ",paraId:15,tocIndex:4},{value:"chart.render",paraId:15,tocIndex:4},{value:" 就可以更新图表了。",paraId:15,tocIndex:4},{value:"// 第一次渲染\nchart.render();\n\n// 更新声明\n// ...\n\n// 更新图表\nchart.render();\n",paraId:16,tocIndex:4},{value:"清空画布和取消事件监听，同时会清空图表配置，常常用于绘制新的图表。",paraId:17,tocIndex:5},{value:"chart.clear();\n",paraId:18,tocIndex:5},{value:"销毁画布和取消事件监听，常常用于销毁组件和页面的时候。",paraId:19,tocIndex:6},{value:"chart.destroy();\n",paraId:20,tocIndex:6}]},41092:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(92536);const t=[{value:"G2 中",paraId:0},{value:"视图复合（View Composition）",paraId:0},{value:" 提供了在一个可视化中绘制多个图表的能力。G2 定义了一个",paraId:0},{value:"视图树（View Graph）",paraId:0},{value:" 去描述",paraId:0},{value:"多视图图表（Multi-View Plot）",paraId:0},{value:"。",paraId:0},{value:"({\n  type: 'spaceLayer',\n  children: [{ type: 'view' }, { type: 'view' }],\n});\n",paraId:1},{value:"// API\nconst layer = chart.spaceLayer();\n\nlayer.view();\n\nlayer.view();\n",paraId:2},{value:"最基础的视图复合方式就是",paraId:3,tocIndex:0},{value:"空间复合（Space Composition）",paraId:3,tocIndex:0},{value:"，只是对空间进行划分。",paraId:3,tocIndex:0},{value:"一个比较常见的复合方式是 ",paraId:4,tocIndex:0},{value:"composition.spaceLayer",paraId:4,tocIndex:0},{value:"：将多个图表重叠在一起。使用场景是这些视图拥有的不同的坐标系，比如下面的条形图和饼图。",paraId:4,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  const layer = chart.spaceLayer();\n\n  // 条形图\n  layer\n    .interval()\n    .data([\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Other', sold: 150 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Strategy', sold: 115 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  // 饼图\n  layer\n    .interval() // 创建一个 interval\n    .attr('paddingLeft', 300) // 设置位置\n    .attr('paddingBottom', 250)\n    .coordinate({ type: 'theta' }) // 指定坐标系\n    .transform({ type: 'stackY' })\n    .data([\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Other', sold: 150 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Strategy', sold: 115 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .legend('color', false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:5,tocIndex:0},{value:"同时也可以使用 ",paraId:6,tocIndex:0},{value:"composition.spaceFlex",paraId:6,tocIndex:0},{value:" 去让视图水平或者竖直排列。",paraId:6,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n  const flex = chart.spaceFlex();\n\n  // 条形图\n  flex\n    .interval()\n    .data([\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Other', sold: 150 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Strategy', sold: 115 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  // 饼图\n  flex\n    .interval() // 创建一个 interval\n    .coordinate({ type: 'theta' }) // 指定坐标系\n    .transform({ type: 'stackY' })\n    .data([\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Other', sold: 150 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Strategy', sold: 115 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .legend('color', false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:7,tocIndex:0},{value:"同时这些复合方式是可以嵌套的，所以很容易通过一个单独的声明去实现一个报表。",paraId:8,tocIndex:0},{value:"分面复合（Facet Composition）",paraId:9,tocIndex:1},{value:" 和空间复合的不同在于：它还会对数据划分，每个视图展现原始数据的一个子集。",paraId:9,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart({\n    height: 260,\n    width: 800,\n    paddingLeft: 40,\n    paddingBottom: 50,\n  });\n\n  const facetRect = chart\n    .facetRect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n    })\n    // 将数据按照 series 字段划分成一个个子集，\n    // 并且是 x 方向排列\n    .encode('x', 'series');\n\n  facetRect\n    .point()\n    .attr('padding', 'auto')\n    .attr('inset', 10)\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .style('stroke', '#000');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:1},{value:"重复复合（Repeat Composition）",paraId:11,tocIndex:2},{value:" 和分面的区别在于：它的每个视图展现的是全量数据，只不过会对编码进行重复，从而绘制出多个视图。",paraId:11,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart({\n    width: 900,\n    height: 900,\n    padding: 'auto',\n    paddingLeft: 55,\n    paddingBottom: 45,\n  });\n\n  const repeatMatrix = chart\n    .repeatMatrix()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n      // 数据处理\n    })\n    // 指定需要重复的编码\n    // 一共会生成 4 * 4 = 16 个视图\n    // 每个视图的 x 和 y 编码是下面字段的叉乘\n    .encode('position', [\n      'culmen_length_mm',\n      'culmen_depth_mm',\n      'flipper_length_mm',\n      'body_mass_g',\n    ]);\n\n  repeatMatrix.point().attr('padding', 'auto').encode('color', 'species');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:2},{value:"时间复合",paraId:13,tocIndex:3},{value:"在空间上管理视图，用于做动画。",paraId:13,tocIndex:3},{value:"(async () => {\n  const data = await fetch(\n    'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  ).then((res) => res.json());\n\n  const chart = new G2.Chart();\n\n  // 参考 css animation 的描述\n  const keyframe = chart\n    .timingKeyframe() // 创建容器\n    .attr('iterationCount', 2) // 迭代次数\n    .attr('direction', 'alternate') // 方向\n    .attr('duration', 1000); // 持续时间\n\n  keyframe\n    .interval()\n    .transform({ type: 'groupX', y: 'mean' })\n    .data(data)\n    .encode('x', 'gender')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('key', 'gender'); // 指定 key\n\n  keyframe\n    .point()\n    .data(data)\n    .encode('x', 'height')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('shape', 'point')\n    .encode('groupKey', 'gender'); // 指定 groupKey\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:3}]},23818:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(91078);const t=[{value:"G2 中",paraId:0},{value:"坐标系（Coordinate）",paraId:0},{value:" 会执行一系列点转换。在 G2 中，标记的位置通道 x 和 y 会经过比例尺的映射到 ",paraId:0},{value:"[0, 1]",paraId:0},{value:" 的范围，这之后会使用坐标系将点转换为画布坐标，从而改变标记的空间展示形式。",paraId:0},{value:"坐标系可以设置在 View 层级：",paraId:1},{value:"({\n  type: 'view',\n  coordinate: { type: 'polar' },\n});\n",paraId:2},{value:"// API\nchart.coordinate({ type: 'polar' });\n",paraId:3},{value:"也可以设置在 Mark 层级：",paraId:4},{value:"({\n  type: 'interval',\n  coordinate: { type: 'polar' },\n});\n",paraId:5},{value:"// API\nchart.interval().coordinate({ type: 'polar' });\n",paraId:6},{value:"每一个视图只能拥有一个坐标系。坐标系除了本身的属性之外，还包含一系列",paraId:7,tocIndex:0},{value:"坐标系变换（Coordinate Transform）",paraId:7,tocIndex:0},{value:"。",paraId:7,tocIndex:0},{value:"({\n  type: 'polar', // 类型\n  innerRadius: 0.6, // 本身的属性\n  outerRadius: 0.8,\n  transform: [{ type: 'transpose' }], // 坐标系变换\n});\n",paraId:8,tocIndex:0},{value:"标记层级的坐标系拥有冒泡性。标记层级的坐标系会和视图的坐标系进行合并，并且第一个标记的坐标系优先级最高。",paraId:9,tocIndex:1},{value:"chart.coordinate({ type: 'theta' });\nchart.line().coordinate({ type: 'polar' });\nchart.area().coordinate({ type: 'radial' });\n",paraId:10,tocIndex:1},{value:"和下面的情况等价：",paraId:11,tocIndex:1},{value:"chart.coordinate({ type: 'polar' });\nchart.line();\nchart.area():\n",paraId:12,tocIndex:1},{value:"这个特性有利于封装和坐标系相关的复合标记，比如饼图：",paraId:13,tocIndex:1},{value:"(() => {\n  function Pie({ encode = {}, ...rest } = {}) {\n    const { value, ...restEncode } = encode;\n    return {\n      ...rest,\n      type: 'interval',\n      coordinate: { type: 'theta' }, // 封装坐标系\n      transform: [{ type: 'stackY' }],\n      encode: {\n        ...restEncode,\n        y: value,\n      },\n    };\n  }\n\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: Pie, // 使用该复合 Mark\n    data: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: { value: 'sold', color: 'genre' },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:1},{value:"默认的坐标系是笛卡尔坐标系，除此之外，还有一类坐标系是把图表转换到极坐标系下，用于绘制一系列“圆”形的图，这类坐标系被称为",paraId:15,tocIndex:2},{value:"径向坐标系（Radial Coordinate）",paraId:15,tocIndex:2},{value:"。",paraId:15,tocIndex:2},{value:"比如可以使用 interval 标记和 polar 坐标系变换绘制玫瑰图。",paraId:16,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'polar' })\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .axis('y', false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:17,tocIndex:3},{value:"也可以使用 interval 标记和 theta 坐标系来绘制饼图。",paraId:18,tocIndex:4},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'theta' })\n    .transform({ type: 'stackY' })\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:19,tocIndex:4},{value:"还可以使用 interval 标记和 radial 坐标系来绘制玉珏图。",paraId:20,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'radial', endAngle: Math.PI })\n    .data([\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Other', sold: 150 },\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Shooter', sold: 350 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .axis('y', false)\n    .legend('color', false)\n    .axis('x', { title: null });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:21,tocIndex:5},{value:"除了前面的比较基础的坐标系变换之外，还有一些稍微复杂一点的坐标系变换，比如平行坐标系 parallel。",paraId:22,tocIndex:6},{value:"(() => {\n  const axis = {\n    zIndex: 1,\n    titlePosition: 'right',\n    line: true,\n    labelStroke: '#fff',\n    labelStrokeWidth: 5,\n    labelFontSize: 10,\n    labelStrokeLineJoin: 'round',\n    titleStroke: '#fff',\n    titleFontSize: 10,\n    titleStrokeWidth: 5,\n    titleStrokeLineJoin: 'round',\n    titleTransform: 'translate(-50%, 0) rotate(-90)',\n    lineStroke: 'black',\n    tickStroke: 'black',\n    lineStrokeWidth: 1,\n  };\n\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n    })\n    .coordinate({ type: 'parallel' }) // 指定平行坐标系变换\n    // 指定关心的数据维度\n    // 每一个数据维度都对应一根轴\n    .encode('position', [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ])\n    .encode('color', 'weight (lb)')\n    .style('strokeWidth', 1.5)\n    .style('strokeOpacity', 0.4)\n    .scale('color', {\n      type: 'sequential',\n      palette: 'brBG',\n      offset: (t) => 1 - t,\n    })\n    .legend({\n      color: { length: 400 },\n    })\n    .axis('position', axis)\n    .axis('position1', axis)\n    .axis('position2', axis)\n    .axis('position3', axis)\n    .axis('position4', axis)\n    .axis('position5', axis)\n    .axis('position6', axis)\n    .axis('position7', axis)\n    .interaction('tooltip', { series: false });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:23,tocIndex:6},{value:"上面的坐标系都可以和坐标系变换结合使用。",paraId:24,tocIndex:7},{value:"比较常用的一种变换是转置变换 transpose，主要用来改变图表的方向。比如绘制水平的条形图。",paraId:25,tocIndex:8},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ transform: [{ type: 'transpose' }] }) // 指定 transpose\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:26,tocIndex:8},{value:"还有一种鱼眼坐标系变换，用于设置图表焦点，下面是使用方式。",paraId:27,tocIndex:9},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n    })\n    .encode('x', 'GDP')\n    .encode('y', 'LifeExpectancy')\n    .encode('size', 'Population')\n    .encode('color', 'continent')\n    .encode('shape', 'point')\n    .scale('size', { type: 'log', range: [4, 20] })\n    .axis('x', { labelFormatter: '~s' })\n    .style('fillOpacity', 0.3)\n    .style('lineWidth', 1)\n    .legend(false)\n    .interaction('fisheye');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:28,tocIndex:9},{value:"目前我们仅支持 ",paraId:29,tocIndex:10},{value:"cartesian3D",paraId:29,tocIndex:10},{value:" 坐标系：",paraId:29,tocIndex:10},{value:"chart.coordinate({ type: 'cartesian3D' });\n",paraId:30,tocIndex:10}]},79473:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(74623);const t=[{value:"G2 中的",paraId:0},{value:"数据（Data）",paraId:0},{value:" 主要用于指定需要可视化的数据和数据转换（预处理）。数据可以指定在 View 层级：",paraId:0},{value:"({\n  type: 'view',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:1},{value:"// API 形式\nchart.data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n",paraId:2},{value:"也可以指定在 Mark 层级：",paraId:3},{value:"({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:4},{value:"// API 形式\nchart.interval().data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n",paraId:5},{value:"一个完整的数据声明由两部分构成：",paraId:6,tocIndex:0},{value:"连接器（Connector）",paraId:6,tocIndex:0},{value:" 和",paraId:6,tocIndex:0},{value:"数据转换（Data Transform）",paraId:6,tocIndex:0},{value:" 。其中连接器是获得数据的方式，通过 ",paraId:6,tocIndex:0},{value:"data.type",paraId:6,tocIndex:0},{value:" 指定，数据转换是预处理函数，通过 ",paraId:6,tocIndex:0},{value:"data.transform",paraId:6,tocIndex:0},{value:" 指定。",paraId:6,tocIndex:0},{value:"({\n  data: {\n    type: 'fetch', // 指定连接器类型\n    // 指定连接器的值\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    transform: [\n      // 指定转换，可以多个\n      { type: 'filter', callback: (d) => d.sex === 'gender' },\n    ],\n  },\n});\n",paraId:7,tocIndex:0},{value:"如果数据满足以下三个条件：",paraId:8,tocIndex:0},{value:"内联数据",paraId:9,tocIndex:0},{value:"是数组",paraId:9,tocIndex:0},{value:"没有预处理函数",paraId:9,tocIndex:0},{value:"那么可以直接指定为 ",paraId:10,tocIndex:0},{value:"data",paraId:10,tocIndex:0},{value:"：",paraId:10,tocIndex:0},{value:"({\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:11,tocIndex:0},{value:"每一个标记都有自己的数据，这意味着我们可以在一个视图中可视化多份数据，比如下面的区间标注图：",paraId:12,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rangeX()\n    .data([\n      { year: [new Date('1933'), new Date('1945')], event: 'Nazi Rule' },\n      {\n        year: [new Date('1948'), new Date('1989')],\n        event: 'GDR (East Germany)',\n      },\n    ])\n    .encode('x', 'year')\n    .encode('color', 'event')\n    .scale('color', { independent: true, range: ['#FAAD14', '#30BF78'] })\n    .style('fillOpacity', 0.75)\n    .tooltip(false);\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/year-population.json',\n    })\n    .encode('x', (d) => new Date(d.year))\n    .encode('y', 'population')\n    .encode('color', '#333');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:13,tocIndex:1},{value:"视图也可以和数据绑定，视图绑定的数据具有传递性：会传递给 ",paraId:14,tocIndex:2},{value:"view.children",paraId:14,tocIndex:2},{value:" 里面的标记，如果该标记没有数据，那么就设置其数据，否则没有任何影响。这意味着对于共享数据的标记，可以把数据和视图绑定。",paraId:14,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.data([\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ]);\n\n  chart.line().encode('x', 'year').encode('y', 'value');\n\n  chart.point().encode('x', 'year').encode('y', 'value');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:15,tocIndex:2},{value:"因为数据是和标记绑定的，所以数据更新会稍微复杂一点。以下面的案例作为例子：",paraId:16,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst interval = chart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"更新上面例子 interval 的数据有以下几种方法：",paraId:18,tocIndex:3},{value:"第一种：最基础的方式。",paraId:19,tocIndex:3},{value:"// 更新 interval 绑定的数据\ninterval.data(newData);\n\n// 通过 chart 更新图表的渲染\nchart.render();\n",paraId:20,tocIndex:3},{value:"第二种：上面的方式的语法糖。",paraId:21,tocIndex:3},{value:"// 更新 interval 数据并且渲染图表\ninterval.changeData(newData);\n",paraId:22,tocIndex:3},{value:"第三种：通过查询 API 获得 interval 对象，然后更新数据。",paraId:23,tocIndex:3},{value:"chart.getNodesByType('rect')[0].changeData(data);\n",paraId:24,tocIndex:3},{value:"如何使用第三方库绘制统计回归线？",paraId:25,tocIndex:4},{value:"借助自定义数据转换能力，我们可以使用外部的数据处理相关的库。下面的例子中，我们使用第三方库 ",paraId:26,tocIndex:4},{value:"d3-regression",paraId:26,tocIndex:4},{value:" 来生成线性统计回归线：",paraId:26,tocIndex:4},{value:"import { regressionLinear } from 'd3-regression';\n\nnode.data({\n  // 利用 D3 的 regressionLinear 对数据进行线性回归处理\n  transform: [\n    {\n      type: 'custom',\n      callback: regressionLinear(),\n    },\n  ],\n});\n",paraId:27,tocIndex:4},{value:"更多统计回归线案例见 ",paraId:28,tocIndex:4},{value:"数据分析-regression",paraId:29,tocIndex:4},{value:"。",paraId:28,tocIndex:4}]},2645:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(52516);const t=[{value:"G2 中",paraId:0},{value:"编码（Encode）",paraId:0},{value:" 主要用于指定视觉元素属性和数据之间的关系，可以在 Mark 层级指定编码：",paraId:0},{value:"({\n  type: 'interval',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:1},{value:"// API\n// 第一种\nchart.interval().encode('x', 'name').encode('y', 'value');\n\n// 第二种\nchart.interval().encode({ x: 'name', y: 'value' });\n",paraId:2},{value:"也可以在 View 层级指定编码：",paraId:3},{value:"({\n  type: 'view',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:4},{value:"// API\n// 第一种\nchart.encode('x', 'name').encode('y', 'value');\n\n// 第二种\nchart.encode({ x: 'name', y: 'value' });\n",paraId:5},{value:"为了控制标记的样式，我们往往会把一列数据和它的视觉属性绑定。比如在下面的例子中，我们把数据中 weight 一列数据和 x 属性绑定，height 列数据数据和 y 属性绑定，gender 列数据和 color 属性绑定。",paraId:6,tocIndex:0},{value:"table({\n  url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n});\n",paraId:7,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:8,tocIndex:0},{value:"这种绑定的过程被称为",paraId:9,tocIndex:0},{value:"编码（Encode）",paraId:9,tocIndex:0},{value:"，我们常常说图形的某个视觉属性编码了一列数据，这种数据驱动的属性被称为",paraId:9,tocIndex:0},{value:"通道",paraId:9,tocIndex:0},{value:"。比如上面的 point mark 的 x，y 和 color 通道都分别编码了对应列的数据。",paraId:9,tocIndex:0},{value:"一个完整的编码是由 ",paraId:10,tocIndex:0},{value:"encode.type",paraId:10,tocIndex:0},{value:" 和 ",paraId:10,tocIndex:0},{value:"encode.value",paraId:10,tocIndex:0},{value:" 组成的：",paraId:10,tocIndex:0},{value:"({\n  type: 'point',\n  encode: {\n    x: { type: 'field', value: 'weight' },\n    y: { type: 'field', value: 'height' },\n    color: { type: 'field', value: 'gender' },\n  },\n});\n",paraId:11,tocIndex:0},{value:"当时在大部分情况下可以直接指定值，下面是编码一些内置的分类：",paraId:12,tocIndex:0},{value:"指定通道和数据的某一列绑定：",paraId:13,tocIndex:1},{value:"({\n  type: 'interval',\n  encode: { x: { type: 'field', value: 'name' } },\n});\n",paraId:14,tocIndex:1},{value:"// 语法糖\n({\n  type: 'interval',\n  encode: { x: 'name' },\n});\n",paraId:15,tocIndex:1},{value:"指定通道和新生成的一些绑定：",paraId:16,tocIndex:2},{value:"({\n  type: 'interval',\n  encode: {\n    color: {\n      type: 'transform',\n      value: (d) => (d.value > 100 ? 'high' : 'low'),\n    },\n  },\n});\n",paraId:17,tocIndex:2},{value:"// 语法糖\n({\n  type: 'interval',\n  encode: {\n    color: (d) => (d.value > 100 ? 'high' : 'low'),\n  },\n});\n",paraId:18,tocIndex:2},{value:"指定通道值为常量，常常用于指定颜色通道。",paraId:19,tocIndex:3},{value:"({\n  type: 'interval',\n  encode: { color: { type: 'constant', value: 'steelblue' } },\n});\n",paraId:20,tocIndex:3},{value:"// 语法糖\n({\n  type: 'interval',\n  encode: { color: 'steelblue' },\n});\n",paraId:21,tocIndex:3},{value:"指定某个通道的值为一个数组。",paraId:22,tocIndex:4},{value:"({\n  type: 'line',\n  encode: {\n    x: { type: 'column', value: [0, 1, , 2, 3] },\n  },\n});\n",paraId:23,tocIndex:4},{value:"对于一些大数据的场景，使用数组列会更适合，下面是一个简单的例子。",paraId:24,tocIndex:4},{value:"(() => {\n  const I = [0, 1, 2, 3, 4];\n  const X = I.map((i) => ((i - 2) * Math.PI) / 2);\n  const Y = X.map((x) => Math.sin(x));\n\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data(I)\n    .encode('x', { type: 'column', value: X })\n    .encode('y', { type: 'column', value: Y })\n    .encode('shape', 'smooth');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:25,tocIndex:4},{value:"当然，对于空间通道来说：x 和 y 通道，往往不只需要一列数据，比如一个瀑布图，这个时候可以通过数组给一个通道指定多个列。",paraId:26,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n      { month: 'Feb.', profit: 772096, start: 387264, end: 1159360 },\n      { month: 'Mar.', profit: 638075, start: 1159360, end: 1797435 },\n      { month: 'Apr.', profit: -211386, start: 1797435, end: 1586049 },\n      { month: 'May', profit: -138135, start: 1586049, end: 1447914 },\n      { month: 'Jun', profit: -267238, start: 1447914, end: 1180676 },\n      { month: 'Jul.', profit: 431406, start: 1180676, end: 1612082 },\n      { month: 'Aug.', profit: 363018, start: 1612082, end: 1975100 },\n      { month: 'Sep.', profit: -224638, start: 1975100, end: 1750462 },\n      { month: 'Oct.', profit: -299867, start: 1750462, end: 1450595 },\n      { month: 'Nov.', profit: 607365, start: 1450595, end: 2057960 },\n      { month: 'Dec.', profit: 1106986, start: 2057960, end: 3164946 },\n      { month: 'Total', start: 0, end: 3164946 },\n    ])\n    .encode('x', 'month')\n    .encode('y', ['end', 'start']) // 指定两列数据\n    .encode('color', (d) =>\n      d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n    )\n    .axis('y', { labelFormatter: '~s' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:27,tocIndex:5},{value:"同时也可以通过 ",paraId:28,tocIndex:5},{value:"${channel}${index}",paraId:28,tocIndex:5},{value:" 的形式去分别指定：",paraId:28,tocIndex:5},{value:"// 和上面的形式等价\nchart.encode('y', 'end').encode('y1', 'start');\n",paraId:29,tocIndex:5},{value:"不同的标记有不同的通道，但是也有一些通用的通道，一些常见的和绘制相关的通用通道如下：",paraId:30,tocIndex:6},{value:"x",paraId:31,tocIndex:6},{value:" - x 位置",paraId:31,tocIndex:6},{value:"y",paraId:31,tocIndex:6},{value:" - y 位置",paraId:31,tocIndex:6},{value:"z",paraId:31,tocIndex:6},{value:" - z 位置",paraId:31,tocIndex:6},{value:"color",paraId:31,tocIndex:6},{value:" - 颜色，填充色或者边框色，由形状决定",paraId:31,tocIndex:6},{value:"opacity",paraId:31,tocIndex:6},{value:" - 透明度，填充透明度或者边框透明度，由样式决定",paraId:31,tocIndex:6},{value:"shape",paraId:31,tocIndex:6},{value:" - 形状",paraId:31,tocIndex:6},{value:"size",paraId:31,tocIndex:6},{value:" - 大小，不同的标记有不同的函数",paraId:31,tocIndex:6},{value:"series",paraId:31,tocIndex:6},{value:" - 系列，用于分成系列",paraId:31,tocIndex:6},{value:"key",paraId:31,tocIndex:6},{value:" - 唯一标记，用于数据更新",paraId:31,tocIndex:6},{value:"通道编码具有传递性，视图的编码会传递给 ",paraId:32,tocIndex:7},{value:"children",paraId:32,tocIndex:7},{value:" 指定的标记，如果该标记没有对应通道的编码，那么就设置否则不做任何事情。比如绘制一个点线图：",paraId:32,tocIndex:7},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .data([\n      { year: '1991', value: 3 },\n      { year: '1992', value: 4 },\n      { year: '1993', value: 3.5 },\n      { year: '1994', value: 5 },\n      { year: '1995', value: 4.9 },\n      { year: '1996', value: 6 },\n      { year: '1997', value: 7 },\n      { year: '1998', value: 9 },\n      { year: '1999', value: 13 },\n    ])\n    .encode('x', 'year') // 视图层级的编码\n    .encode('y', 'value');\n\n  chart.line();\n\n  chart.point();\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:33,tocIndex:7}]},45963:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(40632);const t=[{value:"G2 中",paraId:0},{value:"交互（Interaction）",paraId:0},{value:" 提供了按需探索数据的能力。",paraId:0},{value:"交互可以设置在视图层级：",paraId:1},{value:"({\n  type: 'view',\n  interaction: {\n    tooltip: {},\n    brushHighlight: {},\n  },\n});\n",paraId:2},{value:"// API\n// 第一种方式\nchart.interaction('tooltip', {}).interaction('brushHighlight', {});\n\n// 第二种方式\nchart.interaction({\n  tooltip: {},\n  brushHighlight: {},\n});\n",paraId:3},{value:"交互也可以设置在标记层级：",paraId:4},{value:"({\n  type: 'interval',\n  interaction: {\n    tooltip: {},\n    brushHighlight: {},\n  },\n});\n",paraId:5},{value:"// API\n// 第一种方式\nchart.interval().interaction('tooltip', {}).interaction('brushHighlight', {});\n\n// 第二种方式\nchart.interval().interaction({\n  tooltip: {},\n  brushHighlight: {},\n});\n",paraId:6},{value:"G2 的交互都是对每一个视图生效，如果希望关掉交互，可以如下：",paraId:7,tocIndex:0},{value:"({\n  type: 'view',\n  interaction: {\n    tooltip: false,\n    brushHighlight: false,\n  },\n});\n",paraId:8,tocIndex:0},{value:"交互拥有冒泡性，视图交互会被它的标记所设置交互覆盖，并且最后一个标记所对应的坐标系优先级最高。",paraId:9,tocIndex:1},{value:"chart.interaction('elementHighlight', { link: true, background: true });\nchart.line().interaction('elementHighlight', { link: false });\nchart.area().interaction('elementHighlight', { background: false });\n",paraId:10,tocIndex:1},{value:"和下面的情况等价：",paraId:11,tocIndex:1},{value:"chart.interaction('elementHighlight', { link: false, background: false });\nchart.line();\nchart.area():\n",paraId:12,tocIndex:1},{value:"在 G2 中可以通过 ",paraId:13,tocIndex:2},{value:"mark.state",paraId:13,tocIndex:2},{value:" 去设置标记的交互状态，比如如下设置 select 和 unselect 的状态，当使用 elementSelect 的时候会消费这两个状态。",paraId:13,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .transform({ type: 'sortX', by: 'y', reverse: true })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .axis('y', { labelFormatter: '.0%' })\n    .state({\n      selected: { fill: '#f4bb51' }, // 设置选中状态\n      unselected: { opacity: 0.6 }, // 设置非选中状态\n    })\n    .interaction('elementSelect', true);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:2},{value:"除了 selected 和 unselected 之外，还有如下的内置状态类型：",paraId:15,tocIndex:2},{value:"active",paraId:16,tocIndex:2},{value:"inactive",paraId:16,tocIndex:2},{value:"如果内置的交互不能满足你的需求，也可以通过自定义交互的方式去实现一些交互。下面自定义一个高亮交互。",paraId:17,tocIndex:3},{value:'(() => {\n  const { Chart, PLOT_CLASS_NAME, ELEMENT_CLASS_NAME, register } = G2;\n\n  register(\'interaction.customElementHighlight\', () => {\n    return (context, _, emitter) => {\n      const { container } = context;\n      const plotArea = container.querySelector(`.${PLOT_CLASS_NAME}`);\n      const elements = plotArea.querySelectorAll(`.${ELEMENT_CLASS_NAME}`);\n      const elementSet = new Set(elements);\n\n      const pointerover = (e) => {\n        const { target: element } = e;\n        if (!elementSet.has(element)) return;\n        element.style.stroke = "red";\n        element.style.lineWidth = 2;\n      };\n\n      const pointerout = (e) => {\n        const { target: element } = e;\n        if (!elementSet.has(element)) return;\n        element.style.stroke = null;\n      };\n\n      plotArea.addEventListener(\'pointerover\', pointerover);\n      plotArea.addEventListener(\'pointerout\', pointerout);\n      return () => {\n        plotArea.removeEventListener(\'pointerover\', pointerover);\n        plotArea.removeEventListener(\'pointerout\', pointerout);\n      };\n    };\n  })\n\n  const chart = new Chart();\n\n  chart\n    .interval()\n    .data([\n      { name: "London", 月份: "Jan.", 月均降雨量: 18.9 },\n      { name: "London", 月份: "Feb.", 月均降雨量: 28.8 },\n      { name: "London", 月份: "Mar.", 月均降雨量: 39.3 },\n      { name: "London", 月份: "Apr.", 月均降雨量: 81.4 },\n      { name: "London", 月份: "May", 月均降雨量: 47 },\n      { name: "London", 月份: "Jun.", 月均降雨量: 20.3 },\n      { name: "London", 月份: "Jul.", 月均降雨量: 24 },\n      { name: "London", 月份: "Aug.", 月均降雨量: 35.6 },\n      { name: "Berlin", 月份: "Jan.", 月均降雨量: 12.4 },\n      { name: "Berlin", 月份: "Feb.", 月均降雨量: 23.2 },\n      { name: "Berlin", 月份: "Mar.", 月均降雨量: 34.5 },\n      { name: "Berlin", 月份: "Apr.", 月均降雨量: 99.7 },\n      { name: "Berlin", 月份: "May", 月均降雨量: 52.6 },\n      { name: "Berlin", 月份: "Jun.", 月均降雨量: 35.5 },\n      { name: "Berlin", 月份: "Jul.", 月均降雨量: 37.4 },\n      { name: "Berlin", 月份: "Aug.", 月均降雨量: 42.4 },\n    ])\n    .transform({ type: \'dodgeX\' })\n    .encode(\'x\', \'月份\')\n    .encode(\'y\', \'月均降雨量\')\n    .encode(\'color\', \'name\')\n    .interaction(\'customElementHighlight\', true);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n',paraId:18,tocIndex:3},{value:"交互语法还在设计中...",paraId:19,tocIndex:4}]},81073:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(47860);const t=[{value:"G2 中",paraId:0},{value:"数据标签（Label）",paraId:0},{value:" 是给图表添加标注的手段之一。可以给标记添加多个标签：",paraId:0},{value:"({\n  type: 'interval',\n  labels: [\n    {\n      text: 'genre', // 指定绑定的字段\n      dy: -15, // 指定样式\n    },\n    {\n      text: 'sold', // 指定绑定的字段\n      fill: '#fff', // 指定样式\n      dy: 5,\n    },\n  ],\n});\n",paraId:1},{value:"// API 方式\n// 第一种方式\nchart\n  .interval()\n  .label({\n    text: 'genre', // 指定绑定的字段\n    dy: -15, // 指定样式\n  })\n  .label({\n    text: 'sold', // 指定绑定的字段\n    fill: '#fff', // 指定样式\n    dy: 5,\n  });\n\n// 第二种方式\nchart.interval().label([\n  {\n    text: 'genre', // 指定绑定的字段\n    dy: -15, // 指定样式\n  },\n  {\n    text: 'sold', // 指定绑定的字段\n    fill: '#fff', // 指定样式\n    dy: 5,\n  },\n]);\n",paraId:2},{value:"在 View 层级可以通过 ",paraId:3},{value:"labelTransform",paraId:3},{value:" 声明标签转化：",paraId:3},{value:"({\n  type: 'view',\n  labelTransform: [{ type: 'overlapHide' }, { type: 'contrastReverse' }],\n});\n",paraId:4},{value:"// API 方式\n// 第一种方式\nchart\n  .labelTransform({ type: 'overlapHide' })\n  .labelTransform({ type: 'contrastReverse' });\n\n// 第二种方式\nchart.labelTransform([{ type: 'overlapHide' }, { type: 'contrastReverse' }]);\n",paraId:5},{value:"每一个标记都可以有多个标签，一个标签的配置大概如下：",paraId:6,tocIndex:0},{value:"({\n  type: 'interval',\n  labels: [\n    {\n      text: 'name', // 绑定的字段或者一个常量字符串\n      dy: -2, // @antv/g 支持的样式\n      fill: 'red', // @antv/g 支持的样式\n      selector: 'last', // 选择器\n      transform: [], // 标签转换\n    },\n  ],\n});\n",paraId:7,tocIndex:0},{value:"下面是一个简单的例子：",paraId:8,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    // 声明第一个 label\n    .label({\n      text: 'genre', // 指定绑定的字段\n      style: {\n        dy: -15, // 指定样式\n      },\n    })\n    // 声明第二个 label\n    .label({\n      text: 'sold', // 指定绑定的字段\n      style: {\n        fill: '#fff', // 指定样式\n        dy: 5,\n      },\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:9,tocIndex:0},{value:"对于一个图形对应多个数据项的标记来说，我们可以通过 ",paraId:10,tocIndex:1},{value:"selector",paraId:10,tocIndex:1},{value:" 去选择需要保留的标记。目前支持的值如下：",paraId:10,tocIndex:1},{value:"first",paraId:11,tocIndex:1},{value:" - 第一个",paraId:11,tocIndex:1},{value:"last",paraId:11,tocIndex:1},{value:" - 最后一个",paraId:11,tocIndex:1},{value:"function",paraId:11,tocIndex:1},{value:" - 自定义选择器",paraId:11,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/indices.json',\n    })\n    .transform({ type: 'normalizeY', basis: 'first', groupBy: 'color' })\n    .encode('x', (d) => new Date(d.Date))\n    .encode('y', 'Close')\n    .encode('color', 'Symbol')\n    .axis('y', { title: '↑ Change in price (%)' })\n    .label({\n      text: 'Symbol',\n      selector: 'last', // 选择最后一个\n      style: {\n        fontSize: 10,\n      },\n    });\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:1},{value:"当标签的展示不符合预期的时候，比如重叠、颜色不明显，我们可以使用",paraId:13,tocIndex:2},{value:"标签转换（Label Transform）",paraId:13,tocIndex:2},{value:" 来优化标签的展示。",paraId:13,tocIndex:2},{value:"可以发现在下面的例子中，2004 等时间对应的标签已经重合了。",paraId:14,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n    })\n    .transform({ type: 'groupX', y: 'mean' })\n    .encode('x', (d) => new Date(d.date).getFullYear())\n    .encode('y', 'price')\n    .encode('color', 'symbol')\n    .label({\n      text: 'price',\n      fontSize: 10,\n    })\n    .tooltip({ channel: 'y', valueFormatter: '.1f' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:15,tocIndex:2},{value:"这个时候我们就可以给对应的标签设置标签转换：overlapDodgeY，用于防止标签的 y 方向重叠。",paraId:16,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n    })\n    .transform({ type: 'groupX', y: 'mean' })\n    .encode('x', (d) => new Date(d.date).getFullYear())\n    .encode('y', 'price')\n    .encode('color', 'symbol')\n    .label({\n      text: 'price',\n      transform: [{ type: 'overlapDodgeY' }], // 指定 labelTransform\n      fontSize: 10,\n    })\n    .tooltip({ channel: 'y', valueFormatter: '.1f' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:17,tocIndex:2},{value:"标签转换也能声明到视图层级，对整个视图的标签做处理。",paraId:18,tocIndex:3},{value:"({\n  type: 'view',\n  labelTransform: [],\n});\n",paraId:19,tocIndex:3}]},51835:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(11444);const t=[{value:"G2 中",paraId:0},{value:"布局（Layout）",paraId:0},{value:" 用于指定一些有特定布局函数标记的布局方法的参数，比如 Snakey, WordCloud, ForceGraph 等。",paraId:0},{value:"({\n  type: 'sankey',\n  layout: {\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  },\n});\n",paraId:1},{value:"// API\nchart.sankey().layout({ nodeAlign: 'center', nodePadding: 0.03 });\n",paraId:2}]},31473:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26641);const t=[{value:"G2 中",paraId:0},{value:"图例（Legend）",paraId:0},{value:" 可以理解为是非空间通道（color，opacity，size，shape）对应比例尺的可视化。",paraId:0},{value:"图例可以在 Mark 层级配置：",paraId:1},{value:"({\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:2},{value:"// API\n// 第一种方式\nchart.interval().legend('color', {}).legend('size', {});\n\n// 第二种方式\nchart.interval().legend({\n  color: {},\n  size: {},\n});\n",paraId:3},{value:"图例也可以在 View 层级配置：",paraId:4},{value:"({\n  type: 'view',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:5},{value:"在 G2 中，每个标记都有自己的图例。如果标记对应的比例尺是同步的，那么图例也会合并。",paraId:6,tocIndex:0},{value:"图例具有传递性。视图上声明的图例会传递给 ",paraId:7,tocIndex:1},{value:"children",paraId:7,tocIndex:1},{value:" 声明的标记，如果该标记有对应通道的图例，就合并；否则不影响。",paraId:7,tocIndex:1},{value:"隐藏每个通道的图例：",paraId:8,tocIndex:2},{value:"({\n  type: 'interval',\n  legend: { color: false }, // 隐藏 color 通道的图例\n});\n",paraId:9,tocIndex:2},{value:"隐藏多个图例：",paraId:10,tocIndex:2},{value:"({\n  type: 'interval',\n  legend: false,\n});\n",paraId:11,tocIndex:2}]},59951:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(62090);const t=[{value:"在 G2 中",paraId:0},{value:"没有图表的概念",paraId:0},{value:"，而是把标记（Mark）作为基本的视觉组成单元，任何一个图表都是多个标记组合而成的。和传统的绘制系统不同，标记提供了绘制抽象数据的能力。",paraId:0},{value:"标记可以作为顶层的类型如下声明：",paraId:1},{value:"({\n  type: 'interval',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:2},{value:"也可以放在 View 里面添加多个标记到视图中：",paraId:3},{value:"({\n  type: 'view',\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n",paraId:4},{value:"API 使用方式如下：",paraId:5},{value:"const chart = new Chart();\n\nchart.interval();\n",paraId:6},{value:"// 多个标记\nconst chart = new Chart();\n\nchart.line();\n\nchart.point();\n",paraId:7},{value:"标记是视图树中叶子节点，也是 G2 中的“一等公民”：G2 中最重要的概念，一个标记由如下核心概念构成：",paraId:8,tocIndex:0},{value:"data",paraId:9,tocIndex:0},{value:" - 可视化的数据",paraId:10,tocIndex:0},{value:"encode",paraId:11,tocIndex:0},{value:" - 编码信息",paraId:10,tocIndex:0},{value:"scale",paraId:12,tocIndex:0},{value:" - 映射规则",paraId:10,tocIndex:0},{value:"transform",paraId:13,tocIndex:0},{value:" - 转化通道值",paraId:10,tocIndex:0},{value:"layout",paraId:14,tocIndex:0},{value:" - 布局算法配置",paraId:10,tocIndex:0},{value:"coordinate",paraId:15,tocIndex:0},{value:" - 坐标系变换",paraId:10,tocIndex:0},{value:"style",paraId:16,tocIndex:0},{value:" - 视觉样式",paraId:10,tocIndex:0},{value:"viewStyle",paraId:17,tocIndex:0},{value:" - 视图的视觉样式",paraId:10,tocIndex:0},{value:"animate",paraId:18,tocIndex:0},{value:" - 动画属性",paraId:10,tocIndex:0},{value:"state",paraId:19,tocIndex:0},{value:" - 状态样式",paraId:10,tocIndex:0},{value:"label",paraId:20,tocIndex:0},{value:" - 数据标签",paraId:10,tocIndex:0},{value:"title",paraId:21,tocIndex:0},{value:" - 图表标题",paraId:10,tocIndex:0},{value:"axis",paraId:22,tocIndex:0},{value:" - 坐标轴",paraId:10,tocIndex:0},{value:"legend",paraId:23,tocIndex:0},{value:" - 图例",paraId:10,tocIndex:0},{value:"tooltip",paraId:24,tocIndex:0},{value:" - 提示信息",paraId:10,tocIndex:0},{value:"scrollbar",paraId:25,tocIndex:0},{value:" - 滚动条",paraId:10,tocIndex:0},{value:"slider",paraId:26,tocIndex:0},{value:" - 拖拽轴",paraId:10,tocIndex:0},{value:"interaction",paraId:27,tocIndex:0},{value:" - 交互",paraId:10,tocIndex:0},{value:"theme",paraId:28,tocIndex:0},{value:" - 主题",paraId:10,tocIndex:0},{value:"({\n  type: 'mark',\n  data: [],\n  encode: {},\n  scale: {},\n  transform: [],\n  layout: {},\n  coordinate: {},\n  style: {},\n  viewStyle: {},\n  animate: {},\n  state: {},\n  label: {},\n  title: {},\n  axis: {},\n  legend: {},\n  tooltip: {},\n  scrollbar: {},\n  slider: {},\n  interaction: {},\n  theme: {},\n});\n",paraId:29,tocIndex:0},{value:"标记是一个模版，会生成一系列",paraId:30,tocIndex:1},{value:"数据驱动",paraId:30,tocIndex:1},{value:"的图形，其中每个图形对应一个或者多个",paraId:30,tocIndex:1},{value:"数据项（Data Item）",paraId:30,tocIndex:1},{value:"。比如下面的散点图里只有一个 Point 标记，而这个标记生成了多个圆。",paraId:30,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    })\n    .encode('x', 'height')\n    .encode('y', 'weight')\n    .encode('color', 'gender');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:31,tocIndex:1},{value:"而在下面的折线图中，一个条线对应多个数据项。",paraId:32,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/indices.json',\n    })\n    .transform({ type: 'normalizeY', basis: 'first', groupBy: 'color' })\n    .encode('x', (d) => new Date(d.Date))\n    .encode('y', 'Close')\n    .encode('color', 'Symbol')\n    .axis('y', { title: '↑ Change in price (%)' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:33,tocIndex:1},{value:"G2 的标记是可以叠加的，换句话说：可以在一个视图里面添加多个标记。下面的例子中给图表添加了 line 和 point 两个标记：",paraId:34,tocIndex:2},{value:"(() => {\n  const data = [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ];\n\n  const chart = new G2.Chart();\n\n  chart.line().data(data).encode('x', 'year').encode('y', 'value');\n\n  chart.point().data(data).encode('x', 'year').encode('y', 'value');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:35,tocIndex:2},{value:"G2 里面的标记可以通过一种机制复合成一个标记，然后使用，比如上面的点线图：",paraId:36,tocIndex:3},{value:"(() => {\n  // 定义复合 Mark\n  function PointLine({ encode, data } = {}) {\n    return [\n      { type: 'line', data, encode },\n      { type: 'point', data, encode },\n    ];\n  }\n\n  const data = [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ];\n\n  const chart = new G2.Chart();\n\n  // Options 使用复合 Mark\n  chart.mark(PointLine).data(data).encode('x', 'year').encode('y', 'value');\n\n  // Spec 使用复合 Mark\n  chart.options({\n    type: PointLine,\n    data,\n    encode: { x: 'year', y: 'value' },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:37,tocIndex:3},{value:"标记可复合的特性提供了一种简单却强大的扩展 G2 能力的方式，G2 内部也是使用这个机制实现了一些比较复杂的标记，比如桑基图：用两个 Polygon 标记进行复合。",paraId:38,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart({\n    width: 900,\n    height: 600,\n  });\n\n  // Sankey 标记\n  chart\n    .sankey()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/energy.json',\n      transform: [\n        {\n          type: 'custom',\n          callback: (data) => ({ links: data }),\n        },\n      ],\n    })\n    .layout({\n      nodeAlign: 'center',\n      nodePadding: 0.03,\n    })\n    .style('labelSpacing', 3)\n    .style('labelFontWeight', 'bold')\n    .style('nodeStrokeWidth', 1.2)\n    .style('linkFillOpacity', 0.4);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:39,tocIndex:3},{value:"标注（Annotation）",paraId:40,tocIndex:4},{value:" 主要用来标注可视化图表中需要注意的地方。在 G2 中，标注也是一种标记，或者说某些标记也也可以用来做标注，比如 Text，Image 等标记。",paraId:40,tocIndex:4},{value:"既然标注也是一种标记，那么它也可以执行转换。比如下面的 Select 转换。",paraId:41,tocIndex:5},{value:"Select 标记转换提供了从一组图形中选择图形的能力。比如在下面的例子中，标注出了每个大陆 Continent 中，GDP 最大的国家。",paraId:42,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/1ecf85d2-8279-46a1-898d-d2e1814617f9.json',\n  });\n\n  chart\n    .point()\n    .encode('x', 'GDP')\n    .encode('y', 'LifeExpectancy')\n    .encode('color', 'Continent');\n\n  chart\n    .text()\n    // 将图形按照 series 分组，也就是 Continent\n    // 通过 x 通道选择，选择其中最大的，也就是 GDP 最大的\n    .transform({ type: 'select', channel: 'x', selector: 'max' })\n    .encode('text', 'Country')\n    .encode('x', 'GDP')\n    .encode('y', 'LifeExpectancy')\n    .encode('series', 'Continent')\n    .style('textAlign', 'end');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:43,tocIndex:5},{value:"对于不要分组的简单的文本标记，使用数据标签就可以，否则可以考虑上面的方式。",paraId:44,tocIndex:5},{value:"对于标注来说一个问题就是定位到合适的位置，目前有三种定位方法：",paraId:45,tocIndex:6},{value:"数据驱动的定位",paraId:46,tocIndex:6},{value:"绝对定位",paraId:46,tocIndex:6},{value:"相对定位",paraId:46,tocIndex:6},{value:"在 G2 中可以通过 ",paraId:47,tocIndex:7},{value:"mark.data",paraId:47,tocIndex:7},{value:" 去指定数据驱动的定位，比如下面的例子中希望标注每天糖和脂肪的安全摄入量，就可以如下实现。",paraId:47,tocIndex:7},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data([\n      { x: 95, y: 95, z: 13.8, name: 'BE', country: 'Belgium' },\n      { x: 86.5, y: 102.9, z: 14.7, name: 'DE', country: 'Germany' },\n      { x: 80.8, y: 91.5, z: 15.8, name: 'FI', country: 'Finland' },\n      { x: 80.4, y: 102.5, z: 12, name: 'NL', country: 'Netherlands' },\n      { x: 80.3, y: 86.1, z: 11.8, name: 'SE', country: 'Sweden' },\n      { x: 78.4, y: 70.1, z: 16.6, name: 'ES', country: 'Spain' },\n      { x: 74.2, y: 68.5, z: 14.5, name: 'FR', country: 'France' },\n      { x: 73.5, y: 83.1, z: 10, name: 'NO', country: 'Norway' },\n      { x: 71, y: 93.2, z: 24.7, name: 'UK', country: 'United Kingdom' },\n      { x: 69.2, y: 57.6, z: 10.4, name: 'IT', country: 'Italy' },\n      { x: 68.6, y: 20, z: 16, name: 'RU', country: 'Russia' },\n      { x: 65.5, y: 126.4, z: 35.3, name: 'US', country: 'United States' },\n      { x: 65.4, y: 50.8, z: 28.5, name: 'HU', country: 'Hungary' },\n      { x: 63.4, y: 51.8, z: 15.4, name: 'PT', country: 'Portugal' },\n      { x: 64, y: 82.9, z: 31.3, name: 'NZ', country: 'New Zealand' },\n    ])\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('size', 'z')\n    .encode('shape', 'point')\n    .scale('x', { nice: true })\n    .scale('y', { nice: true, domainMax: 165, zero: true })\n    .scale('size', { range: [10, 40] })\n    .style('stroke', '#1890ff')\n    .style('fillOpacity', 0.3)\n    .style('fill', '#1890ff')\n    .label({\n      text: 'name',\n      position: 'inside',\n      fill: '#1890ff',\n      stroke: '#fff',\n    })\n    .legend(false);\n\n  chart\n    .lineY()\n    .data([50])\n    .style('stroke', '#000')\n    .style('strokeOpacity', 0.45)\n    .style('lineDash', [3, 3])\n    .label({\n      text: 'Safe sugar intake 50g/day',\n      position: 'right',\n      textBaseline: 'bottom',\n      fill: '#000',\n      fillOpacity: 0.45,\n      background: true,\n      backgroundFill: '#000',\n      backgroundOpacity: 0.15,\n    });\n\n  chart\n    .lineX()\n    .data([65])\n    .style('stroke', '#000')\n    .style('strokeOpacity', 0.45)\n    .style('lineDash', [3, 3])\n    .label({\n      text: 'Safe fat intake 65g/day',\n      position: 'top-left',\n      textBaseline: 'bottom',\n      fill: '#000',\n      fillOpacity: 0.45,\n      background: true,\n      backgroundFill: '#000',\n      backgroundOpacity: 0.15,\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:48,tocIndex:7},{value:"除了数据驱动的定位，G2 也提供了非数据驱动的定位方式。通过 ",paraId:49,tocIndex:8},{value:"mark.style",paraId:49,tocIndex:8},{value:" 去指定 x 和 y 属性，x 和 y 拥有下面两种类型。",paraId:49,tocIndex:8},{value:"百分比",paraId:50,tocIndex:8},{value:"：内容区域的百分比。",paraId:50,tocIndex:8},{value:"数字",paraId:50,tocIndex:8},{value:"：像素为单位的坐标。",paraId:50,tocIndex:8},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'theta', innerRadius: 0.5 })\n    .transform({ type: 'stackY' })\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n\n  // 绝对定位\n  chart.text().style({\n    x: 290, // 像素坐标\n    y: 200, // 像素坐标\n    text: 'hello',\n    textAlign: 'center',\n    fontSize: 60,\n    textBaseline: 'middle',\n  });\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:51,tocIndex:8},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'theta', innerRadius: 0.5 })\n    .transform({ type: 'stackY' })\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  // 相对定位\n  chart.text().style({\n    x: '50%', // 百分比\n    y: '50%', // 百分比\n    text: 'hello',\n    textAlign: 'center',\n    fontSize: 60,\n    textBaseline: 'middle',\n  });\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:52,tocIndex:9}]},28608:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(78556);const t=[{value:"G2 中",paraId:0},{value:"比例尺（Scale）",paraId:0},{value:" 是可视化很重要的一个抽象：将抽象数据映射为视觉数据，它是抽象数据和视觉数据的桥梁。如果说编码决定了标记的哪些通道需要被可视化，那么比例尺决定了这些通道该如何被可视化。",paraId:0},{value:"G2 内部会根据数据类型以及标记的类型，去推断比例尺的类型、定义域和值域，但是仍然可以指定对应配置。比例尺可以配置在 Mark 层级：",paraId:1},{value:"({\n  type: 'interval',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'log', // 指定类型\n      domain: [10, 100], // 指定定义域\n      range: [0, 1], // 指定值域\n    },\n  },\n});\n",paraId:2},{value:"// API\n// 第一种方式\nchart\n  .interval()\n  .scale('x', { padding: 0.5 })\n  .scale('y', {\n    type: 'log', // 指定类型\n    domain: [10, 100], // 指定定义域\n    range: [0, 1], // 指定值域\n  });\n\n// 第二种方式\nchart.interval().scale({\n  x: { padding: 0.5 },\n  y: {\n    type: 'log', // 指定类型\n    domain: [10, 100], // 指定定义域\n    range: [0, 1], // 指定值域\n  },\n});\n",paraId:3},{value:"比例尺也可以配置在 View 层级：",paraId:4},{value:"({\n  type: 'view',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'log', // 指定类型\n      domain: [10, 100], // 指定定义域\n      range: [0, 1], // 指定值域\n    },\n  },\n});\n",paraId:5},{value:"// API 形式\n// 第一种方式\nchart.scale('x', { padding: 0.5 }).scale('y', {\n  type: 'log', // 指定类型\n  domain: [10, 100], // 指定定义域\n  range: [0, 1], // 指定值域\n});\n\n// 第二种方式\nchart.scale({\n  x: { padding: 0.5 },\n  y: {\n    type: 'log', // 指定类型\n    domain: [10, 100], // 指定定义域\n    range: [0, 1], // 指定值域\n  },\n});\n",paraId:6},{value:"标记的每一个通道都绑定了一个比例尺。该比例尺会对该通道绑定的列数据进行转换，将其从数据范围：",paraId:7,tocIndex:0},{value:"定义域（Domain）",paraId:7,tocIndex:0},{value:" 转换到视觉范围：",paraId:7,tocIndex:0},{value:"值域（Range）",paraId:7,tocIndex:0},{value:"。不同类型的比例尺针对不同类型的数据和使用场景。",paraId:7,tocIndex:0},{value:"同一个视图中的标记相同通道的比例尺会默认是同步的：会去同步比例尺的类型，定义域和值域以及其他配置。这意味一个视图中所有的标记都会按照一个同样的尺度去绘制。比如下图中的 LineX 标记虽然没有完整的数据，但是也绘制到了准确的位置，就是因为比例尺同步。",paraId:8,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data([\n      { year: '1991', value: 3 },\n      { year: '1992', value: 4 },\n      { year: '1993', value: 3.5 },\n      { year: '1994', value: 5 },\n      { year: '1995', value: 4.9 },\n      { year: '1996', value: 6 },\n      { year: '1997', value: 7 },\n      { year: '1998', value: 9 },\n      { year: '1999', value: 13 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value');\n\n  chart.lineX().data(['1996']).style('stroke', 'red').style('strokeWidth', 2);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:9,tocIndex:1},{value:"如果希望不同步（比如绘制双轴图的时候），就需要设置 ",paraId:10,tocIndex:2},{value:"scale.independent",paraId:10,tocIndex:2},{value:" 为 ",paraId:10,tocIndex:2},{value:"true",paraId:10,tocIndex:2},{value:"，设置了该属性的比例尺不会和任何比例尺同步。下面的例子中的 interval 和 line 的 y 通道会使用两个不同的比例尺，从而会生成两个不同的坐标轴。",paraId:10,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'view',\n    data: [\n      { time: '10:10', call: 4, waiting: 2, people: 2 },\n      { time: '10:15', call: 2, waiting: 6, people: 3 },\n      { time: '10:20', call: 13, waiting: 2, people: 5 },\n      { time: '10:25', call: 9, waiting: 9, people: 1 },\n      { time: '10:30', call: 5, waiting: 2, people: 3 },\n      { time: '10:35', call: 8, waiting: 2, people: 1 },\n      { time: '10:40', call: 13, waiting: 1, people: 2 },\n    ],\n    children: [\n      {\n        type: 'interval',\n        encode: { x: 'time', y: 'waiting' },\n        axis: { y: { title: 'Waiting', titleFill: '#5B8FF9' } },\n      },\n      {\n        type: 'line',\n        encode: { x: 'time', y: 'people', shape: 'smooth' },\n        scale: { y: { independent: true } }, // 设置 y 方向比例尺不同步\n        style: { stroke: '#fdae6b', lineWidth: 2 },\n        axis: {\n          y: {\n            position: 'right',\n            grid: null,\n            title: 'People',\n            titleFill: '#fdae6b',\n          },\n        },\n      },\n    ],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:11,tocIndex:2},{value:"如果希望比例尺分组同步，可以声明 ",paraId:12,tocIndex:2},{value:"scale.key",paraId:12,tocIndex:2},{value:"，拥有相同 key 的 scale 会同步。比如下面的 Line 和 Point Mark y 通道的比例尺因为 key 都是 line 所以会同步。",paraId:12,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'view',\n    data: [\n      { time: '10:10', call: 4, waiting: 2, people: 2 },\n      { time: '10:15', call: 2, waiting: 6, people: 3 },\n      { time: '10:20', call: 13, waiting: 2, people: 5 },\n      { time: '10:25', call: 9, waiting: 9, people: 1 },\n      { time: '10:30', call: 5, waiting: 2, people: 3 },\n      { time: '10:35', call: 8, waiting: 2, people: 1 },\n      { time: '10:40', call: 13, waiting: 1, people: 2 },\n    ],\n    children: [\n      {\n        type: 'interval',\n        encode: { x: 'time', y: 'waiting' },\n        axis: { y: { title: 'Waiting', titleFill: '#5B8FF9' } },\n      },\n      {\n        type: 'line',\n        encode: { x: 'time', y: 'people', shape: 'smooth' },\n        scale: { y: { key: 'line' } }, // 设置 key 为 line\n        style: { stroke: '#fdae6b', lineWidth: 2 },\n        axis: {\n          y: {\n            position: 'right',\n            grid: null,\n            title: 'People',\n            titleFill: '#fdae6b',\n          },\n        },\n      },\n      {\n        type: 'point',\n        encode: { x: 'time', y: 'people' },\n        scale: { y: { key: 'line' } }, // 设置 key 为 line\n        style: { stroke: '#fdae6b', lineWidth: 2 },\n      },\n    ],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:13,tocIndex:2},{value:"比例尺会可以配置在视图层级，并且会传递给 ",paraId:14,tocIndex:3},{value:"children",paraId:14,tocIndex:3},{value:" 指定的标记，如果该标记对应的通道没有设置比例尺，就设置，否则没有影响。在不绘制多轴图的情况下，比例尺是可以设置在视图层级的。",paraId:14,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .data([\n      { year: '1991', value: 3 },\n      { year: '1992', value: 4 },\n      { year: '1993', value: 3.5 },\n      { year: '1994', value: 5 },\n      { year: '1995', value: 4.9 },\n      { year: '1996', value: 6 },\n      { year: '1997', value: 7 },\n      { year: '1998', value: 9 },\n      { year: '1999', value: 13 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .scale('y', { nice: true }); // 视图层级的比例尺设置\n\n  chart.line();\n\n  chart.point();\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:15,tocIndex:3},{value:"常见的比例尺一共分为三大类：",paraId:16,tocIndex:4},{value:"连续比例尺",paraId:17,tocIndex:4},{value:"离散比例尺",paraId:17,tocIndex:4},{value:"离散化比例尺",paraId:17,tocIndex:4},{value:"第一种比例尺是连续比例尺，主要针对是连续数据，比较常见的连续比例尺有：Linear，Time，Log 等。比如下面的散点图的 x 和 y 通道都是使用了 linear 比例尺。",paraId:18,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'weight') // weight 是一个连续的数据\n    .encode('y', 'height') // height 是一个连续的数据\n    .encode('color', 'gender');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:19,tocIndex:5},{value:"第二种比例尺是序数比例尺，主要针对离散数据，比较常见的序数比例尺有：ordinal，point 等。比如下面的条形图的 color 通道就是用了 ordinal 比例尺。",paraId:20,tocIndex:6},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre') // genre 是一个离散数据\n    .scale('color', {\n      // 指定映射后的颜色\n      range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#c564be'],\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:21,tocIndex:6},{value:"第三种比例尺是离散化比例尺，该比例尺主要针对连续数据，会将它们离散化之后再映射，比如 threshold，quantize 等。下面的 color 通道就用了 quantile 比例尺。",paraId:22,tocIndex:7},{value:"(() => {\n  const chart = new G2.Chart({\n    \n    height: 240,\n  });\n\n  chart\n    .cell()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json',\n      transform: [{ type: 'map', callback: (d) => ({ salary: d }) }],\n    })\n    .scale('color', {\n      type: 'quantile',\n      // 分成三组，每组对应下面的一个颜色\n      range: ['#eee', 'pink', 'red'],\n    })\n    .encode('y', (_, i) => (i % 5) + 1)\n    .encode('x', (_, i) => ((i / 5) | 0) + 1)\n    .encode('color', 'salary') // 是连续数据，比例尺按照分位数对数据进行分组\n    .style('stroke', '#000')\n    .style('inset', 2);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:23,tocIndex:7}]},73071:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(66125);const t=[{value:"G2 中",paraId:0},{value:"滚动条（Scrollbar）",paraId:0},{value:" 可以用于过滤数据，可以和 x 或者 y 通道绑定的，滚动条默认都是关闭的。",paraId:0},{value:"滚动条可以在 Mark 层级配置：",paraId:1},{value:"({\n  type: 'interval',\n  scrollbar: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:2},{value:"// API\n// 第一种方式\nchart.interval().scrollbar('x', {}).scrollbar('y', {});\n\n// 第二种方式\nchart.interval().scrollbar({\n  x: {},\n  y: {},\n});\n",paraId:3},{value:"滚动条也可以在 View 层级配置：",paraId:4},{value:"({\n  type: 'view',\n  scrollbar: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:5},{value:"在 G2 中，每个标记都有自己的滚动条。如果标记对应的比例尺是同步的，那么滚动条也会合并。",paraId:6,tocIndex:0},{value:"滚动条具有传递性。视图上声明的滚动条会传递给 ",paraId:7,tocIndex:1},{value:"children",paraId:7,tocIndex:1},{value:" 声明的标记，如果该标记有对应通道的滚动条，就合并；否则不影响。",paraId:7,tocIndex:1}]},60142:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(74242);const t=[{value:"不管是单视图图表还是多视图图表，布局信息（图表宽高等）是在选项顶层指定的。",paraId:0},{value:"const markLevel = {\n  type: 'interval',\n  width: 640,\n  height: 180,\n  margin: 10,\n};\n\nconst viewLevel = {\n  type: 'view',\n  width: 640,\n  height: 180,\n  margin: 10,\n  // ...\n};\n\nconst compositionLevel = {\n  type: 'spaceFlex',\n  width: 640,\n  height: 180,\n  margin: 10,\n};\n",paraId:1},{value:"API 可以在初始化 Chart 对象的时候指定：",paraId:2},{value:"const chart = new Chart({\n  type: 'view',\n  width: 640,\n  height: 180,\n  margin: 10,\n  // ...\n});\n",paraId:3},{value:"也可以通过 ",paraId:4},{value:"node.attr",paraId:4},{value:" 指定：",paraId:4},{value:"chart.interval().attr('padding', 10).attr('margin', 20);\n\nchart.view().attr('padding', 10).attr('margin', 20);\n\nchart.spaceFlex().attr('padding', 10).attr('margin', 20);\n",paraId:5},{value:"在声明选项的时候没有指定宽高的时候，G2 会使用 ",paraId:6,tocIndex:0},{value:"640px",paraId:6,tocIndex:0},{value:" 作为宽，",paraId:6,tocIndex:0},{value:"480px",paraId:6,tocIndex:0},{value:" 作为高。",paraId:6,tocIndex:0},{value:"({ type: 'view' });\n",paraId:7,tocIndex:0},{value:"同样也可以通过 ",paraId:8,tocIndex:1},{value:"options.width",paraId:8,tocIndex:1},{value:" 和 ",paraId:8,tocIndex:1},{value:"options.height",paraId:8,tocIndex:1},{value:" 去指定宽高。",paraId:8,tocIndex:1},{value:"({ type: 'view', width: 600, height: 400 });\n",paraId:9,tocIndex:1},{value:"如果希望图表的宽高和容器保持一致，那么可以将 ",paraId:10,tocIndex:2},{value:"options.autoFit",paraId:10,tocIndex:2},{value:" 设置为 ",paraId:10,tocIndex:2},{value:"true",paraId:10,tocIndex:2},{value:"，其优先级比指定宽高高。",paraId:10,tocIndex:2},{value:"({ type: 'view', autoFit: true });\n",paraId:11,tocIndex:2},{value:"G2 中的视图模型定义了一个视图的划分方式，划分得到的不同区域会绘制不同的东西，也通过不同的选项去设置。现在可以简单的把视图理解为一个图表。G2 的视图模型如下：",paraId:12,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'point',\n      height: 280,\n    marginTop: 30,\n    marginLeft: 40,\n    marginBottom: 10,\n    marginRight: 20,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/commits.json',\n    },\n    encode: {\n      x: (d) => new Date(d.time).getUTCHours(),\n      y: (d) => new Date(d.time).getUTCDay(),\n      size: 'count',\n      shape: 'point',\n    },\n    transform: [{ type: 'group', size: 'sum' }, { type: 'sortY' }],\n    scale: { y: { type: 'point' } },\n    style: { shape: 'point', fill: '#59a14f' },\n    axis: {\n      x: { title: 'time (hours)', tickCount: 24 },\n      y: { title: 'time (day)', grid: true },\n    },\n    legend: false,\n    inset: 10,\n    viewStyle: {\n      viewFill: '#4e79a7',\n      plotFill: '#f28e2c',\n      mainFill: '#e15759',\n      contentFill: '#76b7b2',\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:13,tocIndex:3},{value:"视图区域（View Area）",paraId:14,tocIndex:3},{value:"：上图中蓝色 + 橙色 + 红色 + 青色部分，其中蓝色部分被称为",paraId:14,tocIndex:3},{value:"外边距区域",paraId:14,tocIndex:3},{value:"，主要用于固定组件（坐标轴、图例等）到边界的距离。",paraId:14,tocIndex:3},{value:"绘制区域（Plot Area）",paraId:14,tocIndex:3},{value:"：上图中橙色 + 红色 + 青色部分，橙色部分被称为",paraId:14,tocIndex:3},{value:"内边距区域",paraId:14,tocIndex:3},{value:"，该区域用于绘制组件。",paraId:14,tocIndex:3},{value:"主区域（Main Area）",paraId:14,tocIndex:3},{value:"：上图中红色 + 青色部分，其中红色部分被称为",paraId:14,tocIndex:3},{value:"呼吸区域",paraId:14,tocIndex:3},{value:"，用于制造组件和标记（图形元素）的间距，从而防止重叠，对于散点图尤其有用。",paraId:14,tocIndex:3},{value:"内容区域（Content Area）",paraId:14,tocIndex:3},{value:"：上图中青色部分，主要用于绘制标记（图形元素）。",paraId:14,tocIndex:3},{value:"可以通过如下的配置设置各个区域的大小：",paraId:15,tocIndex:3},{value:"margin",paraId:16,tocIndex:3},{value:" - 设置外边距四个方向的值，优先级别比分别设置低",paraId:16,tocIndex:3},{value:"marginLeft",paraId:16,tocIndex:3},{value:" - 设置左外边距",paraId:16,tocIndex:3},{value:"marginTop",paraId:16,tocIndex:3},{value:" - 设置上外边距",paraId:16,tocIndex:3},{value:"marginRight",paraId:16,tocIndex:3},{value:" - 设置右外边距值",paraId:16,tocIndex:3},{value:"marginBottom",paraId:16,tocIndex:3},{value:" - 设置下外边距值",paraId:16,tocIndex:3},{value:"padding",paraId:16,tocIndex:3},{value:" - 设置内边距四个方向的值，优先级别比分别设置低",paraId:16,tocIndex:3},{value:"paddingLeft",paraId:16,tocIndex:3},{value:" - 设置左内边距",paraId:16,tocIndex:3},{value:"paddingTop",paraId:16,tocIndex:3},{value:" - 设置上内边距",paraId:16,tocIndex:3},{value:"paddingRight",paraId:16,tocIndex:3},{value:" - 设置右内边距",paraId:16,tocIndex:3},{value:"paddingBottom",paraId:16,tocIndex:3},{value:" - 设置下内边距",paraId:16,tocIndex:3},{value:"inset",paraId:16,tocIndex:3},{value:" - 设置呼吸区域四个方向的值，优先级别比分别设置低",paraId:16,tocIndex:3},{value:"insetLeft",paraId:16,tocIndex:3},{value:" - 设置左呼吸区域",paraId:16,tocIndex:3},{value:"insetTop",paraId:16,tocIndex:3},{value:" - 设置上呼吸区域",paraId:16,tocIndex:3},{value:"insetRight",paraId:16,tocIndex:3},{value:" - 设置右呼吸区域",paraId:16,tocIndex:3},{value:"insetBottom",paraId:16,tocIndex:3},{value:" - 设置下呼吸区域",paraId:16,tocIndex:3},{value:"其中内容区域的大小由以下的公式得到：",paraId:17,tocIndex:3},{value:"const contentWidth =\n  width -\n  paddingLeft -\n  paddingRight -\n  marginLeft -\n  marginRight -\n  insetLeft -\n  insetRight;\n\nconst contentHeight =\n  height -\n  paddingTop -\n  paddingBottom -\n  marginTop -\n  marginBottom -\n  insetTop -\n  insetBottom;\n",paraId:18,tocIndex:3}]},98746:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(30321);const t=[{value:"G2 中",paraId:0},{value:"滑动条（Slider）",paraId:0},{value:" 可以用于过滤数据，可以和 x 或者 y 通道绑定的，滑动条默认都是关闭的。",paraId:0},{value:"滑动条可以在 Mark 层级配置：",paraId:1},{value:"({\n  type: 'interval',\n  slider: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:2},{value:"// API\n// 第一种方式\nchart.interval().slider('x', {}).slider('y', {});\n\n// 第二种方式\nchart.interval().slider({\n  x: {},\n  y: {},\n});\n",paraId:3},{value:"滑动条也可以在 View 层级配置：",paraId:4},{value:"({\n  type: 'view',\n  slider: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:5},{value:"在 G2 中，每个标记都有自己的滑动条。如果标记对应的比例尺是同步的，那么滑动条也会合并。",paraId:6,tocIndex:0},{value:"滑动条具有传递性。视图上声明的滑动条会传递给 ",paraId:7,tocIndex:1},{value:"children",paraId:7,tocIndex:1},{value:" 声明的标记，如果该标记有对应通道的滑动条，就合并；否则不影响。",paraId:7,tocIndex:1}]},52685:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(15989);const t=[{value:"G2 中",paraId:0},{value:"状态（State）",paraId:0},{value:" 主要用来控制标记的状态样式。这些状态会被交互触发，属性是 @antv/g 支持的样式属性。",paraId:0},{value:"({\n  type: 'interval',\n  state: {\n    /** fill 填充色；stroke 描边色；strokeWidth 描边宽度 */\n    active: { fill: 'red', stroke: 'blue', strokeWidth: 2 },\n    inactive: { fill: '#aaa' },\n  },\n});\n",paraId:1},{value:"// API\n// 第一种方式\nchart\n  .interval()\n  .state('active', { fill: 'red', stroke: 'blue', strokeWidth: 2 })\n  .state('inactive', { fill: '#aaa' });\n\n// 第二种方式\nchart.interval().state({\n  active: { fill: 'red', stroke: 'blue', strokeWidth: 2 },\n  inactive: { fill: '#aaa' },\n});\n",paraId:2},{value:"目前一共有 4 个内置状态：",paraId:3,tocIndex:0},{value:"active - 高亮时候的样式",paraId:4,tocIndex:0},{value:"inactive - 没有高亮时候的样式",paraId:4,tocIndex:0},{value:"selected - 选择时候的样式",paraId:4,tocIndex:0},{value:"unselected - 没有选择时候的样式",paraId:4,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .axis('y', { labelFormatter: '.0%' })\n    .state('active', { fill: 'red' })\n    .state('inactive', { fill: '#aaa' })\n    .interaction('elementHighlight'); // 设置高亮交互\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:5,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .axis('y', { labelFormatter: '.0%' })\n    .state('selected', { fill: 'red', stroke: 'blue', strokeWidth: 2 })\n    .state('unselected', { fill: '#aaa' })\n    .interaction('elementSelect'); // 设置选择交互\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:6,tocIndex:2}]},58620:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(85192);const t=[{value:"G2 中",paraId:0},{value:"样式（Style）",paraId:0},{value:" 主要用来控制标记和视图的视觉样式。支持的样式参考 @antv/g 支持的样式。",paraId:0},{value:"标记可以设置自己的样式，也可以设置视图的样式：",paraId:1},{value:"({\n  type: 'interval',\n  style: {\n    // 自己的样式\n    stroke: 'black',\n    strokeWidth: 2,\n  },\n  viewStyle: {\n    // 视图的样式\n    viewFill: 'red',\n    contentFill: 'yellow',\n  },\n});\n",paraId:2},{value:"// API\n// 第一种方式\nchart\n  .interval()\n  .style('stroke', 'black')\n  .style('strokeWidth', 2)\n  .viewStyle('viewFill', 'red')\n  .viewStyle('contentFill', 'yellow');\n\n// 第二种方式\nchart\n  .interval()\n  .style({\n    stroke: 'black',\n    strokeWidth: 2,\n  })\n  .viewStyle({\n    viewFill: 'red',\n    contentFill: 'yellow',\n  });\n",paraId:3},{value:"视图可以设置自己的样式：",paraId:4},{value:"({\n  type: 'view',\n  style: {\n    viewFill: 'red',\n    contentFill: 'yellow',\n  },\n});\n",paraId:5},{value:"// API\n// 第一种方式\nchart.style('viewFill', 'red').style('contentFill', 'yellow');\n\n// 第二种方式\nchart.style({\n  viewFill: 'red',\n  contentFill: 'yellow',\n});\n",paraId:6},{value:"标记的视觉属性除了可以通过 ",paraId:7,tocIndex:0},{value:"mark.encode",paraId:7,tocIndex:0},{value:" 去设置之外，还可以通过 ",paraId:7,tocIndex:0},{value:"mark.style",paraId:7,tocIndex:0},{value:" 去设置。两者的区别主要有两点：",paraId:7,tocIndex:0},{value:"mark.encode",paraId:8,tocIndex:0},{value:" 设置的通道会特殊一点，要么是该标记独有的，比如 image 的 src 通道；要么就是有一些特殊逻辑，比如 x 通道会影响 x 方向坐标轴的生成。",paraId:8,tocIndex:0},{value:"mark.encode",paraId:8,tocIndex:0},{value:" 更倾向于去设置和数据有关的通道，但是 ",paraId:8,tocIndex:0},{value:"mark.style",paraId:8,tocIndex:0},{value:" 更倾向于去设置和数据无关的通道。虽然 ",paraId:8,tocIndex:0},{value:"mark.style",paraId:8,tocIndex:0},{value:" 也同样支持回调去设置数据驱动的通道。",paraId:8,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .style('fill', 'steelblue') // 设置和数据无关的通道\n    .style('strokeWidth', (d) => (d.frequency > 0.1 ? 2 : 1)) // 设置和数据有关的通道\n    .style('stroke', (d) => (d.frequency > 0.1 ? 'red' : 'black'))\n    .axis('y', { labelFormatter: '.0%' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:9,tocIndex:0},{value:"而各个区域的样式可以通过 ",paraId:10,tocIndex:1},{value:"${name}${Style}",paraId:10,tocIndex:1},{value:" 的形式去设置，其中 ",paraId:10,tocIndex:1},{value:"Style",paraId:10,tocIndex:1},{value:" 是 G 的矩形支持的所有样式，比如 ",paraId:10,tocIndex:1},{value:"fill",paraId:10,tocIndex:1},{value:"，",paraId:10,tocIndex:1},{value:"stroke",paraId:10,tocIndex:1},{value:" 等，注意首字母要大写，变成驼峰形式。",paraId:10,tocIndex:1},{value:"view${Style}",paraId:11,tocIndex:1},{value:" - 设置视图区域的样式",paraId:11,tocIndex:1},{value:"plot${Style}",paraId:11,tocIndex:1},{value:" - 设置绘制区域的样式",paraId:11,tocIndex:1},{value:"main${Style}",paraId:11,tocIndex:1},{value:" - 设置主区域的样式",paraId:11,tocIndex:1},{value:"content${Style}",paraId:11,tocIndex:1},{value:" - 设置内容区域的样式",paraId:11,tocIndex:1},{value:"比如下图中给各个区域染色：",paraId:12,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'view',\n      height: 280,\n    inset: 10,\n    marginTop: 30,\n    marginLeft: 40,\n    marginBottom: 10,\n    marginRight: 20,\n    style: {\n      // 设置视图样式\n      viewFill: '#4e79a7',\n      plotFill: '#f28e2c',\n      mainFill: '#e15759',\n      contentFill: '#76b7b2',\n    },\n    children: [\n      {\n        type: 'point',\n        data: {\n          type: 'fetch',\n          value: 'https://assets.antv.antgroup.com/g2/commits.json',\n        },\n        encode: {\n          x: (d) => new Date(d.time).getUTCHours(),\n          y: (d) => new Date(d.time).getUTCDay(),\n          size: 'count',\n          shape: 'point',\n        },\n        transform: [{ type: 'group', size: 'sum' }, { type: 'sortY' }],\n        scale: { y: { type: 'point' } },\n        style: { shape: 'point', fill: '#59a14f' },\n        axis: {\n          x: { title: 'time (hours)', tickCount: 24 },\n          y: { title: 'time (day)', grid: true },\n        },\n        legend: false,\n      },\n    ],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:13,tocIndex:1}]},81043:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(48922);const t=[{value:"G2 中",paraId:0},{value:"主题（Theme）",paraId:0},{value:" 是图表中图形的一些默认样式。",paraId:0},{value:"可以在视图层级配置主题：",paraId:1},{value:"({\n  type: 'view',\n  theme: {},\n});\n",paraId:2},{value:"// API\nchart.theme({});\n",paraId:3},{value:"也可以在标记层级配置主题：",paraId:4},{value:"({\n  type: 'interval',\n  theme: {},\n});\n",paraId:5},{value:"// API\nchart.interval().theme({});\n",paraId:6},{value:"G2 内置了一些主题，可以通过 ",paraId:7,tocIndex:0},{value:"type",paraId:7,tocIndex:0},{value:" 进行切换。",paraId:7,tocIndex:0},{value:"chart.theme({ type: 'classicDark' }); // 使用暗色主题\n",paraId:8,tocIndex:0},{value:"有两种自定义主题的方式，第一种是在 theme 指定希望覆盖某些主题样式：",paraId:9,tocIndex:1},{value:"const theme = {};\n\n// Spec 形式\nconst options = {\n  theme: {\n    type: 'light',\n    ...theme,\n  },\n};\n\n// API 形式\nchart.theme({ type: 'light', ...theme });\n",paraId:10,tocIndex:1},{value:"下面的例子覆盖了 light 主题的默认颜色：",paraId:11,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    },\n    encode: { x: 'letter', y: 'frequency' },\n    axis: { y: { labelFormatter: '.0%' } },\n    theme: {\n      color: 'red', // 设置默认颜色为红色\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:1},{value:"如果希望自定义所有的主题样式，可以新增一个主题、覆盖默认主题、注册，然后使用。",paraId:13,tocIndex:1},{value:"(() => {\n  // 定义主题\n  function CustomTheme() {\n    const light = G2.Light();\n    return { ...light, color: 'red' };\n  }\n\n  // 注册主题\n  G2.register('theme.custom', CustomTheme);\n\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    },\n    encode: { x: 'letter', y: 'frequency' },\n    axis: { y: { labelFormatter: '.0%' } },\n    theme: { type: 'custom' }, // 使用主题\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:1},{value:"包含的默认主题有：",paraId:15,tocIndex:1},{value:"G2.Light",paraId:16,tocIndex:1},{value:"G2.Dark",paraId:16,tocIndex:1},{value:"G2.Classic",paraId:16,tocIndex:1},{value:"G2.ClassicDark",paraId:16,tocIndex:1},{value:"G2.Academy",paraId:16,tocIndex:1},{value:"完整的主题配置可以参考 ",paraId:17,tocIndex:1},{value:"light",paraId:17,tocIndex:1},{value:" 主题。",paraId:17,tocIndex:1}]},72929:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(92642);const t=[{value:"G2 中",paraId:0},{value:"标题（Title）",paraId:0},{value:" 用于指定图表的标题。",paraId:0},{value:"标题可以在 Mark 层级配置：",paraId:1},{value:"({\n  type: 'interval',\n  title: {\n    title: 'hello',\n    subtitle: 'world',\n  },\n});\n",paraId:2},{value:"// API\nchart.interval().title({\n  title: 'hello',\n  subtitle: 'world',\n});\n",paraId:3},{value:"标题也可以在 View 层级配置：",paraId:4},{value:"({\n  type: 'view',\n  title: {\n    title: 'hello',\n    subtitle: 'world',\n  },\n});\n",paraId:5},{value:"// API\nchart.title({ title: 'hello', subtitle: 'world' });\n",paraId:6},{value:"更多配置项，可以参考文档 ",paraId:7},{value:"title",paraId:8},{value:"。",paraId:7}]},34751:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(95061);const t=[{value:"G2 ",paraId:0},{value:"提示信息（Tooltip）",paraId:0},{value:" 可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化，在可视化中 Tooltip 通常具有以下作用：",paraId:0},{value:"显示详细信息",paraId:1},{value:"：Tooltip 可以显示有关数据点的详细信息，例如具体数值、百分比或其他相关属性。这有助于用户更深入地了解数据。",paraId:1},{value:"提高可读性",paraId:1},{value:"：在复杂的可视化中，Tooltip 可以帮助用户更容易地识别和理解数据点。例如，在散点图中，当数据点密集时，Tooltip 可以显示特定点的详细信息，而无需将鼠标悬停在每个点上。",paraId:1},{value:"增强交互性",paraId:1},{value:"：Tooltip 可以增强可视化的交互性。用户可以通过悬停或点击数据点来查看更多信息，这使得可视化更加动态和有趣。",paraId:1},{value:"突出显示关键信息",paraId:1},{value:"：Tooltip 可以用来突出显示关键信息。例如，在时间序列图中，您可以使用 Tooltip 显示特定时间点的重要事件或突变。",paraId:1},{value:"G2 中可以在通过 ",paraId:2},{value:"mark.tooltip",paraId:2},{value:" 指定该标记需要展示的提示信息。",paraId:2},{value:"({\n  type: 'interval',\n  tooltip: {\n    title: 'name', // 标题\n    items: ['genre'], // 数据项\n  },\n});\n",paraId:3},{value:"// API\nchart.interval().tooltip({\n  title: 'name', // 标题\n  items: ['genre'], // 数据项\n});\n",paraId:4},{value:"并且结合 ",paraId:5},{value:"view.interaction.tooltip",paraId:5},{value:" 去配置提示信息的渲染和额外配置。",paraId:5},{value:"({\n  type: 'view',\n  interaction: {\n    tooltip: { series: true },\n  },\n});\n",paraId:6},{value:"// API\nchart.interaction('tooltip', { series: true });\n",paraId:7},{value:"当该视图中只有一个标记的时候，通过 ",paraId:8},{value:"mark.interaction.tooltip",paraId:8},{value:" 配置提示信息的渲染和额外配置也是可以的。",paraId:8},{value:"({\n  type: 'line',\n  interaction: {\n    tooltip: { series: true },\n  },\n});\n",paraId:9},{value:"// API\nchart.line().interaction('tooltip', { series: true });\n",paraId:10},{value:"不同的 mark 有不同的默认提示信息，可以通过 ",paraId:11,tocIndex:0},{value:"mark.tooltip(tooltipData)",paraId:11,tocIndex:0},{value:" 去覆盖默认的内容。tooltipData 完整的结构如下：",paraId:11,tocIndex:0},{value:"({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  tooltip: {\n    title: (d) => (d.sold > 150 ? 'high' : 'low'), // 设置 title\n    items: [\n      'genre', // 第一个 item\n      'sold', // 第二个 item\n    ],\n  },\n});\n",paraId:12,tocIndex:0},{value:"在不需要设置 title 的时候，可以直接声明为一个数组：",paraId:13,tocIndex:0},{value:"({\n  type: 'interval',\n  tooltip: ['genre', 'sold'],\n});\n",paraId:14,tocIndex:0},{value:"// API\n// 第一种\nchart.interval().tooltip('genre').tooltip('sold');\n\n// 第二种\nchart.interval().tooltip(['genre', 'sold']);\n",paraId:15,tocIndex:0},{value:"其中完整的 title 和 item 结构如下：",paraId:16,tocIndex:0},{value:"type Item = {\n  color?: string; // marker 的颜色\n  name?: string; // item 的名字\n  value?: string; // item 的值\n};\n",paraId:17,tocIndex:0},{value:"可以通过如下的方式去设置它们。",paraId:18,tocIndex:0},{value:"它们的值（value）可以通过来自原始数据，通过字符串或者 ",paraId:19,tocIndex:1},{value:"item.field",paraId:19,tocIndex:1},{value:" 指定。",paraId:19,tocIndex:1},{value:"({\n  tooltip: {\n    title: 'sold',\n    items: ['genre'],\n  },\n});\n",paraId:20,tocIndex:1},{value:"// 等价于\n({\n  tooltip: {\n    title: 'sold',\n    items: [{ field: 'genre' }],\n  },\n});\n",paraId:21,tocIndex:1},{value:"它们的值（value）可以来自通道值，通过 ",paraId:22,tocIndex:2},{value:"item.channel",paraId:22,tocIndex:2},{value:" 指定，常常用于使用 ",paraId:22,tocIndex:2},{value:"mark.transform",paraId:22,tocIndex:2},{value:" 生成新通道的图表。",paraId:22,tocIndex:2},{value:"({\n  tooltip: {\n    title: { channel: 'x' },\n    items: [{ channel: 'y' }],\n  },\n});\n",paraId:23,tocIndex:2},{value:"可以通过 ",paraId:24,tocIndex:3},{value:"item.valueFormatter",paraId:24,tocIndex:3},{value:" 去指定 title 或者 item 的值（value）的展示，",paraId:24,tocIndex:3},{value:"item.valueFormatter",paraId:24,tocIndex:3},{value:" 可以是一个函数，也可以一个 d3-format 支持的字符串。",paraId:24,tocIndex:3},{value:"({\n  tooltip: {\n    items: [{ channel: 'y', valueFormatter: '.0%' }],\n  },\n});\n",paraId:25,tocIndex:3},{value:"当然对于 title 和 item 还提供了回调去获得最大的自定义能力。",paraId:26,tocIndex:4},{value:"({\n  tooltip: {\n    items: [\n      (d, index, data, column) => ({\n        color: d.sold > 150 ? 'red' : 'blue', // 指定 item 的颜色\n        name: index === 0 ? d.genre : `${d.genre} ${data[i].genre}`, // 指定 item 的名字\n        value: column.y.value[i], // 使用 y 通道的值\n      }),\n    ],\n  },\n});\n",paraId:27,tocIndex:4},{value:"G2 默认打开 Tooltip 交互 ，如果需要配置 Tooltip 属性，可以通过 ",paraId:28,tocIndex:5},{value:"chart.interaction.tooltip",paraId:28,tocIndex:5},{value:" 来配置。",paraId:28,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data([\n      { year: '1991', value: 3 },\n      { year: '1992', value: 4 },\n      { year: '1993', value: 3.5 },\n      { year: '1994', value: 5 },\n      { year: '1995', value: 4.9 },\n      { year: '1996', value: 6 },\n      { year: '1997', value: 7 },\n      { year: '1998', value: 9 },\n      { year: '1999', value: 13 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .interaction('tooltip', {\n      crosshairsStroke: 'red',\n      crosshairsStrokeWidth: 4,\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:29,tocIndex:5},{value:"如果希望不展示该 Mark 的提示信息，可以通过 ",paraId:30,tocIndex:6},{value:"mark.tooltip",paraId:30,tocIndex:6},{value:" 实现。",paraId:30,tocIndex:6},{value:"({\n  type: 'interval',\n  tooltip: false,\n});\n",paraId:31,tocIndex:6},{value:"chart.interval().tooltip(false);\n",paraId:32,tocIndex:6},{value:"如果希望图表没有提示信息交互，可以通过 ",paraId:33,tocIndex:6},{value:"chart.interaction",paraId:33,tocIndex:6},{value:" 实现。",paraId:33,tocIndex:6},{value:"({\n  type: 'view',\n  interaction: { tooltip: false },\n});\n",paraId:34,tocIndex:6},{value:"chart.interaction('tooltip', false);\n",paraId:35,tocIndex:6},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n      format: 'csv',\n    },\n    encode: {\n      x: 'state',\n      y: 'population',\n      color: 'age',\n    },\n    transform: [\n      { type: 'sortX', by: 'y', reverse: true, reducer: 'sum', slice: 6 },\n      { type: 'dodgeX' },\n    ],\n    legend: false,\n    interaction: {\n      tooltip: {\n        shared: true,\n        mount: 'body',\n        css: {\n          '.g2-tooltip': {\n            background: '#eee',\n            'border-radius': ' 0.25em !important',\n          },\n          '.g2-tooltip-title': {\n            'font-size': '20px',\n            'font-weight': 'bold',\n            'padding-bottom': '0.25em',\n          },\n          '.g2-tooltip-list-item': {\n            background: '#ccc',\n            padding: '0.25em',\n            margin: '0.25em',\n            'border-radius': '0.25em',\n          },\n          '.g2-tooltip-list-item-name-label': {\n            'font-weight': 'bold',\n            'font-size': '16px',\n          },\n          'g2-tooltip-list-item-marker': {\n            'border-radius': '0.25em',\n            width: '15px',\n            height: '15px',\n          },\n          '.g2-tooltip-list-item-value': {\n            'font-weight': 'bold',\n            'font-size': '16px',\n          },\n        },\n      },\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:36,tocIndex:7}]},81521:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70523);const t=[{value:"G2 中的",paraId:0},{value:"标记转换（Mark Transform）",paraId:0},{value:" 提供了一个方便的机制，去转换数据和标记的选项，主要用于分析数据。标记转换的本质是一个函数，这个函数会",paraId:0},{value:"筛选",paraId:0},{value:" 、",paraId:0},{value:"修改",paraId:0},{value:" 、",paraId:0},{value:"聚合",paraId:0},{value:"和",paraId:0},{value:"产生",paraId:0},{value:"新的通道值。",paraId:0},{value:"转换是一个数组，声明的转换会按照顺序执行。转换可以配置在 Mark 层级：",paraId:1},{value:"({\n  type: 'interval',\n  transform: [{ type: 'stackY' }, { type: 'sortX' }],\n});\n",paraId:2},{value:"// API\n// 第一种方式\nchart.interval().transform({ type: 'stackY' }).transform({ type: 'sortX' });\n\n// 第二种方式\nchart.interval().transform([{ type: 'stackY' }, { type: 'sortX' }]);\n",paraId:3},{value:"转换也可以配置 View 层级：",paraId:4},{value:"({\n  type: 'view',\n  transform: [{ type: 'stackY' }, { type: 'sortX' }],\n});\n",paraId:5},{value:"// API\n// 第一种方式\nchart.transform({ type: 'stackY' }).transform({ type: 'sortX' });\n\n// 第二种方式\nchart.transform([{ type: 'stackY' }, { type: 'sortX' }]);\n",paraId:6},{value:"标记转换会去修改每个通道绑定的数据，从而改变图表的展示形式。比如 StackY 转换堆叠了条形图 y 和 y1 通道绑定的列数据：",paraId:7,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city')\n    .transform({ type: 'stackY' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:8,tocIndex:0},{value:"在视图上声明的转换会传递给 ",paraId:9,tocIndex:1},{value:"children",paraId:9,tocIndex:1},{value:" 声明的标记。如果该标记没有转换就设置，否则没有影响。比如下面这个带有转换的堆叠面积图：",paraId:9,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city')\n    .transform({ type: 'stackY' }); // 视图层级的转换\n\n  chart.area().style('fillOpacity', 0.5);\n\n  chart.line().style('strokeWidth', 2).tooltip(false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:1},{value:"常见的转换的作用一般有两种：",paraId:11,tocIndex:2},{value:"防止重叠",paraId:12,tocIndex:2},{value:"数据聚合",paraId:12,tocIndex:2},{value:"转换的一个作用是防止重叠。比如如下的数据绘制的条形图中的条就重叠了。",paraId:13,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:3},{value:"这时候可以声明一个 DodgeX 去绘制分组条形图：",paraId:15,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city')\n    .transform({ type: 'dodgeX' }); // 声明转换\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:16,tocIndex:3},{value:"这其实就是标记转换的作用之一：",paraId:17,tocIndex:3},{value:"防止重叠",paraId:17,tocIndex:3},{value:"。除了 DodgeX 之外，还有 StackY，JitterX 等转换可以用于防止重叠。",paraId:17,tocIndex:3},{value:"除了防止重叠之外，还有一类标记转换主要是用来做数据聚合：比如 Bin 和 Group。和传统的数据聚合不同，标记聚合是发生在绘制之中，而不是在绘制之前。这使得我们不需要去操作抽象的原始数据，而是直接操作通道值即可。这大大提高了我们探索数据的效率。",paraId:18,tocIndex:4},{value:"首先我们如下绘制一个散点图，展现了企鹅 culmen_depth_mm 和 culmen_length_mm 的相关性。",paraId:19,tocIndex:4},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n      transform: [\n        { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n      ],\n    })\n    .encode('x', (d) => +d.culmen_depth_mm)\n    .encode('y', (d) => +d.culmen_length_mm);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:20,tocIndex:4},{value:"这时如果希望看企鹅 culmen_depth_mm 的分布情况，就可以使用 bin 对数据进行分箱。",paraId:21,tocIndex:4},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n      transform: [\n        { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n      ],\n    })\n    .encode('x', (d) => +d.culmen_depth_mm)\n    .transform({\n      type: 'binX', // 对 x 通道的值进行分箱\n      y: 'count', // 生成 y 通道，并且选择 count reducer 去统计每个箱子的总数\n    })\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:22,tocIndex:4},{value:"Bin 主要是用来聚合数值类型的数据，Group 主要针对离散数据。",paraId:23,tocIndex:4},{value:"我们也可以同时声明多个转换。比如在上面的企鹅的例子中，我们多考虑一个数据维度：企鹅的性别，就可以连续声明 Bin 和 StackY 转换。",paraId:24,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n      transform: [\n        { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n      ],\n    })\n    .encode('x', (d) => +d.culmen_depth_mm)\n    .encode('color', 'sex')\n    .transform({ type: 'binX', y: 'count' }) // 声明 bin 转换\n    .transform({ type: 'stackY', orderBy: 'sum', reverse: true }) // 声明 stack 转换\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:25,tocIndex:5}]},33636:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(49054);const t=[{value:"G2 中",paraId:0},{value:"视图（View）",paraId:0},{value:" 用来绘制多个标记。一个视图拥有一个坐标系，也是应用交互的最小单位。",paraId:0},{value:"({\n  type: 'view',\n  children: [{ type: 'interval' }],\n});\n",paraId:1},{value:"顶层 Chart 默认就是一个视图：",paraId:2},{value:"// 添加一个 Interval 到该视图\nchart.interval();\n",paraId:3},{value:"当顶层 Chart 添加了复合节点，可以通过 ",paraId:4},{value:"chart.view",paraId:4},{value:" 声明视图：",paraId:4},{value:"const spaceFlex = chart.spaceFlex();\n\nconst view = spaceFlex.view();\n\nview.line();\nview.point();\n",paraId:5},{value:"data",paraId:6,tocIndex:0},{value:" - 可视化的数据",paraId:7,tocIndex:0},{value:"encode",paraId:8,tocIndex:0},{value:" - 编码信息",paraId:7,tocIndex:0},{value:"scale",paraId:9,tocIndex:0},{value:" - 映射规则",paraId:7,tocIndex:0},{value:"transform",paraId:10,tocIndex:0},{value:" - 转化通道值",paraId:7,tocIndex:0},{value:"layout",paraId:11,tocIndex:0},{value:" - 布局算法配置",paraId:7,tocIndex:0},{value:"coordinate",paraId:12,tocIndex:0},{value:" - 坐标系变换",paraId:7,tocIndex:0},{value:"style",paraId:13,tocIndex:0},{value:" - 视觉样式",paraId:7,tocIndex:0},{value:"labelTransform",paraId:14,tocIndex:0},{value:" - 数据标签转换",paraId:7,tocIndex:0},{value:"title",paraId:15,tocIndex:0},{value:" - 图表标题",paraId:7,tocIndex:0},{value:"axis",paraId:16,tocIndex:0},{value:" - 坐标轴",paraId:7,tocIndex:0},{value:"legend",paraId:17,tocIndex:0},{value:" - 图例",paraId:7,tocIndex:0},{value:"scrollbar",paraId:18,tocIndex:0},{value:" - 滚动条",paraId:7,tocIndex:0},{value:"slider",paraId:19,tocIndex:0},{value:" - 拖拽轴",paraId:7,tocIndex:0},{value:"interaction",paraId:20,tocIndex:0},{value:" - 交互",paraId:7,tocIndex:0},{value:"theme",paraId:21,tocIndex:0},{value:" - 主题",paraId:7,tocIndex:0},{value:"({\n  type: 'view',\n  data: [],\n  encode: {},\n  scale: {},\n  transform: [],\n  coordinate: {},\n  style: {},\n  labelTransform: {},\n  title: {},\n  axis: {},\n  legend: {},\n  tooltip: {},\n  scrollbar: {},\n  slider: {},\n  interaction: {},\n  theme: {},\n});\n",paraId:22,tocIndex:0}]},90864:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57534);const t=[{value:"以 3D 散点图为例，创建图表需要以下步骤：",paraId:0},{value:"创建 WebGL 渲染器和插件",paraId:1},{value:"扩展 threedlib",paraId:1},{value:"设置 z 通道、比例尺和坐标轴",paraId:1},{value:"在场景中设置相机",paraId:1},{value:"添加光源",paraId:1},{value:"添加自定义图例",paraId:1},{value:"使用相机交互与动画",paraId:1},{value:"首先安装依赖：",paraId:2,tocIndex:0},{value:"$ npm install @antv/g-webgl @antv/g-plugin-3d @antv/g-plugin-control --save\n",paraId:3,tocIndex:0},{value:"然后使用 ",paraId:4,tocIndex:0},{value:"@antv/g-webgl",paraId:4,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:4,tocIndex:0},{value:"g-plugin-3d",paraId:5,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:5,tocIndex:0},{value:"g-plugin-control",paraId:5,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:5,tocIndex:0},{value:"import { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n",paraId:6,tocIndex:0},{value:"由于 3D 相关的功能代码体积巨大，我们将其分离到 ",paraId:7,tocIndex:1},{value:"threedlib",paraId:8,tocIndex:1},{value:" 中，在运行时扩展它并自定义 Chart 对象：",paraId:7,tocIndex:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\n",paraId:9,tocIndex:1},{value:"在创建 Chart 时通过 ",paraId:10,tocIndex:2},{value:"depth",paraId:10,tocIndex:2},{value:" 指定深度：",paraId:10,tocIndex:2},{value:"const chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400,\n});\n",paraId:11,tocIndex:2},{value:"我们使用 ",paraId:12,tocIndex:2},{value:"point3D",paraId:13,tocIndex:2},{value:" Mark 并选择 cube 作为 shape 进行绘制。\n随后设置 z 通道、比例尺和坐标轴。",paraId:12,tocIndex:2},{value:"chart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n",paraId:14,tocIndex:2},{value:"在 3D 场景中我们可以使用正交或者透视投影，在首次渲染完成后可以从 Chart 上下文中获取相机。随后可以使用 G 提供的",paraId:15,tocIndex:3},{value:"相机 API",paraId:15,tocIndex:3},{value:" 完成投影模式、相机类型的设置。在下面的例子中，我们使用了透视投影，",paraId:15,tocIndex:3},{value:"chart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera(); // 获取相机\n\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:16,tocIndex:3},{value:"效果如下：",paraId:17,tocIndex:3},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Origin')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:18,tocIndex:3},{value:"我们还可以让相机固定视点进行一定角度的旋转，这里使用了 ",paraId:19,tocIndex:3},{value:"rotate",paraId:19,tocIndex:3},{value:"：",paraId:19,tocIndex:3},{value:"camera.rotate(-20, -20, 0);\n",paraId:20,tocIndex:3},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Origin')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setType(g.CameraType.ORBITING);\n    camera.rotate(-20, -20, 0);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:21,tocIndex:3},{value:"材质需要配合光源呈现出某种“立体感”。这里我们使用 G 提供的",paraId:22,tocIndex:4},{value:"平行光源",paraId:22,tocIndex:4},{value:"：",paraId:22,tocIndex:4},{value:"import { DirectionalLight } from '@antv/g-plugin-3d';\n\nconst light = new DirectionalLight({\n  style: {\n    intensity: 3,\n    fill: 'white',\n    direction: [-1, 0, 1],\n  },\n});\ncanvas.appendChild(light);\n",paraId:23,tocIndex:4},{value:"我们可以通过 ",paraId:24,tocIndex:4},{value:"intensity",paraId:24,tocIndex:4},{value:" 增大光源的强度：",paraId:24,tocIndex:4},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Origin')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 5,\n        fill: 'white',\n        direction: [0, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:25,tocIndex:4},{value:"你可能注意到在上面的例子中我们刻意关闭了图例：",paraId:26,tocIndex:5},{value:"chart.legend(false);\n",paraId:27,tocIndex:5},{value:"这是由于 3D 场景中的图形都会受到相机影响，但像图例这样的 HUD 组件更适合独立绘制。参考",paraId:28,tocIndex:5},{value:"自定义图例",paraId:29,tocIndex:5},{value:"，我们可以使用 HTML 自定义图例：",paraId:28,tocIndex:5},{value:"(() => {\n  // 添加图例\n  function legendColor(chart) {\n    // 创建 Legend 并且挂在图例\n    const node = chart.getContainer();\n    const legend = document.createElement('div');\n    legend.style.display = 'flex';\n    node.insertBefore(legend, node.childNodes[0]);\n\n    // 创建并挂载 Items\n    const { color: scale } = chart.getScale();\n    const { domain } = scale.getOptions();\n    const items = domain.map((value) => {\n      const item = document.createElement('div');\n      const color = scale.map(value);\n      item.style.marginLeft = '1em';\n      item.innerHTML = `\n    <span style=\"\n      background-color:${color};\n      display:inline-block;\n      width:10px;\n      height:10px;\"\n    ></span>\n    <span>${value}</span>\n    `;\n      return item;\n    });\n    items.forEach((d) => legend.append(d));\n\n    // 监听事件\n    const selectedValues = [...domain];\n    const options = chart.options();\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const value = domain[i];\n      item.style.cursor = 'pointer';\n      item.onclick = () => {\n        const index = selectedValues.indexOf(value);\n        if (index !== -1) {\n          selectedValues.splice(index, 1);\n          item.style.opacity = 0.5;\n        } else {\n          selectedValues.push(value);\n          item.style.opacity = 1;\n        }\n        changeColor(selectedValues);\n      };\n    }\n\n    // 重新渲染视图\n    function changeColor(value) {\n      const { transform = [] } = options;\n      const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n      chart.options({\n        ...options,\n        transform: newTransform, // 指定新的 transform\n        scale: { color: { domain } },\n      });\n      chart.render(); // 重新渲染图表\n    }\n  }\n\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Origin')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    legendColor(chart);\n\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:30,tocIndex:5},{value:"3D 场景下的交互和 2D 场景有很大的不同，",paraId:31,tocIndex:6},{value:"g-plugin-control",paraId:31,tocIndex:6},{value:" 提供了 3D 场景下基于相机的交互。当我们拖拽画布时，会控制相机绕视点进行旋转操作，而鼠标滚轮的缩放会让相机进行 dolly 操作。需要注意的是缩放操作在正交投影下是没有效果的，但旋转操作依然有效。",paraId:31,tocIndex:6},{value:"当用户经过了一番相机操作，有时想回到初始状态，例如 ",paraId:32,tocIndex:6},{value:"plot.ly",paraId:32,tocIndex:6},{value:" 在操作工具栏中就提供了 “Reset camera to default” 按钮。使用 G 提供的",paraId:32,tocIndex:6},{value:"相机动画 API",paraId:32,tocIndex:6},{value:"，我们可以实现在任意相机位置间平滑过渡：",paraId:32,tocIndex:6},{value:"const camera = canvas.getCamera();\ncamera.createLandmark('default', {\n  position: [250, 250, 500],\n  focalPoint: [250, 250, 0],\n  zoom: 1,\n});\n\nbutton.onclick = () => {\n  camera.gotoLandmark('default', {\n    duration: 300,\n    easing: 'linear',\n  });\n};\n",paraId:33,tocIndex:6},{value:"(() => {\n  function cameraButton(chart) {\n    const node = chart.getContainer();\n    const button = document.createElement('button');\n    button.textContent = 'Reset camera to default';\n    node.insertBefore(button, node.childNodes[0]);\n\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.createLandmark('default', {\n      position: [250, 250, 500],\n      focalPoint: [250, 250, 0],\n      zoom: 1,\n    });\n\n    button.onclick = () => {\n      camera.gotoLandmark('default', {\n        duration: 300,\n        easing: 'linear',\n      });\n    };\n  }\n  // 添加图例\n  function legendColor(chart) {\n    // 创建 Legend 并且挂在图例\n    const node = chart.getContainer();\n    const legend = document.createElement('div');\n    legend.style.display = 'flex';\n    node.insertBefore(legend, node.childNodes[0]);\n\n    // 创建并挂载 Items\n    const { color: scale } = chart.getScale();\n    const { domain } = scale.getOptions();\n    const items = domain.map((value) => {\n      const item = document.createElement('div');\n      const color = scale.map(value);\n      item.style.marginLeft = '1em';\n      item.innerHTML = `\n    <span style=\"\n      background-color:${color};\n      display:inline-block;\n      width:10px;\n      height:10px;\"\n    ></span>\n    <span>${value}</span>\n    `;\n      return item;\n    });\n    items.forEach((d) => legend.append(d));\n\n    // 监听事件\n    const selectedValues = [...domain];\n    const options = chart.options();\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const value = domain[i];\n      item.style.cursor = 'pointer';\n      item.onclick = () => {\n        const index = selectedValues.indexOf(value);\n        if (index !== -1) {\n          selectedValues.splice(index, 1);\n          item.style.opacity = 0.5;\n        } else {\n          selectedValues.push(value);\n          item.style.opacity = 1;\n        }\n        changeColor(selectedValues);\n      };\n    }\n\n    // 重新渲染视图\n    function changeColor(value) {\n      const { transform = [] } = options;\n      const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n      chart.options({\n        ...options,\n        transform: newTransform, // 指定新的 transform\n        scale: { color: { domain } },\n      });\n      chart.render(); // 重新渲染图表\n    }\n  }\n\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Origin')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    legendColor(chart);\n    cameraButton(chart);\n\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:34,tocIndex:6}]},66308:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(36783);const t=[{value:"G2 5.0.19 版本推出了按需打包的功能。可以借助 ",paraId:0},{value:"Rollup",paraId:0},{value:", ",paraId:0},{value:"Webpack",paraId:0},{value:" 等打包工具的 ",paraId:0},{value:"Tree-Shaking",paraId:0},{value:" 能力来按需使用 G2 的特性，从而减少打包后的体积。虽然从结果上看还有不少优化空间，该功能的推出有以下几个意义：",paraId:0},{value:"防止已有 G2 5.0 用户的包体积无意义的增加。",paraId:1},{value:"能更清晰地分析依赖和整理 G2 5.0 的总体架构。",paraId:1},{value:"提供一种对 G2 5.0 能力扩展的思路。",paraId:1},{value:"比如打包如下的一个网页，该网页使用 G2 绘制了一个条形图：",paraId:2,tocIndex:0},{value:"<html>\n  <div id=\"container\"></div>\n  <script type=\"module\">\n    import { corelib, extend, Runtime } from '@antv/g2';\n\n    // 根据 Runtime 扩展 corelib 的能力\n    const Chart = extend(Runtime, corelib());\n\n    // 初始化扩展后的图表实例\n    const chart = new Chart({\n      container: 'container',\n    });\n\n    // 声明可视化\n    chart.options({\n      type: 'interval',\n      data: [\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Strategy', sold: 115 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Other', sold: 150 },\n      ],\n      encode: {\n        x: 'genre',\n        y: 'sold',\n      },\n    });\n\n    // 渲染可视化\n    chart.render();\n  <\/script>\n</html>\n",paraId:3,tocIndex:0},{value:"和直接使用 ",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2'",paraId:4,tocIndex:0},{value:" 暴露出的 Chart 对象的打包体积相比如下：",paraId:4,tocIndex:0},{value:"(() => {\n  const data = [\n    { lib: 'Chart', size: 957772, type: 'raw' },\n    { lib: 'Chart', size: 288753, type: 'gzip' },\n    { lib: 'Runtime', size: 855619, type: 'raw' },\n    { lib: 'Runtime', size: 252045, type: 'gzip' },\n  ];\n\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data,\n    encode: {\n      x: 'lib',\n      y: 'size',\n      color: 'type',\n    },\n    transform: [{ type: 'dodgeX' }],\n    scale: {\n      y: { nice: true },\n    },\n    axis: {\n      y: { labelFormatter: (d) => d / 1000 + 'kb' },\n      x: { title: false },\n    },\n    legend: {\n      color: { title: false },\n    },\n    labels: [{ text: (d) => (d.size / 1000).toFixed(2) + 'kb' }],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:5,tocIndex:0},{value:"可以发现体积减少了 ",paraId:6,tocIndex:0},{value:"100kb",paraId:6,tocIndex:0},{value:" 左右。",paraId:6,tocIndex:0},{value:"G2 的架构是由 Runtime + library 构成的。Runtime 负责渲染流程，library 是一个有一系列可视化组件构成的 JavaScript Object，用于在整个渲染的不同阶段处理或者绘制数据。",paraId:7,tocIndex:1},{value:"const library = {\n  'mark.interval': Interval,\n  'mark.forceGraph': ForceGraph,\n  'mark.geoPath': GeoPath,\n  'scale.linear': Linear,\n  'scale.log': Log,\n  //...\n};\n",paraId:8,tocIndex:1},{value:"所以打包后 G2 的大小由 Runtime 的大小和 library 共同决定。Runtime 的大小是固定的，但是 library 的大小是可以变化的：",paraId:9,tocIndex:1},{value:"如果我的项目中只用到了统计图表，就不会依赖地理或者图分析相关的能力，这部分能力对应的可视化组件就不用包含在使用的 library 里面。",paraId:9,tocIndex:1},{value:"基于上面的理论，我们可以通过控制 library 包含的可视化组件来控制最后的包体积。",paraId:10,tocIndex:1},{value:"下面简单介绍一下和按需打包相关的 API。",paraId:11,tocIndex:2},{value:"options",paraId:12},{value:"返回一个 G2 运行时。该运行时不包含任何 Library，需要配合 ",paraId:13,tocIndex:3},{value:"G2",paraId:14,tocIndex:3},{value:".extend",paraId:14,tocIndex:3},{value:" 一起使用。",paraId:13,tocIndex:3},{value:"可以单独使用一个 library，比如只使用核心的能力：",paraId:15,tocIndex:3},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:16,tocIndex:3},{value:"也可以同时使用多个 library，比如使用核心和地理能力：",paraId:17,tocIndex:3},{value:"import { Runtime, extend, corelib, geolib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...geolib(),\n});\n",paraId:18,tocIndex:3},{value:"Runtime",paraId:12},{value:"library",paraId:12},{value:"根据指定的 ",paraId:19,tocIndex:4},{value:"library",paraId:19,tocIndex:4},{value:" 对 ",paraId:19,tocIndex:4},{value:"Runtime",paraId:19,tocIndex:4},{value:" 进行增强，包括增加类型和对应的 Chart API。",paraId:19,tocIndex:4},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:20,tocIndex:4},{value:"返回标准库，包含 G2 非 3D 之外的所有能力，也就是包含 ",paraId:21,tocIndex:5},{value:"G2.corelib",paraId:22,tocIndex:5},{value:"，",paraId:21,tocIndex:5},{value:"G2.plotlib",paraId:23,tocIndex:5},{value:"，",paraId:21,tocIndex:5},{value:"G2.geolib",paraId:24,tocIndex:5},{value:"，以及",paraId:21,tocIndex:5},{value:"G2.graphlib",paraId:25,tocIndex:5},{value:" 的所有可视化组件。",paraId:21,tocIndex:5},{value:"G2.Chart",paraId:26,tocIndex:5},{value:" 就是使用了这个 library。(",paraId:21,tocIndex:5},{value:"源码",paraId:21,tocIndex:5},{value:" · ",paraId:21,tocIndex:5},{value:"案例",paraId:21,tocIndex:5},{value:")",paraId:21,tocIndex:5},{value:"import { Runtime, extend, stdlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, stdlib());\n\nconst chart = new Chart();\n\nchart.interval(); // corelib\nchart.sankey(); // plotlib\nchart.geoPath(); // graphlib\nchart.forceGraph(); // graphlib\n",paraId:27,tocIndex:5},{value:"返回核心库，只包含基础的 Mark。可以通过源码看包含的可视化组件。(",paraId:28,tocIndex:6},{value:"源码",paraId:28,tocIndex:6},{value:" · ",paraId:28,tocIndex:6},{value:"案例",paraId:28,tocIndex:6},{value:")",paraId:28,tocIndex:6},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:29,tocIndex:6},{value:"返回高级统计分析库，包含一些复杂的统计标记（Snakey 等）和转换（Venn 等）。不能单独使用，需要配合 ",paraId:30,tocIndex:7},{value:"G2.corelib",paraId:31,tocIndex:7},{value:" 使用。可以通过源码看包含的可视化组件。(",paraId:30,tocIndex:7},{value:"源码",paraId:30,tocIndex:7},{value:" · ",paraId:30,tocIndex:7},{value:"案例",paraId:30,tocIndex:7},{value:")",paraId:30,tocIndex:7},{value:"import { Runtime, extend, corelib, plotlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...plotlib(),\n});\n\nconst chart = new Chart();\n\nchart.sankey();\n",paraId:32,tocIndex:7},{value:"返回地理分析库，包含地理标记（GeoPath 等）和投影（Projection）。不能单独使用，需要配合 ",paraId:33,tocIndex:8},{value:"G2.corelib",paraId:34,tocIndex:8},{value:" 使用。可以通过源码看包含的可视化组件。(",paraId:33,tocIndex:8},{value:"源码",paraId:33,tocIndex:8},{value:" · ",paraId:33,tocIndex:8},{value:"案例",paraId:33,tocIndex:8},{value:")",paraId:33,tocIndex:8},{value:"import { Runtime, extend, corelib, geolib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...geolib(),\n});\n\nconst chart = new Chart();\n\nchart.geoPath();\n",paraId:35,tocIndex:8},{value:"返回图分析库，包含图标记（ForceGraph 等）。不能单独使用，需要配合 ",paraId:36,tocIndex:9},{value:"G2.corelib",paraId:37,tocIndex:9},{value:" 使用。可以通过源码看包含的可视化组件。(",paraId:36,tocIndex:9},{value:"源码",paraId:36,tocIndex:9},{value:" · ",paraId:36,tocIndex:9},{value:"案例",paraId:36,tocIndex:9},{value:")",paraId:36,tocIndex:9},{value:"import { Runtime, extend, corelib, graphlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...graphlib(),\n});\n\nconst chart = new Chart();\n\nchart.forceGraph();\n",paraId:38,tocIndex:9},{value:"返回增强分析库，提供增强分析标记（Auto 等）。该 library 会依赖 ",paraId:39,tocIndex:10},{value:"@antv/ava",paraId:39,tocIndex:10},{value:" ，提供自动绘制图表、自动标注等能力。不能单独使用，需要配合 ",paraId:39,tocIndex:10},{value:"G2.corelib",paraId:40,tocIndex:10},{value:" 使用。",paraId:39,tocIndex:10},{value:"import { Runtime, extend, corelib } from '@antv/g2';\nimport { autolib } from '@antv/g2-extension-ava';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...autolib(),\n});\n\nconst chart = new Chart();\n\nchart.auto(); // Auto Mark\n",paraId:41,tocIndex:10},{value:"开发中，预计 10 月底上线",paraId:42,tocIndex:11},{value:"返回 3D 分析库，提供 3D 可视化的能力。该 library 不会包含在 ",paraId:43,tocIndex:11},{value:"G2.stdlib",paraId:44,tocIndex:11},{value:" 里面，同样不能单独使用，需要配合 ",paraId:43,tocIndex:11},{value:"G2.corelib",paraId:45,tocIndex:11},{value:" 使用。",paraId:43,tocIndex:11},{value:"示例",paraId:46,tocIndex:11},{value:"import { Runtime, extend, corelib } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { Renderer } from '@antv/g-webgl';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\nconst chart = new Chart({\n  renderer: new Renderer(), //使用 webgl 渲染器\n  depth: 400, // 设置深度\n});\n\nchart.point3D();\n",paraId:47,tocIndex:11},{value:"目前是推出了按需打包的能力，但是可以发现效果不是很明显，只减少了 10% 左右的大小。通过分析如下 G2 5.0.18 使用 ",paraId:48,tocIndex:12},{value:"G2.stdlib",paraId:49,tocIndex:12},{value:" 依赖图可以有以下几个可以进一步优化思路：",paraId:48,tocIndex:12},{value:"减少 Runtime 的体积：把一些能力放在 library 里面可以按需使用。",paraId:50,tocIndex:12},{value:"依赖治理：去掉一些重复依赖，比如 ",paraId:50,tocIndex:12},{value:"@antv/util",paraId:50,tocIndex:12},{value:"；减少一些依赖的大小 ",paraId:50,tocIndex:12},{value:"@antv/component",paraId:50,tocIndex:12},{value:"。",paraId:50,tocIndex:12},{value:"提供比 corelib 更小的 library：可以实现 Mark 级别的按需打包。",paraId:50,tocIndex:12},{value:"针对第三个方法目前的思路是：提供 ",paraId:51,tocIndex:12},{value:"G2.litelib",paraId:51,tocIndex:12},{value:"，可以按需引入 Mark。",paraId:51,tocIndex:12},{value:"import { Runtime, extend, litelib, Interval } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...litelib,\n  'mark.interval': Interval,\n});\n\nconst chart = new Chart();\n\nchart.interval();\n",paraId:52,tocIndex:12},{value:"期望中的 ",paraId:53,tocIndex:12},{value:"litelib",paraId:53,tocIndex:12},{value:" 只包含绘制一个可视化所需要的基本组件，其余所有的组件都需要通过 ",paraId:53,tocIndex:12},{value:"import",paraId:53,tocIndex:12},{value:" 的形式按需使用，比如使用 tooltip 交互：",paraId:53,tocIndex:12},{value:"import { Runtime, extend, litelib, Interval, Tooltip } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...litelib,\n  'mark.interval': Interval,\n  'interaction.tooltip': Tooltip,\n});\n\nconst chart = new Chart();\n\nchart.options({\n  type: 'interval',\n  interaction: { tooltip: true }, // 使用 tooltip 交互\n});\n",paraId:54,tocIndex:12},{value:"如果大家对相关的东西感兴趣，或者对优化 G2 5.0 的包大小有想法，可以提供相关的",paraId:55,tocIndex:12},{value:"想法",paraId:55,tocIndex:12},{value:"或者在 G2 5.0 treeshaking 的",paraId:55,tocIndex:12},{value:"测试环境",paraId:55,tocIndex:12},{value:"把玩把玩！",paraId:55,tocIndex:12}]},17506:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(89417);const t=[{value:"颜色在可视化中起着非常重要的作用。它可以帮助我们更好地理解数据、突出显示关键信息、增强视觉吸引力和提高可读性。在可视化中颜色通常具有以下作用：",paraId:0},{value:"区分数据类别",paraId:1},{value:"：区分不同的数据类别。例如，在柱状图中，我们可以使用不同的颜色表示不同的产品类别，以便更容易地识别和比较它们。",paraId:1},{value:"表示数据的数量",paraId:1},{value:"：表示数据的数量。例如，在热力图中，我们可以使用颜色的深浅来表示数据的大小，深色表示较大的值，浅色表示较小的值。",paraId:1},{value:"突出显示关键信息",paraId:1},{value:"：突出显示关键信息。例如，在折线图中，我们可以使用鲜艳的颜色表示关注的数据点，以便更容易地找到它们。",paraId:1},{value:"增强视觉吸引力",paraId:1},{value:"：使可视化更具吸引力。使用鲜艳的颜色和有趣的配色方案可以让可视化更加生动和有趣。",paraId:1},{value:"提高可读性",paraId:1},{value:"：提高可视化的可读性。例如，在地图上，我们可以使用不同的颜色表示不同的地理区域，以便更容易地识别和理解它们。",paraId:1},{value:"设置数据无关的颜色，通过 ",paraId:2},{value:"mark.style(fill, color)",paraId:2},{value:" 或者 ",paraId:2},{value:"mark.style(stroke, color)",paraId:2},{value:" 即可，如果希望设置数据驱动的颜色，可以使用以下方式来设置颜色：",paraId:2},{value:"编码：",paraId:3},{value:"mark.encode",paraId:3},{value:"样式：",paraId:3},{value:"mark.style",paraId:3},{value:"通过 ",paraId:4,tocIndex:0},{value:"mark.encode",paraId:4,tocIndex:0},{value:" 去设置数据驱动的颜色是最常见的方式，同时通过颜色比例尺去配置最后的视觉展示。",paraId:4,tocIndex:0},{value:"scale.identity",paraId:5,tocIndex:0},{value:"：恒等映射",paraId:5,tocIndex:0},{value:"scale.range",paraId:5,tocIndex:0},{value:"：自定义色板",paraId:5,tocIndex:0},{value:"scale.palette",paraId:5,tocIndex:0},{value:"：内置的色板",paraId:5,tocIndex:0},{value:"scale.relations",paraId:5,tocIndex:0},{value:"：自定义映射关系",paraId:5,tocIndex:0},{value:"当设置颜色比例尺为恒等比例尺（Identity）的时候，color 通道的数据会被作为视觉数据绘制到最后的可视化中，但是不会去生成比例尺。",paraId:6,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275, color: 'red' },\n      { genre: 'Strategy', sold: 115, color: 'blue' },\n      { genre: 'Action', sold: 120, color: 'green' },\n      { genre: 'Shooter', sold: 350, color: 'red' },\n      { genre: 'Other', sold: 150, color: 'black' },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'color')\n    .scale('color', { type: 'identity' }); // 设置该比例尺为恒等映射\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:7,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .encode('color', 'letter')\n    .axis('y', { labelFormatter: '.0%' })\n    .scale('color', {\n      type: 'ordinal',\n      range: ['#7593ed', '#95e3b0', '#6c7893', '#e7c450', '#7460eb'],\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:8,tocIndex:2},{value:"G2 中可以通过设置 ",paraId:9,tocIndex:3},{value:"scale.palette",paraId:9,tocIndex:3},{value:" 去指定色板。这个色板可以是离散的：",paraId:9,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .encode('color', 'letter')\n    .axis('y', { labelFormatter: '.0%' })\n    .scale('color', { palette: 'tableau10' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:3},{value:"同时也可以是连续的：",paraId:11,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart({\n    \n    height: 320,\n  });\n\n  chart\n    .cell()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n    })\n    .transform({ type: 'group', color: 'max' })\n    .encode('x', (d) => new Date(d.date).getUTCDate())\n    .encode('y', (d) => new Date(d.date).getUTCMonth())\n    .encode('color', 'temp_max')\n    .scale('color', { palette: 'rainbow' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:3},{value:"目前内置的色板可以参考这个 ",paraId:13,tocIndex:3},{value:"palette 文档",paraId:14,tocIndex:3},{value:"。",paraId:13,tocIndex:3},{value:"可以通过 ",paraId:15,tocIndex:4},{value:"scale.relations",paraId:15,tocIndex:4},{value:" 去指定一系列映射规则，这个优先级别会高于 domain 到 range 的默认映射方式。比如对于 color 通道来讲，如果希望特定的值映射为特定的颜色，或者处理异常值，这个配置会很有用。",paraId:15,tocIndex:4},{value:"chart.interval().scale('color', {\n  relations: [\n    ['dog', 'red'], // dog 恒等映射为红色\n    [(d) => d === undefined, 'grey'], // 如果是值为 undefined，那么为灰色\n  ],\n});\n",paraId:16,tocIndex:4},{value:"通过 ",paraId:17,tocIndex:5},{value:"mark.style",paraId:17,tocIndex:5},{value:" 来设置颜色，这里设置的颜色比 ",paraId:17,tocIndex:5},{value:"encode.color",paraId:17,tocIndex:5},{value:" 的优先级更高，同时不会生成图例。",paraId:17,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .style('fill', (datum, index, data) => {\n      const { frequency } = datum;\n      if (frequency > 0.1) return '#3376cd';\n      if (frequency > 0.05) return '#f4bb51';\n      return '#b43a29';\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:18,tocIndex:5}]},47394:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57014);const t=[{value:"G2 有很强的扩展性：所有的可视化组件都可以自定义的。这里展示一些常见的可视化组件的自定义方式。",paraId:0},{value:"每一个标记都可以自定义形状，形状决定了标记最后的展现形式。自定义形状主要分为三步：",paraId:1,tocIndex:0},{value:"定义形状组件。",paraId:2,tocIndex:0},{value:"注册形状。",paraId:2,tocIndex:0},{value:"使用形状。",paraId:2,tocIndex:0},{value:"首先我们来看看如何定义形状组件。一个形状组件是一个函数，该函数接受图形的样式 ",paraId:3,tocIndex:0},{value:"style",paraId:3,tocIndex:0},{value:" 和上下文 ",paraId:3,tocIndex:0},{value:"context",paraId:3,tocIndex:0},{value:"，返回一个绘制函数 ",paraId:3,tocIndex:0},{value:"render",paraId:3,tocIndex:0},{value:" 。其中 ",paraId:3,tocIndex:0},{value:"style",paraId:3,tocIndex:0},{value:" 是通过 ",paraId:3,tocIndex:0},{value:"mark.style",paraId:3,tocIndex:0},{value:" 指定的经过处理的选项，",paraId:3,tocIndex:0},{value:"context",paraId:3,tocIndex:0},{value:" 包含了 ",paraId:3,tocIndex:0},{value:"@antv/g",paraId:3,tocIndex:0},{value:" 创建图形的 ",paraId:3,tocIndex:0},{value:"document",paraId:3,tocIndex:0},{value:" 。",paraId:3,tocIndex:0},{value:"返回的 ",paraId:4,tocIndex:0},{value:"render",paraId:4,tocIndex:0},{value:" 函数接受图形的控制点 ",paraId:4,tocIndex:0},{value:"P",paraId:4,tocIndex:0},{value:"，映射值 ",paraId:4,tocIndex:0},{value:"value",paraId:4,tocIndex:0},{value:" 和默认值 ",paraId:4,tocIndex:0},{value:"defaults",paraId:4,tocIndex:0},{value:"，返回 @antv/g 的图形。其中 ",paraId:4,tocIndex:0},{value:"P",paraId:4,tocIndex:0},{value:" 是一系列画布坐标构成的数组，",paraId:4,tocIndex:0},{value:"value",paraId:4,tocIndex:0},{value:" 是通过 ",paraId:4,tocIndex:0},{value:"mark.encode",paraId:4,tocIndex:0},{value:" 处理后的值，",paraId:4,tocIndex:0},{value:"defaults",paraId:4,tocIndex:0},{value:" 是主题中 ",paraId:4,tocIndex:0},{value:"theme.mark.shape",paraId:4,tocIndex:0},{value:" 指定的值。一个形状组件的定义大概如下：",paraId:4,tocIndex:0},{value:"function ShapeTriangle(style, context) {\n  const { document } = context;\n  return (P, value, defaults) => {\n    return document.createElement('rect', {\n      //...\n    });\n  };\n}\n",paraId:5,tocIndex:0},{value:"接下来就是注册形状，通过调用 ",paraId:6,tocIndex:0},{value:"G2.register('shape.${mark}.${shape}', Shape)",paraId:6,tocIndex:0},{value:" 来完成注册该形状。其中 ",paraId:6,tocIndex:0},{value:"mark",paraId:6,tocIndex:0},{value:" 是标记的名字，",paraId:6,tocIndex:0},{value:"shape",paraId:6,tocIndex:0},{value:" 是形状的名字，",paraId:6,tocIndex:0},{value:"Shape",paraId:6,tocIndex:0},{value:" 是定义好的形状组件。比如给 Interval 标记注册一个三角形的形状：",paraId:6,tocIndex:0},{value:"import { register } from '@antv/g2';\n\nregister('shape.interval.triangle', ShapeTriangle);\n",paraId:7,tocIndex:0},{value:"最后就是使用该形状了，可以通过 ",paraId:8,tocIndex:0},{value:"mark.encode",paraId:8,tocIndex:0},{value:" 指定，也可以通过 ",paraId:8,tocIndex:0},{value:"mark.style",paraId:8,tocIndex:0},{value:" 指定.",paraId:8,tocIndex:0},{value:"({\n  type: 'interval',\n  encode: { shape: 'triangle' },\n  // 或者\n  style: { shape: 'triangle' },\n});\n",paraId:9,tocIndex:0},{value:"// API\nchart.interval().encode('shape', 'triangle');\n\n// 或者\nchart.interval().style('shape', 'triangle');\n",paraId:10,tocIndex:0},{value:"下面是一个完整的例子，展示了如何自定义形状。",paraId:11,tocIndex:0},{value:"(() => {\n  // 定义图形组件\n  function ShapeTriangle(style, context) {\n    const { document } = context;\n    return (P, value, defaults) => {\n      const { color: defaultColor } = defaults;\n      const [p0, p1, p2, p3] = P;\n      const pm = [(p0[0] + p1[0]) / 2, p0[1]];\n      const { color = defaultColor } = value;\n      return document.createElement('polygon', {\n        style: {\n          ...style,\n          fill: color,\n          points: [pm, p2, p3],\n        },\n      });\n    };\n  }\n\n  // 注册该三角形\n  G2.register('shape.interval.triangle', ShapeTriangle);\n\n  // 初始化图表\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('shape', 'triangle'); // 使用这个形状\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:0},{value:"每一个符号都可以自定义，主要分为三步：",paraId:13,tocIndex:1},{value:"定义符号路径。",paraId:14,tocIndex:1},{value:"注册符号。",paraId:14,tocIndex:1},{value:"使用符号。",paraId:14,tocIndex:1},{value:"首先我们来看看如何定义符号路径。一个符号路径是一个函数，该函数接受起始点的横向坐标 x、纵向坐标 y 和绘制半径，返回一个路径。",paraId:15,tocIndex:1},{value:"import { type SymbolFactor } from '@antv/g2';\n\nconst triangle: SymbolFactor = (x, y, r) => {\n  const diffY = r * Math.sin((1 / 3) * Math.PI);\n  return [\n    ['M', x - r, y + diffY],\n    ['L', x, y - diffY],\n    ['L', x + r, y + diffY],\n    ['Z'],\n  ];\n};\ntriangle.style = ['fill'];\n",paraId:16,tocIndex:1},{value:"接下来就是注册符号，通过调用 ",paraId:17,tocIndex:1},{value:"G2.register('symbol.${symbol}', Symbol)",paraId:17,tocIndex:1},{value:" 来完成注册。其中 ",paraId:17,tocIndex:1},{value:"symbol",paraId:17,tocIndex:1},{value:" 是符号的名字，",paraId:17,tocIndex:1},{value:"Symbol",paraId:17,tocIndex:1},{value:" 是定义好的符号路径。比如注册一个三角形的符号：",paraId:17,tocIndex:1},{value:"import { register } from '@antv/g2';\n\nregister('symbol.customTriangle', triangle);\n",paraId:18,tocIndex:1},{value:"最后就是使用该符号了",paraId:19,tocIndex:1},{value:"legend: { \n  color: {\n    itemMarker: 'customTriangle'\n  } \n}\n",paraId:20,tocIndex:1},{value:"有时候内置的 Tooltip 无法满足需求，这时候可以通过 ",paraId:21,tocIndex:2},{value:"mark.interaction.tooltip.render",paraId:21,tocIndex:2},{value:" 或者 ",paraId:21,tocIndex:2},{value:"view.interaction.tooltip.render",paraId:21,tocIndex:2},{value:" 的 ",paraId:21,tocIndex:2},{value:"render",paraId:21,tocIndex:2},{value:" 函数来渲染自定义的提示。",paraId:21,tocIndex:2},{value:"该 ",paraId:22,tocIndex:2},{value:"render",paraId:22,tocIndex:2},{value:" 函数接受事件对象 ",paraId:22,tocIndex:2},{value:"event",paraId:22,tocIndex:2},{value:" 和提示数据 ",paraId:22,tocIndex:2},{value:"tooltipData",paraId:22,tocIndex:2},{value:"，返回一个 string 或者 DOM 对象。其中 ",paraId:22,tocIndex:2},{value:"event",paraId:22,tocIndex:2},{value:" 是 ",paraId:22,tocIndex:2},{value:"@antv/g",paraId:22,tocIndex:2},{value:" 抛出的鼠标对象，",paraId:22,tocIndex:2},{value:"tooltipData",paraId:22,tocIndex:2},{value:" 是通过 ",paraId:22,tocIndex:2},{value:"mark.tooltip",paraId:22,tocIndex:2},{value:" 声明的 title 和 items 数据。如果返回值是一个 string，那么会作为 tooltip 容器的 innerHTML，否则会挂载该返回值。一个提示的 render 函数的定义大概如下：",paraId:22,tocIndex:2},{value:"function render(event, tooltipData) {\n  const { title, items } = tooltipData;\n  return `<div></div>`;\n}\n",paraId:23,tocIndex:2},{value:"下面是一个简单的例子：",paraId:24,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .transform([{ type: 'sortX', by: 'y', reverse: true }])\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .interaction('tooltip', {\n      // render 回调方法返回一个innerHTML 或者 DOM\n      render: (event, { title, items }) => `<div>\n      <h3 style=\"padding:0;margin:0\">${title}</h3>\n      <ul>${items.map(\n        (d) =>\n          `<li><span style=\"color: ${d.color}\">${d.name}</span> ${d.value}</li>`,\n      )}</ul>\n      </div>`,\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:25,tocIndex:2},{value:"G2 内置的图例是用 canvas 或者 svg 绘制的，如果希望能用 HTML 渲染图例，就可以按照如下几步自定义图例：",paraId:26,tocIndex:3},{value:"关闭内置图例并且渲染图表。",paraId:27,tocIndex:3},{value:"等待图表渲染完成，根据 scale 数据渲染 HTML 图例。",paraId:27,tocIndex:3},{value:"添加交互（如果需要）。",paraId:27,tocIndex:3},{value:"首先是关闭内置图例，同时渲染图表。",paraId:28,tocIndex:3},{value:"chart.options({ legend: false });\n",paraId:29,tocIndex:3},{value:"然后是等待图表渲染完成，并且调用 ",paraId:30,tocIndex:3},{value:"legendColor",paraId:30,tocIndex:3},{value:" 渲染 HTML 图例：",paraId:30,tocIndex:3},{value:"chart.render().then(legendColor);\n",paraId:31,tocIndex:3},{value:"在 ",paraId:32,tocIndex:3},{value:"legendColor",paraId:32,tocIndex:3},{value:" 里我们首先需要把图例画出来，下面这个例子把图例画出来后，添加到了画布前面：",paraId:32,tocIndex:3},{value:"function legendColor(chart) {\n  const node = chart.getContainer();\n  const legend = document.createElement('div');\n  node.insertBefore(legend, node.childNodes[0]);\n\n  // ...\n}\n",paraId:33,tocIndex:3},{value:"画出了图例之后，我们需要绘制图例项，这个数据从对应通道的比例尺获得：",paraId:34,tocIndex:3},{value:"chart.getScale().color",paraId:34,tocIndex:3},{value:"，并且通过 scale 的 domain 和 range 获得对应的名字和值。",paraId:34,tocIndex:3},{value:"function legendColor(chart) {\n  // ...\n  const scale = chart.getScale().color;\n  const { domain } = scale.getOptions();\n  const items = domain.map(() => {});\n  // ...\n}\n",paraId:35,tocIndex:3},{value:"绘制完图例项之后我们就应该给每个图例项通过 ",paraId:36,tocIndex:3},{value:"item.onclick",paraId:36,tocIndex:3},{value:" 添加交互，收集当前选中的值，并且根据这个值去给图表的声明添加 Filter 转换，最后重新渲染图表。最后完整的实现如下：",paraId:36,tocIndex:3},{value:"(() => {\n  // 添加图例\n  function legendColor(chart) {\n    // 创建 Legend 并且挂在图例\n    const node = chart.getContainer();\n    const legend = document.createElement('div');\n    legend.style.display = 'flex';\n    node.insertBefore(legend, node.childNodes[0]);\n\n    // 创建并挂载 Items\n    const { color: scale } = chart.getScale();\n    const { domain } = scale.getOptions();\n    const items = domain.map((value) => {\n      const item = document.createElement('div');\n      const color = scale.map(value);\n      item.style.marginLeft = '1em';\n      item.innerHTML = `\n      <span style=\"\n        background-color:${color};\n        display:inline-block;\n        width:10px;\n        height:10px;\"\n      ></span>\n      <span>${value}</span>\n      `;\n      return item;\n    });\n    items.forEach((d) => legend.append(d));\n\n    // 监听事件\n    const selectedValues = [...domain];\n    const options = chart.options();\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const value = domain[i];\n      item.style.cursor = 'pointer';\n      item.onclick = () => {\n        const index = selectedValues.indexOf(value);\n        if (index !== -1) {\n          selectedValues.splice(index, 1);\n          item.style.opacity = 0.5;\n        } else {\n          selectedValues.push(value);\n          item.style.opacity = 1;\n        }\n        changeColor(selectedValues);\n      };\n    }\n\n    // 重新渲染视图\n    function changeColor(value) {\n      const { transform = [] } = options;\n      const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n      chart.options({\n        ...options,\n        transform: newTransform, // 指定新的 transform\n        scale: { color: { domain } },\n      });\n      chart.render(); // 重新渲染图表\n    }\n  }\n\n  // 绘制图表\n  const container = document.createElement('div');\n\n  const chart = new G2.Chart({\n    \n    container,\n  });\n\n  chart.options({\n    type: 'interval',\n    data: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: { x: 'genre', y: 'sold', color: 'genre' },\n    legend: false,\n  });\n\n  chart.render().then(legendColor);\n\n  return chart.getContainer();\n})();\n",paraId:37,tocIndex:3},{value:"如果不希望使用 G2 默认的坐标轴，就可以按照以下几步自定义拖拽轴：",paraId:38,tocIndex:4},{value:"在渲染结束后渲染 slider。",paraId:39,tocIndex:4},{value:"监听 slider 事件。",paraId:39,tocIndex:4},{value:"第一步的的关键是通过 ",paraId:40,tocIndex:4},{value:"chart.getCoordinate",paraId:40,tocIndex:4},{value:" 获得的 coordinate 对象确定 slider 的位置和长度。第二步的关键是通过 ",paraId:40,tocIndex:4},{value:"chart.getScale",paraId:40,tocIndex:4},{value:" 获得 scale 对选择的范围进行 invert，最后获得选择的数据范围，然后更新 scale 的定义域。",paraId:40,tocIndex:4},{value:"(() => {\n  function sliderX(chart) {\n    // 创建并且挂载 range\n    const container = chart.getContainer();\n    const range = document.createElement('input');\n    container.append(range);\n\n    // 根据 coordinate 设置 range 的宽度等属性\n    const coordinate = chart.getCoordinate();\n    const { paddingLeft, width } = coordinate.getOptions();\n    range.type = 'range';\n    range.min = 0;\n    range.max = width;\n    range.value = width;\n    range.style.display = 'block';\n    range.style.width = width + 'px';\n    range.style.marginLeft = paddingLeft + 'px';\n\n    // 监听 change 事件，通过 scale 获得筛选得到的 domain\n    // 更新 domain 并且渲染\n    const scale = chart.getScaleByChannel('x');\n    const options = chart.options();\n    range.onchange = (event) => {\n      const value = event.target.value;\n      const range = [0, value / width];\n      const domain = range.map((d) => scale.invert(d));\n      chart.options({\n        ...options,\n        scale: { x: { domain } },\n      });\n      chart.render();\n    };\n  }\n\n  // 渲染图表\n  const container = document.createElement('div');\n  const chart = new G2.Chart({ container });\n\n  chart.options({\n    type: 'line',\n      data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n    },\n    encode: { x: 'date', y: 'close' },\n  });\n\n  chart.render().then(sliderX);\n\n  return chart.getContainer();\n})();\n",paraId:41,tocIndex:4}]},97757:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(31859);const t=[{value:"G2 对外暴露了一些事件，用于获取图表的生命周期，以及交互信息。G2 导出了一个 ",paraId:0},{value:"ChartEvent",paraId:0},{value:" 类型，用于定义事件的类型。",paraId:0},{value:"import { Chart, ChartEvent } from '@antv/g2';\n\nconst chart = new Chart({\n  container,\n  canvas,\n});\n\nchart.data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n\nchart\n  .interval()\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .axis({ x: { animate: false }, y: { animate: false } });\n\nchart.on('interval:click', (e) => {\n  console.log(e.data.data); // 展示点击的数据\n});\n\nchart.on('element:click', (e) => {\n  console.log(e.data.data); // 展示点击的数据\n});\n\nchart.render();\n",paraId:1},{value:"如果想要获取图表的生命周期信息，可以通过下面的方式：",paraId:2,tocIndex:0},{value:"chart.on(ChartEvent.AFTER_RENDER, (ev) => {\n  console.log(ev);\n});\n",paraId:3,tocIndex:0},{value:"G2 目前提供了以下生命周期事件：",paraId:4,tocIndex:0},{value:"事件名",paraId:5,tocIndex:0},{value:"说明",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_RENDER",paraId:5,tocIndex:0},{value:"渲染前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_PAINT",paraId:5,tocIndex:0},{value:"绘制前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_PAINT",paraId:5,tocIndex:0},{value:"绘制后",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_RENDER",paraId:5,tocIndex:0},{value:"渲染后",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CHANGE_DATA",paraId:5,tocIndex:0},{value:"更改数据前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CHANGE_DATA",paraId:5,tocIndex:0},{value:"更改数据后",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CLEAR",paraId:5,tocIndex:0},{value:"清理画布前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CLEAR",paraId:5,tocIndex:0},{value:"清理画布后",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_DESTROY",paraId:5,tocIndex:0},{value:"销毁画布前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_DESTROY",paraId:5,tocIndex:0},{value:"销毁画布后",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CHANGE_SIZE",paraId:5,tocIndex:0},{value:"更改画布尺寸前",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CHANGE_SIZE",paraId:5,tocIndex:0},{value:"更改画布尺寸后",paraId:5,tocIndex:0},{value:"渲染前",paraId:6,tocIndex:0},{value:"：指 G2 着手开始处理数据，进行布局，绘制图形等操作。",paraId:6,tocIndex:0},{value:"绘制前",paraId:6,tocIndex:0},{value:"： 指完成数据处理，布局，绘制图形等操作，但是还没有进行绘制。",paraId:6,tocIndex:0},{value:"绘制后",paraId:6,tocIndex:0},{value:"： 指 G2 完成所有的绘制操作，但可能存在动画，动画结束后，图表才算真正的渲染完成。",paraId:6,tocIndex:0},{value:"渲染后",paraId:6,tocIndex:0},{value:"： 指 G2 完成所有的绘制操作，包括动画。",paraId:6,tocIndex:0},{value:"清理画布后",paraId:6,tocIndex:0},{value:"： 容器中的图表已经被清理，但是 G2 实例还存在，可以继续使用。",paraId:6,tocIndex:0},{value:"销毁画布后",paraId:6,tocIndex:0},{value:"： G2 实例已经被销毁，无法再使用。",paraId:6,tocIndex:0},{value:"如果你想要获取图表的交互信息，可以通过下面的方式：",paraId:7,tocIndex:1},{value:"监听全局 ",paraId:8,tocIndex:1},{value:"element",paraId:8,tocIndex:1},{value:" 事件",paraId:8,tocIndex:1},{value:"chart.on(`element:${ChartEvent.EventType}`, (ev) => {\n  console.log(ev);\n});\n",paraId:9,tocIndex:1},{value:"监听指定 ",paraId:10,tocIndex:1},{value:"element",paraId:10,tocIndex:1},{value:" 事件",paraId:10,tocIndex:1},{value:"chart.on(`${markType}:${ChartEvent.EventType}`, (ev) => {\n  console.log(ev);\n});\n\n// 如，监听柱状图中的柱子的点击事件\nchart.on(`interval:${ChartEvent.CLICK}`, (ev) => {\n  console.log(ev);\n});\n",paraId:11,tocIndex:1},{value:"监听 plot 区域事件",paraId:12,tocIndex:1},{value:"chart.on('plot:click', (event) => console.log(event));\n",paraId:13,tocIndex:1},{value:"监听全局 component 事件",paraId:14,tocIndex:1},{value:"chart.on('component:click', (event) => console.log(event));\n",paraId:15,tocIndex:1},{value:"监听全局 label 事件",paraId:16,tocIndex:1},{value:"chart.on('label:click', (event) => console.log(event));\n",paraId:17,tocIndex:1},{value:"事件名",paraId:18,tocIndex:2},{value:"说明",paraId:18,tocIndex:2},{value:"回调参数",paraId:18,tocIndex:2},{value:"ChartEvent.",paraId:18,tocIndex:2},{value:"CLICK",paraId:18,tocIndex:2},{value:"点击",paraId:18,tocIndex:2},{value:"Event",paraId:18,tocIndex:2},{value:"ChartEvent.",paraId:18,tocIndex:2},{value:"DBLCLICK",paraId:18,tocIndex:2},{value:"双击",paraId:18,tocIndex:2},{value:"Event",paraId:18,tocIndex:2},{value:"事件名",paraId:19,tocIndex:3},{value:"说明",paraId:19,tocIndex:3},{value:"回调参数",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_TAP",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_DOWN",paraId:19,tocIndex:3},{value:"当指针按下时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_UP",paraId:19,tocIndex:3},{value:"当指针松开时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_OVER",paraId:19,tocIndex:3},{value:"当指针进入目标元素时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_OUT",paraId:19,tocIndex:3},{value:"当指针离开目标元素时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_MOVE",paraId:19,tocIndex:3},{value:"当指针改变坐标时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_ENTER",paraId:19,tocIndex:3},{value:"当指针进入目标元素或其子元素时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_LEAVE",paraId:19,tocIndex:3},{value:"当指针离开目标元素或其子元素时",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_UPOUTSIDE",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"如果希望监听拖拽事件，需要设置 draggable 和 droppable 属性",paraId:20,tocIndex:4},{value:"chart.interval().style('draggable', true).style('droppable', true);\n",paraId:21,tocIndex:4},{value:"事件名",paraId:22,tocIndex:4},{value:"说明",paraId:22,tocIndex:4},{value:"回调参数",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_START",paraId:22,tocIndex:4},{value:"开始拖拽时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG",paraId:22,tocIndex:4},{value:"拖拽过程中",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_END",paraId:22,tocIndex:4},{value:"拖拽完成时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_ENTER",paraId:22,tocIndex:4},{value:"元素被拖拽进入目标元素内时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_LEAVE",paraId:22,tocIndex:4},{value:"元素被拖拽离开目标元素时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_OVER",paraId:22,tocIndex:4},{value:"元素被拖拽悬停在目标元素内时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DROP",paraId:22,tocIndex:4},{value:"元素被放置到目标元素内时",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4}]},34732:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(60615);const t=[{value:"G2 5.0 和 4.0 版本一样，提供了一套命令式的 Functional API 去声明图表，比如如下声明一个最简单的条形图。",paraId:0},{value:"(() => {\n  // 初始化图表实例\n  const chart = new G2.Chart();\n\n  // 声明可视化\n  chart\n    .interval() // 创建一个 Interval 标记\n    .data([\n      // 绑定数据\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre') // 编码 x 通道\n    .encode('y', 'sold'); // 编码 y 通道\n\n  // 渲染可视化\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:1},{value:"除了这套函数式风格之外，G2 5.0 还提供了一套全新的 API：Spec API。该 API 通过一个 JavaScript 对象去声明可视化。",paraId:2},{value:"目前我们通过 ",paraId:3,tocIndex:0},{value:"chart.options(spec)",paraId:3,tocIndex:0},{value:" 去声明可视化，下面的例子可以得到和上面一样的效果。",paraId:3,tocIndex:0},{value:"(() => {\n  // 初始化图表实例\n  const chart = new G2.Chart();\n\n  // 声明可视化\n  chart.options({\n    type: 'interval', // 创建一个 Interval 标记\n    data: [\n      // 绑定数据\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: {\n      x: 'genre', // 编码 x 通道\n      y: 'sold', // 编码 y 通道\n    },\n  });\n\n  // 渲染可视化\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:4,tocIndex:0},{value:"可以发现，两种 API 初始化图表实例和最后渲染是一致的，但是中间声明可视化的方式却不同，接下来我们就来简单看看两者的异同。",paraId:5,tocIndex:1},{value:"Functional API 是基于 Spec API 实现的：简单来讲，每一个 Chart 实例都有一个 options，Functional API 是通过一系列方法去生成这个 options，而 Spec API 是直接设置这个 options。不论是哪种形式的 API，G2 最后都是直接渲染当前的 options，所以两者声明可视化的能力是完全等价。",paraId:6,tocIndex:1},{value:"在大部分场景下，两者更多只是一个风格上的选择，但是也有一些差别：",paraId:7,tocIndex:1},{value:"易用性",paraId:8,tocIndex:1},{value:"：Spec API 从易用性上讲更胜一筹，对初学者或者不需要深入了解 G2 的用户更友好。JavaScript 对象这种结构型更强的表达，会天然比函数表达更易懂一点。并且其往往是一个整体，更容易复制、粘贴和“调参”。",paraId:8,tocIndex:1},{value:"灵活性",paraId:8,tocIndex:1},{value:"：Functional API 优势在灵活性，更适合对函数式、",paraId:8,tocIndex:1},{value:"D3",paraId:8,tocIndex:1},{value:" 更加熟悉的用户。但是它的灵活性并不是体现在能绘制出更加复杂的可视化，而是体现在声明可视化的形式会更加灵活。其中有一个优点就是更容易去组织关注点。",paraId:8,tocIndex:1},{value:"比如希望上面条形图中的条依次出现，那么就需要增加一个 encode 和 transform。下面第一种 Spec API 看上去会比第二种 Functional API 更清晰一点，但是后者可以把和动画相关的属性（相同的关注点）放在一起，而前者就不行。",paraId:9,tocIndex:1},{value:"chart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    enterDuration: 1000,\n  },\n  transform: [{ type: 'stackEnter' }],\n});\n",paraId:10,tocIndex:1},{value:"chart\n  .interval()\n  .data(data)\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  // 这两个都和动画有关，可以放在一起。\n  .encode('enterDuration', 1000)\n  .transform({ type: 'stackEnter' });\n",paraId:11,tocIndex:1},{value:"当然 Spec API 不仅仅有简单这一个特点，它还有更多的应用场景：",paraId:12,tocIndex:2},{value:"智能可视化",paraId:13,tocIndex:2},{value:"：可以基于 Spec 进行推荐和纠错等。",paraId:13,tocIndex:2},{value:"上层封装",paraId:13,tocIndex:2},{value:"：转换 Spec 对应的 Options 会比直接调用更容易。",paraId:13,tocIndex:2},{value:"低代码搭建",paraId:13,tocIndex:2},{value:"：可以基于 Spec 直接生成配置面板，搭建一个 BI 工具。",paraId:13,tocIndex:2},{value:"图表运算",paraId:13,tocIndex:2},{value:"：Spec 也可以看做一种数据结构，如果是数据结构，就可以做一系列运算，比如图片相加等。",paraId:13,tocIndex:2},{value:"服务端渲染",paraId:13,tocIndex:2},{value:"：可以直接把 Spec 对应的 Options 渲染成图片。",paraId:13,tocIndex:2},{value:"......",paraId:13,tocIndex:2},{value:"后面 G2 围绕基于这一套新的 API 做一系列工具供大家使用，如果大家有想法也可以在这里讨论参与",paraId:14,tocIndex:2},{value:"共建",paraId:14,tocIndex:2},{value:"。",paraId:14,tocIndex:2},{value:"下面通过一些案例给大家展示一下 Spec API 的使用方法。",paraId:15,tocIndex:3},{value:"(() => {\n  // 初始化图表实例\n  const chart = new G2.Chart();\n\n  // 声明可视化\n  chart.options({\n    type: 'interval',\n    height: 640,\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/79fd9317-d2af-4bc4-90fa-9d07357398fd.csv',\n    },\n    transform: [{ type: 'stackY' }],\n    coordinate: { type: 'theta' },\n    scale: {\n      color: { palette: 'spectral', offset: (t) => t * 0.8 + 0.1 },\n    },\n    legend: false,\n    encode: { y: 'value', color: 'name' },\n    style: { stroke: 'white' },\n    labels: [\n      {\n        text: 'name',\n        radius: 0.8,\n        style: { fontSize: 10, fontWeight: 'bold' },\n      },\n      {\n        text: (d, i, data) => (i < data.length - 3 ? d.value : ''),\n        radius: 0.8,\n        style: { fontSize: 9, dy: 12 },\n      },\n    ],\n    animate: { enter: { type: 'waveIn', duration: 1000 } },\n  });\n\n  // 渲染可视化\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:16,tocIndex:4},{value:"(() => {\n  // 初始化图表实例\n  const chart = new G2.Chart();\n\n  // 声明可视化\n  chart.options({\n    type: 'spaceFlex',\n    width: 900,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n    },\n    direction: 'col',\n    ratio: [1, 2],\n    children: [\n      {\n        type: 'interval',\n        paddingBottom: 0,\n        paddingRight: 300,\n        transform: [{ type: 'groupX', y: 'max' }],\n        axis: { x: false },\n        encode: {\n          x: (d) => new Date(d.date).getUTCDate(),\n          y: 'temp_max',\n          color: 'steelblue',\n        },\n      },\n      {\n        type: 'spaceFlex',\n        ratio: [2, 1],\n        children: [\n          {\n            type: 'cell',\n            paddingRight: 0,\n            paddingBottom: 50,\n            transform: [{ type: 'group', color: 'max' }],\n            encode: {\n              x: (d) => new Date(d.date).getUTCDate(),\n              y: (d) => new Date(d.date).getUTCMonth(),\n              color: 'temp_max',\n            },\n            style: { inset: 0.5 },\n            axis: {\n              x: { title: 'Date' },\n              y: { title: 'Month' },\n            },\n            scale: { color: { palette: 'gnBu' } },\n            legend: false,\n          },\n          {\n            type: 'interval',\n            paddingBottom: 50,\n            transform: [{ type: 'groupX', y: 'max' }],\n            coordinate: { transform: [{ type: 'transpose' }] },\n            axis: { x: false },\n            encode: {\n              x: (d) => new Date(d.date).getUTCMonth(),\n              y: 'temp_max',\n              color: 'steelblue',\n            },\n          },\n        ],\n      },\n    ],\n  });\n\n  // 渲染可视化\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:17,tocIndex:5}]},65866:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(73869);const t=[{value:"G2 栈团队还会继续维护 v4 版本，针对 Bug 发布 Patch 版本修复，但是此后不再接收新的 Feature Request，截止日期为 2023 年年底。原 v4 官网迁移至 ",paraId:0},{value:"https://g2-v4.antv.vision/",paraId:0},{value:" 。",paraId:0},{value:"本文旨在帮助那些已经熟悉 G24.0 的用户了解 4.0 和 5.0 版本之间的区别。读者可以选择直接阅读新的文档，而不需要从头到尾阅读本文。本文将突出显示两个版本之间各个概念对应 API 的变化。",paraId:1},{value:"4.0 的 padding 和 appendPadding 是一个数组，5.0 将其拆开了并且修改 appendPadding 为 margin。",paraId:2,tocIndex:0},{value:"// 4.0\nconst chart = new Chart({\n  width: 600,\n  height: 400,\n  padding: [10, 20, 30, 40],\n  appendPadding: [10, 20, 30, 40],\n});\n\n// 5.0\nconst chart = new Chart({\n  width: 600,\n  height: 400,\n  paddingLeft: 10,\n  paddingTop: 20,\n  paddingRight: 30,\n  paddingBottom: 40,\n  marginLeft: 10,\n  marginTop: 20,\n  marginRight: 30,\n  marginBottom: 40,\n});\n",paraId:3,tocIndex:0},{value:"4.0 中每个视图和一份数据绑定，该视图中的标记（前几何元素）共用一份数据。5.0 中每个视图中的所有标记可以有独立的数据，默认会同步比例尺。",paraId:4,tocIndex:1},{value:"// 4.0\nchart.data(data);\nchart.line();\nchart.point();\n\n// 5.0\nchart.line().data(data1);\nchart.line().data(data2);\n",paraId:5,tocIndex:1},{value:"5.0 在编码方式上和 4.0 有以下的一系列不同：",paraId:6,tocIndex:2},{value:"4.0 通过 geometry.position、geometry.color 等顶层 API 去编码通道。5.0 通过 mark.encode 去编码，并且不支持 * 语法。",paraId:7,tocIndex:3},{value:"// 4.0\nchart.interval().position('name*value').color('genre');\n\n// 5.0\nchart\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'genre');\n",paraId:8,tocIndex:3},{value:"4.0 中编码的回调，会从原始数据里面提供对应的字段。5.0 中编码的回调只提供原始数据。",paraId:9,tocIndex:4},{value:"// 4.0\nchart.interval().color('name*value', (name, value) => {});\n\n// 5.0\nchart\n  .interval()\n  // 需要自己解构\n  .encode('color', ({ name, value }) => {});\n",paraId:10,tocIndex:4},{value:"4.0 回调返回视觉数据。5.0 回调默认返回抽象数据。",paraId:11,tocIndex:5},{value:"// 4.0\nchart.interval().color('name', (name) => (name > 10 ? 'red' : 'yellow'));\n\n// 5.0\nchart\n  .interval()\n  .encode('color', (d) => (d.name > 10 ? 'high' : 'low')) // 抽象数据\n  .scale('color', { range: ['red', 'yellow'] }); // 指定值域\n\n// 5.0\nchart\n  .interval()\n  .encode('color', (d) => (d.name > 10 ? 'red' : 'yellow'))\n  .scale('color', { type: 'identity' });\n",paraId:12,tocIndex:5},{value:"4.0 通过 geometry.color 的第二个参数声明颜色值域，5.0 通过 scale.color 指定。",paraId:13,tocIndex:6},{value:"// 4.0\nchart.interval().color('name', ['red', 'blue']);\nchart.interval().color('name', '#fff-#000');\n\n// 5.0\nchart\n  .interval()\n  .encode('color', 'name') // 离散\n  .scale('color', { range: ['red', 'blue'] });\n\nchart\n  .interval()\n  .encode('color', 'name') //连续\n  .scale('color', { range: '#fff-#000' });\n",paraId:14,tocIndex:6},{value:"4.0 会尝试解析时间字符串，5.0 不会去尝试解析，需要显示地转换成 Date 对象。",paraId:15,tocIndex:7},{value:"const data = [\n  { year: '2020-10-01', value: 1 },\n  { year: '2022-10-01', value: 2 },\n  { year: '2023-10-01', value: 3 },\n];\n\n// 4.0\nchart.line().position('year*value');\n\n// 5.0\nchart\n  .line()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'value');\n",paraId:16,tocIndex:7},{value:"4.0 中样式的回调作用于整个对象上。5.0 中作用于每一个属性。",paraId:17,tocIndex:8},{value:"// 4.0\nchart\n  .interval()\n  .style('a*b', (a, b) =>\n    a + b > 10\n      ? { stroke: 'red', strokeWidth: 10 }\n      : { stroke: 'black', strokeWidth: 5 },\n  );\n\n// 5.0\nchart\n  .interval()\n  .style('stroke', ({ a, b }) => (a + b > 10 ? 'red' : 'black'))\n  .style('strokeWidth', ({ a, b }) => (a + b > 10 ? 10 : 5));\n",paraId:18,tocIndex:8},{value:"5.0 在比例尺的使用下和 4.0 有以下的一系列不同：",paraId:19,tocIndex:9},{value:"4.0 的比例尺是和字段绑定的，5.0 的比例尺是和通道绑定。",paraId:20,tocIndex:10},{value:"const data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n// 4.0\nchart.data(data);\nchart.scale('genre', {});\nchart.interval().color('genre');\n\n// 5.0\nchart\n  .interval()\n  .data(data)\n  .encode('color', 'genre')\n  // 设置 color 通道比例尺\n  .scale('color', {});\n",paraId:21,tocIndex:10},{value:"比例尺的部分属性变化如下：",paraId:22,tocIndex:11},{value:"定义域：values -> domain",paraId:23,tocIndex:11},{value:"定义域最小值：min -> domainMin",paraId:23,tocIndex:11},{value:"定义域最大值：max -> domainMax",paraId:23,tocIndex:11},{value:"// 4.0\nchart.scale('genre', { values: ['a', 'b', 'c'] });\n\n// 5.0\nchart.scale('color', { domain: ['a', 'b', 'c'] });\n",paraId:24,tocIndex:11},{value:"4.0 的离散比例尺有 cat 和 timeCat，在 5.0 中 cat 变成了 band，point 和 ordinal 比例尺，timeCat 被移除了。",paraId:25,tocIndex:12},{value:"// 4.0\nchart.scale('genre', { type: 'cat' });\n\n// 5.0\nchart\n  .interval()\n  .encode('x', 'name')\n  .encode('color', 'name')\n  // interval 的 x 通道默认是 band 比例尺\n  .scale('x', { type: 'band', range: [0.1, 0.9] })\n  .scale('color', { type: 'ordinal', range: ['red', 'blue'] });\n\nchart\n  .point()\n  .encode('x', 'name')\n  // point 比例尺\n  .scale('point', {});\n",paraId:26,tocIndex:12},{value:"4.0 坐标系属性在 cfg 里面，通过 actions 去指定坐标系变换；5.0 坐标系属性平铺，同时通过 transform 去声明坐标系变换。",paraId:27,tocIndex:13},{value:"// 4.0\nchart.coordinate({\n  type: 'polar',\n  cfg: {\n    radius: 0.85,\n  },\n  actions: [['transpose']],\n});\n\n// 5.0\nchart.coordinate({\n  type: 'polar',\n  outerRadius: 0.85,\n  transform: [{ type: 'transpose' }],\n});\n",paraId:28,tocIndex:13},{value:"4.0 每个元素只能声明一个标签，5.0 每个元素可以声明多个标签。",paraId:29,tocIndex:14},{value:"// 4.0\nchart.interval().label('field', (d) =>\n  d > 10\n    ? 'red'\n    : 'blue'\n    ? {\n        style: { color: 'red', stroke: 'red' },\n      }\n    : {\n        style: { color: 'black', stroke: 'black' },\n      },\n);\n\n// 5.0\nchart\n  .interval()\n  .label({\n    text: 'field', // 指定内容\n    style: {\n      color: d > 10 ? 'red' : 'black', // 设置属性\n      stroke: d > 10 ? 'red' : 'black',\n    },\n  })\n  .label({ text: (d) => d.value });\n",paraId:30,tocIndex:14},{value:"4.0 可以通过 tooltip.containerTpl 自定义提示信息，5.0 通过 render 函数自定义提示信息。",paraId:31,tocIndex:15},{value:"// 4.0\nchart.tooltip({ containerTpl: `<div></div>` });\n\n// 5.0\nchart.interaction('tooltip', {\n  render: () => `<div></div>`,\n});\n",paraId:32,tocIndex:15},{value:"4.0 中有 appear 动画，5.0 将其合并到了 enter 动画里面去。",paraId:33,tocIndex:16},{value:"// 4.0\nchart.interval().animate({\n  appear: {\n    animation: 'fade-in',\n    easing: 'easeQuadIn',\n    delay: 100,\n    duration: 600,\n  },\n});\n\n// 5.0\nchart.interval().animate('enter', {\n  type: 'fadeIn',\n  easing: 'easeQuadIn',\n  delay: 100,\n  duration: 600,\n});\n",paraId:34,tocIndex:16},{value:"4.0 通过 ",paraId:35,tocIndex:17},{value:"chart.removeInteraction(name)",paraId:35,tocIndex:17},{value:" 移除交互，5.0 通过 ",paraId:35,tocIndex:17},{value:"chart.interaction(name, false)",paraId:35,tocIndex:17},{value:" 移除交互。",paraId:35,tocIndex:17},{value:"// 4.0\nchart.removeInteraction('tooltip');\n\n// 5.0\nchart.interaction('tooltip', false);\n",paraId:36,tocIndex:17},{value:"在 4.0 中图中的元素分为几何元素（Geometry）和标注（Annotation），在 5.0 中两者都是标注（Mark）。",paraId:37,tocIndex:18},{value:"在 4.0 中标注通过 annotation 这个名称空间去声明，5.0 声明方式和标记保持一致。",paraId:38,tocIndex:19},{value:"// 4.0\nchart.annotation().line({});\n\n// 5.0\nchart.lineX();\n",paraId:39,tocIndex:19},{value:"在 4.0 通过 start 和 end 去标注特定值，5.0 通过 transform 去标注特定值。",paraId:40,tocIndex:20},{value:"// 4.0\nchart.annotation().line({\n  start: ['min', 'mean'],\n  end: ['max', 'mean'],\n});\n\n// 5.0\nchart\n  .lineX()\n  .encode('y', 'value')\n  // 选择 y 通道最小的值\n  .transform({ type: 'selectY', y: 'mean' });\n",paraId:41,tocIndex:20},{value:"4.0 分面通过 facet 这个名称空间去声明，5.0 和标记保持一致。",paraId:42,tocIndex:21},{value:"// 4.0\nchart.facet('rect', {\n  fields: ['cut', 'clarity'],\n  eachView(view) {\n    view\n      .point()\n      .position('carat*price')\n      .color('cut')\n      .shape('circle')\n      .style({ fillOpacity: 0.3, stroke: null })\n      .size(3);\n  },\n});\n\n// 5.0\nchart\n  .facetRect()\n  .encode('x', 'cut')\n  .encode('y', 'clarity')\n  .point()\n  .encode('x', 'carat')\n  .encode('y', 'price')\n  .encode('color', 'cut')\n  .encode('shape', 'point')\n  .encode('size', 3)\n  .style('fillOpacity', 0.3)\n  .style('stroke', null);\n",paraId:43,tocIndex:21}]},22062:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(11181);const t=[{value:"相比单调的填充色，使用纹理填充能丰富表现力，在无障碍和黑白打印场景下也有不错的应用。为此我们提供了以下三种方式，按使用成本从简到难依次为：",paraId:0},{value:"使用内置纹理",paraId:1},{value:"使用 G API 自定义纹理",paraId:1},{value:"使用其它纹理来源",paraId:1},{value:"我们在 ",paraId:2,tocIndex:0},{value:"g-pattern",paraId:2,tocIndex:0},{value:" 中内置了常见的三种纹理，通过参数可以便捷地调整外观，这也是最简单的一种纹理使用方式：",paraId:2,tocIndex:0},{value:"dots",paraId:3,tocIndex:0},{value:" 由圆点构成",paraId:3,tocIndex:0},{value:"lines",paraId:3,tocIndex:0},{value:" 由直线构成",paraId:3,tocIndex:0},{value:"squares",paraId:3,tocIndex:0},{value:" 由正方形构成",paraId:3,tocIndex:0},{value:"使用方式如下，首先安装依赖：",paraId:4,tocIndex:0},{value:"$ npm install @antv/g-pattern  --save;\n",paraId:5,tocIndex:0},{value:"然后就可以使用其中的内置纹理了。在该",paraId:6,tocIndex:0},{value:"示例",paraId:7,tocIndex:0},{value:"中：",paraId:6,tocIndex:0},{value:"我们使用了 ",paraId:8,tocIndex:0},{value:"lines",paraId:8,tocIndex:0},{value:"，设置了背景颜色、透明度、直线颜色以及间距等属性",paraId:8,tocIndex:0},{value:"通过 ",paraId:8,tocIndex:0},{value:"repetition",paraId:8,tocIndex:0},{value:" 指定了平铺方式为水平和垂直方向",paraId:8,tocIndex:0},{value:"通过 ",paraId:8,tocIndex:0},{value:"transform",paraId:8,tocIndex:0},{value:" 让纹理顺时针旋转 30 度",paraId:8,tocIndex:0},{value:"import { lines } from '@antv/g-pattern';\n\nchart\n  //... 省略其它命令式调用\n  .style('fill', (_, idx) => {\n    return {\n      image: lines({\n        backgroundColor: colors[idx],\n        backgroundOpacity: 0.65,\n        stroke: colors[idx],\n        lineWidth: 4,\n        spacing: 5,\n      }),\n      repetition: 'repeat',\n      transform: 'rotate(30)',\n    };\n  });\n",paraId:9,tocIndex:0},{value:"效果如下：",paraId:10,tocIndex:0},{value:"更多参数含义及其效果详见 ",paraId:11,tocIndex:0},{value:"完整 g-pattern API",paraId:11,tocIndex:0},{value:"。",paraId:11,tocIndex:0},{value:"当上述内置纹理不满足需求时，可以使用 ",paraId:12,tocIndex:1},{value:"G API",paraId:12,tocIndex:1},{value:" 自定义，就像描述场景一样。",paraId:12,tocIndex:1},{value:"在该",paraId:13,tocIndex:1},{value:"示例",paraId:14,tocIndex:1},{value:"中，我们首先从上下文中获取 ",paraId:13,tocIndex:1},{value:"document",paraId:13,tocIndex:1},{value:" 对象，通过 ",paraId:13,tocIndex:1},{value:"document.createElement",paraId:13,tocIndex:1},{value:" 创建了一个 ",paraId:13,tocIndex:1},{value:"Rect",paraId:13,tocIndex:1},{value:" 和 ",paraId:13,tocIndex:1},{value:"Path",paraId:13,tocIndex:1},{value:"，把它们作为纹理来源：",paraId:13,tocIndex:1},{value:"mark.style('fill', ({ value }) => {\n  const { document } = chart.getContext().canvas;\n  const background = document.createElement('rect', {\n    style: {\n      width,\n      height,\n      fill: color,\n    },\n  });\n\n  const line = document.createElement('path', {\n    style: {\n      d: `\n                M 0 ${-height} L ${width * 2} ${height}\n                M ${-width} ${-height} L ${width} ${height}\n                M ${-width} 0 L ${width} ${height * 2}`,\n      stroke,\n      lineWidth: 1,\n      strokeOpacity: 0.9,\n    },\n  });\n  background.appendChild(line);\n\n  return {\n    image: background,\n    repetition: 'repeat',\n  };\n});\n",paraId:15,tocIndex:1},{value:"效果如下：",paraId:16,tocIndex:1},{value:"更多用法可参考 ",paraId:17,tocIndex:1},{value:"G API",paraId:17,tocIndex:1},{value:"。",paraId:17,tocIndex:1},{value:"可以参考 ",paraId:18,tocIndex:2},{value:"G API",paraId:18,tocIndex:2},{value:"，其它可用的纹理来源包括：",paraId:18,tocIndex:2},{value:"图片 URL，例如 ",paraId:19,tocIndex:2},{value:"'http://example.png'",paraId:19,tocIndex:2},{value:"HTMLImageElement",paraId:19,tocIndex:2},{value:"HTMLCanvasElement",paraId:19,tocIndex:2},{value:"HTMLVideoElement",paraId:19,tocIndex:2},{value:"其中图片 URL、HTMLImageElement、HTMLVideoElement 都是静态资源，而 HTMLCanvasElement 可用于程序化生成纹理，效果如下：",paraId:20,tocIndex:2},{value:"在该",paraId:21,tocIndex:2},{value:"示例",paraId:22,tocIndex:2},{value:"中，我们使用了 ",paraId:21,tocIndex:2},{value:"HTMLCanvasElement",paraId:21,tocIndex:2},{value:" 配合 ",paraId:21,tocIndex:2},{value:"Canvas API",paraId:21,tocIndex:2},{value:" 自定义：",paraId:21,tocIndex:2},{value:"// 程序化生成\nconst canvas = createCanvas(width, height);\nconst ctx = canvas.getContext('2d');\ndrawRect(ctx, width, height, color);\ndrawLinePattern(ctx, stroke, width, height, cross);\n\n// 使用\nchart.style('fill', ({ value }) => {\n  return { image: canvas, repetition: 'repeat' };\n});\n",paraId:23,tocIndex:2},{value:"不难看出，此种程序化生成方式需要使用者对于 ",paraId:24,tocIndex:2},{value:"Canvas API",paraId:24,tocIndex:2},{value:" 有很深的理解，当然它也拥有最高的自由度。",paraId:24,tocIndex:2}]},7229:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57233);const t=[{value:"服务端渲染（SSR）是指在非浏览器环境渲染出图表，比如在 Node.js、Python、Java、PHP 等后端语言环境中，一般在后端语言中，最终出来的是一张没有交互和动画的图片。一般使用的场景如下：",paraId:0},{value:"后端预渲成图片，提高页面打开的速度",paraId:1},{value:"脚本批处理，便于传播",paraId:1},{value:"服务端可视化服务",paraId:1},{value:"生成图片进行截图对比，用于代码单测",paraId:1},{value:"...",paraId:1},{value:"在 Node.js 生态中，以下库实现了浏览器环境中常见的渲染 API：",paraId:2,tocIndex:0},{value:"node-canvas",paraId:3,tocIndex:0},{value:" 提供了基于 Cairo 的 Canvas2D API 实现",paraId:3,tocIndex:0},{value:"jsdom",paraId:3,tocIndex:0},{value:" 提供了 DOM API 实现",paraId:3,tocIndex:0},{value:"基于它们创建对应的渲染器，就可以让 G2 渲染得到 PNG 或者 SVG 结果。下面我们分别介绍基于这两种实现的示例代码。",paraId:4,tocIndex:0},{value:"在线示例",paraId:5,tocIndex:1},{value:"首先使用 JSDOM 创建一个容器 ",paraId:6,tocIndex:1},{value:"container",paraId:6,tocIndex:1},{value:"，后续图表将渲染到这里，另外保存 ",paraId:6,tocIndex:1},{value:"window",paraId:6,tocIndex:1},{value:" 和 ",paraId:6,tocIndex:1},{value:"document",paraId:6,tocIndex:1},{value:" 对象供后续使用：",paraId:6,tocIndex:1},{value:"const jsdom = require('jsdom');\n\nconst { JSDOM } = jsdom;\nconst { window } = new JSDOM(`<!DOCTYPE html>`);\nconst { document } = window;\nconst container = document.createElement('div');\n",paraId:7,tocIndex:1},{value:"然后创建一个 SVG 渲染器，移除掉依赖 DOM API 的插件后创建画布：",paraId:8,tocIndex:1},{value:"const { Canvas } = require('@antv/g');\nconst { Renderer } = require('@antv/g-svg');\n\nconst renderer = new Renderer();\nconst htmlRendererPlugin = renderer.getPlugin('html-renderer');\nrenderer.unregisterPlugin(htmlRendererPlugin);\nconst domInteractionPlugin = renderer.getPlugin('dom-interaction');\nrenderer.unregisterPlugin(domInteractionPlugin);\n\nconst gCanvas = new Canvas({\n  renderer,\n  width,\n  height,\n  container, // 使用上一步创建的容器\n  document,\n  offscreenCanvas: offscreenNodeCanvas,\n  requestAnimationFrame: window.requestAnimationFrame,\n  cancelAnimationFrame: window.cancelAnimationFrame,\n});\n",paraId:9,tocIndex:1},{value:"接着正常创建 G2 Chart，传入之前创建的画布和容器，详见参考文档",paraId:10,tocIndex:1},{value:"开始使用",paraId:11,tocIndex:1},{value:"：",paraId:10,tocIndex:1},{value:"const { Chart } = require('@antv/g2');\n\nconst chart = new Chart({\n  width,\n  height,\n  canvas: gCanvas,\n  container,\n});\n",paraId:12,tocIndex:1},{value:"最后渲染图表，从 JSDOM 中获取渲染结果并序列化成 SVG 字符串，随后可以选择保存成本地文件，这里示例代码就直接输出到控制台了：",paraId:13,tocIndex:1},{value:"const xmlserializer = require('xmlserializer');\n\n(async () => {\n  await chart.render();\n\n  const svg = xmlserializer.serializeToString(container.childNodes[0]);\n  console.log(svg); // '<svg>...</svg>\n\n  chart.destroy();\n})();\n",paraId:14,tocIndex:1},{value:"值得一提的是目前在 G2 的集成测试中，由于 SVG 具有良好的跨平台兼容性，我们也使用了该技术用于",paraId:15,tocIndex:1},{value:"截图比对",paraId:15,tocIndex:1},{value:"。",paraId:15,tocIndex:1},{value:"在线示例",paraId:16,tocIndex:2},{value:"基于 jsdom 的方案只能生成 SVG，如果想生成类似 PNG 格式的图片，可以使用 ",paraId:17,tocIndex:2},{value:"node-canvas",paraId:17,tocIndex:2},{value:" 渲染。",paraId:17,tocIndex:2},{value:"首先创建两个 node-canvas，分别用于渲染场景和度量文本宽度：",paraId:18,tocIndex:2},{value:"const { createCanvas } = require('canvas');\nconst nodeCanvas = createCanvas(width, height);\nconst offscreenNodeCanvas = createCanvas(1, 1);\n",paraId:19,tocIndex:2},{value:"然后创建一个 Canvas 渲染器和画布：",paraId:20,tocIndex:2},{value:"import { Canvas } from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\n\nconst renderer = new Renderer();\n// 省略移除 DOM 相关插件代码\nconst gCanvas = new Canvas({\n  width,\n  height,\n  canvas: nodeCanvas,\n  renderer,\n  offscreenCanvas: offscreenNodeCanvas,\n});\n",paraId:21,tocIndex:2},{value:"接下来正常创建 G2 Chart 并渲染，完成后调用 node-canvas 提供的 ",paraId:22,tocIndex:2},{value:"createPNGStream",paraId:22,tocIndex:2},{value:" 方法创建一个包含 PNG 编码的 ",paraId:22,tocIndex:2},{value:"ReadableStream",paraId:22,tocIndex:2},{value:"。同样也提供了 ",paraId:22,tocIndex:2},{value:"createJPEGStream",paraId:22,tocIndex:2},{value:" 和 ",paraId:22,tocIndex:2},{value:"createPDFStream",paraId:22,tocIndex:2},{value:" 导出 JPEG 和 PDF。",paraId:22,tocIndex:2},{value:"function writePNG(nodeCanvas) {\n  return new Promise<string>((resolve, reject) => {\n    const f = path.join(os.tmpdir(), `${Math.random()}.png`);\n    const out = fs.createWriteStream(f);\n    const stream = nodeCanvas.createPNGStream();\n    stream.pipe(out);\n    out.on('finish', () => resolve(f)).on('error', reject);\n  });\n}\n",paraId:23,tocIndex:2},{value:"因为 G2 的代码是使用 JavaScript 编写和开发，所以无法直接在 Python、Java、PHP 等语言环境中使用，但是可以在服务中安装 Node.js 环境，然后使用对应的后端语言命令行 API 去驱动上述的 Node.js 代码去执行 SSR。",paraId:24,tocIndex:3},{value:"参考《",paraId:25,tocIndex:3},{value:"python 调用 node js",paraId:25,tocIndex:3},{value:"》，其他语言类似。",paraId:25,tocIndex:3}]},19860:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(60118);const t=[{value:"这里简单介绍在一些前端框架中使用 G2 的方法。我们将用不同的框架实现以下的条形图更新效果。",paraId:0},{value:"实现该效果主要依靠以下两个函数。",paraId:1},{value:"// 渲染条形图\nfunction renderBarChart(container) {\n  const chart = new Chart({\n    container,\n    });\n\n  // 准备数据\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n\n  // 声明可视化\n  chart\n    .interval() // 创建一个 Interval 标记\n    .data(data) // 绑定数据\n    .encode('x', 'genre') // 编码 x 通道\n    .encode('y', 'sold') // 编码 y 通道\n    .encode('key', 'genre') // 指定 key\n    .animate('update', { duration: 300 }); // 指定更新动画的时间\n\n  // 渲染可视化\n  chart.render();\n\n  return chart;\n}\n",paraId:2},{value:"// 更新条形图的数据\nfunction updateBarChart(chart) {\n  // 获得 Interval Mark\n  const interval = chart.getNodesByType('interval')[0];\n\n  // 模拟并且更新 Interval 的数据\n  const newData = interval.data().map((d) => ({\n    ...d,\n    sold: Math.random() * 400 + 100,\n  }));\n\n  interval.data(newData);\n\n  // 重新渲染\n  chart.render();\n}\n",paraId:3},{value:"这里需要注意的是，在框架中不推荐使用 ",paraId:4},{value:"new Chart({ container: 'id' })",paraId:4},{value:" 的形式去指定容器，而是直接使用 HTML 元素作为容器：",paraId:4},{value:"new Chart({ container: HTMLContainer })",paraId:4},{value:"。这样是为了防止出现不同组件拥有相同的 id，从而不能预期渲染的问题。",paraId:4},{value:"接下来我们就来看看如何在框架中使用这两个函数。",paraId:5},{value:"在 Vue 中首先是引入定义的 ",paraId:6,tocIndex:0},{value:"G2Demo",paraId:6,tocIndex:0},{value:" 的组件。",paraId:6,tocIndex:0},{value:"\x3c!-- App.vue --\x3e\n<template>\n  <div id=\"app\">\n    <G2Demo />\n  </div>\n</template>\n\n<script>\n  import G2Demo from './components/G2Demo';\n\n  export default {\n    name: 'App',\n    components: {\n      G2Demo,\n    },\n  };\n<\/script>\n",paraId:7,tocIndex:0},{value:"如果使用 ",paraId:8,tocIndex:1},{value:"Vue2",paraId:8,tocIndex:1},{value:" 和 ",paraId:8,tocIndex:1},{value:"Vue3",paraId:8,tocIndex:1},{value:" 的选项式 API，那么可以如下定义 ",paraId:8,tocIndex:1},{value:"G2Demo",paraId:8,tocIndex:1},{value:" 这个组件，完整的代码参考",paraId:8,tocIndex:1},{value:"这里",paraId:8,tocIndex:1},{value:"。",paraId:8,tocIndex:1},{value:"\x3c!-- components/G2Demo.vue --\x3e\n<template>\n  <div>\n    <div ref=\"container\"></div>\n    <button @click=\"onClick\">Update Data</button>\n  </div>\n</template>\n\n<script>\n  import { Chart } from '@antv/g2';\n\n  function renderBarChart(container) {\n    // 如上\n  }\n\n  function updateBarChart(chart) {\n    // 如上\n  }\n\n  export default {\n    name: 'G2Demo',\n    props: {},\n    mounted() {\n      // 保存图表实例\n      this.chart = renderBarChart(this.$refs.container);\n    },\n    methods: {\n      onClick() {\n        updateBarChart(this.chart);\n      },\n    },\n  };\n<\/script>\n",paraId:9,tocIndex:1},{value:"如果使用的 Vue3 的组合式 API，那么实现如下，完整代码参考",paraId:10,tocIndex:2},{value:"这里",paraId:10,tocIndex:2},{value:"。",paraId:10,tocIndex:2},{value:"<script setup>\n  import { onMounted, ref } from 'vue';\n  import { Chart } from '@antv/g2';\n\n  let chart;\n  const container = ref(null);\n\n  onMounted(() => {\n    chart = renderBarChart(container.value);\n  });\n\n  function onClick() {\n    updateBarChart(chart);\n  }\n\n  function renderBarChart(container) {\n    // 如上\n  }\n\n  function updateBarChart(chart) {\n    // 如上\n  }\n<\/script>\n\n<template>\n  <div>\n    <div ref=\"container\"></div>\n    <button @click=\"onClick\">Update Data</button>\n  </div>\n</template>\n",paraId:11,tocIndex:2},{value:"在 ",paraId:12,tocIndex:3},{value:"React",paraId:12,tocIndex:3},{value:" 中，同样是首先是引入定义的 ",paraId:12,tocIndex:3},{value:"G2Demo",paraId:12,tocIndex:3},{value:" 的组件。",paraId:12,tocIndex:3},{value:"import './styles.css';\nimport G2Demo from './components/G2Demo';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <G2Demo />\n    </div>\n  );\n}\n",paraId:13,tocIndex:3},{value:"接下来就定义这个 ",paraId:14,tocIndex:3},{value:"G2Demo",paraId:14,tocIndex:3},{value:" 这个组件，完整代码参考",paraId:14,tocIndex:3},{value:"这里",paraId:14,tocIndex:3},{value:"。",paraId:14,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { useEffect, useRef } from 'react';\n\nexport default function G2Demo() {\n  const container = useRef(null);\n  const chart = useRef(null);\n\n  useEffect(() => {\n    if (!chart.current) {\n      chart.current = renderBarChart(container.current);\n    }\n  }, []);\n\n  function renderBarChart(container) {\n    // 如上\n  }\n\n  function updateBarChart(chart) {\n    // 如上\n  }\n\n  return (\n    <div className=\"App\">\n      <div ref={container}></div>\n      <button onClick={() => updateBarChart(chart.current)}>Update Data</button>\n    </div>\n  );\n}\n",paraId:15,tocIndex:3}]},76443:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(23105);const t=[{value:"目前有两种使用 G2 的方式：",paraId:0},{value:"包管理器",paraId:1},{value:"CDN",paraId:1},{value:"如果使用了 Webpack，Rollup 等基于 Node 的打包工具，可以通过 NPM 或者 Yarn 等包管理器去安装 G2 。",paraId:2,tocIndex:0},{value:"# 通过 NPM 安装\nnpm install @antv/g2\n",paraId:3,tocIndex:0},{value:"# 通过 Yarn 安装\nyarn add @antv/g2\n",paraId:4,tocIndex:0},{value:"安装成功之后给 G2 提供一个容器:",paraId:5,tocIndex:0},{value:'<div id="container"></div>\n',paraId:6,tocIndex:0},{value:"然后输入如下代码：",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\n// 准备数据\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n// 初始化图表实例\nconst chart = new Chart({\n  container: 'container',\n});\n\n// 声明可视化\nchart\n  .interval() // 创建一个 Interval 标记\n  .data(data) // 绑定数据\n  .encode('x', 'genre') // 编码 x 通道\n  .encode('y', 'sold'); // 编码 y 通道\n\n// 渲染可视化\nchart.render();\n",paraId:8,tocIndex:0},{value:"G2 也提供了 UMD 版本，可以直接通过 CDN 加载，然后直接使用。这个时候的 ",paraId:9,tocIndex:1},{value:"Chart",paraId:9,tocIndex:1},{value:" 对象可以通过命名空间 ",paraId:9,tocIndex:1},{value:"G2",paraId:9,tocIndex:1},{value:" 去访问。",paraId:9,tocIndex:1},{value:"<script src=\"https://unpkg.com/@antv/g2/dist/g2.min.js\"><\/script>\n<script>\n  // 准备数据\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n\n  // 初始化图表实例\n  const chart = new G2.Chart({\n    container: 'container',\n  });\n\n  // 声明可视化\n  chart\n    .interval() // 创建一个 Interval 标记\n    .data(data) // 绑定数据\n    .encode('x', 'genre') // 编码 x 通道\n    .encode('y', 'sold'); // 编码 y 通道\n\n  // 渲染可视化\n  chart.render();\n<\/script>\n",paraId:10,tocIndex:1},{value:"不管使用哪种方式，如果你绘制出了如下的条形图，那么表示一切顺利，探索可视化和 G2 的旅程正式开始。",paraId:11,tocIndex:2},{value:"(() => {\n  // 初始化图表实例\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:2}]},23214:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(47870);const t=[{value:"G2",paraId:0},{value:" 是一个简洁的渐进式语法，主要用于制作基于网页的可视化。它提供了一套函数风格式、声明形式的 API 和组件化的编程范式，希望能帮助用户能快速完成",paraId:0},{value:"报表搭建",paraId:0},{value:"、",paraId:0},{value:"数据探索",paraId:0},{value:"、",paraId:0},{value:"可视化叙事",paraId:0},{value:"等多样化的需求。",paraId:0},{value:"这篇文章将给大家简单介绍一下 G2 的核心概念：",paraId:1},{value:"标记（Mark）",paraId:2},{value:"：绘制数据驱动的图形",paraId:2},{value:"转换（Transform）",paraId:2},{value:"：派生数据",paraId:2},{value:"比例尺（Scale）",paraId:2},{value:"：将抽象的数据映射为视觉数据",paraId:2},{value:"坐标系（Coordinate",paraId:2},{value:"）：对空间通道应用点变换",paraId:2},{value:"视图复合（Composition）",paraId:2},{value:"：管理和增强视图",paraId:2},{value:"动画（Animation）",paraId:2},{value:"：数据驱动的动画和连续的形变动画",paraId:2},{value:"交互（Interaction）",paraId:2},{value:"： 操作视图并且展现详细信息",paraId:2},{value:'"Talk is cheap, show me the code"，那么接下来看看基于下面这个简单的数据集，G2 能做出什么可视化效果。',paraId:3},{value:"table({\n  url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n});\n",paraId:4},{value:"在 G2 官网的文档中，特定代码块会挂载其返回的 DOM，并在网页中展示。",paraId:5},{value:"(() => {\n  const chart = new G2.Chart();\n  // ...\n  return chart.getContainer(); // 挂载图表的容器\n})();\n",paraId:6},{value:"这是在 G2 官网特定运行环境的语法，在实际项目中使用 G2 请参考",paraId:7},{value:"开始使用",paraId:8},{value:"。",paraId:7},{value:"标记",paraId:9,tocIndex:0},{value:"是 G2 中最小的视觉单元，G2 中的所有图表都是由不同标记构成的。",paraId:9,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:0},{value:"转换",paraId:11,tocIndex:1},{value:"会改变数据和标记的展现形式，多用于数据分析。",paraId:11,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'height')\n    .encode('color', 'gender')\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY' })\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:1},{value:"比例尺",paraId:13,tocIndex:2},{value:"用于控制标记的视觉样式。",paraId:13,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'height')\n    .encode('color', 'gender')\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY' })\n    .scale('color', { range: ['steelblue', 'orange'] })\n    .scale('y', { nice: true })\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:2},{value:"坐标系",paraId:15,tocIndex:3},{value:"会改变图表的展示形式。",paraId:15,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'height')\n    .encode('color', 'gender')\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY' })\n    .scale('color', { range: ['steelblue', 'orange'] })\n    .scale('y', { type: 'sqrt', nice: true })\n    .coordinate({ type: 'polar' })\n    .axis('y', { title: false })\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:16,tocIndex:3},{value:"视图复合",paraId:17,tocIndex:4},{value:"用于制作多视图图表。",paraId:17,tocIndex:4},{value:"(() => {\n  const chart = new G2.Chart({\n    paddingLeft: 60,\n    \n  });\n\n  const facet = chart\n    .facetRect()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('y', 'gender');\n\n  facet\n    .rect()\n    .encode('x', 'height')\n    .encode('color', 'gender')\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY' })\n    .scale('y', { nice: true })\n    .attr('frame', false)\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:18,tocIndex:4},{value:"动画",paraId:19,tocIndex:5},{value:"支持分组动画和关键帧动画。可以点击左边的运行按钮看效果。",paraId:19,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'height')\n    .encode('color', 'gender')\n    .encode('enterDuration', 1000)\n    .transform({ type: 'stackEnter', groupBy: ['color'] })\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY' })\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:20,tocIndex:5},{value:"(async () => {\n  const data = await fetch(\n    'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  ).then((res) => res.json());\n\n  const chart = new G2.Chart();\n\n  const keyframe = chart\n    .timingKeyframe()\n    .attr('direction', 'alternate')\n    .attr('iterationCount', 4);\n\n  keyframe\n    .interval()\n    .attr('padding', 'auto')\n    .data(data)\n    .encode('x', 'gender')\n    .encode('color', 'gender')\n    .encode('key', 'gender')\n    .transform({ type: 'groupX', y: 'count' });\n\n  keyframe\n    .point()\n    .attr('padding', 'auto')\n    .data(data)\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender')\n    .encode('groupKey', 'gender')\n    .encode('shape', 'point');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:21,tocIndex:5},{value:"交互可以按需探索数据。",paraId:22,tocIndex:6},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender')\n    .encode('shape', 'point')\n    .style({\n      fillOpacity: 0.7,\n      transform: 'scale(1, 1)',\n      transformOrigin: 'center center',\n    })\n    .state('inactive', {\n      fill: 'black',\n      fillOpacity: 0.5,\n      transform: 'scale(0.5, 0.5)',\n    })\n    .interaction('brushXHighlight', true);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:23,tocIndex:6},{value:"因为 G2 的标记是可以组合的，同时提供了",paraId:24,tocIndex:7},{value:"复合标记",paraId:24,tocIndex:7},{value:"的机制去扩展 G2，所以你基本上可以快速绘制任意的可视化。在",paraId:24,tocIndex:7},{value:"案例页面",paraId:25,tocIndex:7},{value:"你可以获得更多灵感，也可以通过",paraId:24,tocIndex:7},{value:"选项页面",paraId:26,tocIndex:7},{value:"全面了解 G2 的能力。",paraId:24,tocIndex:7}]},93901:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(13997);const t=[{value:"G2 名字和设计理念都来自于图形语法《",paraId:0},{value:"The Grammar of Graphics",paraId:0},{value:"》。该理论的核心在于：拒绝图表分类，用一些基本标记（Mark）和一系列可视化组件（比例尺，坐标系等）去描述一个可视化。",paraId:0},{value:"得益于此，相对于 D3 这样底层的可视化工具，G2 有更低的使用和学习成本，可以提升研发效率。相对于图表模版库，G2 能制作出图表的种类，也改变了 G2 使用者思考图表的方式：图表不再是一个不可分割的整体，而是可以被具有不同用途的标记组合出来的。这使得你花更少的时间写代码或者纠结这个图表能否实现，而是花更多时间在“数据世界里用视觉思考”。",paraId:1},{value:"当然更简单地绘制出更多图表只是我们的基本使命，我们更希望在这个过程中向大家传递正确的可视化思维。语言是传递思维最直接的途径，所以我们在设计语法或者 API 的时候非常看重简洁性和专业性，为了我们参考了很多学术界研究成果，以及工业界的最佳实践。在原本图形语法基础上，做了包含但不止于以下的增强：",paraId:2},{value:"简化数据探索的语法",paraId:3},{value:"增加动画语法",paraId:3},{value:"增加单元可视化的语法",paraId:3},{value:"增加交互语法（还在设计中）",paraId:3},{value:"...",paraId:3},{value:"用更简单的话来讲就是：",paraId:4},{value:"用 G2，你可以更专业地、快速得获得更多可视化效果，同时获得可视化思维",paraId:4},{value:"。",paraId:4},{value:"你可以一句话绘制一张图表，除了绘制图形本身之外，还会添加坐标轴、图例，甚至交互提示！",paraId:5,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  // 一句话声明可视化\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    })\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:6,tocIndex:0},{value:"G2 简洁来自",paraId:7,tocIndex:0},{value:"默认值",paraId:7,tocIndex:0},{value:"：你只需要提供标记类型，数据和编码类型, G2 会帮你推断其他。当然在 G2 中很棒的一点是：这样默认值都是可以按需覆盖的。我们希望 G2 能做到默认好看和能展示洞察信息，但是你可以根据你的特定场景和领域知识去优化图表的展示。上诉图表如果优化坐标轴 tick 展示会更加易读？如果换成下面的颜色你更加喜欢？",paraId:7,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    })\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender')\n    .scale('x', { nice: true }) // 优化坐标 tick 展示\n    .scale('y', { nice: true }) // 优化坐标 tick 展示\n    .scale('color', { range: ['steelblue', 'orange'] }); // 改变颜色\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:8,tocIndex:0},{value:"你也许会觉得一个散点图太简单了，那我们来看看 G2 是如果通过一句话绘制一个桑基图的！",paraId:9,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart({\n    width: 900,\n    height: 600,\n    \n  });\n\n  // Sankey 标记\n  chart\n    .sankey()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/energy.json',\n      transform: [\n        {\n          type: 'custom',\n          callback: (data) => ({ links: data }),\n        },\n      ],\n    })\n    .layout({\n      nodeAlign: 'center',\n      nodePadding: 0.03,\n    })\n    .style('labelSpacing', 3)\n    .style('labelFontWeight', 'bold')\n    .style('nodeStrokeWidth', 1.2)\n    .style('linkFillOpacity', 0.4);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:0},{value:"G2 可以绘制出丰富的图表类型，除了支持基础的折、柱饼等图表之外，还支持向量场、支持平行坐标系等稍微复杂一点的图表，比如下面的连接图：",paraId:11,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .link()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n    })\n    .encode('x', ['POP_1980', 'POP_2015'])\n    .encode('y', ['R90_10_1980', 'R90_10_2015'])\n    .encode('color', (d) => d.R90_10_2015 - d.R90_10_1980)\n    .scale('x', { type: 'log' })\n    .style('arrow', true)\n    .style('arrowSize', 6)\n    .axis('x', { labelFormatter: '~s' })\n    .tooltip({ title: { channel: 'color', valueFormatter: '.1f' } })\n    .legend(false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:1},{value:"在 G2 中最美妙的一点是：你可以通过组合不同的图表（更准确地说是标记）去获得新的图表！比如我们在一个图表中加入散点图的 Point 标记和连接图的 Link 标记就可以获得一个带标注的点线连接图。",paraId:13,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart({\n    height: 180,\n    \n  });\n\n  chart.data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({ ...d, body_mass_g: +d.body_mass_g }),\n      },\n    ],\n  });\n\n  // Point 标记\n  chart\n    .point()\n    .encode('x', 'body_mass_g')\n    .encode('y', 'species')\n    .style('stroke', '#000')\n    .tooltip({ channel: 'x' });\n\n  // Link 标记\n  chart\n    .link()\n    .encode('x', 'body_mass_g')\n    .encode('y', 'species')\n    .transform({ type: 'groupY', x: 'min', x1: 'max' })\n    .style('stroke', '#000')\n    .tooltip(false);\n\n  // Point 标记\n  chart\n    .point()\n    .encode('y', 'species')\n    .encode('x', 'body_mass_g')\n    .encode('shape', 'line')\n    .encode('size', 12)\n    .transform({ type: 'groupY', x: 'median' })\n    .style('stroke', 'red')\n    .tooltip({ channel: 'x' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:1},{value:"在可视化的过程中，处理数据往往会画很多时间，同时会有一定上手成本。为了简化这个过程，减少预处理数据的时间和规范化通用的数据分析能力，G2 提供了一系列 ",paraId:15,tocIndex:2},{value:"转换（Transform）",paraId:15,tocIndex:2},{value:" 用来聚合和生成新的数据。比如下面计算运动员不同体重的任务分布：",paraId:15,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n    })\n    .encode('x', 'weight')\n    .transform({ type: 'binX', y: 'count' })\n    .style('inset', 0.5);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:16,tocIndex:2},{value:"希望对图表根据性别进行拆分？",paraId:17,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n    })\n    .encode('x', 'weight')\n    .encode('color', 'sex') // 增加颜色编码\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY', orderBy: 'series' })\n    .style('inset', 0.5);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:18,tocIndex:2},{value:"希望通过分面来分别看每个性别的分布？",paraId:19,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart({\n    \n    paddingLeft: 50,\n    paddingBottom: 50,\n  });\n\n  const facet = chart.facetRect().encode('y', 'sex').data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  });\n\n  facet\n    .rect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n    })\n    .encode('x', 'weight')\n    .transform({ type: 'binX', y: 'count' })\n    .style('inset', 0.5);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:20,tocIndex:2},{value:"G2 可以绘制数据驱动的动画，从而达到可视化叙事的效果。首先是所有的动画属性（动画类型，延迟和持续时间）可以和数据绑定，比如下面的这个数据驱动的甘特图动画：",paraId:21,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ transform: [{ type: 'transpose' }] })\n    .data([\n      { name: 'event planning', startTime: 1, endTime: 4 },\n      { name: 'layout logistics', startTime: 3, endTime: 13 },\n      { name: 'select vendors', startTime: 5, endTime: 8 },\n      { name: 'hire venue', startTime: 9, endTime: 13 },\n      { name: 'hire caterer', startTime: 10, endTime: 14 },\n      { name: 'hire event decorators', startTime: 12, endTime: 17 },\n      { name: 'rehearsal', startTime: 14, endTime: 16 },\n      { name: 'event celebration', startTime: 17, endTime: 18 },\n    ])\n    .encode('x', 'name')\n    .encode('y', ['endTime', 'startTime'])\n    .encode('color', 'name')\n    .encode('enterDuration', (d) => d.endTime - d.startTime) // 动画持续hi时间和 durationTime 绑定\n    .encode('enterDelay', 'startTime') // 出现时间和 startTime 绑定\n    .scale('enterDuration', { zero: true, range: [0, 3000] });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:22,tocIndex:3},{value:"同时可以对动画通道进行转换，从而控制数据元素的出现顺序和时间，比如下面的玫瑰图每一片“花瓣”依次出现：",paraId:23,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'polar' })\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/deaths.json',\n    })\n    .encode('x', 'Month')\n    .encode('y', 'Death')\n    .encode('color', 'Type')\n    .transform({ type: 'stackY' })\n    // 依次出现\n    .transform({ type: 'stackEnter', groupBy: ['color', 'x'], duration: 3000 })\n    .scale('y', { type: 'sqrt' })\n    .animate('enter', { type: 'waveIn' })\n    .axis('y', false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:24,tocIndex:3},{value:"除了可以在某个视图里面做动画以外，还可以在不同视图间做连续的形变动画：图形通过数据关联到一起，比如下面散点图和聚合条形的过渡动画：",paraId:25,tocIndex:3},{value:"(async () => {\n  const data = await fetch(\n    'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  ).then((res) => res.json());\n\n  const chart = new G2.Chart();\n\n  // Keyframe 容器，对里面的视图应用过渡动画\n  const keyframe = chart\n    .timingKeyframe()\n    .attr('direction', 'alternate')\n    .attr('iterationCount', 4);\n\n  // 第一个视图：散点图\n  keyframe\n    .interval()\n    .attr('padding', 'auto')\n    .data(data)\n    .encode('x', 'gender')\n    .encode('color', 'gender')\n    .encode('key', 'gender')\n    .transform({ type: 'groupX', y: 'count' });\n\n  // 第二个视图：聚合条形图\n  keyframe\n    .point()\n    .attr('padding', 'auto')\n    .data(data)\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender')\n    .encode('groupKey', 'gender')\n    .encode('shape', 'point');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:26,tocIndex:3},{value:"G2 除了提供丰富的内置交互以外，还通过 ",paraId:27,tocIndex:4},{value:"chart.on",paraId:27,tocIndex:4},{value:" 和 ",paraId:27,tocIndex:4},{value:"chart.emit",paraId:27,tocIndex:4},{value:' 提供了一种联动不同视图的交互的能力，比如下面展示的 "Focus and Context" 的能力：',paraId:27,tocIndex:4},{value:"(() => {\n  const container = document.createElement('div');\n  const focusContainer = document.createElement('div');\n  const contextContainer = document.createElement('div');\n  container.append(focusContainer);\n  container.append(contextContainer);\n\n  // 渲染 focus 视图\n  const focus = new G2.Chart({\n    container: focusContainer,\n      height: 360,\n    paddingLeft: 50,\n  });\n\n  focus\n    .area()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n    })\n    .encode('x', 'date')\n    .encode('y', 'close')\n    .animate(false)\n    .axis('x', { grid: false, title: false, tickCount: 5 })\n    .axis('y', { grid: false, tickCount: 5 })\n    .interaction('tooltip', false)\n    .interaction('brushXFilter', true);\n\n  focus.render();\n\n  // 渲染 context 视图\n  const context = new G2.Chart({\n    container: contextContainer,\n      paddingLeft: 50,\n    paddingTop: 0,\n    paddingBottom: 0,\n    height: 60,\n  });\n\n  context\n    .area()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n    })\n    .encode('x', 'date')\n    .encode('y', 'close')\n    .animate(false)\n    .axis(false)\n    .interaction('tooltip', false)\n    .interaction('brushXHighlight', { series: true });\n\n  context.render();\n\n  // 添加事件监听器在不同图表之间交流\n  focus.on('brush:filter', (e) => {\n    const { nativeEvent } = e;\n    if (!nativeEvent) return;\n    const { selection } = e.data;\n    const { x: scaleX } = focus.getScale();\n    const [[x1, x2]] = selection;\n    const domainX = scaleX.getOptions().domain;\n    if (x1 === domainX[0] && x2 === domainX[1]) {\n      context.emit('brush:remove', {});\n    } else {\n      context.emit('brush:highlight', { data: { selection } });\n    }\n  });\n\n  context.on('brush:highlight', (e) => {\n    const { nativeEvent, data } = e;\n    if (!nativeEvent) return;\n    const { selection } = data;\n    focus.emit('brush:filter', { data: { selection } });\n  });\n\n  context.on('brush:remove', (e) => {\n    const { nativeEvent } = e;\n    if (!nativeEvent) return;\n    const { x: scaleX, y: scaleY } = context.getScale();\n    const selection = [scaleX.getOptions().domain, scaleY.getOptions().domain];\n    focus.emit('brush:filter', { data: { selection } });\n  });\n\n  return container;\n})();\n",paraId:28,tocIndex:4},{value:"G2 提供了两种风格的 API：",paraId:29,tocIndex:5},{value:"函数式 API",paraId:29,tocIndex:5},{value:" 和 ",paraId:29,tocIndex:5},{value:"选项式 API",paraId:29,tocIndex:5},{value:" 。前者是通过一系列函数链式调用声明图表，后者是通过一个 JavaScript 对象去声明图表。比如在",paraId:29,tocIndex:5},{value:"简洁语法",paraId:30,tocIndex:5},{value:"中的散点图如果使用选项式 API 可以如下声明：",paraId:29,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  // 通过选项式 API 声明图表\n  chart.options({\n    type: 'point',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    },\n    encode: {\n      x: 'weight',\n      y: 'height',\n      color: 'gender',\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:31,tocIndex:5},{value:"可以发现两者绘制出的图表一摸一样！事实上也确实如此：两种 API 的可视化表达能力是相同的。换句话说，函数式 API 能绘制的图表，选项式 API 也能绘制，反之亦然。从实现上来讲，函数式 API 是构建在选项式 API 之上的，会转换成对应的 JavaScript 然后渲染。",paraId:32,tocIndex:5},{value:"关于两者的取舍更是一个风格的问题：如果你熟悉 D3，或者喜欢函数式编程，或者是 G2 的老用户，可以选择函数式 API；如果你才开始使用 G2 和接触可视化，那么推荐选项式 API。当然，如果你是基于 G2 封装自己的图表库，那么推荐使用选项式 API。不过有一种最佳实践是：初始化图表的时候使用选项形式 API，在更新图表的时候使用函数式 API。",paraId:33,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart({\n    height: 150,\n    padding: 10,\n    \n  });\n\n  const mock = () => Array.from({ length: 20 }, () => Math.random());\n\n  // 初始化图表\n  // 使用选项式 API\n  chart.options({\n    type: 'interval',\n    data: mock(),\n    encode: { x: (_, i) => i, y: (d) => d, key: (_, i) => i },\n    axis: false,\n    tooltip: {\n      items: [{ channel: 'y', valueFormatter: '.0%' }],\n    },\n  });\n\n  chart.render();\n\n  // 更新图表\n  // 使用函数式 API\n  const button = document.createElement('button');\n  button.style.display = 'block';\n  button.textContent = '更新数据';\n  button.onclick = () => {\n    const interval = chart.getNodeByType('interval'); // 获得 interval\n    interval.data(mock()); // 更新 interval 的数据\n    chart.render(); // 渲染图表\n  };\n\n  const node = chart.getContainer();\n  node.insertBefore(button, node.childNodes[0]);\n  return node;\n})();\n",paraId:34,tocIndex:5},{value:"G2 提供了一种简单的复合 Mark 的机制，用于增强图表或者自定义图表。比如复合 Point、Line 和 Area Mark，你可以像使用任何内置 Mark 一样使用内置 Mark。",paraId:35,tocIndex:6},{value:"(() => {\n  // 定义复合 mark\n  function PointLineArea({ data, encode = {}, style = {} } = {}) {\n    const { fillOpacity = 0.1 } = style;\n    return [\n      {\n        type: 'area',\n        data,\n        encode,\n        style: { fillOpacity },\n      },\n      { type: 'line', data, encode },\n      { type: 'point', data, encode },\n    ];\n  }\n\n  const chart = new G2.Chart();\n\n  // API 的方式使用复合 Mark\n  chart\n    .mark(PointLineArea)\n    .data([\n      { year: '1991', value: 15468 },\n      { year: '1992', value: 16100 },\n      { year: '1993', value: 15900 },\n      { year: '1994', value: 17409 },\n      { year: '1995', value: 17000 },\n      { year: '1996', value: 31056 },\n      { year: '1997', value: 31982 },\n      { year: '1998', value: 32040 },\n      { year: '1999', value: 33233 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value');\n\n  // Spec 方式使用复合 Mark\n  chart.options({\n    type: PointLineArea,\n    data: [\n      { year: '1991', value: 15468 },\n      { year: '1992', value: 16100 },\n      { year: '1993', value: 15900 },\n      { year: '1994', value: 17409 },\n      { year: '1995', value: 17000 },\n      { year: '1996', value: 31056 },\n      { year: '1997', value: 31982 },\n      { year: '1998', value: 32040 },\n      { year: '1999', value: 33233 },\n    ],\n    encode: { x: 'year', y: 'value' },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:36,tocIndex:6},{value:"复合 Mark 使得基于 G2 去增加图表的能力更加容易和维护起来更简单，同时 G2 内部的一些 Mark 也是基于这个方式实现的。",paraId:37,tocIndex:6},{value:"G2 是的架构是由 ",paraId:38,tocIndex:7},{value:"运行时（Runtime）",paraId:38,tocIndex:7},{value:" 和一系列 ",paraId:38,tocIndex:7},{value:"可视化组件（Component）",paraId:38,tocIndex:7},{value:" 构成的。运行时主要负责完成数据映射、比例尺的创建和推断等等，以及串联可视化组件。不同的可视化组件由不同的功能，比如比例尺（Scale）用来映射数据、形状（Shape）用来绘制映射后的图形。下面展示如何自定义一个三角形的条形图：",paraId:38,tocIndex:7},{value:"(() => {\n  // 自定义一个三角形的 Shape\n  G2.register('shape.interval.triangle', (style, context) => {\n    const { document } = context;\n    return (P, value, defaults) => {\n      const { color: defaultColor } = defaults;\n      const [p0, p1, p2, p3] = P;\n      const pm = [(p0[0] + p1[0]) / 2, p0[1]];\n      const { color = defaultColor } = value;\n      return document.createElement('polygon', {\n        style: {\n          ...style,\n          fill: color,\n          points: [pm, p2, p3],\n        },\n      });\n    };\n  });\n\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('shape', 'triangle'); // 使用这个形状\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:39,tocIndex:7},{value:"G2 Runtime 可用的可视化组件通过 Library 组织的，Library 本质是一个如下 JavaScript 对象：",paraId:40,tocIndex:8},{value:"const library = {\n  'mark.interval': Interval,\n  'scale.linear': Linear,\n  //...\n};\n",paraId:41,tocIndex:8},{value:"所以可以通过对 library 进行修改以及打包工具 Tree Shaking 的能力来实现按需打包，从而减少包大小。比如你的项目里只需要绘制一些简单的图表，不需要绘制地理（GeoPath）、图（ForceGraph）或者高级统计图表（Sankey），那么就可以如下自定义自己的 Chart 对象：",paraId:42,tocIndex:8},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\n// 基于 corelib 对 Runtime 进行扩展\n// 1. 增加类型（如果使用的 TypeScript）\n// 2. 增加 Mark\nconst Chart = extend(Runtime, { ...corelib() });\n\nconst chart = new Chart({ container: 'container' });\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render();\n",paraId:43,tocIndex:8},{value:"如果希望绘制地理图表，可以如下：",paraId:44,tocIndex:8},{value:"import { Runtime, corelib, geolib, extend } from '@antv/g2';\n\n// 同时使用两个 lib 的能力\nconst Chart = extend(Runtime, { ...corelib, ...geolib });\n\nconst chart = new Chart({ container: 'container' });\n\n// ...\n",paraId:45,tocIndex:8}]},28228:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(94067);const t=[{value:"fadeIn",paraId:0},{value:" 是渐现动画，影响 ",paraId:0},{value:"opacity",paraId:0},{value:" 透明度属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'fadeIn' });\n",paraId:1,tocIndex:0}]},22565:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26498);const t=[{value:"fadeOut",paraId:0},{value:" 是渐现动画，影响 ",paraId:0},{value:"opacity",paraId:0},{value:" 透明度属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'fadeOut' });\n",paraId:1,tocIndex:0}]},454:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(48750);const t=[{value:"growInX",paraId:0},{value:" 是容器沿着 x 方向放大的矩阵动画，多用于 G.Group 容器类进行动画。影响图形的 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'growInX' });\n",paraId:1,tocIndex:0}]},98799:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(97422);const t=[{value:"growInY",paraId:0},{value:" 是容器沿着 y 方向放大的矩阵动画，多用于 G.Group 容器类进行动画。影响图形的 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'growInY' });\n",paraId:1,tocIndex:0}]},54083:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(331);const t=[{value:"morphing",paraId:0},{value:" 图形之间的形变动画，通过 SVG Path 之间的过渡形成的动画。",paraId:0},{value:"chart\n  .area()\n  /* ... */\n  .animate('enter', { type: 'morphing' });\n",paraId:1,tocIndex:0}]},32609:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(77230);const t=[{value:"动画的过程本质是视觉属性在时间上的变化，带来视觉上的动画效果。在 G2 中，提供了三种动画场景类型：",paraId:0},{value:"enter",paraId:1},{value:" - 元素第一次出现的出场动画；",paraId:1},{value:"update",paraId:1},{value:" - 数据更新的时候，元素更新的动画；",paraId:1},{value:"exit",paraId:1},{value:" - 数据更新的时候，元素被销毁退出画布的动画；",paraId:1},{value:"利用这 3 种动画场景，结合 G2 动画语法使用数据驱动动画的方式，可以配制出各种各样需要的动画效果。",paraId:2},{value:"chart\n  .interval()\n  /* ... */\n  .animate({\n    /* options */\n  });\n",paraId:3,tocIndex:0},{value:"关于 ",paraId:4,tocIndex:1},{value:"animate",paraId:4,tocIndex:1},{value:" API 的参数，有以下，主要 3 种动画场景（enter、update、exit）和 动画 5 个属性（type、duration、delay、easing、fill）的组合。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"enterType",paraId:5,tocIndex:1},{value:"动画类型",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"enterDuration",paraId:5,tocIndex:1},{value:"动画持续时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"enterDelay",paraId:5,tocIndex:1},{value:"延迟执行时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"enterEasing",paraId:5,tocIndex:1},{value:"动画的缓动函数",paraId:5,tocIndex:1},{value:"Easing",paraId:5,tocIndex:1},{value:"enterFill",paraId:5,tocIndex:1},{value:"动画处于非运行状态时的展示效果",paraId:5,tocIndex:1},{value:"Fill",paraId:5,tocIndex:1},{value:"updateType",paraId:5,tocIndex:1},{value:"动画类型",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"updateDuration",paraId:5,tocIndex:1},{value:"动画持续时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"updateDelay",paraId:5,tocIndex:1},{value:"延迟执行时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"updateEasing",paraId:5,tocIndex:1},{value:"动画的缓动函数",paraId:5,tocIndex:1},{value:"Easing",paraId:5,tocIndex:1},{value:"updateFill",paraId:5,tocIndex:1},{value:"动画处于非运行状态时的展示效果",paraId:5,tocIndex:1},{value:"Fill",paraId:5,tocIndex:1},{value:"exitType",paraId:5,tocIndex:1},{value:"动画类型",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"exitDuration",paraId:5,tocIndex:1},{value:"动画持续时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"exitDelay",paraId:5,tocIndex:1},{value:"延迟执行时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"exitEasing",paraId:5,tocIndex:1},{value:"动画的缓动函数",paraId:5,tocIndex:1},{value:"Easing",paraId:5,tocIndex:1},{value:"exitFill",paraId:5,tocIndex:1},{value:"动画处于非运行状态时的展示效果",paraId:5,tocIndex:1},{value:"Fill",paraId:5,tocIndex:1},{value:"动画类型 ",paraId:6,tocIndex:2},{value:"Type",paraId:6,tocIndex:2},{value:" 本质是设置动画的方式，会影响的视觉属性。这里具体可以看对应的文档 ",paraId:6,tocIndex:2},{value:"Animation",paraId:7,tocIndex:2},{value:"。当然也可以设置为 ",paraId:6,tocIndex:2},{value:"null",paraId:6,tocIndex:2},{value:"，",paraId:6,tocIndex:2},{value:"undefined",paraId:6,tocIndex:2},{value:"，",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"，代表关闭动画。",paraId:6,tocIndex:2},{value:"缓动函数指定的是动画过程中，视觉属性变化的插值函数。支持以下内置缓动函数，来自 ",paraId:8,tocIndex:3},{value:"easings",paraId:8,tocIndex:3},{value:"，也可以上这个网站预览动画缓动的效果。",paraId:8,tocIndex:3},{value:"constant",paraId:9,tocIndex:3},{value:"accelerate",paraId:9,tocIndex:3},{value:"decelerate",paraId:9,tocIndex:3},{value:"accelerate-decelerate",paraId:9,tocIndex:3},{value:"decelerate-accelerate",paraId:9,tocIndex:3},{value:"linear",paraId:9,tocIndex:3},{value:"ease-in / in",paraId:9,tocIndex:3},{value:"ease-out / out",paraId:9,tocIndex:3},{value:"ease-in-out / in-out",paraId:9,tocIndex:3},{value:"ease-out-in / out-in",paraId:9,tocIndex:3},{value:"ease",paraId:9,tocIndex:3},{value:"in-sine",paraId:9,tocIndex:3},{value:"out-sine",paraId:9,tocIndex:3},{value:"in-out-sine",paraId:9,tocIndex:3},{value:"out-in-sine",paraId:9,tocIndex:3},{value:"steps",paraId:9,tocIndex:3},{value:"in-quad",paraId:9,tocIndex:3},{value:"out-quad",paraId:9,tocIndex:3},{value:"in-out-quad",paraId:9,tocIndex:3},{value:"out-in-quad",paraId:9,tocIndex:3},{value:"step-start",paraId:9,tocIndex:3},{value:"in-cubic",paraId:9,tocIndex:3},{value:"out-cubic",paraId:9,tocIndex:3},{value:"in-out-cubic",paraId:9,tocIndex:3},{value:"out-in-cubic",paraId:9,tocIndex:3},{value:"step-end",paraId:9,tocIndex:3},{value:"in-quart",paraId:9,tocIndex:3},{value:"out-quart",paraId:9,tocIndex:3},{value:"in-out-quart",paraId:9,tocIndex:3},{value:"out-in-quart",paraId:9,tocIndex:3},{value:"in-quint",paraId:9,tocIndex:3},{value:"out-quint",paraId:9,tocIndex:3},{value:"in-out-quint",paraId:9,tocIndex:3},{value:"out-in-quint",paraId:9,tocIndex:3},{value:"in-expo",paraId:9,tocIndex:3},{value:"out-expo",paraId:9,tocIndex:3},{value:"in-out-expo",paraId:9,tocIndex:3},{value:"out-in-expo",paraId:9,tocIndex:3},{value:"in-circ",paraId:9,tocIndex:3},{value:"out-circ",paraId:9,tocIndex:3},{value:"in-out-circ",paraId:9,tocIndex:3},{value:"out-in-circ",paraId:9,tocIndex:3},{value:"in-back",paraId:9,tocIndex:3},{value:"out-back",paraId:9,tocIndex:3},{value:"in-out-back",paraId:9,tocIndex:3},{value:"out-in-back",paraId:9,tocIndex:3},{value:"in-bounce",paraId:9,tocIndex:3},{value:"out-bounce",paraId:9,tocIndex:3},{value:"in-out-bounce",paraId:9,tocIndex:3},{value:"out-in-bounce",paraId:9,tocIndex:3},{value:"in-elastic",paraId:9,tocIndex:3},{value:"out-elastic",paraId:9,tocIndex:3},{value:"in-out-elastic",paraId:9,tocIndex:3},{value:"out-in-elastic",paraId:9,tocIndex:3},{value:"spring / spring-in",paraId:9,tocIndex:3},{value:"spring-out",paraId:9,tocIndex:3},{value:"spring-in-out",paraId:9,tocIndex:3},{value:"spring-out-in",paraId:9,tocIndex:3},{value:"除此之外，还可以通过 ",paraId:10,tocIndex:3},{value:"cubic-bezier(<number>, <number>, <number>, <number>)",paraId:10,tocIndex:3},{value:" 自定义形如三次贝塞尔曲线的函数。以上部分内置函数也是通过它定义完成的，例如 ",paraId:10,tocIndex:3},{value:"ease-in-sine = cubic-bezier(0.47, 0, 0.745, 0.715)",paraId:10,tocIndex:3},{value:"。",paraId:10,tocIndex:3},{value:"该属性规定了图形在动画处于非运行状态（例如动画开始前，结束后）时的展示效果，可以参考 ",paraId:11,tocIndex:4},{value:"WebAPI",paraId:11,tocIndex:4},{value:" 规范。支持以下值：",paraId:11,tocIndex:4},{value:"auto/none",paraId:12,tocIndex:4},{value:" - 默认值，这意味着动画在第一帧开始前和最后一帧结束后都不会影响到图形的展示效果。例如在动画完成后图形会恢复到动画前状态，如果设置了 delay 在延迟期间也不会应用第一帧的效果。",paraId:12,tocIndex:4},{value:"forwards",paraId:12,tocIndex:4},{value:" - 动画完成后停住，不恢复到初始状态",paraId:12,tocIndex:4},{value:"backwards",paraId:12,tocIndex:4},{value:" - 动画开始前应用第一帧效果",paraId:12,tocIndex:4},{value:"both",paraId:12,tocIndex:4},{value:" - 为 forwards 和 backwards 的组合效果",paraId:12,tocIndex:4}]},92970:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(21026);const t=[{value:"pathIn",paraId:0},{value:" 是 SVG Path 路径入场动画。通过影响 ",paraId:0},{value:"lineDash",paraId:0},{value:" 属性来实现。",paraId:0},{value:"chart\n  .line()\n  /* ... */\n  .animate('enter', { type: 'pathIn' });\n",paraId:1,tocIndex:0}]},75941:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(43907);const t=[{value:"scaleInX",paraId:0},{value:" 单个图形沿着 x 方向的生长动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'scaleInX' });\n",paraId:1,tocIndex:0}]},67173:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(77196);const t=[{value:"scaleInY",paraId:0},{value:" 单个图形沿着 y 方向的生长动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'scaleInY' });\n",paraId:1,tocIndex:0}]},26730:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(59465);const t=[{value:"scaleOutX",paraId:0},{value:" 单个图形沿着 x 方向的消失动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'scaleOutX' });\n",paraId:1,tocIndex:0}]},9844:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57025);const t=[{value:"scaleOutY",paraId:0},{value:" 单个图形沿着 y 方向的消失动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'scaleOutY' });\n",paraId:1,tocIndex:0}]},70880:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(15584);const t=[{value:"waveIn",paraId:0},{value:" 划入入场动画效果，不同坐标系下效果不同。在直角坐标系下，影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性，在 polar 坐标系下，影响圆弧的 Path 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'waveIn' });\n",paraId:1,tocIndex:0}]},74194:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(30601);const t=[{value:"zoomIn",paraId:0},{value:" 沿着图形中心点的放大动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'zoomIn' });\n",paraId:1,tocIndex:0}]},22732:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(51315);const t=[{value:"zoomOut",paraId:0},{value:" 沿着图形中心点的缩小动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'zoomOut' });\n",paraId:1,tocIndex:0}]},89189:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(20971);const t=[{value:"属性",paraId:0},{value:"描述",paraId:0},{value:"类型",paraId:0},{value:"默认值",paraId:0},{value:"title",paraId:0},{value:"关闭标题或设置标题内容",paraId:0},{value:"false",paraId:0},{value:"|",paraId:0},{value:"string",paraId:0},{value:"true",paraId:0},{value:"titleSpacing",paraId:0},{value:"标题到内容区域的间距",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"number[]",paraId:0},{value:"0",paraId:0},{value:"titleInset",paraId:0},{value:"标题文本内边距",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"number[]",paraId:0},{value:"0",paraId:0},{value:"titlePosition",paraId:0},{value:"标题所处位置。可采用简写形式，如",paraId:0},{value:"'i'",paraId:0},{value:" 表示",paraId:0},{value:"'inner'",paraId:0},{value:"'top'",paraId:0},{value:" | ",paraId:0},{value:"'bottom'",paraId:0},{value:" |",paraId:0},{value:"'left'",paraId:0},{value:" |",paraId:0},{value:"'right'",paraId:0},{value:" |",paraId:0},{value:"'left-top'",paraId:0},{value:" |",paraId:0},{value:"'left-bottom'",paraId:0},{value:" |",paraId:0},{value:"'right-top'",paraId:0},{value:" |",paraId:0},{value:"'right-bottom'",paraId:0},{value:" |",paraId:0},{value:"'inner'",paraId:0},{value:" | ",paraId:0},{value:"'lt'",paraId:0},{value:"-",paraId:0},{value:"titleFontSize",paraId:0},{value:"标题文字大小",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0},{value:"titleFontFamily",paraId:0},{value:"标题文字字体",paraId:0},{value:"string",paraId:0},{value:"-",paraId:0},{value:"titleFontWeight",paraId:0},{value:"标题字体粗细",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0},{value:"titleFill",paraId:0},{value:"标题字体颜色",paraId:0},{value:"string",paraId:0},{value:"titleFillOpacity",paraId:0},{value:"标题字体颜色透明度",paraId:0},{value:"number",paraId:0},{value:"titleStroke",paraId:0},{value:"标题字体描边颜色",paraId:0},{value:"string",paraId:0},{value:"-",paraId:0},{value:"titleStrokeOpacity",paraId:0},{value:"标题字体描边颜色透明度",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0}]},16848:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71836);const t=[{value:"属性",paraId:0},{value:"描述",paraId:0},{value:"类型",paraId:0},{value:"默认值",paraId:0},{value:"navEffect",paraId:0},{value:"翻页显示效果",paraId:0},{value:"参见 ",paraId:0},{value:"Web Animations API",paraId:0},{value:"linear",paraId:0},{value:"navDuration",paraId:0},{value:"单次翻页动效时长",paraId:0},{value:"number",paraId:0},{value:"200",paraId:0},{value:"| navOrientation    | 翻页滚动方向",paraId:1},{value:" - 横向",paraId:1},{value:"'horizontal'",paraId:1},{value:" - 纵向",paraId:1},{value:"'vertical'",paraId:1},{value:" | ",paraId:1},{value:"'horizontal'",paraId:1},{value:"|",paraId:1},{value:"'vertical'",paraId:1},{value:"                                               | 'horizontal' |",paraId:1},{value:"| navDefaultPage    | 默认展示页数                                                   | ",paraId:2},{value:"number",paraId:2},{value:"                                                                   | 0            |",paraId:2},{value:"| navLoop      | 是否启用循环翻页                                                     | ",paraId:3},{value:"boolean",paraId:3},{value:"                                                                  | false        |",paraId:3},{value:"| navPageNumFill           | 分页数字颜色                                             | ",paraId:4},{value:"string",paraId:4},{value:"                                                                   | -           |",paraId:4},{value:"| navPageNumFontSize       | 分页数字大小                                             | ",paraId:5},{value:"number",paraId:5},{value:"                                                                   | -           |",paraId:5},{value:"| navPageNumOpacity        | 分页数字透明度                                           | ",paraId:6},{value:"number",paraId:6},{value:"                                                                   | -           |",paraId:6},{value:"| navPageNumStroke         | 分页数字描边                                             | ",paraId:7},{value:"string",paraId:7},{value:"                                                                   | -           |",paraId:7},{value:"| navPageNumStrokeOpacity  | 分页数字描边透明度                                        | ",paraId:8},{value:"number",paraId:8},{value:"                                                                   | -           |",paraId:8},{value:"| navButtonFill            | 分页按钮颜色                                             | ",paraId:9},{value:"string",paraId:9},{value:"                                                                   | -           |",paraId:9},{value:"| navButtonOpacity         | 分页数按钮透明度                                          | ",paraId:10},{value:"number",paraId:10},{value:"                                                                   | -           |",paraId:10},{value:"| navButtonStroke          | 分页按钮描边颜色                                          | ",paraId:11},{value:"string",paraId:11},{value:"                                                                   | -           |",paraId:11},{value:"| navButtonStrokeOpacity   | 分页按钮描边透明度                                      | ",paraId:12},{value:"number",paraId:12},{value:"                                                                   | -            |\n| navFormatter | 页码文本格式化                                                 | ",paraId:12},{value:"(current: number, total: number) => string;",paraId:12},{value:"                              | -            |",paraId:12}]},52769:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(66854);const t=[{value:"属性",paraId:0},{value:"描述",paraId:0},{value:"类型",paraId:0},{value:"默认值",paraId:0},{value:"sparklineType",paraId:0},{value:"迷你图类型：折线图、直方图",paraId:0},{value:"line",paraId:0},{value:" | ",paraId:0},{value:"column",paraId:0},{value:"line",paraId:0},{value:"sparklineIsStack",paraId:0},{value:"是否对数据进行堆叠",paraId:0},{value:"boolean",paraId:0},{value:"false",paraId:0},{value:"sparklineRange",paraId:0},{value:"指定值范围，未指定时将使用 data 的最小值和最大值",paraId:0},{value:"[number, number]",paraId:0},{value:"-",paraId:0},{value:"sparklineColor",paraId:0},{value:"指定颜色",paraId:0},{value:"string",paraId:0},{value:" | ",paraId:0},{value:"string[]",paraId:0},{value:" | ",paraId:0},{value:"(index: number)=>string",paraId:0},{value:"-",paraId:0},{value:"sparklineSmooth",paraId:0},{value:"适用于折线图，平滑曲线",paraId:0},{value:"boolean",paraId:0},{value:"false",paraId:0},{value:"sparklineLineStroke",paraId:0},{value:"适用于折线图，线条颜色",paraId:0},{value:"string",paraId:0},{value:"-",paraId:0},{value:"sparklineLineStrokeOpacity",paraId:0},{value:"适用于折线图，线条透明度",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0},{value:"sparklineLineLineDash",paraId:0},{value:"适用于折线图，线条的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:0},{value:"[number,number]",paraId:0},{value:"-",paraId:0},{value:"sparklineAreaFill",paraId:0},{value:"适用于折线图，填充区域颜色",paraId:0},{value:"string",paraId:0},{value:"-",paraId:0},{value:"sparklineAreaFillOpacity",paraId:0},{value:"适用于折线图，填充区域透明度",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0},{value:"sparklineColumnFill",paraId:0},{value:"适用于直方图，条形颜色",paraId:0},{value:"string",paraId:0},{value:"-",paraId:0},{value:"sparklineColumnFillOpacity",paraId:0},{value:"适用于直方图，条形透明度",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0},{value:"sparklineIsGroup",paraId:0},{value:"适用于直方图，是否分组显示",paraId:0},{value:"boolean",paraId:0},{value:"false",paraId:0},{value:"sparklineSpacing",paraId:0},{value:"适用于直方图，分组直方的间距",paraId:0},{value:"number",paraId:0},{value:"0",paraId:0}]},77770:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(8544);const t=[{value:"属性",paraId:0},{value:"描述",paraId:0},{value:"类型",paraId:0},{value:"默认值",paraId:0},{value:"fill",paraId:0},{value:"图形的填充色",paraId:0},{value:"string",paraId:0},{value:" | ",paraId:0},{value:"Function<string>",paraId:0},{value:"-",paraId:0},{value:"fillOpacity",paraId:0},{value:"图形的填充透明度",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"stroke",paraId:0},{value:"图形的描边",paraId:0},{value:"string",paraId:0},{value:" | ",paraId:0},{value:"Function<string>",paraId:0},{value:"-",paraId:0},{value:"lineWidth",paraId:0},{value:"图形描边的宽度",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"lineDash",paraId:0},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:0},{value:"[number,number]",paraId:0},{value:" | ",paraId:0},{value:"Function<[number, number]>",paraId:0},{value:"-",paraId:0},{value:"strokeOpacity",paraId:0},{value:"描边透明度",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"opacity",paraId:0},{value:"图形的整体透明度",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"shadowColor",paraId:0},{value:"图形阴影颜色",paraId:0},{value:"string",paraId:0},{value:" | ",paraId:0},{value:"Function<string>",paraId:0},{value:"-",paraId:0},{value:"shadowBlur",paraId:0},{value:"图形阴影的高斯模糊系数",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"shadowOffsetX",paraId:0},{value:"设置阴影距图形的水平距离",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"shadowOffsetY",paraId:0},{value:"设置阴影距图形的垂直距离",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"cursor",paraId:0},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:0},{value:"string",paraId:0},{value:" | ",paraId:0},{value:"Function<string>",paraId:0},{value:"'default'",paraId:0}]},5352:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(3327);const t=[{value:"绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。",paraId:0},{value:"// View Level\nconst viewLevel = {\n  type: 'view',\n  axis: {\n    x: {},\n    y: {},\n  },\n};\n\n// Mark Level\nconst markLevel = {\n  type: 'interval',\n  axis: {\n    x: {},\n    y: {},\n  },\n};\n",paraId:1},{value:"// API\n\nchart.axis('x', {}).axis('y', {});\n\nchart.interval().axis('x', {}).axis('y', {});\n",paraId:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    marginTop: 40,\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    },\n    encode: {\n      x: 'letter',\n      y: 'frequency',\n    },\n    axis: {\n      y: {\n        // Title\n        title: 'Frequency',\n        titleSpacing: 30,\n        titleFill: 'steelblue',\n\n        // Line\n        line: true,\n        arrow: true,\n        lineArrowOffset: 10,\n        lineArrowSize: 30,\n        lineLineWidth: 10,\n\n        // Tick\n        tickLength: 20,\n        tickFilter: (_, i) => i % 3 !== 0,\n\n        // Label\n        labelFormatter: '.0%',\n\n        // Grid\n        gridLineDash: null,\n        gridStroke: 'red',\n        gridStrokeWidth: 5,\n        gridAreaFill: '#eee',\n      },\n      x: {\n        title: 'Letter',\n        labelFormatter: (d) => d.repeat(3),\n        labelFontSize: 30,\n        labelSpacing: 30,\n      },\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:2},{value:"描述",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"默认值",paraId:4,tocIndex:2},{value:"title",paraId:4,tocIndex:2},{value:"关闭标题或设置标题内容",paraId:4,tocIndex:2},{value:"false",paraId:4,tocIndex:2},{value:"|",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"DisplayObject",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"titleSpacing",paraId:4,tocIndex:2},{value:"标题到坐标轴的距离",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"10",paraId:4,tocIndex:2},{value:"titlePosition",paraId:4,tocIndex:2},{value:"标题相对坐标轴的位置，支持首字母简写形式，如",paraId:4,tocIndex:2},{value:"'top'",paraId:4,tocIndex:2},{value:"简写为",paraId:4,tocIndex:2},{value:"'t'",paraId:4,tocIndex:2},{value:"'top'",paraId:4,tocIndex:2},{value:"|",paraId:4,tocIndex:2},{value:"'bottom'",paraId:4,tocIndex:2},{value:"|",paraId:4,tocIndex:2},{value:"'left'",paraId:4,tocIndex:2},{value:"|",paraId:4,tocIndex:2},{value:"'right'",paraId:4,tocIndex:2},{value:"'lb'",paraId:4,tocIndex:2},{value:"titleFontSize",paraId:4,tocIndex:2},{value:"标题文字大小",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"titleFontFamily",paraId:4,tocIndex:2},{value:"标题文字字体",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"titleFontWeight",paraId:4,tocIndex:2},{value:"标题字体粗细",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"titleStroke",paraId:4,tocIndex:2},{value:"标题字体颜色",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"titleStrokeOpacity",paraId:4,tocIndex:2},{value:"标题透明度",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"属性",paraId:5,tocIndex:3},{value:"描述",paraId:5,tocIndex:3},{value:"类型",paraId:5,tocIndex:3},{value:"默认值",paraId:5,tocIndex:3},{value:"line",paraId:5,tocIndex:3},{value:"是否显示轴线",paraId:5,tocIndex:3},{value:"boolean",paraId:5,tocIndex:3},{value:"true",paraId:5,tocIndex:3},{value:"arrow",paraId:5,tocIndex:3},{value:"是否显示箭头",paraId:5,tocIndex:3},{value:"boolean",paraId:5,tocIndex:3},{value:"true",paraId:5,tocIndex:3},{value:"lineExtension",paraId:5,tocIndex:3},{value:"轴线两侧的延长线",paraId:5,tocIndex:3},{value:"[number, number]",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineArrow",paraId:5,tocIndex:3},{value:"定义轴线箭头形状，默认为箭头形状",paraId:5,tocIndex:3},{value:"DisplayObject",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineArrowOffset",paraId:5,tocIndex:3},{value:"箭头偏移长度",paraId:5,tocIndex:3},{value:"number",paraId:5,tocIndex:3},{value:"15",paraId:5,tocIndex:3},{value:"lineArrowSize",paraId:5,tocIndex:3},{value:"箭头尺寸",paraId:5,tocIndex:3},{value:"number",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineLineWidth",paraId:5,tocIndex:3},{value:"轴线宽度",paraId:5,tocIndex:3},{value:"number",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineLineDash",paraId:5,tocIndex:3},{value:"轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:5,tocIndex:3},{value:"[number,number]",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineStroke",paraId:5,tocIndex:3},{value:"轴线描边色",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineStrokeOpacity",paraId:5,tocIndex:3},{value:"轴线描边色透明度",paraId:5,tocIndex:3},{value:"number",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"属性",paraId:6,tocIndex:4},{value:"描述",paraId:6,tocIndex:4},{value:"类型",paraId:6,tocIndex:4},{value:"默认值",paraId:6,tocIndex:4},{value:"tick",paraId:6,tocIndex:4},{value:"是否显示刻度",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"tickFilter",paraId:6,tocIndex:4},{value:"刻度线过滤",paraId:6,tocIndex:4},{value:"(datum, index, data)=>boolean",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tickFormatter",paraId:6,tocIndex:4},{value:"刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向",paraId:6,tocIndex:4},{value:"DisplayObject",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"(datum, index, data, Vector)=> DisplayObject",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tickDirection",paraId:6,tocIndex:4},{value:"刻度朝向，为 ",paraId:6,tocIndex:4},{value:"positive",paraId:6,tocIndex:4},{value:" 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 ",paraId:6,tocIndex:4},{value:"negative",paraId:6,tocIndex:4},{value:" 时，刻度位于侧轴负方向",paraId:6,tocIndex:4},{value:"'positive'",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"'negative'",paraId:6,tocIndex:4},{value:"'positive'",paraId:6,tocIndex:4},{value:"tickLength",paraId:6,tocIndex:4},{value:"轴线长度",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"|",paraId:6,tocIndex:4},{value:"(datum, index, data)=>number",paraId:6,tocIndex:4},{value:"15",paraId:6,tocIndex:4},{value:"tickLineWidth",paraId:6,tocIndex:4},{value:"刻度线宽度",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"(datum, index, data, Vector)=>number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tickLineDash",paraId:6,tocIndex:4},{value:"刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:4},{value:"[number,number]",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"(datum, index, data, Vector)=>[number,number]",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tickStroke",paraId:6,tocIndex:4},{value:"刻度线颜色",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"(datum, index, data, Vector)=>string",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tickStrokeOpacity",paraId:6,tocIndex:4},{value:"刻度线透明度",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"(datum, index, data, Vector)=>number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"属性",paraId:7,tocIndex:5},{value:"描述",paraId:7,tocIndex:5},{value:"类型",paraId:7,tocIndex:5},{value:"默认值",paraId:7,tocIndex:5},{value:"label",paraId:7,tocIndex:5},{value:"是否显示刻度值",paraId:7,tocIndex:5},{value:"boolean",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelOpacity",paraId:7,tocIndex:5},{value:"刻度值透明度",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFilter",paraId:7,tocIndex:5},{value:"刻度值过滤",paraId:7,tocIndex:5},{value:"(datum, index, data)=> boolean",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFormatter",paraId:7,tocIndex:5},{value:"刻度值线格式化",paraId:7,tocIndex:5},{value:"DisplayObject",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data, Vector)=> DisplayObject",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"transform",paraId:7,tocIndex:5},{value:"刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转",paraId:7,tocIndex:5},{value:"Transform[]",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelAutoHide",paraId:7,tocIndex:5},{value:"自动隐藏重叠的刻度值，设置 size 值的时候生效",paraId:7,tocIndex:5},{value:"boolean",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"HideOverlapCfg",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelAutoRotate",paraId:7,tocIndex:5},{value:"自动旋转刻度，设置 size 值的时候生效值",paraId:7,tocIndex:5},{value:"boolean",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"RotateOverlapCfg",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelAutoEllipsis",paraId:7,tocIndex:5},{value:"自动缩略刻度值，设置 size 值的时候生效",paraId:7,tocIndex:5},{value:"boolean",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"EllipsisOverlapCfg",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelAutoWrap",paraId:7,tocIndex:5},{value:"自动换行刻度值，设置 size 值的时候是生效",paraId:7,tocIndex:5},{value:"boolean",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"WrapOverlapCfg",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelAlign",paraId:7,tocIndex:5},{value:"刻度值对齐方式",paraId:7,tocIndex:5},{value:"- 'horizontal' 始终保持水平",paraId:7,tocIndex:5},{value:" - 'parallel' 平行于坐标轴",paraId:7,tocIndex:5},{value:" - 'perpendicular' 垂直于坐标轴",paraId:7,tocIndex:5},{value:"'horizontal'",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"'parallel'",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"'perpendicular'",paraId:7,tocIndex:5},{value:"'parallel'",paraId:7,tocIndex:5},{value:"labelDirection",paraId:7,tocIndex:5},{value:"刻度值位于轴线的位置，参考",paraId:7,tocIndex:5},{value:"tickDirection",paraId:7,tocIndex:5},{value:"'positive'",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"'negative'",paraId:7,tocIndex:5},{value:"'positive'",paraId:7,tocIndex:5},{value:"labelSpacing",paraId:7,tocIndex:5},{value:"刻度值到其对应刻度的间距",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:"0",paraId:7,tocIndex:5},{value:"labelLineWidth",paraId:7,tocIndex:5},{value:"刻度值宽度",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" |",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelLineDash",paraId:7,tocIndex:5},{value:"刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:5},{value:"[number,number]",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>[number, number]",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFontSize",paraId:7,tocIndex:5},{value:"刻度值文字大小",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFontFamily",paraId:7,tocIndex:5},{value:"刻度值文字字体",paraId:7,tocIndex:5},{value:"string",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>string",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFontWeight",paraId:7,tocIndex:5},{value:"刻度值字体粗细",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" |",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFill",paraId:7,tocIndex:5},{value:"刻度值字体颜色",paraId:7,tocIndex:5},{value:"string",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>string",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFillOpacity",paraId:7,tocIndex:5},{value:"刻度值文本透明度",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelStroke",paraId:7,tocIndex:5},{value:"刻度值文本描边颜色",paraId:7,tocIndex:5},{value:"string",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>string",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelStrokeOpacity",paraId:7,tocIndex:5},{value:"刻度值文本描边透明度",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"export interface Transform {\n  /** 避免刻度值重叠时的额外边距 */\n  margin?: number[];\n}\n\nexport interface EllipsisOverlapCfg extends Transform {\n  type: 'ellipsis';\n  /** 缩略替换字符，默认为 ... */\n  suffix?: string;\n  /** 文本短于该长度时不再缩略 */\n  minLength: string | number;\n  /** 文本短于该长度时一定会进行缩略 */\n  maxLength?: string | number;\n  /** 每次缩略执行步长 */\n  step?: string | number;\n}\n\nexport interface RotateOverlapCfg extends Transform {\n  type: 'rotate';\n  /** 可选的旋转角度值 */\n  optionalAngles: number[];\n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */\n  recoverWhenFailed?: boolean;\n}\n\nexport interface HideOverlapCfg extends Transform {\n  type: 'hide';\n  /** 保证第一个刻度值不被隐藏 */\n  keepHeader?: boolean;\n  /** 保证最后一个刻度值不被隐藏 */\n  keepTail?: boolean;\n}\n\nexport interface WrapOverlapCfg extends Transform {\n  type: 'wrap';\n  /** 单行最大宽度 */\n  wordWrapWidth?: number;\n  /** 最大行数 */\n  maxLines?: number;\n  recoverWhenFailed?: boolean;\n}\n",paraId:8,tocIndex:5},{value:"在不同坐标系下网格线会具有不同的样式",paraId:9,tocIndex:6},{value:"场景标签",paraId:10,tocIndex:6},{value:"样式",paraId:10,tocIndex:6},{value:"直角坐标系",paraId:10,tocIndex:6},{value:"极坐标系",paraId:10,tocIndex:6},{value:"极坐标系",paraId:10,tocIndex:6},{value:"极坐标系",paraId:10,tocIndex:6},{value:" ",paraId:10,tocIndex:6},{value:"雷达图",paraId:10,tocIndex:6},{value:"属性",paraId:11,tocIndex:6},{value:"描述",paraId:11,tocIndex:6},{value:"类型",paraId:11,tocIndex:6},{value:"默认值",paraId:11,tocIndex:6},{value:"grid",paraId:11,tocIndex:6},{value:"是否显示网格线",paraId:11,tocIndex:6},{value:"boolean",paraId:11,tocIndex:6},{value:"false",paraId:11,tocIndex:6},{value:"gridFilter",paraId:11,tocIndex:6},{value:"网格线过滤",paraId:11,tocIndex:6},{value:"(datum, index, data)=> boolean",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"gridLength",paraId:11,tocIndex:6},{value:"网格线长度。一般情况下，不需要用户配置。",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:" | ",paraId:11,tocIndex:6},{value:"(datum, index, data)=> number",paraId:11,tocIndex:6},{value:"0",paraId:11,tocIndex:6},{value:"gridAreaFill",paraId:11,tocIndex:6},{value:"网格线区域颜色",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:" | ",paraId:11,tocIndex:6},{value:"string[]",paraId:11,tocIndex:6},{value:"| ",paraId:11,tocIndex:6},{value:"(datum, index, data)=> string",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"gridLineWidth",paraId:11,tocIndex:6},{value:"网格线宽度",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"gridLineDash",paraId:11,tocIndex:6},{value:"网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:11,tocIndex:6},{value:"[number,number]",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"gridStroke",paraId:11,tocIndex:6},{value:"网格线颜色",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"gridStrokeOpacity",paraId:11,tocIndex:6},{value:"网格线透明度",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"支持设置更新时的动画效果",paraId:12,tocIndex:7},{value:"属性",paraId:13,tocIndex:7},{value:"描述",paraId:13,tocIndex:7},{value:"类型",paraId:13,tocIndex:7},{value:"默认值",paraId:13,tocIndex:7},{value:"animate",paraId:13,tocIndex:7},{value:"是否开启动画",paraId:13,tocIndex:7},{value:"boolean",paraId:13,tocIndex:7},{value:" | ",paraId:13,tocIndex:7},{value:"EffectTiming",paraId:13,tocIndex:7},{value:"-",paraId:13,tocIndex:7},{value:"EffectTiming 支持配置的属性如下：",paraId:14,tocIndex:7},{value:"属性",paraId:15,tocIndex:7},{value:"描述",paraId:15,tocIndex:7},{value:"类型",paraId:15,tocIndex:7},{value:"默认值",paraId:15,tocIndex:7},{value:"delay",paraId:15,tocIndex:7},{value:"延迟执行时间 (ms)",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"-",paraId:15,tocIndex:7},{value:"duration",paraId:15,tocIndex:7},{value:"动画持续时间 (ms)",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"-",paraId:15,tocIndex:7},{value:"easing",paraId:15,tocIndex:7},{value:"动画的缓动函数",paraId:15,tocIndex:7},{value:"Easing",paraId:15,tocIndex:7},{value:"-",paraId:15,tocIndex:7},{value:"endDelay",paraId:15,tocIndex:7},{value:"延迟执行时间 (ms)",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"-",paraId:15,tocIndex:7},{value:"fill",paraId:15,tocIndex:7},{value:"动画处于非运行状态时的展示效果",paraId:15,tocIndex:7},{value:"Fill",paraId:15,tocIndex:7},{value:"-",paraId:15,tocIndex:7}]},71205:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(20976);const t=[{value:"绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。",paraId:0},{value:"// View Level\nconst viewLevel = {\n  type: 'view',\n  legend: {\n    color: {},\n    size: {},\n  },\n};\n\n// Mark Level\nconst markLevel = {\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n};\n",paraId:1},{value:"// API\nchart.legend('x', {}).legend('y', {});\n\nchart.interval().legend('x', {}).legend('y', {});\n",paraId:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n      format: 'csv',\n    },\n    encode: { x: 'age', y: 'people', color: 'sex' },\n    transform: [{ type: 'groupX', y: 'sum' }, { type: 'stackY' }],\n    scale: { color: { type: 'ordinal' } },\n    legend: { color: {} },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:3,tocIndex:0},{value:"图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"itemMarker",paraId:5,tocIndex:1},{value:"图例项图标",paraId:5,tocIndex:1},{value:"DisplayObject",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>DisplayObject",paraId:5,tocIndex:1},{value:"'circle'",paraId:5,tocIndex:1},{value:"itemMarkerFill",paraId:5,tocIndex:1},{value:"图例项图标填充色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemMarkerFillOpacity",paraId:5,tocIndex:1},{value:"图例项图标填充色透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemMarkerStroke",paraId:5,tocIndex:1},{value:"图例项图标描边色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemMarkerStrokeOpacity",paraId:5,tocIndex:1},{value:"图例项图标描边色透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelText",paraId:5,tocIndex:1},{value:"图例项标签",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelFontSize",paraId:5,tocIndex:1},{value:"图例项标签文字大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelFontFamily",paraId:5,tocIndex:1},{value:"图例项标签文字字体",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelFontWeight",paraId:5,tocIndex:1},{value:"图例项标签字体粗细",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelFill",paraId:5,tocIndex:1},{value:"图例项标签字体颜色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelFillOpacity",paraId:5,tocIndex:1},{value:"图例项标签字体透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelStroke",paraId:5,tocIndex:1},{value:"图例项标签描边色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelStrokeOpacity",paraId:5,tocIndex:1},{value:"图例项标签描边色透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueText",paraId:5,tocIndex:1},{value:"图例项值",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueFontSize",paraId:5,tocIndex:1},{value:"图例项值文字大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueFontFamily",paraId:5,tocIndex:1},{value:"图例项值文字字体",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueFontWeight",paraId:5,tocIndex:1},{value:"图例项值字体粗细",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueFill",paraId:5,tocIndex:1},{value:"图例项值字体颜色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueFillOpacity",paraId:5,tocIndex:1},{value:"图例项值字体透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueStroke",paraId:5,tocIndex:1},{value:"图例项值描边色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueStrokeOpacity",paraId:5,tocIndex:1},{value:"图例项值描边色透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemSpan",paraId:5,tocIndex:1},{value:"图例项图标、标签和值的空间划分",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"number[]",paraId:5,tocIndex:1},{value:"[1, 1, 1]",paraId:5,tocIndex:1},{value:"itemSpacing",paraId:5,tocIndex:1},{value:"图例项图标、标签和值之间的间距",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"number[]",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemBackgroundFill",paraId:5,tocIndex:1},{value:"背景颜色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemBackgroundFillOpacity",paraId:5,tocIndex:1},{value:"背景透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"默认采用",paraId:6,tocIndex:2},{value:"流式布局",paraId:6,tocIndex:2},{value:"。",paraId:6,tocIndex:2},{value:"当指定 ",paraId:7,tocIndex:2},{value:"cols",paraId:7,tocIndex:2},{value:" 之后会采用",paraId:7,tocIndex:2},{value:"网格布局",paraId:7,tocIndex:2},{value:"。",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"layout",paraId:8,tocIndex:2},{value:"图例项布局方式，网格布局、流式布局",paraId:8,tocIndex:2},{value:"'flex'",paraId:8,tocIndex:2},{value:"|",paraId:8,tocIndex:2},{value:"'grid'",paraId:8,tocIndex:2},{value:"'flex'",paraId:8,tocIndex:2},{value:"cols",paraId:8,tocIndex:2},{value:"指定每列显示的图例项数量，为空时表示列数不受限制",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"colPadding",paraId:8,tocIndex:2},{value:"图例项之间的横向间隔",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0",paraId:8,tocIndex:2},{value:"rowPadding",paraId:8,tocIndex:2},{value:"图例项之间的纵向间隔",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0",paraId:8,tocIndex:2},{value:"maxRows",paraId:8,tocIndex:2},{value:"最多多少行",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"3",paraId:8,tocIndex:2},{value:"maxCols",paraId:8,tocIndex:2},{value:"最多多少列",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"3",paraId:8,tocIndex:2},{value:"图例项分页显示时能够控制分页器的行为。",paraId:9,tocIndex:3},{value:"属性",paraId:10,tocIndex:3},{value:"描述",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"默认值",paraId:10,tocIndex:3},{value:"navEffect",paraId:10,tocIndex:3},{value:"翻页显示效果",paraId:10,tocIndex:3},{value:"参见 ",paraId:10,tocIndex:3},{value:"Web Animations API",paraId:10,tocIndex:3},{value:"linear",paraId:10,tocIndex:3},{value:"navDuration",paraId:10,tocIndex:3},{value:"单次翻页动效时长",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"200",paraId:10,tocIndex:3},{value:"| navOrientation    | 翻页滚动方向",paraId:11,tocIndex:3},{value:" - 横向",paraId:11,tocIndex:3},{value:"'horizontal'",paraId:11,tocIndex:3},{value:" - 纵向",paraId:11,tocIndex:3},{value:"'vertical'",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"'horizontal'",paraId:11,tocIndex:3},{value:"|",paraId:11,tocIndex:3},{value:"'vertical'",paraId:11,tocIndex:3},{value:"                                               | 'horizontal' |",paraId:11,tocIndex:3},{value:"| navDefaultPage    | 默认展示页数                                                   | ",paraId:12,tocIndex:3},{value:"number",paraId:12,tocIndex:3},{value:"                                                                   | 0            |",paraId:12,tocIndex:3},{value:"| navLoop      | 是否启用循环翻页                                                     | ",paraId:13,tocIndex:3},{value:"boolean",paraId:13,tocIndex:3},{value:"                                                                  | false        |",paraId:13,tocIndex:3},{value:"| navPageNumFill           | 分页数字颜色                                             | ",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:"                                                                   | -           |",paraId:14,tocIndex:3},{value:"| navPageNumFontSize       | 分页数字大小                                             | ",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:"                                                                   | -           |",paraId:15,tocIndex:3},{value:"| navPageNumOpacity        | 分页数字透明度                                           | ",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"                                                                   | -           |",paraId:16,tocIndex:3},{value:"| navPageNumStroke         | 分页数字描边                                             | ",paraId:17,tocIndex:3},{value:"string",paraId:17,tocIndex:3},{value:"                                                                   | -           |",paraId:17,tocIndex:3},{value:"| navPageNumStrokeOpacity  | 分页数字描边透明度                                        | ",paraId:18,tocIndex:3},{value:"number",paraId:18,tocIndex:3},{value:"                                                                   | -           |",paraId:18,tocIndex:3},{value:"| navButtonFill            | 分页按钮颜色                                             | ",paraId:19,tocIndex:3},{value:"string",paraId:19,tocIndex:3},{value:"                                                                   | -           |",paraId:19,tocIndex:3},{value:"| navButtonOpacity         | 分页数按钮透明度                                          | ",paraId:20,tocIndex:3},{value:"number",paraId:20,tocIndex:3},{value:"                                                                   | -           |",paraId:20,tocIndex:3},{value:"| navButtonStroke          | 分页按钮描边颜色                                          | ",paraId:21,tocIndex:3},{value:"string",paraId:21,tocIndex:3},{value:"                                                                   | -           |",paraId:21,tocIndex:3},{value:"| navButtonStrokeOpacity   | 分页按钮描边透明度                                      | ",paraId:22,tocIndex:3},{value:"number",paraId:22,tocIndex:3},{value:"                                                                   | -            |\n| navFormatter | 页码文本格式化                                                 | ",paraId:22,tocIndex:3},{value:"(current: number, total: number) => string;",paraId:22,tocIndex:3},{value:"                              | -            |",paraId:22,tocIndex:3},{value:"事件类型",paraId:23,tocIndex:4},{value:"描述",paraId:23,tocIndex:4},{value:"类型",paraId:23,tocIndex:4},{value:"click",paraId:23,tocIndex:4},{value:"点击图例项时触发",paraId:23,tocIndex:4},{value:"(item:Selection)=>void",paraId:23,tocIndex:4},{value:"mouseenter",paraId:23,tocIndex:4},{value:"鼠标移入图例项时触发",paraId:23,tocIndex:4},{value:"(item: Selection)=>void",paraId:23,tocIndex:4},{value:"mouseleave",paraId:23,tocIndex:4},{value:"鼠标移出图例项时触发",paraId:23,tocIndex:4},{value:"(item:Selection)=>void",paraId:23,tocIndex:4},{value:"使用离散数据绘制视图时采用的图例类型。",paraId:24,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'groupX', y: 'sum' })\n  .encode('x', 'age')\n  .encode('y', 'people')\n  .encode('color', 'sex')\n  .scale('color', { type: 'ordinal', range: ['#ca8861', '#675193'] })\n  .legend('y', {\n    ribbonLen: 200,\n    ribbonSize: 30,\n    labelFormatter: (datum, index, data) => datum.people.toLocaleString(),\n    type: 'size',\n    color: [\n      '#d0e3fa',\n      '#acc7f6',\n      '#8daaf2',\n      '#6d8eea',\n      '#4d73cd',\n      '#325bb1',\n      '#5a3e75',\n      '#8c3c79',\n      '#e23455',\n      '#e7655b',\n    ],\n  });\n\nchart.render();\n",paraId:25,tocIndex:5},{value:"连续数据的图例具有 4 种样式，分别为：",paraId:26,tocIndex:6},{value:"连续表示 ",paraId:27,tocIndex:6},{value:"默认",paraId:27,tocIndex:6},{value:"范围表示 ",paraId:28,tocIndex:6},{value:"block=true",paraId:28,tocIndex:6},{value:"尺寸表示 ",paraId:29,tocIndex:6},{value:"type='size'",paraId:29,tocIndex:6},{value:"尺寸、范围表示 ",paraId:30,tocIndex:6},{value:"type='size'",paraId:30,tocIndex:6},{value:" ",paraId:30,tocIndex:6},{value:"block=true",paraId:30,tocIndex:6},{value:"属性",paraId:31,tocIndex:6},{value:"描述",paraId:31,tocIndex:6},{value:"类型",paraId:31,tocIndex:6},{value:"默认值",paraId:31,tocIndex:6},{value:"color",paraId:31,tocIndex:6},{value:"色带颜色，为数组时会从中按序取色",paraId:31,tocIndex:6},{value:"string[]",paraId:31,tocIndex:6},{value:" | ",paraId:31,tocIndex:6},{value:"interpolate",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"block",paraId:31,tocIndex:6},{value:"是否按区间显示",paraId:31,tocIndex:6},{value:"boolean",paraId:31,tocIndex:6},{value:"false",paraId:31,tocIndex:6},{value:"type",paraId:31,tocIndex:6},{value:"连续图例类型",paraId:31,tocIndex:6},{value:"'size'",paraId:31,tocIndex:6},{value:" | ",paraId:31,tocIndex:6},{value:"'color'",paraId:31,tocIndex:6},{value:"'color'",paraId:31,tocIndex:6},{value:"ribbonSize",paraId:31,tocIndex:6},{value:"色带尺寸",paraId:31,tocIndex:6},{value:"number",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"ribbonFill",paraId:31,tocIndex:6},{value:"色带颜色",paraId:31,tocIndex:6},{value:"string",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"ribbonFillOpacity",paraId:31,tocIndex:6},{value:"色带透明度",paraId:31,tocIndex:6},{value:"number",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"ribbonStroke",paraId:31,tocIndex:6},{value:"色带描边色",paraId:31,tocIndex:6},{value:"string",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"ribbonStrokeOpacity",paraId:31,tocIndex:6},{value:"色带描边色透明度",paraId:31,tocIndex:6},{value:"number",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"color 插值器参考 ",paraId:32,tocIndex:6},{value:"d3-interpolate",paraId:32,tocIndex:6},{value:"滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。",paraId:33,tocIndex:7},{value:"\n ",paraId:34},{value:"属性",paraId:35,tocIndex:7},{value:"描述",paraId:35,tocIndex:7},{value:"类型",paraId:35,tocIndex:7},{value:"默认值",paraId:35,tocIndex:7},{value:"handle",paraId:35,tocIndex:7},{value:"是否显示滑动手柄",paraId:35,tocIndex:7},{value:"boolean",paraId:35,tocIndex:7},{value:"true",paraId:35,tocIndex:7},{value:"handleLabel",paraId:35,tocIndex:7},{value:"是否显示手柄文本",paraId:35,tocIndex:7},{value:"boolean",paraId:35,tocIndex:7},{value:"true",paraId:35,tocIndex:7},{value:"handleFormatter",paraId:35,tocIndex:7},{value:"手柄文本格式化",paraId:35,tocIndex:7},{value:"(datum)=>string",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"slidable",paraId:35,tocIndex:7},{value:"窗口是否可以滑动",paraId:35,tocIndex:7},{value:"boolean",paraId:35,tocIndex:7},{value:"true",paraId:35,tocIndex:7},{value:"range",paraId:35,tocIndex:7},{value:"默认选择范围",paraId:35,tocIndex:7},{value:"[number, number]",paraId:35,tocIndex:7},{value:"[min, max]",paraId:35,tocIndex:7},{value:"step",paraId:35,tocIndex:7},{value:"单次滑动步长",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:"1",paraId:35,tocIndex:7},{value:"handleMarkerFill",paraId:35,tocIndex:7},{value:"手柄图标颜色",paraId:35,tocIndex:7},{value:"string",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleMarkerFillOpacity",paraId:35,tocIndex:7},{value:"手柄图标色透明度",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleMarkerStroke",paraId:35,tocIndex:7},{value:"手柄图标描边色",paraId:35,tocIndex:7},{value:"string",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleMarkerStrokeOpacity",paraId:35,tocIndex:7},{value:"手柄图标描边色透明度",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelFontSize",paraId:35,tocIndex:7},{value:"手柄文字大小",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:" | ",paraId:35,tocIndex:7},{value:"Function<number>",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelFontFamily",paraId:35,tocIndex:7},{value:"手柄文字字体",paraId:35,tocIndex:7},{value:"string",paraId:35,tocIndex:7},{value:" | ",paraId:35,tocIndex:7},{value:"Function<string>",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelFontWeight",paraId:35,tocIndex:7},{value:"手柄字体粗细",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:" |",paraId:35,tocIndex:7},{value:"Function<number>",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelFill",paraId:35,tocIndex:7},{value:"手柄字体颜色",paraId:35,tocIndex:7},{value:"string",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelFillOpacity",paraId:35,tocIndex:7},{value:"手柄文本透明度",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelStroke",paraId:35,tocIndex:7},{value:"手柄文本描边色",paraId:35,tocIndex:7},{value:"string",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelStrokeOpacity",paraId:35,tocIndex:7},{value:"手柄文本描边色透明度",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"属性",paraId:36,tocIndex:8},{value:"描述",paraId:36,tocIndex:8},{value:"类型",paraId:36,tocIndex:8},{value:"默认值",paraId:36,tocIndex:8},{value:"label",paraId:36,tocIndex:8},{value:"是否显示刻度值",paraId:36,tocIndex:8},{value:"boolean",paraId:36,tocIndex:8},{value:"true`",paraId:36,tocIndex:8},{value:"labelFormatter",paraId:36,tocIndex:8},{value:"刻度值格式化",paraId:36,tocIndex:8},{value:"(datum, index, data)=>string",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelFilter",paraId:36,tocIndex:8},{value:"刻度值过滤",paraId:36,tocIndex:8},{value:"(datum, index, data)=>boolean",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelDirection",paraId:36,tocIndex:8},{value:"刻度值位于色带的位置，参考 axis ",paraId:36,tocIndex:8},{value:"direction",paraId:36,tocIndex:8},{value:"'positive'",paraId:36,tocIndex:8},{value:" | ",paraId:36,tocIndex:8},{value:"'negative'",paraId:36,tocIndex:8},{value:"'positive'",paraId:36,tocIndex:8},{value:"labelSpacing",paraId:36,tocIndex:8},{value:"刻度值到色带的间距",paraId:36,tocIndex:8},{value:"number",paraId:36,tocIndex:8},{value:"5",paraId:36,tocIndex:8},{value:"labelAlign",paraId:36,tocIndex:8},{value:"刻度值对齐位置",paraId:36,tocIndex:8},{value:" - ",paraId:36,tocIndex:8},{value:"'value'",paraId:36,tocIndex:8},{value:" 对齐到刻度",paraId:36,tocIndex:8},{value:"- ",paraId:36,tocIndex:8},{value:"'range'",paraId:36,tocIndex:8},{value:" 对齐到范围",paraId:36,tocIndex:8},{value:"'value'",paraId:36,tocIndex:8},{value:"|",paraId:36,tocIndex:8},{value:"'range'",paraId:36,tocIndex:8},{value:"'value'",paraId:36,tocIndex:8},{value:"labelFontSize",paraId:36,tocIndex:8},{value:"刻度值文字大小",paraId:36,tocIndex:8},{value:"number",paraId:36,tocIndex:8},{value:" | ",paraId:36,tocIndex:8},{value:"Function<number>",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelFontFamily",paraId:36,tocIndex:8},{value:"刻度值文字字体",paraId:36,tocIndex:8},{value:"string",paraId:36,tocIndex:8},{value:" | ",paraId:36,tocIndex:8},{value:"Function<string>",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelFontWeight",paraId:36,tocIndex:8},{value:"刻度值字体粗细",paraId:36,tocIndex:8},{value:"number",paraId:36,tocIndex:8},{value:" | ",paraId:36,tocIndex:8},{value:"Function<number>",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelStroke",paraId:36,tocIndex:8},{value:"刻度值字体颜色",paraId:36,tocIndex:8},{value:"string",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelStrokeOpacity",paraId:36,tocIndex:8},{value:"刻度值文本透明度",paraId:36,tocIndex:8},{value:"number",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"刻度值对齐方式",paraId:37,tocIndex:8},{value:"对齐到刻度",paraId:38,tocIndex:8},{value:"\n ",paraId:34},{value:"对齐到范围",paraId:39,tocIndex:8},{value:"\n ",paraId:34},{value:"指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。",paraId:40,tocIndex:9},{value:"属性",paraId:41,tocIndex:9},{value:"描述",paraId:41,tocIndex:9},{value:"类型",paraId:41,tocIndex:9},{value:"默认值",paraId:41,tocIndex:9},{value:"indicator",paraId:41,tocIndex:9},{value:"是否显示值指示器",paraId:41,tocIndex:9},{value:"boolean",paraId:41,tocIndex:9},{value:"true",paraId:41,tocIndex:9},{value:"indicatorFormatter",paraId:41,tocIndex:9},{value:"值指示器格式化",paraId:41,tocIndex:9},{value:"(datum)=>string | DisplayObject",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorLabelFontSize",paraId:41,tocIndex:9},{value:"值指示器文本文字大小",paraId:41,tocIndex:9},{value:"number",paraId:41,tocIndex:9},{value:" | ",paraId:41,tocIndex:9},{value:"Function<number>",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorLabelFontFamily",paraId:41,tocIndex:9},{value:"值指示器文本文字字体",paraId:41,tocIndex:9},{value:"string",paraId:41,tocIndex:9},{value:" | ",paraId:41,tocIndex:9},{value:"Function<string>",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorLabelFontWeight",paraId:41,tocIndex:9},{value:"值指示器文本字体粗细",paraId:41,tocIndex:9},{value:"number",paraId:41,tocIndex:9},{value:" |",paraId:41,tocIndex:9},{value:"Function<number>",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorLabelStroke",paraId:41,tocIndex:9},{value:"值指示器字体颜色",paraId:41,tocIndex:9},{value:"string",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorLabelStrokeOpacity",paraId:41,tocIndex:9},{value:"值指示器文本透明度",paraId:41,tocIndex:9},{value:"number",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorBackgroundFill",paraId:41,tocIndex:9},{value:"值指示器背景颜色",paraId:41,tocIndex:9},{value:"string",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorBackgroundFillOpacity",paraId:41,tocIndex:9},{value:"值指示器背景透明度",paraId:41,tocIndex:9},{value:"number",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorBackgroundStroke",paraId:41,tocIndex:9},{value:"值指示器背景描边色",paraId:41,tocIndex:9},{value:"string",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorBackgroundStrokeOpacity",paraId:41,tocIndex:9},{value:"值指示器背景描边色透明度",paraId:41,tocIndex:9},{value:"number",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"事件类型",paraId:42,tocIndex:10},{value:"描述",paraId:42,tocIndex:10},{value:"类型",paraId:42,tocIndex:10},{value:"valuechange",paraId:42,tocIndex:10},{value:"滑动窗口选取范围改变时触发",paraId:42,tocIndex:10},{value:"(range: [number, number])=>void",paraId:42,tocIndex:10},{value:"indicate",paraId:42,tocIndex:10},{value:"指示器值改变时触发",paraId:42,tocIndex:10},{value:"(value: number, range: [number, number])=>void",paraId:42,tocIndex:10},{value:"属性",paraId:43,tocIndex:12},{value:"描述",paraId:43,tocIndex:12},{value:"类型",paraId:43,tocIndex:12},{value:"默认值",paraId:43,tocIndex:12},{value:"title",paraId:43,tocIndex:12},{value:"关闭标题或设置标题内容",paraId:43,tocIndex:12},{value:"false",paraId:43,tocIndex:12},{value:"|",paraId:43,tocIndex:12},{value:"string",paraId:43,tocIndex:12},{value:"true",paraId:43,tocIndex:12},{value:"titleSpacing",paraId:43,tocIndex:12},{value:"标题到内容区域的间距",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:" | ",paraId:43,tocIndex:12},{value:"number[]",paraId:43,tocIndex:12},{value:"0",paraId:43,tocIndex:12},{value:"titleInset",paraId:43,tocIndex:12},{value:"标题文本内边距",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:" | ",paraId:43,tocIndex:12},{value:"number[]",paraId:43,tocIndex:12},{value:"0",paraId:43,tocIndex:12},{value:"titlePosition",paraId:43,tocIndex:12},{value:"标题所处位置。可采用简写形式，如",paraId:43,tocIndex:12},{value:"'i'",paraId:43,tocIndex:12},{value:" 表示",paraId:43,tocIndex:12},{value:"'inner'",paraId:43,tocIndex:12},{value:"'top'",paraId:43,tocIndex:12},{value:" | ",paraId:43,tocIndex:12},{value:"'bottom'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'left'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'right'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'left-top'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'left-bottom'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'right-top'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'right-bottom'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'inner'",paraId:43,tocIndex:12},{value:" | ",paraId:43,tocIndex:12},{value:"'lt'",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"titleFontSize",paraId:43,tocIndex:12},{value:"标题文字大小",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"titleFontFamily",paraId:43,tocIndex:12},{value:"标题文字字体",paraId:43,tocIndex:12},{value:"string",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"titleFontWeight",paraId:43,tocIndex:12},{value:"标题字体粗细",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"titleFill",paraId:43,tocIndex:12},{value:"标题字体颜色",paraId:43,tocIndex:12},{value:"string",paraId:43,tocIndex:12},{value:"titleFillOpacity",paraId:43,tocIndex:12},{value:"标题字体颜色透明度",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:"titleStroke",paraId:43,tocIndex:12},{value:"标题字体描边颜色",paraId:43,tocIndex:12},{value:"string",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"titleStrokeOpacity",paraId:43,tocIndex:12},{value:"标题字体描边颜色透明度",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"Legend 组件支持调整其在画布中的位置，通过 ",paraId:44,tocIndex:13},{value:"layout",paraId:44,tocIndex:13},{value:" 属性来设置。\n目前支持基本的 Flex 布局方式，支持的属性包括: ",paraId:44,tocIndex:13},{value:"justifyContent",paraId:44,tocIndex:13},{value:", ",paraId:44,tocIndex:13},{value:"alignItems",paraId:44,tocIndex:13},{value:", ",paraId:44,tocIndex:13},{value:"flexDirection",paraId:44,tocIndex:13},{value:"。",paraId:44,tocIndex:13},{value:"属性",paraId:45,tocIndex:13},{value:"描述",paraId:45,tocIndex:13},{value:"类型",paraId:45,tocIndex:13},{value:"默认值",paraId:45,tocIndex:13},{value:"justifyContent",paraId:45,tocIndex:13},{value:"主轴对齐方式",paraId:45,tocIndex:13},{value:"'flex-start'",paraId:45,tocIndex:13},{value:" | ",paraId:45,tocIndex:13},{value:"'flex-end'",paraId:45,tocIndex:13},{value:" | ",paraId:45,tocIndex:13},{value:"'center'",paraId:45,tocIndex:13},{value:"'flex-start'",paraId:45,tocIndex:13},{value:"alignItems",paraId:45,tocIndex:13},{value:"交叉轴对齐",paraId:45,tocIndex:13},{value:"'flex-start'",paraId:45,tocIndex:13},{value:" | ",paraId:45,tocIndex:13},{value:"'flex-end'",paraId:45,tocIndex:13},{value:" | ",paraId:45,tocIndex:13},{value:"'center'",paraId:45,tocIndex:13},{value:"'flex-start'",paraId:45,tocIndex:13},{value:"flexDirection",paraId:45,tocIndex:13},{value:"主轴方向",paraId:45,tocIndex:13},{value:"'row'",paraId:45,tocIndex:13},{value:" | ",paraId:45,tocIndex:13},{value:"'column'",paraId:45,tocIndex:13},{value:"'row'",paraId:45,tocIndex:13},{value:"chart\n  .interval()\n  .data(/** data */)\n  .encode('x' /** x filed */)\n  .encode('y' /** y filed */)\n  .encode('color' /** color filed */)\n  .legend('color', {\n    /** 让图例在水平和垂直方向上保持居中 */\n    layout: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'column',\n    },\n  });\n",paraId:46,tocIndex:13}]},68295:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12638);const t=[{value:"滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。",paraId:0},{value:"内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  // 开启 X 轴方向上的滚动条\n  .scrollbar('x', {});\n\nchart.render();\n",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:3},{value:"描述",paraId:3,tocIndex:3},{value:"类型",paraId:3,tocIndex:3},{value:"默认值",paraId:3,tocIndex:3},{value:"ratio",paraId:3,tocIndex:3},{value:"滚动条的比例",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"0.5",paraId:3,tocIndex:3},{value:"value",paraId:3,tocIndex:3},{value:"滚动条的起始位置",paraId:3,tocIndex:3},{value:"[0, 1]",paraId:3,tocIndex:3},{value:"0",paraId:3,tocIndex:3},{value:"slidable",paraId:3,tocIndex:3},{value:"是否可以拖动",paraId:3,tocIndex:3},{value:"boolean",paraId:3,tocIndex:3},{value:"true",paraId:3,tocIndex:3},{value:"scrollable",paraId:3,tocIndex:3},{value:"是否支持滚轮滚动",paraId:3,tocIndex:3},{value:"boolean",paraId:3,tocIndex:3},{value:"true",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"isRound",paraId:3,tocIndex:3},{value:"滚动条样式是否为圆角",paraId:3,tocIndex:3},{value:"boolean",paraId:3,tocIndex:3},{value:"false",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"padding",paraId:3,tocIndex:3},{value:"滚动条轨道内边距",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:" | ",paraId:3,tocIndex:3},{value:"number[]",paraId:3,tocIndex:3},{value:"2",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"thumbFill",paraId:3,tocIndex:3},{value:"滚动条滑块填充色",paraId:3,tocIndex:3},{value:"string",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"thumbFillOpacity",paraId:3,tocIndex:3},{value:"滚动条滑块填充色透明度",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"thumbStroke",paraId:3,tocIndex:3},{value:"滚动条滑块描边色",paraId:3,tocIndex:3},{value:"string",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"thumbStrokeOpacity",paraId:3,tocIndex:3},{value:"滚动条滑块描边色透明度",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"trackSize",paraId:3,tocIndex:3},{value:"滚动条的轨道宽度",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"10",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"trackFill",paraId:3,tocIndex:3},{value:"滚动条轨道填充色",paraId:3,tocIndex:3},{value:"string",paraId:3,tocIndex:3},{value:"-",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"trackFillOpacity",paraId:3,tocIndex:3},{value:"滚动条轨道填充色透明度",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"-",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"trackStroke",paraId:3,tocIndex:3},{value:"滚动条轨道描边色",paraId:3,tocIndex:3},{value:"string",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"trackStrokeOpacity",paraId:3,tocIndex:3},{value:"滚动条轨道描边色透明度",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"属性",paraId:4,tocIndex:4},{value:"描述",paraId:4,tocIndex:4},{value:"类型",paraId:4,tocIndex:4},{value:"valuechange",paraId:4,tocIndex:4},{value:"发生滚动变化时触发，通过事件监听",paraId:4,tocIndex:4},{value:"function(e)",paraId:4,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  // 开启 X 轴缩略轴\n  .scrollbar('x', {});\n\nchart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => {\n    console.info(evt.detail);\n  });\n});\n\nchart.render();\n",paraId:5,tocIndex:4}]},92083:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(66234);const t=[{value:"缩略轴（slider）是一种辅助看数据的组件，它将大量数据浓缩到一个轴上，既可以缩小宏观看数据全貌，又可以放大微观看数据的片段，同时还可以拖拽观察数据在一定区间内的演变。",paraId:0},{value:"缩略轴是值域数据的浓缩，它跟位置通道 ",paraId:1,tocIndex:0},{value:"x",paraId:1,tocIndex:0},{value:", ",paraId:1,tocIndex:0},{value:"y",paraId:1,tocIndex:0},{value:" 对应的比例尺的类型息息相关。一般来说时间类型上使用缩略轴的频率高，连续轴使用缩略轴频次低、分类轴几乎不会使用到缩略轴。",paraId:1,tocIndex:0},{value:"时间轴，数据跨度非常大，【高频使用】，比如一组时序数据跨度 10 年，需观察这期间数据变化趋势时，建议开启缩略轴；",paraId:2,tocIndex:0},{value:"时间轴，数据密度很高，【高频使用】，比如分钟级更新的实时数据，当需要查看一天内的数据走势时，建议开启缩略轴；",paraId:2,tocIndex:0},{value:"连续轴，数据密度很高，【低频使用】比如查看 1-100 岁平均身高分布，开启缩略轴可以全局查看身高分布；",paraId:2,tocIndex:0},{value:"分类轴【不建议使用】。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  // 开启 Y 方向缩略轴\n  .slider('y', {});\n\nchart.render();\n",paraId:3,tocIndex:1},{value:"属性",paraId:4,tocIndex:3},{value:"描述",paraId:4,tocIndex:3},{value:"类型",paraId:4,tocIndex:3},{value:"默认值",paraId:4,tocIndex:3},{value:"values",paraId:4,tocIndex:3},{value:"初始选区范围，位于 0 ～ 1 区间",paraId:4,tocIndex:3},{value:"[number, number]",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"slidable",paraId:4,tocIndex:3},{value:"是否允许拖动选取和手柄",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"true",paraId:4,tocIndex:3},{value:"brushable",paraId:4,tocIndex:3},{value:"是否启用刷选",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"true",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"padding",paraId:4,tocIndex:3},{value:"迷你图的内边距",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"number[]",paraId:4,tocIndex:3},{value:"0",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"selectionFill",paraId:4,tocIndex:3},{value:"缩略轴选区填充色",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"selectionFillOpacity",paraId:4,tocIndex:3},{value:"缩略轴选区填充色透明度",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"selectionStroke",paraId:4,tocIndex:3},{value:"缩略轴选区描边色",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"selectionStrokeOpacity",paraId:4,tocIndex:3},{value:"缩略轴选区描边色透明度",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"trackFill",paraId:4,tocIndex:3},{value:"缩略轴滑轨填充色",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"trackFillOpacity",paraId:4,tocIndex:3},{value:"缩略轴滑轨填充色透明度",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"trackStroke",paraId:4,tocIndex:3},{value:"缩略轴滑轨描边色",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"trackStrokeOpacity",paraId:4,tocIndex:3},{value:"缩略轴滑轨描边色透明度",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"属性",paraId:5,tocIndex:4},{value:"描述",paraId:5,tocIndex:4},{value:"类型",paraId:5,tocIndex:4},{value:"默认值",paraId:5,tocIndex:4},{value:"showHandle",paraId:5,tocIndex:4},{value:"是否显示拖动手柄",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"showLabel",paraId:5,tocIndex:4},{value:"是否显示拖动手柄文本",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"showLabelOnInteraction",paraId:5,tocIndex:4},{value:"在调整手柄或刷选时才显示手柄文本，在 showLabel 为 false 时生效",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"false",paraId:5,tocIndex:4},{value:"autoFitLabel",paraId:5,tocIndex:4},{value:"是否自动调整拖动手柄文本位置",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"formatter",paraId:5,tocIndex:4},{value:"拖动手柄标签格式化",paraId:5,tocIndex:4},{value:"(value: number)=>string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleIconSize",paraId:5,tocIndex:4},{value:"缩略轴手柄大小",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"10",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleIconFill",paraId:5,tocIndex:4},{value:"缩略轴手柄填充色",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleIconFillOpacity",paraId:5,tocIndex:4},{value:"缩略轴手柄填充色透明度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleIconStroke",paraId:5,tocIndex:4},{value:"缩略轴手柄描边色",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleIconStrokeOpacity",paraId:5,tocIndex:4},{value:"缩略轴手柄描边色透明度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleLabelFontSize",paraId:5,tocIndex:4},{value:"缩略轴手柄标签字体大小",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleLabelFontWeight",paraId:5,tocIndex:4},{value:"缩略轴手柄标签字体权重高",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleLabelStroke",paraId:5,tocIndex:4},{value:"缩略轴手柄标签字体颜色",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleLabelStrokeOpacity",paraId:5,tocIndex:4},{value:"缩略轴手柄标签字体透明度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"属性",paraId:6,tocIndex:5},{value:"描述",paraId:6,tocIndex:5},{value:"类型",paraId:6,tocIndex:5},{value:"默认值",paraId:6,tocIndex:5},{value:"sparklineType",paraId:6,tocIndex:5},{value:"迷你图类型：折线图、直方图",paraId:6,tocIndex:5},{value:"line",paraId:6,tocIndex:5},{value:" | ",paraId:6,tocIndex:5},{value:"column",paraId:6,tocIndex:5},{value:"line",paraId:6,tocIndex:5},{value:"sparklineIsStack",paraId:6,tocIndex:5},{value:"是否对数据进行堆叠",paraId:6,tocIndex:5},{value:"boolean",paraId:6,tocIndex:5},{value:"false",paraId:6,tocIndex:5},{value:"sparklineRange",paraId:6,tocIndex:5},{value:"指定值范围，未指定时将使用 data 的最小值和最大值",paraId:6,tocIndex:5},{value:"[number, number]",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineColor",paraId:6,tocIndex:5},{value:"指定颜色",paraId:6,tocIndex:5},{value:"string",paraId:6,tocIndex:5},{value:" | ",paraId:6,tocIndex:5},{value:"string[]",paraId:6,tocIndex:5},{value:" | ",paraId:6,tocIndex:5},{value:"(index: number)=>string",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineSmooth",paraId:6,tocIndex:5},{value:"适用于折线图，平滑曲线",paraId:6,tocIndex:5},{value:"boolean",paraId:6,tocIndex:5},{value:"false",paraId:6,tocIndex:5},{value:"sparklineLineStroke",paraId:6,tocIndex:5},{value:"适用于折线图，线条颜色",paraId:6,tocIndex:5},{value:"string",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineLineStrokeOpacity",paraId:6,tocIndex:5},{value:"适用于折线图，线条透明度",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineLineLineDash",paraId:6,tocIndex:5},{value:"适用于折线图，线条的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:5},{value:"[number,number]",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineAreaFill",paraId:6,tocIndex:5},{value:"适用于折线图，填充区域颜色",paraId:6,tocIndex:5},{value:"string",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineAreaFillOpacity",paraId:6,tocIndex:5},{value:"适用于折线图，填充区域透明度",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineColumnFill",paraId:6,tocIndex:5},{value:"适用于直方图，条形颜色",paraId:6,tocIndex:5},{value:"string",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineColumnFillOpacity",paraId:6,tocIndex:5},{value:"适用于直方图，条形透明度",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineIsGroup",paraId:6,tocIndex:5},{value:"适用于直方图，是否分组显示",paraId:6,tocIndex:5},{value:"boolean",paraId:6,tocIndex:5},{value:"false",paraId:6,tocIndex:5},{value:"sparklineSpacing",paraId:6,tocIndex:5},{value:"适用于直方图，分组直方的间距",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"0",paraId:6,tocIndex:5},{value:"属性",paraId:7,tocIndex:6},{value:"描述",paraId:7,tocIndex:6},{value:"类型",paraId:7,tocIndex:6},{value:"valuechange",paraId:7,tocIndex:6},{value:"选区发生变化时触发，通过事件监听",paraId:7,tocIndex:6},{value:"function(e)",paraId:7,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  // 开启 X 轴缩略轴\n  .slider('x', {});\n\nchart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document.querySelector('.slider').addEventListener('valuechange', (evt) => {\n    console.info(evt.detail);\n  });\n});\n\nchart.render();\n",paraId:8,tocIndex:6}]},61488:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70865);const t=[{value:"用于一句话概要说明图表要展示的数据，图表的标题是比较常用的组件，支持标题和副标题，以及他们的样式和位置设置。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.title('This is the title of chart.');\n\n// ...\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"标题 title 的设置，最简单的设置方式，就是直接指定一个字符串作为标题，这个时候使用默认的样式和位置。当然也可以使用完整的配置项去做一些灵活的自定义。",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"size",paraId:3,tocIndex:1},{value:"标题的高度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"36",paraId:3,tocIndex:1},{value:"title",paraId:3,tocIndex:1},{value:"标题文本",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitle",paraId:3,tocIndex:1},{value:"副标题文本",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"align",paraId:3,tocIndex:1},{value:"标题的对齐方式",paraId:3,tocIndex:1},{value:"left",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"center",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"right",paraId:3,tocIndex:1},{value:"left",paraId:3,tocIndex:1},{value:"spacing",paraId:3,tocIndex:1},{value:"主标题、副标题之间的上下间距",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"2",paraId:3,tocIndex:1},{value:"titleFontSize",paraId:3,tocIndex:1},{value:"标题文字大小",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"titleFontFamily",paraId:3,tocIndex:1},{value:"标题文字字体",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"titleFontWeight",paraId:3,tocIndex:1},{value:"标题字体粗细",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"titleFill",paraId:3,tocIndex:1},{value:"标题字体颜色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"titleFillOpacity",paraId:3,tocIndex:1},{value:"标题字体颜色透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"titleStroke",paraId:3,tocIndex:1},{value:"标题字体描边颜色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"titleStrokeOpacity",paraId:3,tocIndex:1},{value:"标题字体描边颜色透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitleFontSize",paraId:3,tocIndex:1},{value:"副标题文字大小",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitleFontFamily",paraId:3,tocIndex:1},{value:"副标题文字字体",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitleFontWeight",paraId:3,tocIndex:1},{value:"副标题字体粗细",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitleFill",paraId:3,tocIndex:1},{value:"副标题字体颜色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"subtitleFillOpacity",paraId:3,tocIndex:1},{value:"副标题字体颜色透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"subtitleStroke",paraId:3,tocIndex:1},{value:"副标题字体描边颜色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitleStrokeOpacity",paraId:3,tocIndex:1},{value:"副标题字体描边颜色透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1}]},95865:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(28613);const t=[{value:"提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。",paraId:0},{value:"chart\n  .line()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  })\n  .encode('x', (d) => new Date(d.Date))\n  .encode('y', 'Close')\n  .encode('color', 'Symbol')\n  .encode('key', 'Symbol')\n  .scale('y', { type: 'log' })\n  .tooltip({\n    title: 'Date',\n    items: [{ channel: 'y' }],\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"title",paraId:2,tocIndex:1},{value:"标题，支持一段文本或 innerHTML 字符串",paraId:2,tocIndex:1},{value:"TooltipItem",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"items",paraId:2,tocIndex:1},{value:"定义每一个提示项的配置",paraId:2,tocIndex:1},{value:"TooltipItem",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"type TooltipItem =\n  | string\n  | false\n  | {\n      name?: string;\n      color?: string;\n      channel?: string;\n      field?: string;\n      value?: string;\n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串）\n      valueFormatter?: string | ((d: any) => string);\n    };\n",paraId:3,tocIndex:1},{value:"mark.tooltip({\n  title: 'name', // 字段\n});\n\nmark.tooltip({\n  title: (d) => (d.value > 100 ? d.name : d.age), // transform\n});\n",paraId:4,tocIndex:3},{value:"// 单个字段\nmark.tooltip('a');\nmark.tooltip({ field: 'a' });\n\n// 单个通道\nmark.tooltip({ channel: 'y' });\n\n// transform\nmark.tooltip((d) => (d.value > 100 ? d.name : d.age));\n\n// 格式化\nmark.tooltip({ channel: 'y', valueFormatter: (d) => d.toFixed(1) });\n\n// d3-format 支持的字符\n// https://github.com/d3/d3-format\nmark.tooltip({ channel: 'y', valueFormatter: '~s' });\n\n// 完整信息\nmark.tooltip({ name: 'name', color: 'red', value: 'color' });\n\n// 回调\nmark.tooltip(\n  (\n    d, // 每一个数据项\n    index, // 索引\n    data, // 完整数据\n    column, // 通道\n  ) => ({\n    value: `${column.y.value[index]} - ${column.y1.value[index]}`,\n  }),\n);\n\n// 多个 item\nmark.tooltip({ channel: 'y' }).tooltip({ channel: 'x' });\n",paraId:5,tocIndex:4},{value:"mark.tooltip({\n  title: 'a',\n  items: [{ channel: 'x' }, { channel: 'y' }],\n});\n",paraId:6,tocIndex:5}]},70927:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(66973);const t=[{value:"根据字段分片数据，利用圆形划分空间，然就进行各个分面的数据可视化。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst M = [\n  'Jan.',\n  'Feb.',\n  'Mar.',\n  'Apr.',\n  'May',\n  'Jun.',\n  'Jul.',\n  'Aug.',\n  'Sept.',\n  'Oct.',\n  'Nov.',\n  'Dec.',\n];\nconst N = ['A', 'B', 'C', 'D'];\nconst data = M.flatMap((month) =>\n  N.map((name) => ({\n    month,\n    name,\n    value: Math.random(),\n  })),\n);\n\nconst chart = new Chart({\n  container: 'container',\n  width: 480,\n  height: 480,\n});\n\nconst facetCircle = chart.facetCircle().data(data).encode('position', 'month');\n\nfacetCircle\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'name');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"facetCircle 的底层实现和 mark 一致，所以在配置上有很多是一样的。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"通道设置，见下表",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"padding 大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"facetCircle",paraId:9,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:9,tocIndex:1},{value:"chart.facetCircle().data([1, 2, 3]).encode('position', 'month');\n",paraId:10,tocIndex:1},{value:"对于 facetCircle 有自己独特的 encode 通道。",paraId:11,tocIndex:2},{value:"通道",paraId:12,tocIndex:2},{value:"描述",paraId:12,tocIndex:2},{value:"类型",paraId:12,tocIndex:2},{value:"默认值",paraId:12,tocIndex:2},{value:"position",paraId:12,tocIndex:2},{value:"按照 position 对应的数据去划分圆形空间中的角度",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2}]},35866:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(44969);const t=[{value:"用 row、column 字段维值对空间和数据进行划分，在各个子空间可视化数据片段。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 928,\n  height: 270,\n  paddingBottom: 50,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .attr('paddingBottom', 50)\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n  })\n  .encode('x', 'series');\n\nfacetRect\n  .point()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .style('stroke', '#000')\n  .attr('inset', 10);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"facetRect 的底层实现和 mark 一致，所以在配置上有很多是一样的。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"通道设置，见下表",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"padding 大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"facetRect",paraId:9,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:9,tocIndex:1},{value:"chart.facetRect().data([1, 2, 3]).encode('x', 'type');\n",paraId:10,tocIndex:1},{value:"对于 facetRect 有自己独特的 encode 通道。",paraId:11,tocIndex:2},{value:"通道",paraId:12,tocIndex:2},{value:"描述",paraId:12,tocIndex:2},{value:"类型",paraId:12,tocIndex:2},{value:"默认值",paraId:12,tocIndex:2},{value:"x",paraId:12,tocIndex:2},{value:"指定 x 方向上分面的字段，可以是常年、字段名、回调函数",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2},{value:"y",paraId:12,tocIndex:2},{value:"指定 x 方向上分面的字段，可以是常年、字段名、回调函数",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2},{value:"facetRect 是不是和 repeatMatrix 功能上重复？",paraId:13,tocIndex:3},{value:"facetRect 是通过 x, y encode 字段去划分空间，比如指定 ",paraId:14,tocIndex:3},{value:"encode('x', 'sex')",paraId:14,tocIndex:3},{value:"，那么就会根据性别的枚举值，在 x 方向均分为 2 个分面。而 repeatMatrix 是根据字段的个数来分面空间的。",paraId:14,tocIndex:3}]},99094:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(48270);const t=[{value:"根据字段的数量对空间进行划分，然后利用数据在这些子空间可视化。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 300,\n  height: 720,\n  paddingLeft: 50,\n  paddingBottom: 60,\n});\n\nconst repeatMatrix = chart\n  .repeatMatrix()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/weather.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ({ date, ...d }) => ({\n          ...d,\n          date: new Date(date).getMonth() + '',\n        }),\n      },\n    ],\n  })\n  .encode('y', ['temp_max', 'precipitation', 'wind'])\n  .encode('x', 'date');\n\nrepeatMatrix\n  .line()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('color', 'location')\n  .scale('y', { zero: true });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"repeatMatrix 的底层实现和 mark 一致，所以在配置上有很多是一样的。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"通道设置，见下表",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"padding 大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"repeatMatrix",paraId:9,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:9,tocIndex:1},{value:"chart.repeatMatrix().data([1, 2, 3]).encode('x', ['f1', 'f2', 'f3']);\n",paraId:10,tocIndex:1},{value:"对于 repeatMatrix 有自己独特的 encode 通道。",paraId:11,tocIndex:2},{value:"通道",paraId:12,tocIndex:2},{value:"描述",paraId:12,tocIndex:2},{value:"类型",paraId:12,tocIndex:2},{value:"默认值",paraId:12,tocIndex:2},{value:"x",paraId:12,tocIndex:2},{value:"指定 x 方向上字段列表，用于 x 方向空间分片",paraId:12,tocIndex:2},{value:"string[]",paraId:12,tocIndex:2},{value:"y",paraId:12,tocIndex:2},{value:"指定 y 方向上字段列表，用于 y 方向空间分片",paraId:12,tocIndex:2},{value:"string[]",paraId:12,tocIndex:2}]},78188:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12570);const t=[{value:"使用类似 css flex 的布局方式来划分空间区域，常用于多图表对比的视图。",paraId:0},{value:"提供一个两层 flex 容器布局的画布。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n});\n\nconst flex = chart\n  .spaceFlex()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .attr('direction', 'col')\n  .attr('ratio', [1, 2]);\n\nflex\n  .interval()\n  .attr('paddingBottom', 0)\n  .attr('paddingRight', 300)\n  .transform({ type: 'groupX', y: 'max' })\n  .axis('x', false)\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', 'temp_max')\n  .encode('color', 'steelblue');\n\nflex\n  .spaceFlex()\n  .attr('ratio', [2, 1])\n  .call((node) =>\n    node\n      .cell()\n      .attr('paddingRight', 0)\n      .attr('paddingBottom', 50)\n      .transform({ type: 'group', color: 'max' })\n      .encode('x', (d) => new Date(d.date).getUTCDate())\n      .encode('y', (d) => new Date(d.date).getUTCMonth())\n      .encode('color', 'temp_max')\n      .style('inset', 0.5)\n      .axis('x', { title: 'Date' })\n      .axis('y', { title: 'Month' })\n      .legend({ color: false })\n      .scale('color', {\n        type: 'sequential',\n        palette: 'gnBu',\n      }),\n  )\n  .call((node) =>\n    node\n      .interval()\n      .attr('paddingBottom', 50)\n      .transform({ type: 'groupX', y: 'max' })\n      .coordinate({ transform: [{ type: 'transpose' }] });\n      .axis('x', false)\n      .encode('x', (d) => new Date(d.date).getUTCMonth())\n      .encode('y', 'temp_max')\n      .encode('color', 'steelblue'),\n  );\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"当前 flex 主要提供了最核心的两个配置，便于空间分片。",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"ratio",paraId:6,tocIndex:1},{value:"设置 flex 容器中的子元素占用空间的比例",paraId:6,tocIndex:1},{value:"number[]",paraId:6,tocIndex:1},{value:"均分",paraId:6,tocIndex:1},{value:"direction",paraId:6,tocIndex:1},{value:"设置 flex 划分空间的方向",paraId:6,tocIndex:1},{value:"col",paraId:6,tocIndex:1},{value:" | ",paraId:6,tocIndex:1},{value:"row",paraId:6,tocIndex:1},{value:"row",paraId:6,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:"flex 容器的数据",paraId:6,tocIndex:1},{value:"Data",paraId:6,tocIndex:1},{value:"spaceFlex",paraId:7,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:7,tocIndex:1},{value:"chart.spaceFlex().attr('ratio', [1, 2, 3]).attr('direction', 'col');\n",paraId:8,tocIndex:1},{value:"怎么使用 spaceFlex 定义复杂的图表布局？",paraId:9,tocIndex:2},{value:"spaceFlex 提供了按照比例横向纵向划分空间，对于复杂的布局，理论上都可以通过不断拆分容器层级结构实现。",paraId:10,tocIndex:2}]},64936:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(22922);const t=[{value:"对空间不做任何划分，多个视图使用同一个空间区域，常用于视图的层叠。",paraId:0},{value:"绘制一个常见的柱饼结合的图表。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst layer = chart.spaceLayer().data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  format: 'csv',\n});\n\n// 柱图\nlayer\n  .interval()\n  .attr('paddingLeft', 50)\n  .transform({ type: 'sortX', reverse: true, by: 'y' })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\n// 饼图\nlayer\n  .interval()\n  .attr('paddingLeft', 400)\n  .attr('paddingBottom', 200)\n  .coordinate({ type: 'theta' })\n  .transform({ type: 'stackY' })\n  .legend(false)\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"无额外配置项。",paraId:5,tocIndex:1}]},5578:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(7457);const t=[{value:"在不同视图之间执行连续的过渡动画。通过 ",paraId:0},{value:"mark.key",paraId:0},{value:" 和 ",paraId:0},{value:"mark.groupKey",paraId:0},{value:" 去关联图形。",paraId:0},{value:"fetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    const keyframe = chart\n      .timingKeyframe()\n      .attr('direction', 'alternate')\n      .attr('iterationCount', 4);\n\n    // 条形图\n    keyframe\n      .interval()\n      .data(data)\n      .transform({ type: 'groupX', y: 'mean' })\n      .encode('x', 'gender')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('key', 'gender'); // 指定 key\n\n    // 散点图\n    keyframe\n      .point()\n      .data(data)\n      .encode('x', 'height')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('groupKey', 'gender') // 指定合并的条的 key\n      .encode('shape', 'point');\n\n    chart.render();\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"duration",paraId:2,tocIndex:1},{value:"每一视图的动画过渡时间",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1000",paraId:2,tocIndex:1},{value:"iterationCount",paraId:2,tocIndex:1},{value:"'infinite' | number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1},{value:"direction",paraId:2,tocIndex:1},{value:"'normal' | 'reverse' | 'alternate' | 'reverse-alternate'",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"'normal'",paraId:2,tocIndex:1},{value:"children",paraId:2,tocIndex:1},{value:"执行动画的视图节点",paraId:2,tocIndex:1},{value:"Node[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1}]},48306:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(92154);const t=[{value:"在 2D 笛卡尔坐标系基础上，通过增加 Z 轴扩展而来。",paraId:0},{value:"示例",paraId:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400,\n});\n\nchart.coordinate({\n  type: 'cartesian3D',\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('size', 'Origin')\n  .encode('color', 'Cylinders')\n  .encode('shape', 'cube')\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render();\n",paraId:2,tocIndex:0}]},94493:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87543);const t=[{value:"鱼眼坐标系变换对输入的维度应用笛卡尔鱼眼效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart();\n\nchart.coordinate({\n  transform: [{ type: 'fisheye', focusX: 0.5, focusY: 0.5 }],\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  })\n  .encode('x', 'GDP')\n  .encode('y', 'LifeExpectancy')\n  .encode('size', 'Population')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .style('fillOpacity', 0.3)\n  .style('lineWidth', 1)\n  .scale('size', {\n    type: 'log',\n    range: [4, 20],\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"参数",paraId:2,tocIndex:1},{value:"说明",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"focusX",paraId:2,tocIndex:1},{value:"鱼眼变换中心点 x 方向位置",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"focusY",paraId:2,tocIndex:1},{value:"鱼眼变换中心点 y 方向位置",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"distortionX",paraId:2,tocIndex:1},{value:"鱼眼变换 x 方向畸变大小",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"2",paraId:2,tocIndex:1},{value:"distortionY",paraId:2,tocIndex:1},{value:"鱼眼变换 y 方向畸变大小",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"2",paraId:2,tocIndex:1},{value:"visual",paraId:2,tocIndex:1},{value:"focusX 和 focusY 的值是否是视觉坐标点",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1}]},50458:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70762);const t=[{value:"Parallel 是平行坐标系变换，将笛卡尔直角坐标系坐标变换为平行坐标系下的坐标。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  width: 720,\n  paddingLeft: 60,\n});\n\nchart.coordinate({ type: 'parallel' });\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n    callback: (d) => Object.assign(d, { year: new Date(d.year) }),\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => defined(d.Horsepower) && defined(d.Miles_per_Gallon),\n      },\n    ],\n  })\n  .encode('position', [\n    'Cylinders',\n    'Displacement',\n    'Weight_in_lbs',\n    'Horsepower',\n    'Acceleration',\n    'Miles_per_Gallon',\n    'Year',\n  ])\n  .encode('color', 'Origin')\n  .encode('size', 1.01)\n  .style('strokeOpacity', 0.3)\n  .scale('position', { nice: true })\n  .scale('position1', { nice: true })\n  .scale('position2', { nice: true })\n  .scale('position3', { nice: true })\n  .scale('position4', { nice: true })\n  .scale('position5', { nice: true })\n  .axis('position', { zIndex: 1 })\n  .axis('position1', { zIndex: 1 })\n  .axis('position2', { zIndex: 1 })\n  .axis('position3', { zIndex: 1 })\n  .axis('position4', { zIndex: 1 })\n  .axis('position5', { zIndex: 1 });\n\nchart.render();\n",paraId:1,tocIndex:0}]},25529:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(46396);const t=[{value:"Polar 是极坐标系变换，将笛卡尔直角坐标系坐标变换为极坐标系下的坐标，常用于玫瑰图和柱状图之间的转换。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n});\n\nchart.coordinate({ type: 'polar' });\n\nchart\n  .interval()\n  .transform({ type: 'groupX', y: 'sum' })\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n  })\n  .encode('x', 'year')\n  .encode('y', 'people')\n  .scale('y', { type: 'sqrt' })\n  .axis('y', {\n    labelFormatter: '~s',\n    tickCount: 5,\n    tickFilter: (d, i) => i !== 0,\n    direction: 'right',\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"参数",paraId:2,tocIndex:1},{value:"说明",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"startAngle",paraId:2,tocIndex:1},{value:"极坐标系起始弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"-Math.PI / 2",paraId:2,tocIndex:1},{value:"endAngle",paraId:2,tocIndex:1},{value:"极坐标系结束弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"(Math.PI \\* 3) / 2",paraId:2,tocIndex:1},{value:"innerRadius",paraId:2,tocIndex:1},{value:"极坐标内半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"outerRadius",paraId:2,tocIndex:1},{value:"极坐标半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1}]},3113:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(27331);const t=[{value:"Radial 是一种特殊的极坐标系，常用于绘制玉钰图。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 500,\n});\n\nchart.coordinate({\n  type: 'radial',\n  innerRadius: 0.1,\n  endAngle: Math.PI,\n});\n\nchart\n  .interval()\n  .data([\n    { question: '问题 1', percent: 0.21 },\n    { question: '问题 2', percent: 0.4 },\n    { question: '问题 3', percent: 0.49 },\n    { question: '问题 4', percent: 0.52 },\n    { question: '问题 5', percent: 0.53 },\n    { question: '问题 6', percent: 0.84 },\n    { question: '问题 7', percent: 1.0 },\n    { question: '问题 8', percent: 1.2 },\n  ])\n  .encode('x', 'question')\n  .encode('y', 'percent')\n  .encode('color', 'percent')\n  .style('stroke', 'white')\n  .scale('color', {\n    range: '#BAE7FF-#1890FF-#0050B3',\n  })\n  .legend({\n    color: {\n      length: 400,\n      position: 'bottom',\n      layout: { justifyContent: 'center' },\n    },\n  })\n  .axis('y', {\n    tickFilter: (d, i) => i !== 0,\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"参数",paraId:2,tocIndex:1},{value:"说明",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"startAngle",paraId:2,tocIndex:1},{value:"极坐标系起始弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"-Math.PI / 2",paraId:2,tocIndex:1},{value:"endAngle",paraId:2,tocIndex:1},{value:"极坐标系结束弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"(Math.PI \\* 3) / 2",paraId:2,tocIndex:1},{value:"innerRadius",paraId:2,tocIndex:1},{value:"极坐标内半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"outerRadius",paraId:2,tocIndex:1},{value:"极坐标半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1}]},95870:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50382);const t=[{value:"Theta 是一种特殊的极坐标系，半径长度固定，仅将数据映射到角度，常用于饼图和柱状图之间的转换。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n});\n\nchart.coordinate({ type: 'theta' });\n\nchart\n  .interval()\n  .transform({ type: 'stackY' })\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/79fd9317-d2af-4bc4-90fa-9d07357398fd.csv',\n  })\n  .encode('y', 'value')\n  .encode('color', 'name')\n  .style('stroke', 'white')\n  .scale('color', {\n    palette: 'spectral',\n    offset: (t) => t * 0.8 + 0.1,\n  })\n  .legend(false)\n  .label({\n    text: 'name',\n    radius: 0.8,\n    style: {\n      fontSize: 10,\n      fontWeight: 'bold',\n    },\n  })\n  .label({\n    text: (d, i, data) => (i < data.length - 3 ? d.value : ''),\n    radius: 0.8,\n    style: {\n      fontSize: 9,\n      dy: 8,\n    },\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"参数",paraId:2,tocIndex:1},{value:"说明",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"startAngle",paraId:2,tocIndex:1},{value:"极坐标系起始弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"-Math.PI / 2",paraId:2,tocIndex:1},{value:"endAngle",paraId:2,tocIndex:1},{value:"极坐标系结束弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"(Math.PI \\* 3) / 2",paraId:2,tocIndex:1},{value:"innerRadius",paraId:2,tocIndex:1},{value:"极坐标内半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"outerRadius",paraId:2,tocIndex:1},{value:"极坐标半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1}]},81081:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(83600);const t=[{value:"Transpose 是坐标系的转置变换，将 (x, y) 变换成 (y, x)，常用于条形图和柱状图之间的转换。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    format: 'csv',\n  })\n  .transform({\n    type: 'sortX',\n    reverse: true,\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'steelblue')\n  .axis('y', { labelFormatter: '.0%' })\n  .label({\n    text: 'frequency',\n    formatter: '.1%',\n    style: {\n      textAnchor: (d) => (+d.frequency > 0.008 ? 'right' : 'start'),\n      fill: (d) => (+d.frequency > 0.008 ? '#fff' : '#000'),\n      dx: (d) => (+d.frequency > 0.008 ? -5 : 5),\n    },\n  });\n\nchart.render();\n",paraId:1,tocIndex:0}]},23862:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(53289);const t=[{value:"使用自定义函数的方式来进行数据的加工和处理，这是最为灵活的一种方式。",paraId:0},{value:"chart\n  .data({\n    type: 'custom',\n    callback: (data) => {\n      /* your code */\n      return [];\n    }\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"callback",paraId:2,tocIndex:1},{value:"函数，传入当前数据，输出处理后的数据",paraId:2,tocIndex:1},{value:"(data: any) => any",paraId:2,tocIndex:1},{value:"(d) => d",paraId:2,tocIndex:1}]},58704:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(38971);const t=[{value:"EMA（Exponential Moving Average）是一种常用的平滑算法，用于计算数据的指数移动平均值。它通过给较近的数据赋予权重来平滑数据，从而减少噪声和波动。",paraId:0},{value:"在模型训练中，可以使用EMA来平滑数据，观察数据变化趋势。",paraId:1},{value:"如下公式显示，α越大平滑效果更明显",paraId:2},{value:"$EMA_t =  (1 - \\alpha) \\cdot P_t +  \\alpha \\cdot EMA_{t-1}$",paraId:3},{value:"具体细节可参考",paraId:4},{value:"文档",paraId:4},{value:"const data = [\n  { x: 1, y: 2 },\n  { x: 4, y: 5 },\n  { x: 5, y: 8 },\n];\n\nchart\n  .data({\n    type: 'line',\n    value: data,\n    transform: [\n      {\n        type: 'ema',\n        field: 'y',\n        alpha: 0.6,\n        as: 'other'\n      },\n    ],\n  });\n",paraId:5,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:6,tocIndex:0},{value:'[\n  {\n    "x": 1,\n    "y": 2,\n    "other": 2,\n  },\n  {\n    "x": 4,\n    "y": 3.2,\n    "other": 3.2,\n  },\n  {\n    "x": 5,\n    "y": 5.12,\n    "other": 5.12,\n  }\n];\n',paraId:7,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'view',\n    children: [\n      {\n        type: 'line',\n        data: {\n          type: 'fetch',\n          value: 'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n          transform: [\n            {\n              type: 'ema',\n              field: 'close',\n              alpha: 0.8,\n            },\n          ],\n        },\n      },\n      {\n        type: 'line',\n        style: {\n          opacity: 0.3,\n        },\n        data: {\n          type: 'fetch',\n          value: 'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n        },\n      },\n    ],\n    encode: {\n      x: 'date',\n      y: 'close',\n    },\n  });\n\n  return chart.render().then((chart) => chart.getContainer());\n})();\n",paraId:8,tocIndex:1},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"field",paraId:9,tocIndex:2},{value:"需要处理的字段列表",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"alpha",paraId:9,tocIndex:2},{value:"平滑因子,范围在0-1",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"0.6",paraId:9,tocIndex:2},{value:"as",paraId:9,tocIndex:2},{value:"存储的字段, 默认是field传入的值，可自定义字段避免覆盖原字段数据",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2}]},9459:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26169);const t=[{value:"根据 ",paraId:0},{value:"value",paraId:0},{value:" 指定的 ",paraId:0},{value:"url",paraId:0},{value:" 获取远程的数据。可以通过 ",paraId:0},{value:"format",paraId:0},{value:" 去指定数据类型，G2 默认会根据 ",paraId:0},{value:"value",paraId:0},{value:" 指定的文件后缀名去推断数据类型。",paraId:0},{value:"// Spec\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n});\n",paraId:1},{value:"// API\nchart.data({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n});\n",paraId:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'point',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    },\n    encode: {\n      x: 'weight',\n      y: 'height',\n      color: 'gender',\n    },\n  });\n\n  return chart.render().then((chart) => chart.getContainer());\n})();\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"value",paraId:4,tocIndex:1},{value:"fetch 请求的网络地址",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"format",paraId:4,tocIndex:1},{value:"远程文件的数据格式类型，决定用什么方式解析",paraId:4,tocIndex:1},{value:"'json' | 'csv'",paraId:4,tocIndex:1},{value:"json",paraId:4,tocIndex:1},{value:"delimiter",paraId:4,tocIndex:1},{value:"如果是 csv 文件，解析的时候分割符",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:",",paraId:4,tocIndex:1},{value:"autoType",paraId:4,tocIndex:1},{value:"如果是 csv 文件，解析的时候是否自动判断列数据类型",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"true",paraId:4,tocIndex:1},{value:"transform",paraId:4,tocIndex:1},{value:"对加载后的数据进行变换操作",paraId:4,tocIndex:1},{value:"DataTransform",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1}]},56750:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(38731);const t=[{value:"对数据进行指定条件的过滤。类似于 ",paraId:0},{value:"Array.prototypo.filter",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.a < 3,\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"callback",paraId:4,tocIndex:1},{value:"函数，传入当前数据，输出处理后的数据",paraId:4,tocIndex:1},{value:"(d: any, idx: number, arr: any[]) => boolean",paraId:4,tocIndex:1},{value:"(d) => d !== undefined && d !== null && !Number.isNaN(d)",paraId:4,tocIndex:1}]},91893:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(81193);const t=[{value:"将多个字段展开成按照指定的 key value 组织形式。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'fold',\n      fields: ['a', 'b'],\n      key: 'key',\n      value: 'value',\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3, key: 'a', value: 1 },\n  { a: 1, b: 2, c: 3, key: 'b', value: 2 },\n  { a: 4, b: 5, c: 6, key: 'a', value: 4 },\n  { a: 4, b: 5, c: 6, key: 'b', value: 5 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"fields",paraId:4,tocIndex:1},{value:"需要展开的字段列表",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"key",paraId:4,tocIndex:1},{value:"展开之后，字段枚举值对应字段名",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"key",paraId:4,tocIndex:1},{value:"value",paraId:4,tocIndex:1},{value:"展开之后，数据值对应字段名",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"value",paraId:4,tocIndex:1}]},42541:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(65694);const t=[{value:"使用内联数据。",paraId:0},{value:"// 完整写法\nchart.data({\n  type: 'inline',\n  value: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n\n// 语法糖\nchart.data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"value",paraId:2,tocIndex:1},{value:"具体的 object 数组数据",paraId:2,tocIndex:1},{value:"object[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"transform",paraId:2,tocIndex:1},{value:"针对数据 inline 数据进行变换",paraId:2,tocIndex:1},{value:"DataTransform",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1}]},32126:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87433);const t=[{value:"类似 SQL 的方式，将两份数据连接到一起。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nconst joinData = [\n  { c: 1, d: 2, e: 3 },\n  { c: 4, d: 5, e: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'join',\n        join: joinData,\n        on: ['a', 'c'],\n        select: ['d', 'e'],\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3, d: 2, e: 3 },\n  { a: 4, b: 5, c: 6, d: 5, e: 6 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"join",paraId:4,tocIndex:1},{value:"需要连接的数据源",paraId:4,tocIndex:1},{value:"object[]",paraId:4,tocIndex:1},{value:"on",paraId:4,tocIndex:1},{value:"两个数据源连接的字段",paraId:4,tocIndex:1},{value:"[string | ((d: any) => string), string | ((d: any) => string)]",paraId:4,tocIndex:1},{value:"select",paraId:4,tocIndex:1},{value:"从被连接的数据源中获取指定字段的数据",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"as",paraId:4,tocIndex:1},{value:"为 ",paraId:4,tocIndex:1},{value:"select",paraId:4,tocIndex:1},{value:" 出来的字段重命名",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"不做重命名",paraId:4,tocIndex:1},{value:"unknown",paraId:4,tocIndex:1},{value:"如果没有匹配到可连接数据，指定一个默认值",paraId:4,tocIndex:1},{value:"any",paraId:4,tocIndex:1},{value:"NaN",paraId:4,tocIndex:1}]},27236:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(42412);const t=[{value:"对指定的数据，进行核密度算法（Kernel Density Estimation）处理，底层使用开源库 ",paraId:0},{value:"pdfast",paraId:0},{value:"。",paraId:0},{value:"chart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'kde',\n      field: 'y',\n      groupBy: ['x', 'species'],\n      as: ['y', 'size'],\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据会增加 y、size 字段，均为数字数组。",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"field",paraId:3,tocIndex:1},{value:"进行核密度算法的数据字段",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"groupBy",paraId:3,tocIndex:1},{value:"对数据进行分组的分组字段，可以指定多个",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"as",paraId:3,tocIndex:1},{value:"进行 KDE 处理之后，存储的字段",paraId:3,tocIndex:1},{value:"[number, number]",paraId:3,tocIndex:1},{value:"['y', 'size']",paraId:3,tocIndex:1},{value:"min",paraId:3,tocIndex:1},{value:"指定处理范围的最小值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"数据最小值",paraId:3,tocIndex:1},{value:"max",paraId:3,tocIndex:1},{value:"指定处理范围的最大值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"数据最小值",paraId:3,tocIndex:1},{value:"size",paraId:3,tocIndex:1},{value:"算法最终生成数据的条数",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"10",paraId:3,tocIndex:1},{value:"width",paraId:3,tocIndex:1},{value:"确定一个元素左右影响多少点，类似于 bandWidth",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"2",paraId:3,tocIndex:1}]},49936:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(47341);const t=[{value:"将当前数据变换（Data Transform）流中的片面数据打印到控制台，用于开发者调试数据处理过程。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      { type: 'slice', start: 1 },\n      { type: 'log' },\n      { type: 'filter', callback: (d) => d.a < 3 },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述 ",paraId:2,tocIndex:0},{value:"log",paraId:2,tocIndex:0},{value:" 加入之后，会打印出经过 ",paraId:2,tocIndex:0},{value:"slice",paraId:2,tocIndex:0},{value:" 处理之后的数据，并且这个数据会作为下一个 transform ",paraId:2,tocIndex:0},{value:"filter",paraId:2,tocIndex:0},{value:" 的输入。",paraId:2,tocIndex:0}]},42641:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(17360);const t=[{value:"对数据进行过滤。类似于 ",paraId:0},{value:"Array.prototypo.map",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'map',\n        callback: (datum, idx) => { ...datum, idx },\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3, idx: 0 },\n  { a: 4, b: 5, c: 6, idx: 1 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"callback",paraId:4,tocIndex:1},{value:"函数，传入当前数据，输出处理后的数据",paraId:4,tocIndex:1},{value:"(datum: any) => any",paraId:4,tocIndex:1},{value:"(d) => d",paraId:4,tocIndex:1}]},17681:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(38978);const t=[{value:"G2 支持多种数据来源和数据变换，以应对不同的数据源来源。一个完整的数据由两部分构成：",paraId:0},{value:"connector - 获得数据的方式",paraId:1},{value:"transform - 预处理数据",paraId:1},{value:"const data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [{ type: 'sort', callback: (a, b) => a.sold - b.sold }],\n});\n",paraId:2,tocIndex:0}]},3761:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(84625);const t=[{value:"从数据中，按照字段抽取一个数据子集。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'pick',\n        fields: ['a', 'b'],\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2 },\n  { a: 4, b: 5 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"fields",paraId:4,tocIndex:1},{value:"抽取的数据字段",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1}]},18700:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(1549);const t=[{value:"重命名数据中的一些字段。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'rename',\n        a: 'x',\n        b: 'y'\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { x: 1, y: 2, c: 3 },\n  { x: 4, y: 5, c: 6 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"[key]",paraId:4,tocIndex:1},{value:"重命名数据中的字段 [key] 为 指定的名称",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1}]},15535:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(81436);const t=[{value:"对数据进行分片，获得子集。类似于 ",paraId:0},{value:"Array.prototypo.slice",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'slice',\n        start: 1,\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 4, b: 5, c: 6 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"start",paraId:4,tocIndex:1},{value:"分片的起始索引",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"end",paraId:4,tocIndex:1},{value:"分片的结束索引",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"arr.length - 1",paraId:4,tocIndex:1}]},36687:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(8050);const t=[{value:"对数据按照指定的 callback 进行排序。类似于 ",paraId:0},{value:"Array.prototypo.sort",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'sort',\n      callback: (a, b) => b.a - a.a,\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 4, b: 5, c: 6 },\n  { a: 1, b: 2, c: 3 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"callback",paraId:4,tocIndex:1},{value:"Array.sort 的 comparator，返回 1，0，-1 代表 > = <",paraId:4,tocIndex:1},{value:"(a: any, b: any) => number",paraId:4,tocIndex:1},{value:"(a, b) => 0",paraId:4,tocIndex:1}]},92211:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(40654);const t=[{value:"对数据按照指定的字段进行排序。",paraId:0},{value:"const data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'sortBy',\n      fields: ['sold'], // 根据 sold 字段排序\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"fields",paraId:2,tocIndex:1},{value:"排序的字段",paraId:2,tocIndex:1},{value:"(string | [string, boolean])[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1}]},27734:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70071);const t=[{value:"geoPath",paraId:0},{value:" 可以用来结合 geojson 绘制地图。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/unemployment2.json').then((res) =>\n    res.json(),\n  ),\n]).then((values) => {\n  const [us, unemployment] = values;\n  const counties = feature(us, us.objects.counties).features;\n\n  const chart = new Chart({\n    container: 'container',\n  });\n\n  chart\n    .geoPath()\n    .projection({ type: 'albersUsa' })\n    .data({\n      value: counties,\n      transform: [\n        {\n          type: 'join',\n          join: unemployment,\n          on: ['id', 'id'],\n          select: ['rate'],\n        },\n      ],\n    })\n    .scale('color', {\n      type: 'sequential',\n      palette: 'ylGnBu',\n      unknown: '#fff',\n    })\n    .encode('color', 'rate');\n\n  chart.render();\n});\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 ",paraId:4,tocIndex:1},{value:"geoPath",paraId:4,tocIndex:1},{value:" 除了和通用 mark 相同的 API 和配置项，还有一个特殊的就是 ",paraId:4,tocIndex:1},{value:"projection",paraId:4,tocIndex:1},{value:" 映射，当前 G2 内置了 ",paraId:4,tocIndex:1},{value:"d3-geo",paraId:4,tocIndex:1},{value:" 的所有映射。",paraId:4,tocIndex:1},{value:"地图最终是由 geojson 数据决定，所以需要找到一个中国行政地图的 geojson，并将此数据应用于当前的示例 DEMO 中。",paraId:5,tocIndex:3},{value:"chart\n  .geoPath()\n  .data(geojson)\n  .encode('latitude', 'latitude')\n  .encode('longitude', 'longitude')\n  .encode('color', 'rate');\n  .scale('color', {\n    type: 'sequential',\n    palette: 'ylGnBu',\n    unknown: '#fff',\n  });\n\n  chart.render();\n",paraId:6,tocIndex:3}]},90991:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57213);const t=[{value:"geoView",paraId:0},{value:" 是绘制地图的容器，用于多 geoPath 图层叠加。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/geo_layer_line_london.html\n */\nimport { Chart } from '@antv/g2';\nimport { feature } from 'topojson';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/londonBoroughs.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonCentroids.json').then(\n    (res) => res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonTubeLines.json').then(\n    (res) => res.json(),\n  ),\n]).then((values) => {\n  const [londonBoroughs, londonCentroids, londonTubeLines] = values;\n  const london = feature(\n    londonBoroughs,\n    londonBoroughs.objects.boroughs,\n  ).features;\n  const line = feature(londonTubeLines, londonTubeLines.objects.line).features;\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  const geoView = chart.geoView();\n\n  geoView\n    .geoPath()\n    .data(london)\n    .style('fill', 'lightgray')\n    .style('stroke', 'white')\n    .style('strokeWidth', 2);\n\n  geoView\n    .text()\n    .data(londonCentroids)\n    .encode('x', 'cx')\n    .encode('y', 'cy')\n    .encode('text', (d) => d.name.split(/\\W/)[0])\n    .style('fontSize', 8)\n    .style('opacity', 0.6);\n\n  geoView\n    .geoPath()\n    .data(line)\n    .encode('color', 'id')\n    .encode('shape', 'hollow')\n    .scale('color', {\n      domain: [\n        'Bakerloo',\n        'Central',\n        'Circle',\n        'District',\n        'DLR',\n        'Hammersmith & City',\n        'Jubilee',\n        'Metropolitan',\n        'Northern',\n        'Piccadilly',\n        'Victoria',\n        'Waterloo & City',\n      ],\n      range: [\n        'rgb(137,78,36)',\n        'rgb(220,36,30)',\n        'rgb(255,206,0)',\n        'rgb(1,114,41)',\n        'rgb(0,175,173)',\n        'rgb(215,153,175)',\n        'rgb(106,114,120)',\n        'rgb(114,17,84)',\n        'rgb(0,0,0)',\n        'rgb(0,24,168)',\n        'rgb(0,160,226)',\n        'rgb(106,187,170)',\n      ],\n    });\n\n  chart.render();\n});\n",paraId:1,tocIndex:0},{value:"目前 ",paraId:2,tocIndex:1},{value:"geoView",paraId:2,tocIndex:1},{value:" 容器具备 geoPath 全部的属性，除了 geoPath 作为 mark 独有的 ",paraId:2,tocIndex:1},{value:"encode",paraId:2,tocIndex:1},{value:" 方法。",paraId:2,tocIndex:1},{value:"同样，对于 ",paraId:3,tocIndex:1},{value:"projection",paraId:3,tocIndex:1},{value:" 映射，当前 G2 内置了 ",paraId:3,tocIndex:1},{value:"d3-geo",paraId:3,tocIndex:1},{value:" 的所有映射。",paraId:3,tocIndex:1}]},27779:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12813);const t=[{value:"力导布局图是一种用来呈现复杂关系网络的图表。在力导布局图中，系统中的每个节点都可以看成是一个放电粒子，粒子间存在某种斥力。同时，这些粒子间被它们之间的“边”所牵连，从而产生引力。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .forceGraph()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/miserable.json',\n  })\n  .scale('color', { range: schemeTableau10 });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"ForceTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"nodeLabels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"linkLabels",paraId:2,tocIndex:1},{value:"自定义连接线数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"joint",paraId:3,tocIndex:2},{value:"离散力布局或引力布局",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"true",paraId:3,tocIndex:2},{value:"nodeStrength",paraId:3,tocIndex:2},{value:"节点引力",paraId:3,tocIndex:2},{value:"number | (d => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"linkStrength",paraId:3,tocIndex:2},{value:"连接线间引力",paraId:3,tocIndex:2},{value:"number | (d => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3},{value:"<node>",paraId:5,tocIndex:3},{value:": 节点配置的前缀，例如：",paraId:5,tocIndex:3},{value:"nodeFill",paraId:5,tocIndex:3},{value:" 设置节点的填充颜色。",paraId:5,tocIndex:3},{value:"<link>",paraId:5,tocIndex:3},{value:": 连接线配置的前缀，例如：",paraId:5,tocIndex:3},{value:"linkStrokeWidth",paraId:5,tocIndex:3},{value:" 设置连接线的宽度。",paraId:5,tocIndex:3}]},87664:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(48714);const t=[{value:"打包图 (",paraId:0},{value:"Circle Packing",paraId:0},{value:") 是树形结构图的变体，使用圆形（而非矩形）一层又一层地代表整个层次结构。常用于描述数据间的包含关系。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { interpolateHcl } from 'd3-interpolate';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 20,\n});\n\nchart\n  .pack()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  })\n  .layout({\n    padding: 5,\n  })\n  .encode('value', 'value')\n  .encode('color', 'depth')\n  .scale('color', {\n    domain: [0, 5],\n    range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n    interpolate: interpolateHcl,\n  })\n  .style('labelText', (d) =>\n    d.r >= 10 && d.height === 0 ? `${d.data.name}` : '',\n  )\n  .axis(false)\n  .legend(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"TreeTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"labels",paraId:2,tocIndex:1},{value:"自定义数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"sort",paraId:3,tocIndex:2},{value:"排序方式",paraId:3,tocIndex:2},{value:"((a, b) => number)",paraId:3,tocIndex:2},{value:"(a, b) => b.value - a.value",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"内间距",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3}]},56757:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(54088);const t=[{value:"桑基图 (",paraId:0},{value:"Sankey Diagram",paraId:0},{value:")，是一种特定类型的流图，用于描述一组值到另一组值的流向。桑基图的特点如下：\n起始流量和结束流量相同，所有主支宽度的总和与所有分出去的分支宽度总和相等，保持能量的平衡；\n在内部，不同的线条代表了不同的流量分流情况，它的宽度成比例地显示此分支占有的流量；\n节点不同的宽度代表了特定状态下的流量大小。\n桑基图通常应用于能源、材料成分、金融等数据的可视化分析。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 10,\n});\n\nchart\n  .sankey()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  })\n  .layout({\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  })\n  .scale('color', { range: schemeTableau10 })\n  .style('labelSpacing', 3)\n  .style('labelFontWeight', 'bold')\n  .style('nodeStrokeWidth', 1.2)\n  .style('linkFillOpacity', 0.4);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"SankeyTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"nodeLabels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"linkLabels",paraId:2,tocIndex:1},{value:"自定义连接线数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"nodeId",paraId:3,tocIndex:2},{value:"起始流量字段",paraId:3,tocIndex:2},{value:"(node: any) => string",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"nodeSort",paraId:3,tocIndex:2},{value:"起始流量排序方式",paraId:3,tocIndex:2},{value:"((a: any, b: any) => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"linkSort",paraId:3,tocIndex:2},{value:"去向流量排序方式",paraId:3,tocIndex:2},{value:"((a: any, b: any) => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"nodeAlign",paraId:3,tocIndex:2},{value:"节点对齐方式",paraId:3,tocIndex:2},{value:"'left' | 'right' | 'center' | 'justify' | ((node: any, n: number) => number)",paraId:3,tocIndex:2},{value:"'left'",paraId:3,tocIndex:2},{value:"nodeWidth",paraId:3,tocIndex:2},{value:"节点宽度",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0.008",paraId:3,tocIndex:2},{value:"nodePadding",paraId:3,tocIndex:2},{value:"节点间距",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0.03 ",paraId:3,tocIndex:2},{value:"nodeDepth",paraId:3,tocIndex:2},{value:"节点层级",paraId:3,tocIndex:2},{value:"(datum: any, maxDepth: number) => number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"iterations",paraId:3,tocIndex:2},{value:"布局计算迭代次数，次数越多，布局越合理",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"6",paraId:3,tocIndex:2},{value:"更多 ",paraId:4,tocIndex:2},{value:"layout",paraId:4,tocIndex:2},{value:" 配置，详见 ",paraId:4,tocIndex:2},{value:"d3-sankey",paraId:4,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:5,tocIndex:3},{value:"<label>",paraId:6,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:6,tocIndex:3},{value:"labelText",paraId:6,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:6,tocIndex:3},{value:"<node>",paraId:6,tocIndex:3},{value:": 节点配置的前缀，例如：",paraId:6,tocIndex:3},{value:"nodeFill",paraId:6,tocIndex:3},{value:" 设置节点的填充颜色。",paraId:6,tocIndex:3},{value:"<link>",paraId:6,tocIndex:3},{value:": 连接线配置的前缀，例如：",paraId:6,tocIndex:3},{value:"linkStrokeWidth",paraId:6,tocIndex:3},{value:" 设置连接线的宽度。",paraId:6,tocIndex:3}]},20409:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(83883);const t=[{value:"树图 (",paraId:0},{value:"Tree",paraId:0},{value:") 能将事物或现象分解成树枝状，又称树型图或系统图。在树形结构中，树根结点没有前驱结点，其余每个结点有且只有一个前驱结点。叶子结点没有后续结点，其余每个结点的后续节点数可以是一个也可以是多个。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 1500,\n  width: 800,\n});\n\nchart\n  .tree()\n  .coordinate({ transform: [{ type: 'transpose' }] })\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  })\n  .layout({\n    sortBy: (a, b) => a.value - b.value,\n  })\n  .style('nodeFill', (d) => (d.height === 0 ? '#999' : '#000'))\n  .style('linkStroke', '#999')\n  .style('labelText', (d) => d.data.name || '-')\n  .style('labelFontSize', (d) => (d.height === 0 ? 7 : 12))\n  .style('labelTextAlign', (d) => (d.height === 0 ? 'start' : 'end'))\n  .style('labelPosition', (d) => (d.height !== 0 ? 'left' : 'right'))\n  .style('labelDx', (d) => (d.height === 0 ? 5 : -5))\n  .style('labelBackground', true)\n  .style('labelBackgroundFill', '#fff');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"TreeTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"nodeLabels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"linkLabels",paraId:2,tocIndex:1},{value:"自定义连接线数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"nodeSize",paraId:3,tocIndex:2},{value:"节点大小",paraId:3,tocIndex:2},{value:"(node: any) => string",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"sortBy",paraId:3,tocIndex:2},{value:"排序方式",paraId:3,tocIndex:2},{value:"((a, b) => number)",paraId:3,tocIndex:2},{value:"(a, b) => b.value - a.value",paraId:3,tocIndex:2},{value:"separation",paraId:3,tocIndex:2},{value:"相邻节点间距",paraId:3,tocIndex:2},{value:"(a, b) => number",paraId:3,tocIndex:2},{value:"(a, b) => a.parent == b.parent ? 1 : 2",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3},{value:"<node>",paraId:5,tocIndex:3},{value:": 节点配置的前缀，例如：",paraId:5,tocIndex:3},{value:"nodeFill",paraId:5,tocIndex:3},{value:" 设置节点的填充颜色。",paraId:5,tocIndex:3},{value:"<link>",paraId:5,tocIndex:3},{value:": 连接线配置的前缀，例如：",paraId:5,tocIndex:3},{value:"linkStrokeWidth",paraId:5,tocIndex:3},{value:" 设置连接线的宽度。",paraId:5,tocIndex:3},{value:"如何绘制圆形树图？\n需要指定 ",paraId:6,tocIndex:4},{value:"coordinate: 'polar'",paraId:6,tocIndex:4}]},73160:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(81743);const t=[{value:"矩阵树图根据每个节点的关联值递归地将空间划分为矩形，适用于展示带权的树形数据。\n矩形树图适合展现具有层级关系的数据，能够直观体现同级之间的比较。一个 Tree 状结构转化为平面空间矩形的状态。矩形树图的好处在于，相比起传统的树形结构图，矩形树图能更有效得利用空间，并且拥有展示占比的功能。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .treemap()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare-treemap.json',\n  })\n  .layout({\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  })\n  .encode('value', 'size')\n  .scale('color', { range: schemeTableau10 })\n  .style(\n    'labelText',\n    (d) =>\n      d.data.name\n        .split('.')\n        .pop()\n        .split(/(?=[A-Z][a-z])/g)[0],\n  )\n  .style('labelFill', '#000')\n  .style('labelPosition', 'top-left')\n  .style('fillOpacity', 0.5);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"TreemapLayout",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"labels",paraId:2,tocIndex:1},{value:"自定义数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"tile",paraId:3,tocIndex:2},{value:"布局方式",paraId:3,tocIndex:2},{value:"'treemapBinary' | 'treemapDice' | 'treemapSlice' | 'treemapSliceDice' | 'treemapSquarify' | 'treemapResquarify'",paraId:3,tocIndex:2},{value:"'treemapSquarify'",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"外间距，另外还有 ",paraId:3,tocIndex:2},{value:"paddingInner | paddingOuter | paddingTop | paddingBottom | paddingRight | paddingLeft",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"sort",paraId:3,tocIndex:2},{value:"排序规则",paraId:3,tocIndex:2},{value:"(a: any, b: any): number",paraId:3,tocIndex:2},{value:"(a, b) => b.value - a.value",paraId:3,tocIndex:2},{value:"layer",paraId:3,tocIndex:2},{value:"渲染层级",paraId:3,tocIndex:2},{value:"number | (d) => number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3}]},90771:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(34232);const t=[{value:"框选坐标轴高亮，常常用于平行坐标系。",paraId:0},{value:"/**\n * A recreation of this demo: https://observablehq.com/@d3/parallel-coordinates\n */\nimport { Chart } from '@antv/g2';\n\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  style: {\n    labelStroke: '#fff',\n    labelStrokeWidth: 5,\n    labelFontSize: 10,\n    labelStrokeLineJoin: 'round',\n    titleStroke: '#fff',\n    titleFontSize: 10,\n    titleStrokeWidth: 5,\n    titleStrokeLineJoin: 'round',\n    titleTransform: 'translate(-50%, 0) rotate(-90)',\n    lineStroke: 'black',\n    tickStroke: 'black',\n    lineStrokeWidth: 1,\n  },\n};\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.coordinate({ type: 'parallel' });\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  })\n  .encode('position', [\n    'economy (mpg)',\n    'cylinders',\n    'displacement (cc)',\n    'power (hp)',\n    'weight (lb)',\n    '0-60 mph (s)',\n    'year',\n  ])\n  .encode('color', 'weight (lb)')\n  .style('strokeWidth', 1.5)\n  .style('strokeOpacity', 0.4)\n  .scale('color', {\n    type: 'sequential',\n    palette: 'brBG',\n    offset: (t) => 1 - t,\n  })\n  .legend({\n    color: { length: 400, layout: { justifyContent: 'center' } },\n  })\n  .axis('position', axis)\n  .axis('position1', axis)\n  .axis('position2', axis)\n  .axis('position3', axis)\n  .axis('position4', axis)\n  .axis('position5', axis)\n  .axis('position6', axis)\n  .axis('position7', axis)\n  .state('inactive', { stroke: '#eee' }); // 设置交互状态\n\nchart\n  .interaction('brushAxisHighlight', true) // 指定交互\n  .interaction('tooltip', false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"chart.on('brushAxis:highlight', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('brushAxis:highlight', data);\n});\n\nchart.on('brushAxis:remove', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('brushAxis:remove', data);\n});\n",paraId:3,tocIndex:3},{value:"chart.emit('brushAxis:highlight', {\n  data: { selection: [[20, 30], undefined, [100, 300]] },\n});\n\nchart.emit('brushAxis:remove', {});\n",paraId:4,tocIndex:4}]},28194:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50579);const t=[{value:"框选筛选元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushFilter', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"获得当前筛选数据，会在每次筛选和重置的时候触发以下事件：",paraId:3,tocIndex:2},{value:"chart.on('brush:filter', (event) => {\n  const { selection } = event.data;\n  const [domainX, domainY] = selection;\n  const [minX, maxX] = domainX;\n  const [minY, maxY] = domainY;\n  console.log(minX, maxX, minY, maxY);\n});\n",paraId:4,tocIndex:2}]},8232:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(63699);const t=[{value:"框选高亮元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushHighlight', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"是否是系列元素",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"facet",paraId:2,tocIndex:1},{value:"是否跨分面",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number| string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"支持八个方向的 resize 和自定义对应的 handle。",paraId:3,tocIndex:2},{value:"八个方向的 handle 的名字分别如下（按照东南西北命名），按照 ",paraId:4,tocIndex:4},{value:"mask[handleName][styleAttribute]",paraId:4,tocIndex:4},{value:" 格式设置对应的属性，也可以通过 ",paraId:4,tocIndex:4},{value:"maskHandleSize",paraId:4,tocIndex:4},{value:" 设置宽度。",paraId:4,tocIndex:4},{value:"chart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  },\n  encode: {\n    color: 'species',\n    x: 'culmen_length_mm',\n    y: 'culmen_depth_mm',\n  },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n  },\n  interaction: {\n    brushHighlight: {\n      maskHandleNFill: 'blue',\n      maskHandleEFill: 'red',\n      maskHandleSFill: 'green',\n      maskHandleWFill: 'yellow',\n      maskHandleNWFill: 'black',\n      maskHandleNEFill: 'steelblue',\n      maskHandleSEFill: 'pink',\n      maskHandleSWFill: 'orange',\n    },\n  },\n});\n",paraId:5,tocIndex:4},{value:"可以通过 ",paraId:6,tocIndex:5},{value:"mask[handleName]Render",paraId:6,tocIndex:5},{value:" 指定 handle 的渲染函数，用于渲染自定义的 handle。其中该函数签名如下。",paraId:6,tocIndex:5},{value:"function render(\n  g, // 挂载容器\n  options, // 样式属性，通过 mask[handleName][styleAttribute] 设置\n  document, // 画布 document，用于创建自图形\n) {\n  // 需要返回创建的图形\n}\n",paraId:7,tocIndex:5},{value:"下面是一个创建 path handle 的例子：",paraId:8,tocIndex:5},{value:"function renderPath(group, options, document) {\n  // 创建逻辑\n  // 如果是第一次渲染，就创建并且挂在图形\n  if (!group.handle) {\n    // 通过 document.createElement 去新建图形\n    const path = document.createElement('path');\n    group.handle = path;\n    group.appendChild(group.handle);\n  }\n\n  // 更新逻辑\n  const { handle } = group;\n  const { width, height, ...rest } = options;\n  if (width === undefined || height === undefined) return handle;\n  handle.attr(rest);\n\n  // 返回对应的 shape\n  return handle;\n}\n",paraId:9,tocIndex:5},{value:"function createPathRender(path) {\n  return (group, options, document) => {\n    if (!group.handle) {\n      const path = document.createElement('path');\n      group.handle = path;\n      group.appendChild(group.handle);\n    }\n    const { handle } = group;\n    const { x, y, width, height, ...rest } = options;\n    if (width === undefined || height === undefined) return handle;\n    handle.style.d = path(x, y, width, height);\n    handle.attr(rest);\n    return handle;\n  };\n}\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  },\n  encode: {\n    color: 'species',\n    x: 'culmen_length_mm',\n    y: 'culmen_depth_mm',\n  },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n  },\n  interaction: {\n    brushHighlight: {\n      maskHandleSize: 30,\n      maskHandleNRender: createPathRender((x, y, width, height) => {\n        return `M${x},${y + height / 2}L${x + width / 2},${y - height / 2}L${\n          x + width\n        },${y + height / 2},Z`;\n      }),\n      maskHandleERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + (width * 3) / 2},${y + height / 2}L${\n            x + width / 2\n          },${y + height},Z`,\n      ),\n      maskHandleSRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y + height / 2}L${x + width / 2},${y + (height / 2) * 3}L${\n            x + width\n          },${y + height / 2},Z`,\n      ),\n      maskHandleWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x - width},${y + height / 2}L${\n            x + width / 2\n          },${y + height},Z`,\n      ),\n      maskHandleNWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y}L${x + width},${y + height / 2}L${x + width / 2},${\n            y + height\n          },Z`,\n      ),\n      maskHandleNERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y + height / 2}L${x + width},${y}L${x + width / 2},${\n            y + height\n          },Z`,\n      ),\n      maskHandleSERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + width},${y + height}L${x},${\n            y + height / 2\n          },Z`,\n      ),\n      maskHandleSWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + width},${y + height / 2}L${x},${\n            y + height\n          },Z`,\n      ),\n      maskHandleNFill: 'blue',\n      maskHandleEFill: 'red',\n      maskHandleSFill: 'green',\n      maskHandleWFill: 'yellow',\n      maskHandleNWFill: 'black',\n      maskHandleNEFill: 'steelblue',\n      maskHandleSEFill: 'pink',\n      maskHandleSWFill: 'orange',\n    },\n  },\n});\n",paraId:10,tocIndex:5},{value:"支持以下的事件：",paraId:11,tocIndex:6},{value:"brush:start",paraId:12,tocIndex:6},{value:" - 开始创建 brush 的时候触发",paraId:12,tocIndex:6},{value:"brush:end",paraId:12,tocIndex:6},{value:" - brush 更新大小和位置完成时候触发",paraId:12,tocIndex:6},{value:"brush:remove",paraId:12,tocIndex:6},{value:" - brush 移除的时候触发",paraId:12,tocIndex:6},{value:"brush:highlight",paraId:12,tocIndex:6},{value:" - brush 改变大小和位置时触发",paraId:12,tocIndex:6},{value:"chart.on('brush:highlight', (e) => {\n  console.log(e.data.selection);\n  console.log(e.nativeEvent);\n});\n",paraId:13,tocIndex:6},{value:"支持以下的事件：",paraId:14,tocIndex:7},{value:"brush:highlight",paraId:15,tocIndex:7},{value:" - 高亮数据",paraId:15,tocIndex:7},{value:"brush:remove",paraId:15,tocIndex:7},{value:" - 移除 brush",paraId:15,tocIndex:7},{value:"chart.emit('brush:remove');\n",paraId:16,tocIndex:7}]},36870:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(81462);const t=[{value:"x 方向框选筛选元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushXFilter', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},2408:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(45294);const t=[{value:"x 方向框选高亮元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushXHighlight', {\n  maskFill: 'red',\n  maskOpacity: 0.5,\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"是否是系列元素",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"facet",paraId:2,tocIndex:1},{value:"是否跨分面",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number| string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},42569:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(95759);const t=[{value:"y 方向筛选高亮元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushYFilter', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},50154:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(80258);const t=[{value:"y 方向框选高亮元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushYHighlight', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"是否是系列元素",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"facet",paraId:2,tocIndex:1},{value:"是否跨分面",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number| string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},5531:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(64059);const t=[{value:"查看折线图相对于某个时间点的相对趋势。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  })\n  .encode('x', (d) => new Date(d.Date))\n  .encode('y', 'Close')\n  .encode('color', 'Symbol')\n  .encode('key', 'Symbol')\n  .encode('title', (d) => d.Date.toLocaleString())\n  .axis('y', { title: '↑ Change in price (%)', labelAutoRotate: false })\n  .scale('y', { type: 'log' })\n  .label({\n    text: 'Symbol',\n    selector: 'last',\n    style: {\n      fontSize: 10,\n    },\n  });\n\nchart.interaction('chartIndex', {\n  ruleStroke: '#aaa',\n  labelDx: 5,\n  labelTextAlign: 'center',\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFormatter: (d) => `${d.toLocaleDateString()}`,\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"labelFormatter",paraId:2,tocIndex:1},{value:"格式化日期",paraId:2,tocIndex:1},{value:"FormatterFunction",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"rule${StyleAttrs}",paraId:2,tocIndex:1},{value:"指示线的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"label${StyleAttrs}",paraId:2,tocIndex:1},{value:"文本的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},74763:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(91958);const t=[{value:"高亮鼠标悬浮的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' })\n  .state('active', { fill: 'orange' })\n  .state('inactive', { opacity: 0.5 });\n\nchart.interaction('elementHighlight', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"chart.emit('element:highlight', {\n  data: { data: { population: 5038433 } },\n});\n\nchart.emit('element:unhighlight', {});\n",paraId:3,tocIndex:3},{value:"chart.on('element:highlight', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('element:highlight', data);\n});\n\nchart.on('element:unhighlight', (event) => {\n  const { nativeEvent } = event;\n  if (nativeEvent) console.log('reset');\n});\n",paraId:4,tocIndex:4}]},83198:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(5243);const t=[{value:"高亮和鼠标悬浮的元素拥有相同 color 通道值的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 5 })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .state('active', { fill: 'red', linkFillOpacity: 0.5 })\n  .state('inactive', { opacity: 0.5 });\n\nchart.interaction('elementHighlightByColor', {\n  link: true,\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"link",paraId:2,tocIndex:1},{value:"是否展示连接线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"link${StyleAttrs}",paraId:2,tocIndex:1},{value:"连接线样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},26098:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(29949);const t=[{value:"高亮和鼠标悬浮的元素拥有相同 x 通道值的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .state('active', { fill: 'red' })\n  .state('inactive', { opacity: 0.5 });\n\nchart.interaction('elementHighlightByX', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},65212:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88026);const t=[{value:"选择点击的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' })\n  .state('selected', { fill: 'orange' })\n  .state('unselected', { opacity: 0.5 });\n\nchart.interaction('elementSelect', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"single",paraId:2,tocIndex:1},{value:"是否单选",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"chart.on('element:select', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('element:select', data);\n});\n\nchart.on('element:unselect', (event) => {\n  const { nativeEvent } = event;\n  if (nativeEvent) console.log('reset');\n});\n",paraId:3,tocIndex:3},{value:"chart.emit('element:select', {\n  data: { data: [{ population: 5038433 }, { population: 3983091 }] },\n});\n\nchart.emit('element:unselect', {});\n",paraId:4,tocIndex:4}]},59140:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(75977);const t=[{value:"选择和鼠标点击的元素拥有相同 color 通道值的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 5 })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .state('selected', { fill: 'red', linkFillOpacity: 0.5 })\n  .state('unselected', { opacity: 0.5 });\n\nchart.interaction('elementSelectByColor', {\n  link: true,\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"link",paraId:2,tocIndex:1},{value:"是否展示连接线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"link${StyleAttrs}",paraId:2,tocIndex:1},{value:"连接线样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"link",paraId:2,tocIndex:1},{value:"是否展示连接带",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1}]},27752:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(307);const t=[{value:"选择和鼠标点击的元素拥有相同 x 通道值的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .state('selected', { fill: 'red' })\n  .state('unselected', { opacity: 0.5 });\n\nchart.interaction('elementSelectByX', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"link",paraId:2,tocIndex:1},{value:"是否展示连接线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"link${StyleAttrs}",paraId:2,tocIndex:1},{value:"连接线样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"single",paraId:2,tocIndex:1},{value:"是否单选",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1}]},42510:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50857);const t=[{value:"鱼眼交互，用于聚焦于局部数据。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  })\n  .encode('x', 'GDP')\n  .encode('y', 'LifeExpectancy')\n  .encode('size', 'Population')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('size', { type: 'log', range: [4, 20] })\n  .style('fillOpacity', 0.3)\n  .style('lineWidth', 1);\n\nchart.interaction('fisheye');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"wait",paraId:2,tocIndex:1},{value:"鱼眼更新的时间间隔，单位为毫秒",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"30",paraId:2,tocIndex:1},{value:"leading",paraId:2,tocIndex:1},{value:"是否在时间间隔开始的时候更新鱼眼",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"trailing",paraId:2,tocIndex:1},{value:"是否在时间间隔结束的时候更新鱼眼",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1}]},43405:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(34077);const t=[{value:"图例筛选元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .data(temperatures)\n  .encode('x', 'month')\n  .encode('y', 'temperature')\n  .encode('color', 'city')\n  .call((chart) => chart.line())\n  .call((chart) => chart.point());\n\nchart.interaction('legendFilter', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"chart.emit('legend:filter', {\n  data: { channel: 'color', values: ['Sports', 'Strategy'] },\n});\n\nchart.emit('legend:reset', {});\n",paraId:2,tocIndex:2},{value:"chart.on('legend:filter', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  console.log(data);\n});\n\nchart.on('legend:reset', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  console.log('end');\n});\n",paraId:3,tocIndex:3}]},28517:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(53081);const t=[{value:"图例高亮元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data(profit)\n  .axis('y', { labelFormatter: '~s' })\n  .encode('x', 'month')\n  .encode('y', ['end', 'start'])\n  .encode(\n    'color',\n    d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n  )\n  .state('inactive', { opacity: 0.5 })\n  .legend('color', {\n    state: { inactive: { labelOpacity: 0.5, markerOpacity: 0.5 } },\n  });\n\nchart.interaction('legendHighlight', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"chart.on('legend:highlight', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  console.log(data);\n});\n\nchart.on('legend:unhighlight', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  console.log('unhighlight');\n});\n",paraId:2,tocIndex:2},{value:"chart.emit('legend:highlight', {\n  data: { channel: 'color', value: 'Increase' },\n});\n\nchart.emit('legend:unhighlight', {});\n",paraId:3,tocIndex:3}]},20400:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(95156);const t=[{value:"提示缩略文本。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 900,\n  width: 1100,\n});\n\nchart\n  .treemap()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare-treemap.json',\n  })\n  .layout({\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  })\n  .encode('value', 'size')\n  .scale('color', { range: schemeTableau10 })\n  .style(\n    'labelText',\n    (d) =>\n      d.data.name\n        .split('.')\n        .pop()\n        .split(/(?=[A-Z][a-z])/g)[0],\n  )\n  .style('labelFill', '#000')\n  .style('labelPosition', 'top-left')\n  .style('fillOpacity', 0.5);\n\nchart.interaction('poptip', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"offsetX",paraId:2,tocIndex:1},{value:"x 方向偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"8",paraId:2,tocIndex:1},{value:"offsetY",paraId:2,tocIndex:1},{value:"y 方向偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"8",paraId:2,tocIndex:1},{value:"tip${StyleAttrs}",paraId:2,tocIndex:1},{value:"poptip 样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},24158:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(97296);const t=[{value:"滚动条筛选是一个默认交互，当设置了 scrollbar 默认就会有这个交互。关于 scrollbar 组件的配置，见文档 ",paraId:0},{value:"component/scrollbar",paraId:1},{value:"。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .scrollbar('y', { ratio: 0.3 }) // y domain 的比例\n  .scrollbar('x', { ratio: 0.5 }); // x domain 的比例\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"chart.emit('scrollbarX:filter', {\n  data: { selection: [['2001-03'], undefined] },\n});\n\nchart.emit('scrollbarY:filter', {\n  data: { selection: [undefined, [50, 550]] },\n});\n",paraId:3,tocIndex:2},{value:"chart.on('scrollbarX:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('scrollbarX:filter', data.selection);\n});\n\nchart.on('scrollbarY:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('scrollbarY:filter', data.selection);\n});\n",paraId:4,tocIndex:3}]},65133:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(3714);const t=[{value:"缩略轴筛选是一个默认交互，当设置了 slider 默认就会有这个交互。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .slider('y', true)\n  .slider('x', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"chart.emit('sliderX:filter', {\n  data: { selection: [['2001-01', '2001-03'], undefined] },\n});\n\nchart.emit('sliderY:filter', {\n  data: { selection: [undefined, [50, 550]] },\n});\n",paraId:2,tocIndex:2},{value:"chart.on('sliderX:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('sliderX:filter', data.selection);\n});\n\nchart.on('sliderY:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('sliderY:filter', data.selection);\n});\n",paraId:3,tocIndex:3}]},11640:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(10400);const t=[{value:"展示提示信息。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' });\n\nchart.interaction('tooltip');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"wait",paraId:2,tocIndex:1},{value:"提示信息更新的时间间隔，单位为毫秒",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"50",paraId:2,tocIndex:1},{value:"leading",paraId:2,tocIndex:1},{value:"是否在时间间隔开始的时候更新提示信息",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"trailing",paraId:2,tocIndex:1},{value:"是否在时间间隔结束的时候更新提示信息",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"shared",paraId:2,tocIndex:1},{value:"相同 x 的元素是否共享 tooltip",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"是否是系列元素的 tooltip",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"body",paraId:2,tocIndex:1},{value:"是否展示 tooltip",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"marker",paraId:2,tocIndex:1},{value:"是否展示 marker",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"groupName",paraId:2,tocIndex:1},{value:"是否使用 groupName",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"position",paraId:2,tocIndex:1},{value:"tooltip 位置",paraId:2,tocIndex:1},{value:"TooltipPosition",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"mount",paraId:2,tocIndex:1},{value:"tooltip 渲染的 dom 节点",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"HTMLElement",paraId:2,tocIndex:1},{value:"图表容器",paraId:2,tocIndex:1},{value:"bounding",paraId:2,tocIndex:1},{value:"tooltip 渲染的限制区域，超出会自动调整位置",paraId:2,tocIndex:1},{value:"BBox",paraId:2,tocIndex:1},{value:"图表区域大小",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"tooltip 离鼠标的偏离位置",paraId:2,tocIndex:1},{value:"[number, number]",paraId:2,tocIndex:1},{value:"[10, 10]",paraId:2,tocIndex:1},{value:"crosshairs",paraId:2,tocIndex:1},{value:"是否展示指示线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"crosshairsX",paraId:2,tocIndex:1},{value:"是否展示 X 方向指示线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"crosshairsY",paraId:2,tocIndex:1},{value:"是否展示 Y 方向指示线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"crosshairs${StyleAttrs}",paraId:2,tocIndex:1},{value:"指示线的样式",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"crosshairsX${StyleAttrs}",paraId:2,tocIndex:1},{value:"X 方向指示线的样式（优先级更高）",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"crosshairsY${StyleAttrs}",paraId:2,tocIndex:1},{value:"Y 方向指示线的样式 （优先级更高）",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"marker${StyleAttrs}",paraId:2,tocIndex:1},{value:"marker 的样式",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"markerType",paraId:2,tocIndex:1},{value:"marker 的类型",paraId:2,tocIndex:1},{value:"'hollow' | undefined",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"render",paraId:2,tocIndex:1},{value:"自定义 tooltip 渲染函数",paraId:2,tocIndex:1},{value:"(event, options) => HTMLElement | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"sort",paraId:2,tocIndex:1},{value:"item 排序器",paraId:2,tocIndex:1},{value:"(d: TooltipItemValue) => any",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"filter",paraId:2,tocIndex:1},{value:"item 筛选器",paraId:2,tocIndex:1},{value:"(d: TooltipItemValue) => any",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"disableNative",paraId:2,tocIndex:1},{value:"是否响应原生事件（pointerover 和 pointerout）",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"css",paraId:2,tocIndex:1},{value:"设置容器的 ",paraId:2,tocIndex:1},{value:"css",paraId:3,tocIndex:1},{value:" 样式",paraId:2,tocIndex:1},{value:"Record<string, any>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"type TooltipPosition =\n  | 'top'\n  | 'bottom'\n  | 'left'\n  | 'right'\n  | 'top-left'\n  | 'top-right'\n  | 'bottom-left'\n  | 'bottom-right';\n\ntype BBox = { x: number; y: number; width: number; height: number };\n",paraId:4,tocIndex:1},{value:"import React from 'react';\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .transform([{ type: 'sortX', by: 'y', reverse: true, slice: 5 }])\n  .encode('x', 'letter')\n  .encode('y', 'frequency');\n\nchart.interaction('tooltip', {\n  // render 回调方法返回一个innerHTML 或者 ReactNode\n  render: (event, { title, items }) =>\n    `<div>Your custom render content here.</div>`,\n});\n\nchart.render();\n",paraId:5,tocIndex:3},{value:"chart.on('tooltip:show', (event) => {\n  console.log(event.data.data);\n});\n\nchart.on('tooltip:hide', () => {\n  console.log('hide');\n});\n",paraId:6,tocIndex:4},{value:"对于 Interval、Point 等非系列 Mark，控制展示的方式如下：",paraId:7,tocIndex:5},{value:"// 条形图、点图等\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render().then((chart) =>\n  chart.emit('tooltip:show', {\n    offsetX: 10, // 相对于 plot 区域的位置\n    offsetX: 20, // 相对于 plot 区域的位置\n    data: {\n      data: { genre: 'Sports' }, // 会找从原始数据里面找到匹配的数据\n    },\n  }),\n);\n",paraId:8,tocIndex:5},{value:"对于 Line、Area 等系列 Mark，控制展示的方式如下：",paraId:9,tocIndex:5},{value:"chart\n  .line()\n  .data({ type: 'fetch', value: 'data/aapl.csv' })\n  .encode('x', 'date')\n  .encode('y', 'close');\n\n// 根据数据拾取\nchart.render((chart) =>\n  chart.emit('tooltip:show', {\n    data: {\n      data: { x: new Date('2010-11-16') },\n    },\n  }),\n);\n\n// 根据像素拾取\nchart.render((chart) =>\n  chart.emit('tooltip:show', {\n    offsetX: 200,\n    offsetY: 200,\n  }),\n);\n",paraId:10,tocIndex:5},{value:"隐藏的方式如下：",paraId:11,tocIndex:5},{value:"chart.emit('tooltip:hide');\n",paraId:12,tocIndex:5},{value:"chart.emit('tooltip:disable'); // 禁用 tooltip\nchart.emit('tooltip:enable'); // 启用交互\n",paraId:13,tocIndex:6},{value:"默认情况下，",paraId:14,tocIndex:7},{value:"crossharisY",paraId:14,tocIndex:7},{value:"是开启的，",paraId:14,tocIndex:7},{value:"crosshairsX",paraId:14,tocIndex:7},{value:"是关闭的，所以如果要开启十字辅助线，有以下两种方式。",paraId:14,tocIndex:7},{value:"设置",paraId:15,tocIndex:7},{value:"crosshairs",paraId:15,tocIndex:7},{value:"为",paraId:15,tocIndex:7},{value:"true",paraId:15,tocIndex:7},{value:"。",paraId:15,tocIndex:7},{value:"chart.interaction('tooltip', {\n  crosshairs: true, // 开启十字辅助线\n  crosshairsXStroke: 'red', // 设置 X 轴辅助线颜色为'red'\n  crosshairsYStroke: 'blue', // 设置 Y 轴辅助线颜色为'blue'\n});\n",paraId:16,tocIndex:7},{value:"设置",paraId:17,tocIndex:7},{value:"crosshairsX",paraId:17,tocIndex:7},{value:"为",paraId:17,tocIndex:7},{value:"true",paraId:17,tocIndex:7},{value:"。",paraId:17,tocIndex:7},{value:"chart.interaction('tooltip', {\n  crosshairsX: true, // 开启crosshairsX辅助线\n  crosshairsXStroke: 'red', // 设置 X 轴辅助线颜色为'red'\n  crosshairsYStroke: 'blue', // 设置 Y 轴辅助线颜色为'blue'\n});\n",paraId:18,tocIndex:7},{value:"crosshairsX",paraId:19,tocIndex:7},{value:"的优先级大于",paraId:19,tocIndex:7},{value:"crosshairs",paraId:19,tocIndex:7},{value:"的优先级。",paraId:19,tocIndex:7},{value:"chart.interaction('tooltip', {\n  markerType: 'hollow', // 设置提示点的样式为空心圆\n});\n",paraId:20,tocIndex:8}]},72984:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12317);const t=[{value:"contrastReverse",paraId:0},{value:" 标签颜色在图形背景上",paraId:0},{value:"颜色对比度",paraId:0},{value:"低的情况下，从指定色板选择一个对比度最优的颜色。",paraId:0},{value:"chart\n  .interval()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  /* ... */\n  .label({\n    text: 'frequency',\n    position: 'inside',\n    transform: [\n      {\n        type: 'contrastReverse',\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"threshold",paraId:2,tocIndex:1},{value:"标签和背景图形的颜色对比度阈值，超过阈值才会推荐颜色提升对比度",paraId:2,tocIndex:1},{value:"Type",paraId:2,tocIndex:1},{value:"4.5",paraId:2,tocIndex:1},{value:"palette",paraId:2,tocIndex:1},{value:"对比度提升算法中，备选的颜色色板",paraId:2,tocIndex:1},{value:"Type",paraId:2,tocIndex:1},{value:"['#000', '#fff']",paraId:2,tocIndex:1}]},90891:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(45710);const t=[{value:"exceedAdjust",paraId:0},{value:" 会自动对标签做溢出检测和矫正，即当标签超出视图区域时，会对标签自动做反方向的位移。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'type')\n  /* ... */\n  .label({\n    text: 'frequency',\n    transform: [\n      {\n        type: 'exceedAdjust',\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"暂无",paraId:2,tocIndex:1}]},2341:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(54178);const t=[{value:"overflowHide",paraId:0},{value:" 对于标签在图形上放置不下的时候，隐藏标签。",paraId:0},{value:"chart\n  .interval()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  /* ... */\n  .label({\n    text: 'frequency',\n    position: 'inside',\n    transform: [\n      {\n        type: 'overflowHide',\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"暂无。",paraId:2,tocIndex:1}]},31199:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(40579);const t=[{value:"overlapDodgeY",paraId:0},{value:" 位置碰撞的标签在 y 方向上进行调整，防止标签重叠。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'type')\n  /* ... */\n  .label({\n    text: 'frequency',\n    transform: [\n      {\n        type: 'overlapDodgeY',\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"maxIterations",paraId:2,tocIndex:1},{value:"位置调整的最大迭代次数。",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"10",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"期望调整之后，标签和标签之间的间距",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1},{value:"maxError",paraId:2,tocIndex:1},{value:"最大误差，指实际间距和期望间距 ",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:" 之间的误差",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0.1",paraId:2,tocIndex:1}]},48435:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(84244);const t=[{value:"overlapHide",paraId:0},{value:" 对位置碰撞的标签进行隐藏。算法逻辑是碰撞的两个标签，保留前一个，隐藏后一个。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  /* ... */\n  .label({\n    text: 'frequency',\n    transform: [\n      {\n        type: 'overlapHide',\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"priority",paraId:2,tocIndex:1},{value:"标签排序的优先级，通过设置一个排序比较器，实现优先级",paraId:2,tocIndex:1},{value:"(a, b) => number",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},73971:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57435);const t=[{value:"Label 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下:",paraId:0},{value:"[mark].label(options: LabelOptions);\n",paraId:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 720,\n  height: 720,\n});\n\nchart.coordinate({ type: 'polar', outerRadius: 0.85 });\n\nchart\n  .interval()\n  .transform({ type: 'groupX', y: 'sum' })\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n  })\n  .encode('x', 'year')\n  .encode('color', 'year')\n  .encode('y', 'people')\n  .scale('y', { type: 'sqrt' })\n  .scale('x', { padding: 0 })\n  .axis('y', false)\n  .axis('x', false)\n  .label({\n    text: 'people',\n    position: 'outside',\n    transform: [{ type: 'overlapDodgeY' }],\n  });\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"Label 继承 G Text 所有属性样式配置，此外还有 ",paraId:3,tocIndex:1},{value:"position",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"selector",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"connector",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"background",paraId:3,tocIndex:1},{value:" 和 ",paraId:3,tocIndex:1},{value:"transform",paraId:3,tocIndex:1},{value:" 等更多配置。",paraId:3,tocIndex:1},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"fontSize",paraId:4,tocIndex:1},{value:"文字大小",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"fontFamily",paraId:4,tocIndex:1},{value:"文字字体",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"fontWeight",paraId:4,tocIndex:1},{value:"字体粗细",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"lineHeight",paraId:4,tocIndex:1},{value:"文字的行高",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"textAlign",paraId:4,tocIndex:1},{value:"设置文本内容的当前对齐方式, 支持的属性：",paraId:4,tocIndex:1},{value:"center",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"end",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"left",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"right",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"start",paraId:4,tocIndex:1},{value:"，默认值为",paraId:4,tocIndex:1},{value:"start",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"textBaseline",paraId:4,tocIndex:1},{value:"设置在绘制文本时使用的当前文本基线, 支持的属性:",paraId:4,tocIndex:1},{value:"top",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"middle",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"bottom",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"alphabetic",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"hanging",paraId:4,tocIndex:1},{value:"。默认值为",paraId:4,tocIndex:1},{value:"bottom",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"fill",paraId:4,tocIndex:1},{value:"图形的填充色",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"fillOpacity",paraId:4,tocIndex:1},{value:"图形的填充透明度",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"stroke",paraId:4,tocIndex:1},{value:"图形的描边",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"strokeOpacity",paraId:4,tocIndex:1},{value:"描边透明度",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"lineWidth",paraId:4,tocIndex:1},{value:"图形描边的宽度",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"lineDash",paraId:4,tocIndex:1},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:4,tocIndex:1},{value:"[number,number]",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<[number, number]>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"opacity",paraId:4,tocIndex:1},{value:"图形的整体透明度",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"shadowColor",paraId:4,tocIndex:1},{value:"图形阴影颜色",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"shadowBlur",paraId:4,tocIndex:1},{value:"图形阴影的高斯模糊系数",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"shadowOffsetX",paraId:4,tocIndex:1},{value:"设置阴影距图形的水平距离",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"shadowOffsetY",paraId:4,tocIndex:1},{value:"设置阴影距图形的垂直距离",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"cursor",paraId:4,tocIndex:1},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"'default'",paraId:4,tocIndex:1},{value:"position",paraId:4,tocIndex:1},{value:"标签位置配置",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"selector",paraId:4,tocIndex:1},{value:"标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。",paraId:4,tocIndex:1},{value:"string|function",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"connector",paraId:4,tocIndex:1},{value:"是否展示文本和目标点之间的连接线，默认不展示",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"background",paraId:4,tocIndex:1},{value:"是否展示文本背景框，默认不展示",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"transform",paraId:4,tocIndex:1},{value:"标签转换，主要用于调整标签 ",paraId:4,tocIndex:1},{value:"(x,y)",paraId:4,tocIndex:1},{value:" 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理",paraId:4,tocIndex:1},{value:"array|function",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"formatter",paraId:4,tocIndex:1},{value:"标签文本格式化",paraId:4,tocIndex:1},{value:"type Formatter = (text:string, datum: Datum, index:number, data: Data) => string",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"标签",paraId:5,tocIndex:1},{value:"连接线样式",paraId:5,tocIndex:1},{value:"配置，格式为: ",paraId:5,tocIndex:1},{value:"connector${style}",paraId:5,tocIndex:1},{value:", 如: ",paraId:5,tocIndex:1},{value:"connectorStroke",paraId:5,tocIndex:1},{value:" 代表连接线描边色。",paraId:5,tocIndex:1},{value:"参数",paraId:6,tocIndex:1},{value:"说明",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"connectorStroke",paraId:6,tocIndex:1},{value:"连接线描边色",paraId:6,tocIndex:1},{value:"string",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"connectorLineWidth",paraId:6,tocIndex:1},{value:"连接线描边线宽",paraId:6,tocIndex:1},{value:"number",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"connector${style}",paraId:6,tocIndex:1},{value:"更多连接线样式配置，参考 ",paraId:6,tocIndex:1},{value:"PathStyleProps",paraId:6,tocIndex:1},{value:" 属性值",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"标签",paraId:7,tocIndex:1},{value:"文本背景框样式",paraId:7,tocIndex:1},{value:"配置，格式为: ",paraId:7,tocIndex:1},{value:"background${style}",paraId:7,tocIndex:1},{value:", 如: ",paraId:7,tocIndex:1},{value:"backgroundFill",paraId:7,tocIndex:1},{value:" 代表背景框填充色。",paraId:7,tocIndex:1},{value:"参数",paraId:8,tocIndex:1},{value:"说明",paraId:8,tocIndex:1},{value:"类型",paraId:8,tocIndex:1},{value:"默认值",paraId:8,tocIndex:1},{value:"backgroundFill",paraId:8,tocIndex:1},{value:"背景框填充色",paraId:8,tocIndex:1},{value:"string",paraId:8,tocIndex:1},{value:"-",paraId:8,tocIndex:1},{value:"backgroundRadius",paraId:8,tocIndex:1},{value:"背景框圆角半径",paraId:8,tocIndex:1},{value:"number",paraId:8,tocIndex:1},{value:"-",paraId:8,tocIndex:1},{value:"backgroundPadding",paraId:8,tocIndex:1},{value:"背景框内间距",paraId:8,tocIndex:1},{value:"number[]",paraId:8,tocIndex:1},{value:"-",paraId:8,tocIndex:1},{value:"background${style}",paraId:8,tocIndex:1},{value:"更多背景框样式配置，参考 ",paraId:8,tocIndex:1},{value:"RectStyleProps",paraId:8,tocIndex:1},{value:" 属性值",paraId:8,tocIndex:1},{value:"-",paraId:8,tocIndex:1},{value:"-",paraId:8,tocIndex:1},{value:"数据标签支持使用 HTML 自定义标签，具体配置为：",paraId:9,tocIndex:1},{value:"参数",paraId:10,tocIndex:1},{value:"说明",paraId:10,tocIndex:1},{value:"类型",paraId:10,tocIndex:1},{value:"默认值",paraId:10,tocIndex:1},{value:"render",paraId:10,tocIndex:1},{value:"返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签",paraId:10,tocIndex:1},{value:"RenderFunc",paraId:10,tocIndex:1},{value:"-",paraId:10,tocIndex:1},{value:"type RenderFunc = (text: string, datum: object, index: number, {channel: Record<string, Channel>}) => String | HTMLElement;\n",paraId:11,tocIndex:1},{value:"chart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  })\n  .transform({\n    type: 'groupX',\n    y: 'max',\n  })\n  .encode('x', 'clarity')\n  .encode('y', 'price')\n  .axis('y', { labelFormatter: '~s' })\n  .label({ text: (d, i, data, { channel }) => channel.y[i] }) // 聚合图形的数据标签\n  .style(\n    'fill',\n    (\n      d,\n      i,\n      data,\n      { channel, element }, // 聚合图形的样式 & label所依赖元素\n    ) => (channel.y[i] < 11700 ? '#E49361' : '#4787F7'),\n  );\n",paraId:12,tocIndex:1},{value:"在笛卡尔坐标系下，支持 9 种位置：",paraId:13,tocIndex:3},{value:"'top'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'left'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'right'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'bottom'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'top-left'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'top-right'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'bottom-left'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'bottom-right'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'inside'",paraId:13,tocIndex:3},{value:"。非笛卡尔坐标系下，支持 ",paraId:13,tocIndex:3},{value:"'outside'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'inside'",paraId:13,tocIndex:3},{value:" 两种。",paraId:13,tocIndex:3},{value:"此外，针对面积图提供特殊 ",paraId:14,tocIndex:3},{value:"area",paraId:14,tocIndex:3},{value:"，见 ",paraId:14,tocIndex:3},{value:"面积图特殊标签",paraId:15,tocIndex:3},{value:"。针对 radial 类型的图标，增加了 ",paraId:14,tocIndex:3},{value:"spider",paraId:14,tocIndex:3},{value:"、",paraId:14,tocIndex:3},{value:"surround",paraId:14,tocIndex:3},{value:" 两种类型。",paraId:14,tocIndex:3},{value:"position",paraId:16,tocIndex:3},{value:"用途",paraId:16,tocIndex:3},{value:"使用前",paraId:16,tocIndex:3},{value:"使用后",paraId:16,tocIndex:3},{value:"spider",paraId:16,tocIndex:3},{value:"调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系",paraId:16,tocIndex:3},{value:"surround",paraId:16,tocIndex:3},{value:"调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图",paraId:16,tocIndex:3},{value:"area",paraId:16,tocIndex:3},{value:"将面积图的标签显示在面积区域中心，并设置一定的旋转角度",paraId:16,tocIndex:3},{value:"selector 选择器可以对系列数据进行过滤索引。",paraId:17,tocIndex:4},{value:"通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark，见 ",paraId:18,tocIndex:4},{value:"折线图尾随标签",paraId:19,tocIndex:4},{value:"内置选择器有：",paraId:20,tocIndex:4},{value:"'last'",paraId:20,tocIndex:4},{value:", ",paraId:20,tocIndex:4},{value:"'first'",paraId:20,tocIndex:4},{value:"，同时也支持 ",paraId:20,tocIndex:4},{value:"function",paraId:20,tocIndex:4},{value:" 回调的方式自定义，如下：",paraId:20,tocIndex:4},{value:"{\n  selector: (data) => {\n    if (data.length) {\n      // 对于每个系列的数据，只保留索引等于 2 的标签\n      return data.filter((d, index) => index === 2);\n    }\n    return data;\n  };\n}\n",paraId:21,tocIndex:4},{value:"所有的 transform 有单独具体的文档，具体参考 ",paraId:22,tocIndex:5},{value:"Label.transform",paraId:23,tocIndex:5},{value:"。",paraId:22,tocIndex:5},{value:"使用 label 配置手册中的 ",paraId:24,tocIndex:6},{value:"render",paraId:24,tocIndex:6},{value:" 即可，具体使用可以参考 ",paraId:24,tocIndex:6},{value:"DEMO",paraId:25,tocIndex:6},{value:"。",paraId:24,tocIndex:6}]},53865:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87958);const t=[{value:"Area",paraId:0},{value:" 图形标记大部分场景用来绘制我们常见的面积图，它是在折线图的基础上，将包围的区域使用颜色或者纹理填充，可以用来更好的突出趋势，以及趋势的堆积信息。",paraId:0},{value:"在视觉通道设计上，",paraId:1},{value:"Area",paraId:1},{value:" 除了和 ",paraId:1},{value:"Line",paraId:1},{value:" 不同的地方在于，可以设置 ",paraId:1},{value:"y",paraId:1},{value:" 为长度为 2 的数组，分别代表面积的上边界和下边界，默认下边界为 0。",paraId:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n  transform: [\n    {\n      type: 'map',\n      callback: (d) => ({\n        ...d,\n        date: new Date(d.date),\n      }),\n    },\n  ],\n});\n\nchart.area().encode('x', 'date').encode('y', 'close');\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"目前 area 有以下几个内置 shape 图形，默认为 ",paraId:5,tocIndex:1},{value:"area",paraId:5,tocIndex:1},{value:"。",paraId:5,tocIndex:1},{value:"图形",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"示例",paraId:6,tocIndex:1},{value:"area",paraId:6,tocIndex:1},{value:"绘制直线连接的面积图",paraId:6,tocIndex:1},{value:"smooth",paraId:6,tocIndex:1},{value:"绘制平滑曲线的面积图",paraId:6,tocIndex:1},{value:"vh",paraId:6,tocIndex:1},{value:"绘制阶梯面积图，先竖线后横线连接",paraId:6,tocIndex:1},{value:"hv",paraId:6,tocIndex:1},{value:"绘制阶梯面积图，先横线后竖线连接",paraId:6,tocIndex:1},{value:"hvh",paraId:6,tocIndex:1},{value:"绘制阶梯面积图，竖横竖，中点连接",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"connect",paraId:7,tocIndex:2},{value:"是否连接空值",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"false",paraId:7,tocIndex:2},{value:"connect[Style]",paraId:7,tocIndex:2},{value:"connector 对应的属性样式",paraId:7,tocIndex:2},{value:"和对应 ",paraId:7,tocIndex:2},{value:"style",paraId:7,tocIndex:2},{value:" 保持一致",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"defined",paraId:7,tocIndex:2},{value:"决定数据是否为空值",paraId:7,tocIndex:2},{value:"(v: any) = boolean",paraId:7,tocIndex:2},{value:"!(NaN || null || undefine)",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2},{value:"和 ",paraId:8,tocIndex:3},{value:"area",paraId:8,tocIndex:3},{value:" 配置相同。",paraId:8,tocIndex:3},{value:"和 ",paraId:9,tocIndex:4},{value:"area",paraId:9,tocIndex:4},{value:" 配置相同。",paraId:9,tocIndex:4},{value:"和 ",paraId:10,tocIndex:5},{value:"area",paraId:10,tocIndex:5},{value:" 配置相同。",paraId:10,tocIndex:5},{value:"和 ",paraId:11,tocIndex:6},{value:"area",paraId:11,tocIndex:6},{value:" 配置相同。",paraId:11,tocIndex:6},{value:"使用 connect 功能时，怎么决定什么样的数据为空值？",paraId:12,tocIndex:7},{value:"可以使用 ",paraId:13,tocIndex:7},{value:"defined",paraId:13,tocIndex:7},{value:" 配置去决定是否为非空值，默认 NaN、undefined、null 为空值。假设需要数据为 ",paraId:13,tocIndex:7},{value:"0",paraId:13,tocIndex:7},{value:" 的时候是空值连接。",paraId:13,tocIndex:7},{value:"chart\n  .area()\n  // ...\n  .style('defined', (v) => v === 0);\n",paraId:14,tocIndex:7}]},47015:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57516);const t=[{value:"Box",paraId:0},{value:" 图形是用来绘制箱线图（boxplot）又叫盒须图、盒式图，通常用来展示一组数据分布情况的统计图，一般包括几种数据：",paraId:0},{value:"最小值",paraId:0},{value:"、",paraId:0},{value:"下四分位数",paraId:0},{value:"、",paraId:0},{value:"中位数",paraId:0},{value:"、",paraId:0},{value:"上四分位数",paraId:0},{value:"、",paraId:0},{value:"最大值",paraId:0},{value:"，另外可以结合 ",paraId:0},{value:"point",paraId:0},{value:" mark 绘制异常点数据。",paraId:0},{value:"Box 特殊的一点在于 ",paraId:1},{value:"y",paraId:1},{value:" 通道对应的数据是一组统计数据的数组，最后会将数据映射为箱线图所需求的 14 个点集合。",paraId:1},{value:"/**\n *\n * p0           p2          p1\n *    ──────────┬──────────\n *              │\n *              │\n *              │\n *              │ p3\n * p4 ┌─────────┴──────────┐ p5\n *    │                    │\n *    │                    │\n * p8 ├────────────────────┤ p9\n *    │                    │\n *    │        p10         │\n * p7 └─────────┬──────────┘ p6\n *              │\n *              │\n *              │\n *   ───────────┴───────────\n * p12         p11           p13\n */\n",paraId:2},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n  { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n  { x: 'Australia', y: [1, 8, 12, 19, 26] },\n  { x: 'South America', y: [2, 8, 12, 21, 28] },\n  { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n  { x: 'North America', y: [3, 10, 17, 28, 30] },\n  { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n  { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .box()\n  .data(data)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .scale('x', { paddingInner: 0.6, paddingOuter: 0.3 })\n  .scale('y', { zero: true })\n  .legend(false)\n  .style('stroke', 'black');\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前有图形 ",paraId:6,tocIndex:1},{value:"box",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"violin",paraId:6,tocIndex:1},{value:"，下面描述一下所有的 ",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:" 配置项。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2},{value:"同 ",paraId:8,tocIndex:3},{value:"box",paraId:8,tocIndex:3},{value:" 图形配置。",paraId:8,tocIndex:3},{value:"怎么在前端进行数据分布情况的分析？",paraId:9,tocIndex:4},{value:"G2 的 ",paraId:10,tocIndex:4},{value:"transform",paraId:10,tocIndex:4},{value:" 可以进行数据的转换，这里就可以实现对数据进行 ",paraId:10,tocIndex:4},{value:"最小值",paraId:10,tocIndex:4},{value:"、",paraId:10,tocIndex:4},{value:"下四分位数",paraId:10,tocIndex:4},{value:"、",paraId:10,tocIndex:4},{value:"中位数",paraId:10,tocIndex:4},{value:"、",paraId:10,tocIndex:4},{value:"上四分位数",paraId:10,tocIndex:4},{value:"、",paraId:10,tocIndex:4},{value:"最大值",paraId:10,tocIndex:4},{value:" 的统计，当然也可以调用社区提供的",paraId:10,tocIndex:4},{value:"算法库",paraId:10,tocIndex:4},{value:"。",paraId:10,tocIndex:4},{value:"chart.box().data({\n  type: 'connector',\n  value: [\n    /* your detail data */\n  ],\n  callback: (data) => {\n    // todo: aggregate your data, and return it.\n    return data;\n  },\n});\n",paraId:11,tocIndex:4},{value:"当然也可以直接使用 ",paraId:12,tocIndex:4},{value:"boxplot",paraId:13,tocIndex:4},{value:" 图形标记。",paraId:12,tocIndex:4}]},77933:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(36010);const t=[{value:"Boxplot",paraId:0},{value:" 和 ",paraId:0},{value:"Box",paraId:1},{value:" 非常相似，都是用来绘制箱线图（boxplot）又叫盒须图、盒式图，通常用来展示一组数据分布情况的统计图，一般包括几种数据：",paraId:0},{value:"最小值",paraId:0},{value:"、",paraId:0},{value:"下四分位数",paraId:0},{value:"、",paraId:0},{value:"中位数",paraId:0},{value:"、",paraId:0},{value:"上四分位数",paraId:0},{value:"、",paraId:0},{value:"最大值",paraId:0},{value:"。不同点在于：",paraId:0},{value:"Boxplot",paraId:2},{value:" 是高阶 mark，自带数据分组和数据统计聚合；",paraId:2},{value:"Box",paraId:2},{value:" 是原子 mark，需要开发者手动指定 5 个点的数据；",paraId:2},{value:"所以 ",paraId:3},{value:"Boxplot",paraId:3},{value:" 更适合用于前端数据的探索和分析过程，而 ",paraId:3},{value:"Box",paraId:3},{value:" 更适用于后端对超大数据进行计算和统计之后，可视化展示。",paraId:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 60,\n  inset: 6,\n});\n\nchart\n  .boxplot()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  })\n  .encode('x', 'Expt')\n  .encode('y', 'Speed');\n\nchart.render();\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0},{value:"属性",paraId:7,tocIndex:1},{value:"描述",paraId:7,tocIndex:1},{value:"类型",paraId:7,tocIndex:1},{value:"默认值",paraId:7,tocIndex:1},{value:"extend",paraId:7,tocIndex:1},{value:"数据展示模式，",paraId:7,tocIndex:1},{value:"true",paraId:7,tocIndex:1},{value:" 的时候，Q1 Q4 点分别最小、最大值，否则按照本文概述的图来计算",paraId:7,tocIndex:1},{value:"boolean",paraId:7,tocIndex:1},{value:"false",paraId:7,tocIndex:1},{value:"pointFill",paraId:7,tocIndex:1},{value:"图形的填充色",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointFillOpacity",paraId:7,tocIndex:1},{value:"图形的填充透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointStroke",paraId:7,tocIndex:1},{value:"图形的描边",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointLineWidth",paraId:7,tocIndex:1},{value:"图形描边的宽度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointllineDash",paraId:7,tocIndex:1},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:1},{value:"[number,number]",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<[number, number]>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointLineOpacity",paraId:7,tocIndex:1},{value:"描边透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointOpacity",paraId:7,tocIndex:1},{value:"图形的整体透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointShadowColor",paraId:7,tocIndex:1},{value:"图形阴影颜色",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointShadowBlur",paraId:7,tocIndex:1},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointShadowOffsetX",paraId:7,tocIndex:1},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointShadowOffsetY",paraId:7,tocIndex:1},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointCursor",paraId:7,tocIndex:1},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"'default'",paraId:7,tocIndex:1},{value:"boxFill",paraId:7,tocIndex:1},{value:"图形的填充色",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxFillOpacity",paraId:7,tocIndex:1},{value:"图形的填充透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxStroke",paraId:7,tocIndex:1},{value:"图形的描边",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxLineWidth",paraId:7,tocIndex:1},{value:"图形描边的宽度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxLineDash",paraId:7,tocIndex:1},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:1},{value:"[number,number]",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<[number, number]>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxLineOpacity",paraId:7,tocIndex:1},{value:"描边透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxOpacity",paraId:7,tocIndex:1},{value:"图形的整体透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxShadowColor",paraId:7,tocIndex:1},{value:"图形阴影颜色",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxShadowBlur",paraId:7,tocIndex:1},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxShadowOffsetX",paraId:7,tocIndex:1},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxShadowOffsetY",paraId:7,tocIndex:1},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxCursor",paraId:7,tocIndex:1},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"'default'",paraId:7,tocIndex:1},{value:"数据量很大，把异常点以及四分位点的数据放到服务端计算，改怎么绘制箱线图？",paraId:8,tocIndex:2},{value:"这种情况使用 ",paraId:9,tocIndex:2},{value:"box",paraId:9,tocIndex:2},{value:" mark 去绘制是最优的，参考 ",paraId:9,tocIndex:2},{value:"box",paraId:10,tocIndex:2},{value:"。",paraId:9,tocIndex:2}]},32009:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(56932);const t=[{value:"根据 x, y 将空间划分成一个子单元格，然后进行可视化绘制，常见于一些方块图，如日历图、聚合热力图等。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/rect_heatmap_weather.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 300,\n});\n\nchart\n  .cell()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .transform({ type: 'group', color: 'max' })\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', (d) => new Date(d.date).getUTCMonth())\n  .encode('color', 'temp_max')\n  .style('inset', 0.5)\n  .scale('color', {\n    type: 'sequential',\n    palette: 'gnBu',\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 cell 有以下几个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"cell",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"cell",paraId:5,tocIndex:1},{value:"矩形",paraId:5,tocIndex:1},{value:"hollow",paraId:5,tocIndex:1},{value:"空心矩形",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"radius",paraId:6,tocIndex:2},{value:"矩形的四个圆角大小",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopLeft",paraId:6,tocIndex:2},{value:"左上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopRight",paraId:6,tocIndex:2},{value:"右上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomRight",paraId:6,tocIndex:2},{value:"右下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomLeft",paraId:6,tocIndex:2},{value:"左下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"inset",paraId:6,tocIndex:2},{value:"矩形四个方向的内边距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetLeft",paraId:6,tocIndex:2},{value:"左边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetRight",paraId:6,tocIndex:2},{value:"右边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetBottom",paraId:6,tocIndex:2},{value:"下面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetTop",paraId:6,tocIndex:2},{value:"上面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"和 ",paraId:7,tocIndex:3},{value:"rect",paraId:7,tocIndex:3},{value:" 配置相同。",paraId:7,tocIndex:3}]},51648:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(4065);const t=[{value:"弦图（Chord diagram）是一种用于可视化关系和连接的图表形式。它主要用于展示多个实体之间的相互关系、联系的强度或流量的分布。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.chord().data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/population-flow.json',\n  transform: [\n    {\n      type: 'custom',\n      callback: (d) => ({ links: d }),\n    },\n  ],\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"布局时y轴的坐标",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"id",paraId:2,tocIndex:1},{value:"节点的键",paraId:2,tocIndex:1},{value:"Function<string | number>",paraId:2,tocIndex:1},{value:"(node) => node.key",paraId:2,tocIndex:1},{value:"source",paraId:2,tocIndex:1},{value:"设置弦图的来源节点数据字段",paraId:2,tocIndex:1},{value:"Function<string>",paraId:2,tocIndex:1},{value:"(node) => node.source",paraId:2,tocIndex:1},{value:"target",paraId:2,tocIndex:1},{value:"设置弦图的目标节点数据字段",paraId:2,tocIndex:1},{value:"Function<string>",paraId:2,tocIndex:1},{value:"(node) => node.target",paraId:2,tocIndex:1},{value:"sourceWeight",paraId:2,tocIndex:1},{value:"来源的权重",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"(node) => node.value || 1",paraId:2,tocIndex:1},{value:"targetWeight",paraId:2,tocIndex:1},{value:"目标的权重",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"(node) => node.value || 1",paraId:2,tocIndex:1},{value:"sortBy",paraId:2,tocIndex:1},{value:"排序方法，可选id, weight, frequency排序或者自定义排序方法",paraId:2,tocIndex:1},{value:"string | Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"nodeWidthRatio",paraId:2,tocIndex:1},{value:"弦图节点的宽度配置，0 ~ 1，参考画布的宽度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"0.05",paraId:2,tocIndex:1},{value:"nodePaddingRatio",paraId:2,tocIndex:1},{value:"弦图节点之间的间距，0 ~ 1，参考画布的高度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0.1",paraId:2,tocIndex:1}]},65010:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(10898);const t=[{value:"接受核密度数据，一般用于用于绘制小提琴图。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/species.json',\n  transform: [\n    {\n      type: 'kde',\n      field: 'y',\n      groupBy: ['x'],\n      size: 20,\n    },\n  ],\n});\n\nchart\n  .density()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .encode('size', 'size')\n  .tooltip(false);\n\nchart.render();\n\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"fill",paraId:2,tocIndex:1},{value:"图形的填充色",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<string>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"fillOpacity",paraId:2,tocIndex:1},{value:"图形的填充透明度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"stroke",paraId:2,tocIndex:1},{value:"图形的描边",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<string>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"strokeOpacity",paraId:2,tocIndex:1},{value:"描边透明度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"lineWidth",paraId:2,tocIndex:1},{value:"图形描边的宽度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"lineDash",paraId:2,tocIndex:1},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:2,tocIndex:1},{value:"[number,number]",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<[number, number]>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"opacity",paraId:2,tocIndex:1},{value:"图形的整体透明度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"shadowColor",paraId:2,tocIndex:1},{value:"图形阴影颜色",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<string>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"shadowBlur",paraId:2,tocIndex:1},{value:"图形阴影的高斯模糊系数",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"shadowOffsetX",paraId:2,tocIndex:1},{value:"设置阴影距图形的水平距离",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"shadowOffsetY",paraId:2,tocIndex:1},{value:"设置阴影距图形的垂直距离",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"cursor",paraId:2,tocIndex:1},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<string>",paraId:2,tocIndex:1},{value:"'default'",paraId:2,tocIndex:1}]},38736:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(13628);const t=[{value:"仪表盘",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .gauge()\n  .data({\n    value: {\n      target: 120,\n      total: 400,\n      name: 'score',\n    },\n  })\n  .legend(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"data",paraId:2,tocIndex:1},{value:"数据",paraId:2,tocIndex:1},{value:"GaugeData",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"labels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"target",paraId:3,tocIndex:2},{value:"目标值",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"total",paraId:3,tocIndex:2},{value:"总计值",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"percent",paraId:3,tocIndex:2},{value:"百分比",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"thresholds",paraId:3,tocIndex:2},{value:"阈值区间",paraId:3,tocIndex:2},{value:"number[]",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3}]},50969:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88060);const t=[{value:"用于绘制密度热力图，使用的时候，需要指定数据通道 encode 中的 ",paraId:0},{value:"x",paraId:0},{value:"，",paraId:0},{value:"y",paraId:0},{value:"，",paraId:0},{value:"color",paraId:0},{value:"。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  padding: 0,\n});\n\nchart.axis(false);\n\nchart\n  .image()\n  .style(\n    'src',\n    'https://gw.alipayobjects.com/zos/rmsportal/NeUTMwKtPcPxIFNTWZOZ.png',\n  )\n  .style('x', '50%')\n  .style('y', '50%')\n  .style('width', '100%')\n  .style('height', '100%')\n  .tooltip(false);\n\nchart\n  .heatmap()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/heatmap.json',\n  })\n  .encode('x', 'g')\n  .encode('y', 'l')\n  .encode('color', 'tmp')\n  .style('opacity', 0)\n  .tooltip(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"对于 heatmap 图形的样式配置中，主要有以下：",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"gradient",paraId:3,tocIndex:1},{value:"图形对应的渐变色配置",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Array<[number, string]>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"opacity",paraId:3,tocIndex:1},{value:"热力图的透明度 ，如果设置，则会覆盖 ",paraId:3,tocIndex:1},{value:"maxOpacity",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"minOpacity",paraId:3,tocIndex:1},{value:" 配置，范围 0 ~ 1",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0.6",paraId:3,tocIndex:1},{value:"maxOpacity",paraId:3,tocIndex:1},{value:"热力图像素点透明度最大值，在 ",paraId:3,tocIndex:1},{value:"opacity = 0",paraId:3,tocIndex:1},{value:" 时候生效，范围 0 ~ 1",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"1",paraId:3,tocIndex:1},{value:"minOpacity",paraId:3,tocIndex:1},{value:"热力图像素点透明度最小值，在 ",paraId:3,tocIndex:1},{value:"opacity = 0",paraId:3,tocIndex:1},{value:" 时候生效，范围 0 ~ 1",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"blur",paraId:3,tocIndex:1},{value:"热力图的模糊因子，范围 0 ~ 1，越大图形约平滑",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0.85",paraId:3,tocIndex:1},{value:"useGradientOpacity",paraId:3,tocIndex:1},{value:"图形的填充色",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"fill",paraId:3,tocIndex:1},{value:"图形的填充色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<string>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"fillOpacity",paraId:3,tocIndex:1},{value:"图形的填充透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"stroke",paraId:3,tocIndex:1},{value:"图形的描边",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<string>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"strokeOpacity",paraId:3,tocIndex:1},{value:"描边透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"lineWidth",paraId:3,tocIndex:1},{value:"图形描边的宽度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"lineDash",paraId:3,tocIndex:1},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:3,tocIndex:1},{value:"[number,number]",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<[number, number]>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"shadowColor",paraId:3,tocIndex:1},{value:"图形阴影颜色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<string>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"shadowBlur",paraId:3,tocIndex:1},{value:"图形阴影的高斯模糊系数",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"shadowOffsetX",paraId:3,tocIndex:1},{value:"设置阴影距图形的水平距离",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"shadowOffsetY",paraId:3,tocIndex:1},{value:"设置阴影距图形的垂直距离",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"cursor",paraId:3,tocIndex:1},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<string>",paraId:3,tocIndex:1},{value:"'default'",paraId:3,tocIndex:1},{value:"关于 ",paraId:4,tocIndex:1},{value:"gradient",paraId:4,tocIndex:1},{value:" 配置，来一个示例如下，也是 G2 默认内置的渐变色：",paraId:4,tocIndex:1},{value:"const gradient = [\n  [0.25, 'rgb(0,0,255)'],\n  [0.55, 'rgb(0,255,0)'],\n  [0.85, 'yellow'],\n  [1.0, 'rgb(255,0,0)'],\n];\n\nconst gradient = '0.25:rgb(0,0,255) 0.55:rgb(0,255,0) 0.85:yellow 1.0:rgb(255,0,0)';\n",paraId:5,tocIndex:1}]},79659:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(55965);const t=[{value:"Image",paraId:0},{value:" 标记和 ",paraId:0},{value:"Point",paraId:1},{value:" 标记很类似，都是以 ",paraId:0},{value:"x",paraId:0},{value:"，",paraId:0},{value:"y",paraId:0},{value:" 数据通道作为位置居中定位，区别在于 ",paraId:0},{value:"Image",paraId:0},{value:" 提供一个特殊的 ",paraId:0},{value:"src",paraId:0},{value:" 数据通道，来指定图片的远程地址或者 base64。",paraId:0},{value:"这里有一个简单的浏览器占比数据，我们对它进行可视化，便于看到不同浏览器的占比对比。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  {\n    name: 'Internet Explorer',\n    value: 26,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/eOYRaLPOmkieVvjyjTzM.png',\n  },\n  {\n    name: 'Chrome',\n    value: 40,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/dWJWRLWfpOEbwCyxmZwu.png',\n  },\n  {\n    name: 'Firefox',\n    value: 30,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/ZEPeDluKmAoTioCABBTc.png',\n  },\n  {\n    name: 'Safari',\n    value: 24,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/eZYhlLzqWLAYwOHQAXmc.png',\n  },\n  {\n    name: 'Opera',\n    value: 15,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/vXiGOWCGZNKuVVpVYQAw.png',\n  },\n  {\n    name: 'Undetectable',\n    value: 8,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/NjApYXminrnhBgOXyuaK.png',\n  },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data(data);\n\nchart\n  .link()\n  .encode('x', ['name', 'name'])\n  .encode('y', (d) => [0, d.value])\n  .style('stroke', '#dfdfdf')\n  .style('lineDash', [2, 2]);\n\nchart\n  .line()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('shape', 'smooth')\n  .scale('x', { type: 'band' })\n  .scale('y', { domain: [0, 50] })\n  .style('opacity', 0.5);\n\nchart\n  .image()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('src', 'url')\n  .scale('x', { type: 'band' })\n  .scale('y', { domain: [0, 50] });\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前仅有一种同名的图形 ",paraId:6,tocIndex:1},{value:"image",paraId:6,tocIndex:1},{value:"，下面描述一下所有的 ",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:" 配置项。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2},{value:"图片的 src 通道支持哪些数据类型？",paraId:8,tocIndex:3},{value:"最终的绘制都是调用 G 去渲染，所以支持的数据类型和 G 的原子 Image 图形保持一致，支持：",paraId:9,tocIndex:3},{value:"远程地址",paraId:9,tocIndex:3},{value:"、",paraId:9,tocIndex:3},{value:"base64",paraId:9,tocIndex:3},{value:"、",paraId:9,tocIndex:3},{value:"blob",paraId:9,tocIndex:3},{value:"、",paraId:9,tocIndex:3},{value:"file",paraId:9,tocIndex:3},{value:"。",paraId:9,tocIndex:3}]},53199:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(28067);const t=[{value:"通常用来绘制柱形图、条形图、饼图等，通过坐标系、比例尺、数据 Transform 等的变化，可以产生多种多样的可视化表现样式，是图形语法中，最常用的 Mark。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/bar_layered_transparent.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    format: 'csv',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.year === 2000,\n      },\n    ],\n  })\n  .transform({ type: 'groupX', y: 'sum' })\n  .encode('x', 'age')\n  .encode('y', 'people')\n  .encode('color', 'sex')\n  .scale('color', { type: 'ordinal', range: ['#ca8861', '#675193'] })\n  .axis('y', { labelFormatter: '~s' })\n  .style('fillOpacity', 0.7);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 interval 有以下几个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"rect",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"rect",paraId:5,tocIndex:1},{value:"绘制填充的矩形",paraId:5,tocIndex:1},{value:"hollow",paraId:5,tocIndex:1},{value:"绘制空心的矩形",paraId:5,tocIndex:1},{value:"funnel",paraId:5,tocIndex:1},{value:"绘制漏斗图",paraId:5,tocIndex:1},{value:"pyramid",paraId:5,tocIndex:1},{value:"绘制金字塔形状",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"minWidth",paraId:6,tocIndex:2},{value:"柱子的最小宽度，单位为像素",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:"-Infinity",paraId:6,tocIndex:2},{value:"maxWidth",paraId:6,tocIndex:2},{value:"柱子的最大宽度，单位为像素",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:"Infinity",paraId:6,tocIndex:2},{value:"minHeight",paraId:6,tocIndex:2},{value:"柱子的最小高度，单位为像素",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:"-Infinity",paraId:6,tocIndex:2},{value:"radius",paraId:6,tocIndex:2},{value:"外层矩形的四个圆角大小",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopLeft",paraId:6,tocIndex:2},{value:"外层左上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopRight",paraId:6,tocIndex:2},{value:"外层右上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomRight",paraId:6,tocIndex:2},{value:"外层右下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomLeft",paraId:6,tocIndex:2},{value:"外层左下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"innerRadius",paraId:6,tocIndex:2},{value:"内层矩形的四个圆角大小",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"innerRadiusTopLeft",paraId:6,tocIndex:2},{value:"内层左上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"innerRadiusTopRight",paraId:6,tocIndex:2},{value:"内层右上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"innerRadiusBottomRight",paraId:6,tocIndex:2},{value:"内层右下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"innerRadiusBottomLeft",paraId:6,tocIndex:2},{value:"内层左下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"inset",paraId:6,tocIndex:2},{value:"矩形四个方向的内边距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetLeft",paraId:6,tocIndex:2},{value:"左边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetRight",paraId:6,tocIndex:2},{value:"右边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetBottom",paraId:6,tocIndex:2},{value:"下面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetTop",paraId:6,tocIndex:2},{value:"上面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"和 ",paraId:7,tocIndex:3},{value:"rect",paraId:7,tocIndex:3},{value:" 配置相同。",paraId:7,tocIndex:3},{value:"和 ",paraId:8,tocIndex:4},{value:"rect",paraId:8,tocIndex:4},{value:" 配置相同。",paraId:8,tocIndex:4},{value:"和 ",paraId:9,tocIndex:5},{value:"rect",paraId:9,tocIndex:5},{value:" 配置相同。",paraId:9,tocIndex:5},{value:"怎么绘制圆角的柱形图",paraId:10,tocIndex:6},{value:"使用 ",paraId:11,tocIndex:6},{value:"radius",paraId:11,tocIndex:6},{value:" 样式配置即可。",paraId:11,tocIndex:6},{value:"chart\n  .interval()\n  // ...\n  .style('radius', 4);\n",paraId:12,tocIndex:6}]},88962:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(20848);const t=[{value:"根据一系列的点，绘制折线，通常用来绘制折线图，最常用的 mark 之一。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 line 有以下几个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"line",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"line",paraId:5,tocIndex:1},{value:"绘制直线连接的折线图",paraId:5,tocIndex:1},{value:"smooth",paraId:5,tocIndex:1},{value:"绘制平滑曲线的折线图",paraId:5,tocIndex:1},{value:"vh",paraId:5,tocIndex:1},{value:"绘制阶梯折线图，先竖线后横线连接",paraId:5,tocIndex:1},{value:"hv",paraId:5,tocIndex:1},{value:"绘制阶梯折线图，先横线后竖线连接",paraId:5,tocIndex:1},{value:"hvh",paraId:5,tocIndex:1},{value:"绘制阶梯折线图，竖横竖，中点连接",paraId:5,tocIndex:1},{value:"trail",paraId:5,tocIndex:1},{value:"绘制轨迹，类似一个笔迹",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"connect",paraId:6,tocIndex:2},{value:"是否连接空值",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"connect[Style]",paraId:6,tocIndex:2},{value:"connector 对应的属性样式",paraId:6,tocIndex:2},{value:"和对应 ",paraId:6,tocIndex:2},{value:"style",paraId:6,tocIndex:2},{value:" 保持一致",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"defined",paraId:6,tocIndex:2},{value:"决定数据是否为空值",paraId:6,tocIndex:2},{value:"(v: any) = boolean",paraId:6,tocIndex:2},{value:"!(NaN || null || undefine)",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"和 ",paraId:7,tocIndex:3},{value:"line",paraId:7,tocIndex:3},{value:" 配置相同。",paraId:7,tocIndex:3},{value:"和 ",paraId:8,tocIndex:4},{value:"line",paraId:8,tocIndex:4},{value:" 配置相同。",paraId:8,tocIndex:4},{value:"和 ",paraId:9,tocIndex:5},{value:"line",paraId:9,tocIndex:5},{value:" 配置相同。",paraId:9,tocIndex:5},{value:"和 ",paraId:10,tocIndex:6},{value:"line",paraId:10,tocIndex:6},{value:" 配置相同。",paraId:10,tocIndex:6}]},18155:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(84427);const t=[{value:"指定 ",paraId:0},{value:"x",paraId:0},{value:" 通道来绘制垂直于 x 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_histogram_global_mean.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  transform: [{\n    type: 'filter',\n    callback: (d) => d[IMDB Rating] > 0,\n  }],\n});\n\nchart\n  .rect()\n  .transform({ type: 'binX', y: 'count', thresholds: 9 })\n  .encode('x', 'IMDB Rating')\n  .scale('y', { domainMax: 1000 })\n  .style('inset', 1);\n\nchart\n  .lineX()\n  .transform({ type: 'groupColor', y: 'mean' })\n  .encode('x', 'IMDB Rating')\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 5);\n\nchart.render();\n\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 lineX 只有一种 ",paraId:4,tocIndex:1},{value:"line",paraId:4,tocIndex:1},{value:" 的 shape 图形。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"fill",paraId:5,tocIndex:2},{value:"图形的填充色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"fillOpacity",paraId:5,tocIndex:2},{value:"图形的填充透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"stroke",paraId:5,tocIndex:2},{value:"图形的描边",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"strokeOpacity",paraId:5,tocIndex:2},{value:"描边透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineWidth",paraId:5,tocIndex:2},{value:"图形描边的宽度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineDash",paraId:5,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:5,tocIndex:2},{value:"[number,number]",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<[number, number]>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"opacity",paraId:5,tocIndex:2},{value:"图形的整体透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowColor",paraId:5,tocIndex:2},{value:"图形阴影颜色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowBlur",paraId:5,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetX",paraId:5,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetY",paraId:5,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"cursor",paraId:5,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"'default'",paraId:5,tocIndex:2}]},67120:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(1353);const t=[{value:"指定 ",paraId:0},{value:"y",paraId:0},{value:" 通道来绘制垂直于 y 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_precipitation_mean.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n});\n\nchart\n  .interval()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('x', (d) => new Date(d.date).getUTCMonth())\n  .encode('y', 'precipitation')\n  .scale('y', { tickCount: 5, domainMax: 6 });\n\nchart\n  .lineY()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('y', 'precipitation')\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 2);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 lineY 只有一种 ",paraId:4,tocIndex:1},{value:"line",paraId:4,tocIndex:1},{value:" 的 shape 图形。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"fill",paraId:5,tocIndex:2},{value:"图形的填充色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"fillOpacity",paraId:5,tocIndex:2},{value:"图形的填充透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"stroke",paraId:5,tocIndex:2},{value:"图形的描边",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"strokeOpacity",paraId:5,tocIndex:2},{value:"描边透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineWidth",paraId:5,tocIndex:2},{value:"图形描边的宽度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineDash",paraId:5,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:5,tocIndex:2},{value:"[number,number]",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<[number, number]>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"opacity",paraId:5,tocIndex:2},{value:"图形的整体透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowColor",paraId:5,tocIndex:2},{value:"图形阴影颜色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowBlur",paraId:5,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetX",paraId:5,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetY",paraId:5,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"cursor",paraId:5,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"'default'",paraId:5,tocIndex:2}]},90388:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(61166);const t=[{value:"Link",paraId:0},{value:" 标记使用两个用 (x, y) 定位的点，绘制一条带方向的直线。通过指定 ",paraId:0},{value:"x",paraId:0},{value:"，",paraId:0},{value:"y",paraId:0},{value:" 通道为长度为 2 的字段数组即可。",paraId:0},{value:"/**\n * A recreation of this demo: https://observablehq.com/@observablehq/plot-link?collection=@observablehq/plot\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .link()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n  })\n  .encode('x', ['POP_1980', 'POP_2015'])\n  .encode('y', ['R90_10_1980', 'R90_10_2015'])\n  .encode('color', (d) => d.R90_10_2015 - d.R90_10_1980)\n  .scale('x', { type: 'log' })\n  .style('arrowSize', 6)\n  .axis('x', { labelFormatter: '~s', label: { autoHide: true } })\n  .legend(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前仅有一种同名的图形 ",paraId:4,tocIndex:1},{value:"link",paraId:4,tocIndex:1},{value:"，下面描述一下所有的 ",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:" 配置项。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"arrowSize",paraId:5,tocIndex:2},{value:"箭头图标的大小，可以指定像素值、也可以指定箭头长度的相对值。",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"'40%'",paraId:5,tocIndex:2},{value:"fill",paraId:5,tocIndex:2},{value:"图形的填充色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"fillOpacity",paraId:5,tocIndex:2},{value:"图形的填充透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"stroke",paraId:5,tocIndex:2},{value:"图形的描边",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"strokeOpacity",paraId:5,tocIndex:2},{value:"描边透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineWidth",paraId:5,tocIndex:2},{value:"图形描边的宽度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineDash",paraId:5,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:5,tocIndex:2},{value:"[number,number]",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<[number, number]>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"opacity",paraId:5,tocIndex:2},{value:"图形的整体透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowColor",paraId:5,tocIndex:2},{value:"图形阴影颜色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowBlur",paraId:5,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetX",paraId:5,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetY",paraId:5,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"cursor",paraId:5,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"'default'",paraId:5,tocIndex:2},{value:"怎么指定箭头图标的长度？",paraId:6,tocIndex:3},{value:"有两种指定箭头图标长度的方式，一种是通过填写像素值，比如 ",paraId:7,tocIndex:3},{value:"40",paraId:7,tocIndex:3},{value:"，来指定为固定长度；另外一种是通过指定一个百分比，比如 ",paraId:7,tocIndex:3},{value:"30%",paraId:7,tocIndex:3},{value:"，来指定参考箭头长度的相对长度。默认值为 ",paraId:7,tocIndex:3},{value:"40%",paraId:7,tocIndex:3},{value:"。如下示例：",paraId:7,tocIndex:3},{value:"chart\n  .link()\n  // ...\n  .style({\n    arrowSize: 40,\n    // arrowSize: '30%',\n  });\n",paraId:8,tocIndex:3}]},96934:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(92427);const t=[{value:"水波图",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .liquid()\n  .data(0.3)\n  .style({\n    outlineBorder: 4,\n    outlineDistance: 8,\n    waveLength: 128,\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"data",paraId:2,tocIndex:1},{value:"数据",paraId:2,tocIndex:1},{value:"GaugeData",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"对水波图中的三个部分",paraId:3,tocIndex:2},{value:"属性",paraId:4,tocIndex:2},{value:"描述",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"默认值",paraId:4,tocIndex:2},{value:"outlineBorder",paraId:4,tocIndex:2},{value:"边框宽度",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"outlineDistance",paraId:4,tocIndex:2},{value:"内间距",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"outlineStroke",paraId:4,tocIndex:2},{value:"边框颜色",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"waveLength",paraId:4,tocIndex:2},{value:"波长",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"backgroundFill",paraId:4,tocIndex:2},{value:"背景颜色",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"textFill",paraId:4,tocIndex:2},{value:"文本颜色",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"textFontSize",paraId:4,tocIndex:2},{value:"文本大小",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"目前 liquid 有以下几个内置 shape 图形，默认为 ",paraId:5,tocIndex:3},{value:"circle",paraId:5,tocIndex:3},{value:"。",paraId:5,tocIndex:3},{value:"图形",paraId:6,tocIndex:3},{value:"描述",paraId:6,tocIndex:3},{value:"示例",paraId:6,tocIndex:3},{value:"rect",paraId:6,tocIndex:3},{value:"矩形",paraId:6,tocIndex:3},{value:"circle",paraId:6,tocIndex:3},{value:"圆形",paraId:6,tocIndex:3},{value:"pin",paraId:6,tocIndex:3},{value:"水滴",paraId:6,tocIndex:3},{value:"triangle",paraId:6,tocIndex:3},{value:"三角",paraId:6,tocIndex:3},{value:"为自定义 shape 形状提供回调, ",paraId:7,tocIndex:3},{value:"(x, y, r, w, h) => string",paraId:7,tocIndex:3},{value:", 传入参数分别为 x y 中心点坐标， r 图表可画圆最大半径， w h 图表可画宽高。",paraId:7,tocIndex:3}]},85636:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(25510);const t=[{value:"主要用于绘制散点图，利用点的粒度来分析数据的分布情况。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  })\n  .encode('x', 'GDP')\n  .encode('y', 'LifeExpectancy')\n  .encode('size', 'Population')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('size', { type: 'log', range: [4, 20] })\n  .style('fillOpacity', 0.3)\n  .style('lineWidth', 1);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 point 有以下几个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"hollow",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"hollow",paraId:5,tocIndex:1},{value:"绘制空心圆",paraId:5,tocIndex:1},{value:"hollowDiamond",paraId:5,tocIndex:1},{value:"绘制空心钻石",paraId:5,tocIndex:1},{value:"hollowHexagon",paraId:5,tocIndex:1},{value:"绘制空心六边形",paraId:5,tocIndex:1},{value:"hollowSquare",paraId:5,tocIndex:1},{value:"绘制空心方块",paraId:5,tocIndex:1},{value:"hollowTriangleDown",paraId:5,tocIndex:1},{value:"绘制空心向下三角形",paraId:5,tocIndex:1},{value:"hollowTriangle",paraId:5,tocIndex:1},{value:"绘制空心三角形",paraId:5,tocIndex:1},{value:"hollowBowtie",paraId:5,tocIndex:1},{value:"绘制空心蝴蝶结",paraId:5,tocIndex:1},{value:"point",paraId:5,tocIndex:1},{value:"绘制圆",paraId:5,tocIndex:1},{value:"plus",paraId:5,tocIndex:1},{value:"绘制加号",paraId:5,tocIndex:1},{value:"diamond",paraId:5,tocIndex:1},{value:"绘制钻石",paraId:5,tocIndex:1},{value:"square",paraId:5,tocIndex:1},{value:"绘制方块",paraId:5,tocIndex:1},{value:"triangle",paraId:5,tocIndex:1},{value:"绘制三角形",paraId:5,tocIndex:1},{value:"triangleDown",paraId:5,tocIndex:1},{value:"绘制向下三角形",paraId:5,tocIndex:1},{value:"hexagon",paraId:5,tocIndex:1},{value:"绘制六边形",paraId:5,tocIndex:1},{value:"cross",paraId:5,tocIndex:1},{value:"绘制交叉符号",paraId:5,tocIndex:1},{value:"bowtie",paraId:5,tocIndex:1},{value:"绘制蝴蝶结",paraId:5,tocIndex:1},{value:"hyphen",paraId:5,tocIndex:1},{value:"绘制连字符",paraId:5,tocIndex:1},{value:"line",paraId:5,tocIndex:1},{value:"绘制竖线",paraId:5,tocIndex:1},{value:"tick",paraId:5,tocIndex:1},{value:"绘制 tick",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"其他的 point 图形配置项和 ",paraId:7,tocIndex:2},{value:"hollow",paraId:7,tocIndex:2},{value:" 一致。",paraId:7,tocIndex:2}]},7736:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(83648);const t=[{value:"Polygon 利用一组 (x, y) 数据点，来连接形成一个闭合的图形，一般都是结合社区上的可视化布局算法计算之后的数据进行可视化展示。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport * as d3 from 'd3-voronoi';\n\nconst layout = (data) => {\n  return d3\n    .voronoi()\n    .x((d) => d.x)\n    .y((d) => d.y)\n    .extent([\n      [0, 0],\n      [800, 600],\n    ])\n    .polygons(data)\n    .map((p) =>\n      Object.assign({}, p, {\n        x: p.map((pi) => pi[0]),\n        y: p.map((pi) => pi[1]),\n      }),\n    );\n};\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 0,\n  paddingRight: 0,\n  paddingTop: 0,\n  paddingBottom: 0,\n});\n\nchart\n  .polygon()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/voronoi.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: layout,\n      },\n    ],\n  })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', (d) => d.data.value)\n  .scale('x', { domain: [0, 800] })\n  .scale('y', { domain: [0, 600] })\n  .axis(false)\n  .style('stroke', '#fff')\n  .style('fillOpacity', 0.65);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 polygon 有 2 个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"polygon",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"polygon",paraId:5,tocIndex:1},{value:"绘制一个闭合的多边形",paraId:5,tocIndex:1},{value:"ribbon",paraId:5,tocIndex:1},{value:"绘制一个彩带，需要 p0，p1，p2，p3 四个点，p0 p1 为起点，p2 p3 为终点",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"arrowSize",paraId:6,tocIndex:2},{value:"箭头图标的大小，可以指定像素值、也可以指定箭头长度的相对值。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:"'40%'",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"属性",paraId:7,tocIndex:3},{value:"描述",paraId:7,tocIndex:3},{value:"类型",paraId:7,tocIndex:3},{value:"默认值",paraId:7,tocIndex:3},{value:"arrowSize",paraId:7,tocIndex:3},{value:"箭头图标的大小，可以指定像素值、也可以指定箭头长度的相对值。",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"'40%'",paraId:7,tocIndex:3},{value:"fill",paraId:7,tocIndex:3},{value:"图形的填充色",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<string>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"fillOpacity",paraId:7,tocIndex:3},{value:"图形的填充透明度",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"stroke",paraId:7,tocIndex:3},{value:"图形的描边",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<string>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"lineWidth",paraId:7,tocIndex:3},{value:"图形描边的宽度",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"lineDash",paraId:7,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:3},{value:"[number,number]",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<[number, number]>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"strokeOpacity",paraId:7,tocIndex:3},{value:"描边透明度",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"opacity",paraId:7,tocIndex:3},{value:"图形的整体透明度",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"shadowColor",paraId:7,tocIndex:3},{value:"图形阴影颜色",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<string>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"shadowBlur",paraId:7,tocIndex:3},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"shadowOffsetX",paraId:7,tocIndex:3},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"shadowOffsetY",paraId:7,tocIndex:3},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"cursor",paraId:7,tocIndex:3},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<string>",paraId:7,tocIndex:3},{value:"'default'",paraId:7,tocIndex:3}]},24143:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12647);const t=[{value:"使用一组 ",paraId:0},{value:"x",paraId:0},{value:"(x1, x2) 和一组 ",paraId:0},{value:"y",paraId:0},{value:"(y1, y2) 来定位一个矩形区域，常用于绘制辅助背景区域。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/0b37279d-1674-42b4-b285-29683747ad9a.json',\n});\n\nchart.lineX().data([0]);\nchart.lineY().data([0]);\n\nchart\n  .range()\n  .data([\n    { x: [-25, 0], y: [-30, 0], region: '1' },\n    { x: [-25, 0], y: [0, 20], region: '2' },\n    { x: [0, 5], y: [-30, 0], region: '2' },\n    { x: [0, 5], y: [0, 20], region: '1' },\n  ])\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'region')\n  .scale('color', {\n    range: ['#d8d0c0', '#a3dda1'],\n    independent: true,\n    guide: null,\n  })\n  .style('fillOpacity', 0.2);\n\nchart\n  .point()\n  .encode('x', 'change in female rate')\n  .encode('y', 'change in male rate')\n  .encode('size', 'pop')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('color', {\n    range: ['#ffd500', '#82cab2', '#193442', '#d18768', '#7e827a'],\n  })\n  .axis('x', { title: false })\n  .axis('y', { title: false })\n  .scale('x', { domain: [-25, 5] })\n  .scale('y', { domain: [-30, 20] })\n  .scale('size', { range: [4, 30] })\n  .style('stroke', '#bbb')\n  .style('fillOpacity', 0.8);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 range 只有一种同名的 shape 图形。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"fill",paraId:5,tocIndex:2},{value:"图形的填充色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"fillOpacity",paraId:5,tocIndex:2},{value:"图形的填充透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"stroke",paraId:5,tocIndex:2},{value:"图形的描边",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"strokeOpacity",paraId:5,tocIndex:2},{value:"描边透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineWidth",paraId:5,tocIndex:2},{value:"图形描边的宽度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineDash",paraId:5,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:5,tocIndex:2},{value:"[number,number]",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<[number, number]>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"opacity",paraId:5,tocIndex:2},{value:"图形的整体透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowColor",paraId:5,tocIndex:2},{value:"图形阴影颜色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowBlur",paraId:5,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetX",paraId:5,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetY",paraId:5,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"cursor",paraId:5,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"'default'",paraId:5,tocIndex:2}]},26156:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(67568);const t=[{value:"使用一组 ",paraId:0},{value:"x",paraId:0},{value:"(x1, x2) 来定位一个绘制于 x 轴的矩形区域，常用于对特定区域进行高亮显示。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_falkensee.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 360,\n  paddingLeft: 60,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/year-population.json',\n});\n\nchart\n  .rangeX()\n  .data([\n    { year: [new Date('1933'), new Date('1945')], event: 'Nazi Rule' },\n    { year: [new Date('1948'), new Date('1989')], event: 'GDR (East Germany)' },\n  ])\n  .encode('x', 'year')\n  .encode('color', 'event')\n  .scale('color', { independent: true, range: ['#FAAD14', '#30BF78'] })\n  .style('fillOpacity', 0.75);\n\nchart\n  .line()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'population')\n  .encode('color', '#333');\n\nchart\n  .point()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'population')\n  .encode('color', '#333')\n  .style('lineWidth', 1.5);\n\nchart.render();\n\n",paraId:1,tocIndex:0},{value:"此外，rangeX 还提供了简便写法：",paraId:2,tocIndex:0},{value:"chart\n  .rangeX()\n  .data([[new Date('2010'), new Date('2011')]])\n  .encode('x', d => d);  \n\n// it can be simplified as follows:\nchart\n  .rangeX()\n  .data([new Date('2010'), new Date('2011')]);\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前 rangeX 只有 range 一种 shape 图形。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2}]},55890:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(41149);const t=[{value:"使用一组 ",paraId:0},{value:"y",paraId:0},{value:"(y1, y2) 来定位一个绘制于 y 轴的矩形区域，常用于对特定区域进行高亮显示。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  })\n  .encode('x', 'height')\n  .encode('y', 'weight')\n  .encode('color', 'gender');\n\nchart\n  .rangeY()\n  .data([{ y: [54, 72] }])\n  .encode('y', 'y');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"此外，rangeY 还提供了简便写法：",paraId:2,tocIndex:0},{value:"chart\n  .rangeY()\n  .data([[54, 60], [65, 72]])\n  .encode('y', d => d);\n\n// it can be simplified as follows:\nchart\n  .rangeY()\n  .data([[54, 60], [65, 72]]);\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前 rangeY 只有 range 一种 shape 图形。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2}]},52174:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(64327);const t=[{value:"使用两组 x，两组 y 来定位一个矩形区域，常用于直方图、矩阵树图等。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'data/athletes.csv',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'sex')\n  .transform([{ type: 'bin', opacity: 'count' }])\n  .style('inset', 0.5)\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 rect 有以下几个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"rect",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"rect",paraId:5,tocIndex:1},{value:"矩形",paraId:5,tocIndex:1},{value:"hollow",paraId:5,tocIndex:1},{value:"空心矩形",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"radius",paraId:6,tocIndex:2},{value:"矩形的四个圆角大小",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopLeft",paraId:6,tocIndex:2},{value:"左上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopRight",paraId:6,tocIndex:2},{value:"右上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomRight",paraId:6,tocIndex:2},{value:"右下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomLeft",paraId:6,tocIndex:2},{value:"左下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"inset",paraId:6,tocIndex:2},{value:"矩形四个方向的内边距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetLeft",paraId:6,tocIndex:2},{value:"左边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetRight",paraId:6,tocIndex:2},{value:"右边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetBottom",paraId:6,tocIndex:2},{value:"下面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetTop",paraId:6,tocIndex:2},{value:"上面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"和 ",paraId:7,tocIndex:3},{value:"rect",paraId:7,tocIndex:3},{value:" 配置相同。",paraId:7,tocIndex:3}]},92534:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(6953);const t=[{value:"shape",paraId:0},{value:" 是 G2 比较特殊的一个 mark，它通常用来在图表上绘制一个静态的自定义图形，灵活性非常高，当然技术成本也会高一些，需要了解 ",paraId:0},{value:"G",paraId:0},{value:" 的 API 去绘制图形。",paraId:0},{value:"上图中的「数据保密」的徽章图案就是使用 ",paraId:1,tocIndex:0},{value:"shape",paraId:1,tocIndex:0},{value:" 绘制。在绘制图形时，可以从图表上下文中获取 ",paraId:1,tocIndex:0},{value:"document",paraId:1,tocIndex:0},{value:" 对象，随后使用 ",paraId:1,tocIndex:0},{value:"document.createElement",paraId:1,tocIndex:0},{value:" 创建基础图形。在下面的示例中我们创建了一个 ",paraId:1,tocIndex:0},{value:"Circle",paraId:1,tocIndex:0},{value:"。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nfunction point(style) {\n  const { x, y, fill } = style;\n\n  const {\n    canvas: { document },\n  } = chart.getContext();\n\n  return document.createElement('circle', {\n    style: {\n      cx: x,\n      cy: y,\n      fill,\n    },\n  });\n}\n\nchart.shape().style({\n  x: '50%',\n  y: '50%',\n  fill: 'red',\n  render: point,\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"可以查看",paraId:3,tocIndex:0},{value:"图表徽章水印",paraId:4,tocIndex:0},{value:"具体示例。",paraId:3,tocIndex:0},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:"设置图形的位置 x，支持百分比（",paraId:5,tocIndex:1},{value:"'50%'",paraId:5,tocIndex:1},{value:"）和像素值（",paraId:5,tocIndex:1},{value:"200",paraId:5,tocIndex:1},{value:"）",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:"设置图形的位置 y，支持百分比（",paraId:5,tocIndex:1},{value:"'50%'",paraId:5,tocIndex:1},{value:"）和像素值（",paraId:5,tocIndex:1},{value:"200",paraId:5,tocIndex:1},{value:"）",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"render",paraId:5,tocIndex:1},{value:"对应的自定义渲染函数，函数需要返回 G 的 DisplayObject",paraId:5,tocIndex:1},{value:"(style: object) => DisplayObject",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"{ ...rest }",paraId:5,tocIndex:1},{value:"自定义图形的额外参数，都会作为 ",paraId:5,tocIndex:1},{value:"render",paraId:5,tocIndex:1},{value:" 函数的参数",paraId:5,tocIndex:1},{value:"object",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1}]},55453:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(23060);const t=[{value:"文字是传达信息最传统的方式，",paraId:0},{value:"Text",paraId:0},{value:" 标记具备有大量的视觉映射通道：",paraId:0},{value:"x",paraId:0},{value:"，",paraId:0},{value:"y",paraId:0},{value:"，",paraId:0},{value:"color",paraId:0},{value:"，",paraId:0},{value:"fontSize",paraId:0},{value:"，",paraId:0},{value:"rotate",paraId:0},{value:" 等，除此之外，还有大量的文本样式相关的配置，可以通过可视化映射的方式，让文本可视化具备有更强的表达性。一般用于几个场景：",paraId:0},{value:"文本可视化",paraId:1},{value:"数据的标注和辅助",paraId:1},{value:"绘制一个简单的柱形图，然后使用 ",paraId:2,tocIndex:0},{value:"Text",paraId:2,tocIndex:0},{value:" 标记去绘制数据标签，辅助看数。",paraId:2,tocIndex:0},{value:"/**\n * A recreation of this demo: https://observablehq.com/@d3/bar-chart\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n});\n\nchart\n  .interval()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' });\n\nchart\n  .text()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('text', 'frequency')\n  .style('fill', 'black')\n  .style('textAlign', 'center')\n  .style('dy', -5);\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前 area 有以下几个内置的 shape 图形，默认为 text。",paraId:6,tocIndex:1},{value:"图形",paraId:7,tocIndex:1},{value:"描述",paraId:7,tocIndex:1},{value:"示例",paraId:7,tocIndex:1},{value:"text",paraId:7,tocIndex:1},{value:"绘制文本",paraId:7,tocIndex:1},{value:"badge",paraId:7,tocIndex:1},{value:"绘制带有标记的文本，形如一个气球",paraId:7,tocIndex:1},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"fontSize",paraId:8,tocIndex:2},{value:"文字大小",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"fontFamily",paraId:8,tocIndex:2},{value:"文字字体",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"fontWeight",paraId:8,tocIndex:2},{value:"字体粗细",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"lineHeight",paraId:8,tocIndex:2},{value:"文字的行高",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"textAlign",paraId:8,tocIndex:2},{value:"设置文本内容的当前对齐方式, 支持的属性：",paraId:8,tocIndex:2},{value:"center",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"end",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"left",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"right",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"start",paraId:8,tocIndex:2},{value:"，默认值为",paraId:8,tocIndex:2},{value:"start",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"textBaseline",paraId:8,tocIndex:2},{value:"设置在绘制文本时使用的当前文本基线, 支持的属性:",paraId:8,tocIndex:2},{value:"top",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"middle",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"bottom",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"alphabetic",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"hanging",paraId:8,tocIndex:2},{value:"。默认值为",paraId:8,tocIndex:2},{value:"bottom",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"fill",paraId:8,tocIndex:2},{value:"图形的填充色",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"fillOpacity",paraId:8,tocIndex:2},{value:"图形的填充透明度",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"stroke",paraId:8,tocIndex:2},{value:"图形的描边",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"strokeOpacity",paraId:8,tocIndex:2},{value:"描边透明度",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"lineWidth",paraId:8,tocIndex:2},{value:"图形描边的宽度",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"lineDash",paraId:8,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:8,tocIndex:2},{value:"[number,number]",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<[number, number]>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"opacity",paraId:8,tocIndex:2},{value:"图形的整体透明度",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"shadowColor",paraId:8,tocIndex:2},{value:"图形阴影颜色",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"shadowBlur",paraId:8,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"shadowOffsetX",paraId:8,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"shadowOffsetY",paraId:8,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"cursor",paraId:8,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"'default'",paraId:8,tocIndex:2},{value:"除了 ",paraId:9,tocIndex:3},{value:"text",paraId:9,tocIndex:3},{value:" 的配置之外，还有以下配置。",paraId:9,tocIndex:3},{value:"属性",paraId:10,tocIndex:3},{value:"描述",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"默认值",paraId:10,tocIndex:3},{value:"markerSize",paraId:10,tocIndex:3},{value:"标记大小",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"24",paraId:10,tocIndex:3},{value:"markerFill",paraId:10,tocIndex:3},{value:"标记填充色",paraId:10,tocIndex:3},{value:"string",paraId:10,tocIndex:3},{value:"markerFillOpacity",paraId:10,tocIndex:3},{value:"标记填充色透明度",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"markerStroke",paraId:10,tocIndex:3},{value:"标记描边色",paraId:10,tocIndex:3},{value:"string",paraId:10,tocIndex:3},{value:"markerStrokeOpacity",paraId:10,tocIndex:3},{value:"标记描边色 透明度",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"怎么指定箭头图标的长度？",paraId:11,tocIndex:4},{value:"有两种指定箭头图标长度的方式，一种是通过填写像素值，比如 ",paraId:12,tocIndex:4},{value:"40",paraId:12,tocIndex:4},{value:"，来指定为固定长度；另外一种是通过指定一个百分比，比如 ",paraId:12,tocIndex:4},{value:"30%",paraId:12,tocIndex:4},{value:"，来指定参考箭头长度的相对长度。默认值为 ",paraId:12,tocIndex:4},{value:"40%",paraId:12,tocIndex:4},{value:"。如下示例：",paraId:12,tocIndex:4},{value:"chart\n  .vector()\n  // ...\n  .shape('vector')\n  .style({\n    arrowSize: 40,\n    // arrowSize: '30%',\n  });\n",paraId:13,tocIndex:4}]},29335:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(74572);const t=[{value:"Vector 图形是将数据映射成为",paraId:0},{value:"箭头",paraId:0},{value:"的样式去可视化展示，通过控制箭头的位置、大小、颜色、角度等信息，去可视化一些向量场数据。它具备有以下视觉通道：",paraId:0},{value:"x",paraId:1},{value:"：水平方向的位置，对 x 轴刻度对应",paraId:1},{value:"y",paraId:1},{value:"：垂直方向的位置，对 y 轴刻度对应，位置锚点定位为箭头的中心",paraId:1},{value:"color",paraId:1},{value:"：箭头的颜色",paraId:1},{value:"size",paraId:1},{value:"：箭头的长度",paraId:1},{value:"rotate",paraId:1},{value:"：箭头的旋转角度，起始角度为直角坐标系中的 ",paraId:1},{value:"右边",paraId:1},{value:"，旋转方向为 ",paraId:1},{value:"顺时针",paraId:1},{value:"Vector 图形标记会将数据通过上述通道映射成向量数据：",paraId:2},{value:"[start, end]",paraId:2},{value:"。",paraId:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .vector()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/F5VcgnqRku/wind.json',\n  })\n  .encode('x', 'longitude')\n  .encode('y', 'latitude')\n  .encode('rotate', ({ u, v }) => (Math.atan2(v, u) * 180) / Math.PI)\n  .encode('size', ({ u, v }) => Math.hypot(v, u))\n  .encode('color', ({ u, v }) => Math.hypot(v, u))\n  .scale('size', { range: [6, 20] })\n  .scale('color', { type: 'sequential', palette: 'viridis' })\n  .axis('x', { grid: false })\n  .axis('y', { grid: false })\n  .legend(false);\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前仅有一种同名的图形 ",paraId:6,tocIndex:1},{value:"vector",paraId:6,tocIndex:1},{value:"，下面描述一下所有的 ",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:" 配置项。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"arrowSize",paraId:7,tocIndex:2},{value:"箭头图标的大小，可以指定像素值、也可以指定箭头长度的相对值。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"'40%'",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2},{value:"怎么指定箭头图标的长度？",paraId:8,tocIndex:3},{value:"有两种指定箭头图标长度的方式，一种是通过填写像素值，比如 ",paraId:9,tocIndex:3},{value:"40",paraId:9,tocIndex:3},{value:"，来指定为固定长度；另外一种是通过指定一个百分比，比如 ",paraId:9,tocIndex:3},{value:"30%",paraId:9,tocIndex:3},{value:"，来指定参考箭头长度的相对长度。默认值为 ",paraId:9,tocIndex:3},{value:"40%",paraId:9,tocIndex:3},{value:"。如下示例：",paraId:9,tocIndex:3},{value:"chart\n  .vector()\n  // ...\n  .shape('vector')\n  .style({\n    arrowSize: 40,\n    // arrowSize: '30%',\n  });\n",paraId:10,tocIndex:3}]},5429:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(43092);const t=[{value:"词云图能通过形成“关键词云层”或“关键词渲染”，对文本中出现频率较高的“关键词”在视觉上的突出，便于读者找到关键信息。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 0,\n});\n\nchart\n  .wordCloud()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  })\n  .layout({\n    spiral: 'rectangular',\n  })\n  .encode('color', 'text')\n  .axis(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"ForceTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"labels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"内间距",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"1",paraId:3,tocIndex:2},{value:"rotate",paraId:3,tocIndex:2},{value:"文字旋转角度",paraId:3,tocIndex:2},{value:"number | (word => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"random",paraId:3,tocIndex:2},{value:"随机方式",paraId:3,tocIndex:2},{value:"number | (word => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"spiral",paraId:3,tocIndex:2},{value:"外观图形",paraId:3,tocIndex:2},{value:"'archimedean' | 'rectangular'",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"imageMask",paraId:3,tocIndex:2},{value:"图片蒙层",paraId:3,tocIndex:2},{value:"'HTMLImageElement | string",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3}]},46845:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(44581);const t=[{value:"G2 是一个简洁的、渐进式的可视化语法。文档将按照下面的顺序去分别介绍每一个模块，你可以把它当做一个字典去搜索和查询。",paraId:0},{value:"Data",paraId:1},{value:"获得和转换数据。",paraId:2,tocIndex:0},{value:"fetch",paraId:3,tocIndex:0},{value:" - 获取远程数据。",paraId:4,tocIndex:0},{value:"inline",paraId:5,tocIndex:0},{value:" - 获取内联数据。",paraId:4,tocIndex:0},{value:"下面是支持的数据转换：",paraId:6,tocIndex:0},{value:"sort",paraId:7,tocIndex:0},{value:" - 将数据按照指定的比较器字段排序。",paraId:8,tocIndex:0},{value:"sortBy",paraId:9,tocIndex:0},{value:" - 将数据按照指定的字段排序。",paraId:8,tocIndex:0},{value:"pick",paraId:10,tocIndex:0},{value:" - 从数据中挑选出部分字段组成新的数据。",paraId:8,tocIndex:0},{value:"rename",paraId:11,tocIndex:0},{value:" - 重命名数据中的一些字段。",paraId:8,tocIndex:0},{value:"fold",paraId:12,tocIndex:0},{value:" - 将多个字段打包成按照指定的 key value 组织形式。",paraId:8,tocIndex:0},{value:"filter",paraId:13,tocIndex:0},{value:" - 对数据进行指定条件的过滤。",paraId:8,tocIndex:0},{value:"slice",paraId:14,tocIndex:0},{value:" - 对数据进行分片，获得子集。",paraId:8,tocIndex:0},{value:"map",paraId:15,tocIndex:0},{value:" - 对数据进行映射，返回新的数组。",paraId:8,tocIndex:0},{value:"join",paraId:16,tocIndex:0},{value:" - 类似 SQL 的方式，将两份数据连接到一起。",paraId:8,tocIndex:0},{value:"custom",paraId:17,tocIndex:0},{value:" - 使用自定义的方式对数据进行变换。",paraId:8,tocIndex:0},{value:"kde",paraId:18,tocIndex:0},{value:" - 核密度处理算法。",paraId:8,tocIndex:0},{value:"log",paraId:19,tocIndex:0},{value:" - 用于开发者调试，打印当前数据处理片面的数据。",paraId:8,tocIndex:0},{value:"绘制数据驱动的图形。",paraId:20,tocIndex:1},{value:"interval",paraId:21,tocIndex:1},{value:" - 通常用来绘制柱、条形图，饼图等相关图表。",paraId:22,tocIndex:1},{value:"point",paraId:23,tocIndex:1},{value:" - 主要用于绘制散点图，利用点的粒度来分析数据的分布情况。",paraId:22,tocIndex:1},{value:"line",paraId:24,tocIndex:1},{value:" - 根据一系列的点，绘制折线，通常用来绘制折线图。",paraId:22,tocIndex:1},{value:"area",paraId:25,tocIndex:1},{value:" - 通常用来绘制我们常见的面积图，通过填充，可以更好突出趋势堆积信息。",paraId:22,tocIndex:1},{value:"cell",paraId:26,tocIndex:1},{value:" - 根据 x, y 将空间划分成一个子空间，然后进行可视化绘制，常见于一些方块图，如日历图、聚合热力图等。",paraId:22,tocIndex:1},{value:"rect",paraId:27,tocIndex:1},{value:" - 使用两组 x，两组 y 来定位一个矩形区域，常用于直方图、矩阵树图等。",paraId:22,tocIndex:1},{value:"link",paraId:28,tocIndex:1},{value:" - 标记使用两个用 (x, y) 定位的点，绘制一条带方向的直线。通过指定 ",paraId:22,tocIndex:1},{value:"x",paraId:22,tocIndex:1},{value:"，",paraId:22,tocIndex:1},{value:"y",paraId:22,tocIndex:1},{value:" 通道为长度为 2 的字段数组即可。",paraId:22,tocIndex:1},{value:"vector",paraId:29,tocIndex:1},{value:" - 用 ",paraId:22,tocIndex:1},{value:"start",paraId:22,tocIndex:1},{value:"，",paraId:22,tocIndex:1},{value:"end",paraId:22,tocIndex:1},{value:" 两个点来表示一个向量，通常用于绘制具备向量含义的数据，比如风向量场等。",paraId:22,tocIndex:1},{value:"box",paraId:30,tocIndex:1},{value:" - 用来绘制箱线图，通常用来展示一组数据分布情况的统计图。",paraId:22,tocIndex:1},{value:"boxplot",paraId:31,tocIndex:1},{value:" - 用来绘制箱线图，并且内置数据的聚合操作。",paraId:22,tocIndex:1},{value:"text",paraId:32,tocIndex:1},{value:" - 通过指定文本的样式通道，可以在画布上绘制和数据绑定的文本字符。",paraId:22,tocIndex:1},{value:"image",paraId:33,tocIndex:1},{value:" - 利用 ",paraId:22,tocIndex:1},{value:"src",paraId:22,tocIndex:1},{value:" 通道在画布上绘制图片。",paraId:22,tocIndex:1},{value:"shape",paraId:34,tocIndex:1},{value:" - 使用自定义函数灵活绘制自定义图形。",paraId:22,tocIndex:1},{value:"lineX",paraId:35,tocIndex:1},{value:" - 指定 ",paraId:22,tocIndex:1},{value:"x",paraId:22,tocIndex:1},{value:" 通道来绘制垂直于 x 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:22,tocIndex:1},{value:"lineY",paraId:36,tocIndex:1},{value:" - 指定 ",paraId:22,tocIndex:1},{value:"y",paraId:22,tocIndex:1},{value:" 通道来绘制垂直于 y 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:22,tocIndex:1},{value:"range",paraId:37,tocIndex:1},{value:" - 使用一组 ",paraId:22,tocIndex:1},{value:"x",paraId:22,tocIndex:1},{value:"(x1, x2) 和一组 ",paraId:22,tocIndex:1},{value:"y",paraId:22,tocIndex:1},{value:"(y1, y2) 来定位一个矩形区域，常用于绘制高亮指定区域的辅助区域。",paraId:22,tocIndex:1},{value:"rangeX",paraId:38,tocIndex:1},{value:" - 使用一组 ",paraId:22,tocIndex:1},{value:"x",paraId:22,tocIndex:1},{value:"(x1, x2) 来定位一个垂直于 x 轴的矩形区域，常用于绘制高亮指定区域的辅助区域。",paraId:22,tocIndex:1},{value:"rangeY",paraId:39,tocIndex:1},{value:" - 使用一组 ",paraId:22,tocIndex:1},{value:"y",paraId:22,tocIndex:1},{value:"(y1, y2) 来定位一个垂直于 y 轴的矩形区域，常用于绘制高亮指定区域的辅助区域。",paraId:22,tocIndex:1},{value:"polygon",paraId:40,tocIndex:1},{value:" - 利用多组 (x, y) 数据点，在画布中绘制闭合的多边形，通常结合一些社区布局算法使用。",paraId:22,tocIndex:1},{value:"wordCloud",paraId:41,tocIndex:1},{value:" - 绘制词云图。",paraId:22,tocIndex:1},{value:"density",paraId:42,tocIndex:1},{value:" - 渲染核密度数据，多用于小提琴图。",paraId:22,tocIndex:1},{value:"heatmap",paraId:43,tocIndex:1},{value:" - 接受热力数据，多用于绘制热力图。",paraId:22,tocIndex:1},{value:"派生数据。",paraId:44,tocIndex:2},{value:"bin",paraId:45,tocIndex:2},{value:" - 对连续的 x 和 连续的 y 通道进行分箱，并且对通道根据指定的 reducer 进行聚合。",paraId:46,tocIndex:2},{value:"binX",paraId:47,tocIndex:2},{value:" - 对 x 通道进行分箱，如果希望对 y 通道进行分箱，使用 binX + transpose 坐标系。",paraId:46,tocIndex:2},{value:"diffY",paraId:48,tocIndex:2},{value:" - 对 y 和 y1 通道求差集。",paraId:46,tocIndex:2},{value:"dodgeX",paraId:49,tocIndex:2},{value:" - 生成 series 通道值为 color 通道的值，根据 series 通道实现分组效果。",paraId:46,tocIndex:2},{value:"flexX",paraId:50,tocIndex:2},{value:" - 根据指定通道设置 x 比例尺的 flex 属性，实现不等宽矩形的效果。",paraId:46,tocIndex:2},{value:"group",paraId:51,tocIndex:2},{value:" - 对离散的 x 和 连续的 y 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:46,tocIndex:2},{value:"groupColor",paraId:52,tocIndex:2},{value:" - 对离散的 color 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:46,tocIndex:2},{value:"groupX",paraId:53,tocIndex:2},{value:" - 对离散的 x 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:46,tocIndex:2},{value:"groupY",paraId:54,tocIndex:2},{value:" - 对离散的 y 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:46,tocIndex:2},{value:"jitter",paraId:55,tocIndex:2},{value:" - 根据离散的 x 和 离散的 y 比例尺，生成 dy 和 dx 通道，实现在某个区域散开的效果。",paraId:46,tocIndex:2},{value:"jitterX",paraId:56,tocIndex:2},{value:" - 根据离散的 x 比例尺，生成 dx 通道，实现在某个区域的 x 方向散开的效果。",paraId:46,tocIndex:2},{value:"jitterY",paraId:57,tocIndex:2},{value:" - 根据离散的 y 比例尺，生成 dy 通道，实现在某个区域的 y 方向散开的效果。",paraId:46,tocIndex:2},{value:"normalizeY",paraId:58,tocIndex:2},{value:" - 对 y 和 y1 通道根据指定的 basis 进行归一化处理。",paraId:46,tocIndex:2},{value:"select",paraId:59,tocIndex:2},{value:" - 按照指定通道进行分组，根据指定通道和 selector 从每组选择出数据。",paraId:46,tocIndex:2},{value:"selectX",paraId:60,tocIndex:2},{value:" - 按照指定通道进行分组，根据 x 通道和 selector 从每组选择出数据。",paraId:46,tocIndex:2},{value:"selectY",paraId:61,tocIndex:2},{value:" - 按照指定的通道进行分组，根据 y 通道和 selector 从每组选择出数据。",paraId:46,tocIndex:2},{value:"pack",paraId:62,tocIndex:2},{value:" - 生成 transform 和 scale 属性，从而让图形在空间中紧凑排列。",paraId:46,tocIndex:2},{value:"sample",paraId:63,tocIndex:2},{value:" - 当数据量远大于屏幕像素的时候，开启一些内置的采样策略，提升图表绘制性能。",paraId:46,tocIndex:2},{value:"sortColor",paraId:64,tocIndex:2},{value:" - 对离散的 color 比例尺的定义域根据指定通道排序。",paraId:46,tocIndex:2},{value:"sortX",paraId:65,tocIndex:2},{value:" - 对离散的 x 比例尺的定义域根据指定通道排序。",paraId:46,tocIndex:2},{value:"sortY",paraId:66,tocIndex:2},{value:" - 对离散的 y 比例尺的定义域根据指定通道排序。",paraId:46,tocIndex:2},{value:"stackEnter",paraId:67,tocIndex:2},{value:" - 对 enterDuration 和 enterDelay 通道进行堆叠，实现分组动画的效果。",paraId:46,tocIndex:2},{value:"stackY",paraId:68,tocIndex:2},{value:" - 按照指定通道分组，对每组的 y 和 y1 通道进行堆叠，实现堆叠效果。",paraId:46,tocIndex:2},{value:"symmetryY",paraId:69,tocIndex:2},{value:" - 按照指定通道分组，给每组的 y 和 y1 通道添加偏移，实现对称效果。",paraId:46,tocIndex:2},{value:"将抽象的数据映射为视觉数据。",paraId:70,tocIndex:3},{value:"band",paraId:71,tocIndex:3},{value:" - 特殊的 ",paraId:72,tocIndex:3},{value:"ordinal",paraId:73,tocIndex:3},{value:" 比例尺，它的值域范围是一个连续的范围。",paraId:72,tocIndex:3},{value:"linear",paraId:74,tocIndex:3},{value:" - 针对连续数据，对数据进行连续映射的比例尺。",paraId:72,tocIndex:3},{value:"sqrt",paraId:75,tocIndex:3},{value:" - 指数固定为 ",paraId:72,tocIndex:3},{value:"0.5",paraId:72,tocIndex:3},{value:" 的 ",paraId:72,tocIndex:3},{value:"pow",paraId:72,tocIndex:3},{value:" 比例尺。",paraId:72,tocIndex:3},{value:"pow",paraId:76,tocIndex:3},{value:" - 类似于 ",paraId:72,tocIndex:3},{value:"linear",paraId:72,tocIndex:3},{value:" 比例尺，但是映射函数为指数函数（exponential）。",paraId:72,tocIndex:3},{value:"log",paraId:77,tocIndex:3},{value:" - 类似于 ",paraId:72,tocIndex:3},{value:"linear",paraId:72,tocIndex:3},{value:" 比例尺，但是映射函数为对数函数（logarithmic）。",paraId:72,tocIndex:3},{value:"ordinal",paraId:78,tocIndex:3},{value:" - 将离散的数据映射到另外一个离散数据中。",paraId:72,tocIndex:3},{value:"point",paraId:79,tocIndex:3},{value:" - 特殊 ",paraId:72,tocIndex:3},{value:"band",paraId:80,tocIndex:3},{value:" 比例尺，固定配置 ",paraId:72,tocIndex:3},{value:"bandWith = 0",paraId:72,tocIndex:3},{value:"。",paraId:72,tocIndex:3},{value:"quantize",paraId:81,tocIndex:3},{value:" - 类似于 ",paraId:72,tocIndex:3},{value:"threshold",paraId:72,tocIndex:3},{value:"，但是计算切片的方式是基于元素的数据值。",paraId:72,tocIndex:3},{value:"quantile",paraId:82,tocIndex:3},{value:" - 类似于 ",paraId:72,tocIndex:3},{value:"threshold",paraId:72,tocIndex:3},{value:"， 但是计算切片的方式是基于元素在数据中的索引。",paraId:72,tocIndex:3},{value:"threshold",paraId:83,tocIndex:3},{value:" - 将连续的值域范围划分为多个切片，并将这些切片映射到一个离散的数据中。",paraId:72,tocIndex:3},{value:"time",paraId:84,tocIndex:3},{value:" - 特殊的 ",paraId:72,tocIndex:3},{value:"linear",paraId:85,tocIndex:3},{value:" 比例尺，它的值域是一组有时间顺序的数据。",paraId:72,tocIndex:3},{value:"对空间通道应用点变换。",paraId:86,tocIndex:4},{value:"polar",paraId:87,tocIndex:4},{value:" - 常用于绘制玫瑰图等。",paraId:88,tocIndex:4},{value:"theta",paraId:89,tocIndex:4},{value:" - 常用于绘制饼图等。",paraId:88,tocIndex:4},{value:"radial",paraId:90,tocIndex:4},{value:" - 常用于绘制玉珏图等。",paraId:88,tocIndex:4},{value:"parallel",paraId:91,tocIndex:4},{value:" - 绘制平行坐标系。",paraId:88,tocIndex:4},{value:"以下是支持的坐标系变换。",paraId:92,tocIndex:4},{value:"transpose",paraId:93,tocIndex:4},{value:" - 改变图表绘制方向。",paraId:94,tocIndex:4},{value:"fisheye",paraId:95,tocIndex:4},{value:" - 鱼眼坐标系。",paraId:94,tocIndex:4},{value:"视图复合相关的内容。",paraId:96,tocIndex:5},{value:"spaceLayer",paraId:97,tocIndex:5},{value:" - 对空间不做任何划分，多个视图使用同一个空间区域，常用于视图的层叠。",paraId:98,tocIndex:5},{value:"spaceFlex",paraId:99,tocIndex:5},{value:" - 使用类似 css flex 的布局方式来划分空间区域，常用于多图表对比的视图。",paraId:98,tocIndex:5},{value:"facetRect",paraId:100,tocIndex:5},{value:" - 用 row、column 字段维值对空间和数据进行划分，在各个子空间可视化数据片段。",paraId:98,tocIndex:5},{value:"facetCircle",paraId:101,tocIndex:5},{value:" - 根据字段分片数据，利用圆形划分空间，然就进行各个分面的数据可视化。",paraId:98,tocIndex:5},{value:"repeatMatrix",paraId:102,tocIndex:5},{value:" - 根据字段的数量对空间进行划分和可视化。",paraId:98,tocIndex:5},{value:"timingKeyframe",paraId:103,tocIndex:5},{value:" - 在不同时间片之间播放不同的可视化视图帧。",paraId:98,tocIndex:5},{value:"绘制辅助视觉元素。",paraId:104,tocIndex:6},{value:"title",paraId:105,tocIndex:6},{value:" - 绘制图表标题和副标题。",paraId:106,tocIndex:6},{value:"axis",paraId:107,tocIndex:6},{value:" - 绘制坐标轴。",paraId:106,tocIndex:6},{value:"legend",paraId:108,tocIndex:6},{value:" - 绘制图例。",paraId:106,tocIndex:6},{value:"scrollbar",paraId:109,tocIndex:6},{value:" - 绘制滚动条。",paraId:106,tocIndex:6},{value:"slider",paraId:110,tocIndex:6},{value:" - 绘制拖动条。",paraId:106,tocIndex:6},{value:"Label",paraId:111,tocIndex:6},{value:"绘制数据标签和标签属性的变换。",paraId:112,tocIndex:7},{value:"contrastReverse",paraId:113,tocIndex:7},{value:" - 标签颜色在图形背景上对比度低的情况下，从指定色板选择一个对比度最优的颜色。",paraId:114,tocIndex:7},{value:"overflowHide",paraId:115,tocIndex:7},{value:" - 对于标签在图形上放置不下的时候，隐藏标签。",paraId:114,tocIndex:7},{value:"overlapDodgeY",paraId:116,tocIndex:7},{value:" - 对位置碰撞的标签在 y 方向上进行调整，防止标签重叠。",paraId:114,tocIndex:7},{value:"overlapHide",paraId:117,tocIndex:7},{value:" - 对位置碰撞的标签进行隐藏，默认保留前一个，隐藏后一个。",paraId:114,tocIndex:7},{value:"Animation",paraId:118,tocIndex:7},{value:"数据驱动的动画和连续的形变动画。",paraId:119,tocIndex:8},{value:"fadeIn",paraId:120,tocIndex:8},{value:" - 渐现动画。",paraId:121,tocIndex:8},{value:"fadeOut",paraId:122,tocIndex:8},{value:" - 渐隐动画。",paraId:121,tocIndex:8},{value:"growInX",paraId:123,tocIndex:8},{value:" - 容器沿着 x 方向放大的矩阵动画，多用于 G.Group 容器类进行动画。",paraId:121,tocIndex:8},{value:"growInY",paraId:124,tocIndex:8},{value:" - 容器沿着 y 方向放大的矩阵动画，多用于 G.Group 容器类进行动画。",paraId:121,tocIndex:8},{value:"morphing",paraId:125,tocIndex:8},{value:" - 图形之间的形变动画。",paraId:121,tocIndex:8},{value:"pathIn",paraId:126,tocIndex:8},{value:" - Path 路径入场动画。",paraId:121,tocIndex:8},{value:"scaleInX",paraId:127,tocIndex:8},{value:" - 单个图形沿着 x 方向的生长动画。",paraId:121,tocIndex:8},{value:"scaleInY",paraId:128,tocIndex:8},{value:" - 单个图形沿着 y 方向的生长动画。",paraId:121,tocIndex:8},{value:"scaleOutX",paraId:129,tocIndex:8},{value:" - 单个图形沿着 x 方向的消退动画。",paraId:121,tocIndex:8},{value:"scaleOutY",paraId:130,tocIndex:8},{value:" - 单个图形沿着 y 方向的消退动画。",paraId:121,tocIndex:8},{value:"waveIn",paraId:131,tocIndex:8},{value:" - 划入入场动画效果，不同坐标系下效果不同。",paraId:121,tocIndex:8},{value:"zoomIn",paraId:132,tocIndex:8},{value:" - 沿着图形中心点的放大动画。",paraId:121,tocIndex:8},{value:"zoomOut",paraId:133,tocIndex:8},{value:" - 沿着图形中心点的缩小动画。",paraId:121,tocIndex:8},{value:"操作视图并且展现详细信息。",paraId:134,tocIndex:9},{value:"brushFilter",paraId:135,tocIndex:9},{value:" - 框选筛选。",paraId:136,tocIndex:9},{value:"brushXFilter",paraId:137,tocIndex:9},{value:" - x 方向框选筛选。",paraId:136,tocIndex:9},{value:"brushYFilter",paraId:138,tocIndex:9},{value:" - y 方向框选筛选。",paraId:136,tocIndex:9},{value:"brushHighlight",paraId:139,tocIndex:9},{value:" - 框选高亮。",paraId:136,tocIndex:9},{value:"brushXHighlight",paraId:140,tocIndex:9},{value:" - x 方向框选高亮。",paraId:136,tocIndex:9},{value:"brushYHighlight",paraId:141,tocIndex:9},{value:" - y 方向框选高亮。",paraId:136,tocIndex:9},{value:"brushAxisHighlight",paraId:142,tocIndex:9},{value:" - 坐标轴框选高亮。",paraId:136,tocIndex:9},{value:"legendHighlight",paraId:143,tocIndex:9},{value:" - 图例高亮。",paraId:136,tocIndex:9},{value:"legendFilter",paraId:144,tocIndex:9},{value:" - 图例筛选。",paraId:136,tocIndex:9},{value:"tooltip",paraId:145,tocIndex:9},{value:" - 展现提示信息。",paraId:136,tocIndex:9},{value:"elementHighlight",paraId:146,tocIndex:9},{value:" - 高亮元素。",paraId:136,tocIndex:9},{value:"elementHighlightByX",paraId:147,tocIndex:9},{value:" - 高亮具有相同 x 通道值的元素。",paraId:136,tocIndex:9},{value:"elementHighlightByColor",paraId:148,tocIndex:9},{value:" - 高亮具有相同 color 通道的元素。",paraId:136,tocIndex:9},{value:"elementSelect",paraId:149,tocIndex:9},{value:" - 选择元素。",paraId:136,tocIndex:9},{value:"elementSelectByX",paraId:150,tocIndex:9},{value:" - 选择拥有相同 x 通道值的元素。",paraId:136,tocIndex:9},{value:"elementSelectByColor",paraId:151,tocIndex:9},{value:" - 选择拥有相同 color 通道值的元素。",paraId:136,tocIndex:9},{value:"fisheye",paraId:152,tocIndex:9},{value:" - 鱼眼交互。",paraId:136,tocIndex:9},{value:"charIndex",paraId:153,tocIndex:9},{value:" - 索引图表。",paraId:136,tocIndex:9},{value:"poptip",paraId:154,tocIndex:9},{value:" - 展现提示文本。",paraId:136,tocIndex:9},{value:"sliderFilter",paraId:155,tocIndex:9},{value:" - 拖动条筛选。",paraId:136,tocIndex:9},{value:"关系图相关的绘制。",paraId:156,tocIndex:10},{value:"sankey",paraId:157,tocIndex:10},{value:" - 绘制桑基图。",paraId:158,tocIndex:10},{value:"treemap",paraId:159,tocIndex:10},{value:" - 绘制矩阵树图。",paraId:158,tocIndex:10},{value:"pack",paraId:160,tocIndex:10},{value:" - 绘制打包图。",paraId:158,tocIndex:10},{value:"forceGraph",paraId:161,tocIndex:10},{value:" - 绘制力导向图。",paraId:158,tocIndex:10},{value:"tree",paraId:162,tocIndex:10},{value:" - 绘制树图。",paraId:158,tocIndex:10},{value:"地图相关的图形绘制。",paraId:163,tocIndex:11},{value:"geoPath",paraId:164,tocIndex:11},{value:" - 可以用来结合 geojson 绘制地图。",paraId:165,tocIndex:11},{value:"geoView",paraId:166,tocIndex:11},{value:" - 绘制地图的容器，用于多 geoPath 图层叠加。",paraId:165,tocIndex:11},{value:"Theme",paraId:167,tocIndex:11},{value:"主题相关内容。",paraId:168,tocIndex:12},{value:"academy",paraId:169,tocIndex:12},{value:" - 学术风格的主题。",paraId:170,tocIndex:12},{value:"classic",paraId:171,tocIndex:12},{value:" - 经典主题。",paraId:170,tocIndex:12},{value:"classicDark",paraId:172,tocIndex:12},{value:" - 经典暗黑主题。",paraId:170,tocIndex:12},{value:"基于 G 插件相关的内容。",paraId:173,tocIndex:13},{value:"renderer",paraId:174,tocIndex:13},{value:" - ",paraId:175,tocIndex:13},{value:"Canvas",paraId:175,tocIndex:13},{value:"、",paraId:175,tocIndex:13},{value:"SVG",paraId:175,tocIndex:13},{value:" 两大渲染器。",paraId:175,tocIndex:13},{value:"rough",paraId:176,tocIndex:13},{value:" - 绘制手绘图的插件。",paraId:175,tocIndex:13},{value:"lottie",paraId:177,tocIndex:13},{value:" - 可以在图表中播放 lottie 动画的插件。",paraId:175,tocIndex:13},{value:"公共配置。",paraId:178,tocIndex:14},{value:"style",paraId:179,tocIndex:14},{value:" - 绘制图表标题和副标题。",paraId:180,tocIndex:14}]},17730:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(73276);const t=[{value:"G2 提供了一些内置的色板，可以直接使用，并支持 ",paraId:0},{value:"d3-scale-chromatic",paraId:0},{value:"的色板。",paraId:0},{value:"import { chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .axis('y', { labelFormatter: '.0%' })\n  .scale('color', { palette: 'tableau10' }); // 指定色板\n\nchart.render();\n",paraId:1,tocIndex:0}]},46290:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(15147);const t=[{value:"Lottie",paraId:0},{value:" 能极大丰富动画的描述能力。在可视化叙事中也有不错的使用场景。",paraId:0},{value:"在 G2 中通过 ",paraId:1},{value:"@antv/g-lottie-player",paraId:1},{value:" 可以将 Lottie 加入画布。同时提供简单的动画控制方法例如播放、暂停以及跳转到指定时刻或帧，加入到画布后就可以像基础图形一样任意操作它们。",paraId:1},{value:"首先安装 ",paraId:2,tocIndex:0},{value:"@antv/g-lottie-player",paraId:2,tocIndex:0},{value:" 播放器：",paraId:2,tocIndex:0},{value:"npm install @antv/g-lottie-player --save\n",paraId:3,tocIndex:0},{value:"等待画布初始化、Lottie 文件加载完成后，即可创建 Lottie 动画对象，随后渲染到画布得到一个 ",paraId:4,tocIndex:0},{value:"Group",paraId:4,tocIndex:0},{value:"，可任意对它进行变换，例如缩放或者移动到指定地点：",paraId:4,tocIndex:0},{value:"import { loadAnimation } from '@antv/g-lottie-player';\n\n(async () => {\n  // 从上下文中获取画布\n  const { canvas } = chart.getContext();\n  await canvas.ready;\n\n  // 加载 Lottie 文件\n  const lottieJSON = await fetch(\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*C9f6TaadHikAAAAAAAAAAAAADmJ7AQ',\n  ).then((res) => res.json());\n\n  // 创建动画\n  const animation = loadAnimation(lottieJSON, { loop: true, autoplay: true });\n  // 渲染到画布，得到 Group 容器\n  const wrapper = animation.render(canvas);\n  // 任意操作容器，例如移动到指定位置\n  wrapper.scale(0.5);\n  wrapper.translate(160, 100);\n})();\n",paraId:5,tocIndex:0},{value:"效果如下：",paraId:6,tocIndex:0},{value:"更多动画控制选项可以参考：",paraId:7,tocIndex:0},{value:"Lottie Animation 文档",paraId:7,tocIndex:0},{value:"。",paraId:7,tocIndex:0}]},99192:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(81161);const t=[{value:"G2 底层基于 AntV ",paraId:0},{value:"G",paraId:0},{value:" 来进行渲染，所以在渲染器能力上继承 G 的能力，目前支持了 Canvas、SVG、WebGL 三大 Web 标准，其中 Canvas 渲染器作为 G2 内置默认的渲染器。更多渲染器可以看 ",paraId:0},{value:"G 文档",paraId:0},{value:"。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\n\nconst chart = new Chart({\n  container: 'container',\n  // 或者选择 WebGLRenderer 渲染器，不设置默认为 CanvasRenderer.\n  renderer: new SVGRenderer(),\n});\n",paraId:1,tocIndex:0},{value:"当然使用之前，是先使用 npm 或者 yarn 等包管理工具安装他们，当前为了 G2 整体包大小，所以仅仅内置 Canvas 渲染器。具体案例可以参考 ",paraId:2,tocIndex:0},{value:"渲染器",paraId:2,tocIndex:0},{value:"。",paraId:2,tocIndex:0},{value:"G 渲染器的使用都是使用：",paraId:3,tocIndex:1},{value:"new Renderer({ /_ options _/ });",paraId:4,tocIndex:1},{value:"分三个渲染器分别介绍创建他们的配置项。",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"enableDirtyRectangleRendering",paraId:6,tocIndex:2},{value:"是否开启“脏矩形”渲染",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:"enableDirtyRectangleRenderingDebug",paraId:6,tocIndex:2},{value:"是否开启“脏矩形”渲染调试模式",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"属性",paraId:7,tocIndex:3},{value:"描述",paraId:7,tocIndex:3},{value:"类型",paraId:7,tocIndex:3},{value:"默认值",paraId:7,tocIndex:3},{value:"outputSVGElementId",paraId:7,tocIndex:3},{value:"生成 SVGElement 时是否添加 id 属性",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"true",paraId:7,tocIndex:3},{value:"属性",paraId:8,tocIndex:4},{value:"描述",paraId:8,tocIndex:4},{value:"类型",paraId:8,tocIndex:4},{value:"默认值",paraId:8,tocIndex:4},{value:"targets",paraId:8,tocIndex:4},{value:"选择渲染环境，并按顺序自动降级",paraId:8,tocIndex:4},{value:"string[]",paraId:8,tocIndex:4},{value:"['webgl2', 'webgl1']",paraId:8,tocIndex:4},{value:"当需要替换掉内置的 Canvas 渲染器，例如改换成 SVG 时，需要引入特定版本的 G2 UMD 文件。",paraId:9,tocIndex:5},{value:"在线示例",paraId:10,tocIndex:5},{value:"首先引入 ",paraId:11,tocIndex:5},{value:"@antv/g",paraId:11,tocIndex:5},{value:" 和 ",paraId:11,tocIndex:5},{value:"@antv/g-svg",paraId:11,tocIndex:5},{value:" 的 UMD 版本：",paraId:11,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g"><\/script>\n<script src="https://unpkg.com/@antv/g-svg"><\/script>\n',paraId:12,tocIndex:5},{value:"然后引入剔除了 ",paraId:13,tocIndex:5},{value:"@antv/g",paraId:13,tocIndex:5},{value:" 和 ",paraId:13,tocIndex:5},{value:"@antv/g-svg",paraId:13,tocIndex:5},{value:" 的 G2 UMD 版本，我们称之为 lite 版：",paraId:13,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g2@5.0.5/dist/g2-lite.min.js"><\/script>\n',paraId:14,tocIndex:5},{value:"在命名空间 ",paraId:15,tocIndex:5},{value:"window.G.SVG",paraId:15,tocIndex:5},{value:" 下找到 ",paraId:15,tocIndex:5},{value:"Renderer",paraId:15,tocIndex:5},{value:" 并实例化：",paraId:15,tocIndex:5},{value:"const { Chart } = window.G2;\n\nconst chart = new Chart({\n  container: 'container',\n  renderer: new window.G.SVG.Renderer(), // 传入 SVG Renderer\n});\n",paraId:16,tocIndex:5},{value:"提供 lite 版主要考虑到：",paraId:17,tocIndex:5},{value:"剔除了 ",paraId:18,tocIndex:5},{value:"@antv/g",paraId:18,tocIndex:5},{value:" 和内置的 ",paraId:18,tocIndex:5},{value:"@antv/g-canvas",paraId:18,tocIndex:5},{value:" 渲染器之后，便于按需替换其他渲染器，不会存在冗余的内置渲染器",paraId:18,tocIndex:5},{value:"和其他使用 ",paraId:18,tocIndex:5},{value:"@antv/g",paraId:18,tocIndex:5},{value:" 的包使用时，可以共享同一份核心和渲染器代码，节省总体的包体积大小，例如：",paraId:18,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g"><\/script>\n<script src="https://unpkg.com/@antv/g-svg"><\/script>\n<script src="https://unpkg.com/@antv/g2@5.0.5/dist/g2-lite.min.js"><\/script>\n<script src="https://unpkg.com/@antv/g6-lite"><\/script>\n',paraId:19,tocIndex:5}]},22881:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(67);const t=[{value:"相比方方正正的常规图形，手绘风格能带给人可爱轻松之感。",paraId:0},{value:"有不少基于 ",paraId:1},{value:"rough.js",paraId:1},{value:" 的图表库就是这么做的，例如 ",paraId:1},{value:"roughViz.js",paraId:1},{value:"、",paraId:1},{value:"rough-charts",paraId:1},{value:" 等。",paraId:1},{value:"借助开箱即用的渲染插件，在 G2 中我们也能轻松完成手绘风格的切换。",paraId:2},{value:"首先安装 ",paraId:3,tocIndex:0},{value:"@antv/g-plugin-rough-canvas-renderer",paraId:3,tocIndex:0},{value:"：",paraId:3,tocIndex:0},{value:"npm install @antv/g-plugin-rough-canvas-renderer --save\n",paraId:4,tocIndex:0},{value:"然后在插件列表中引入：",paraId:5,tocIndex:0},{value:"import { Plugin } from '@antv/g-plugin-rough-canvas-renderer';\n\nconst chart = new Chart({\n  container: 'container',\n  plugins: [new Plugin()],\n});\n",paraId:6,tocIndex:0},{value:"仅需要一行改动即可完成风格转换。在该",paraId:7,tocIndex:0},{value:"示例",paraId:8,tocIndex:0},{value:"中，我们通过 ",paraId:7,tocIndex:0},{value:"fillStyle",paraId:7,tocIndex:0},{value:" 指定了 ",paraId:7,tocIndex:0},{value:"'zigzag'",paraId:7,tocIndex:0},{value:" 这种类似连续涂鸦笔迹的填充风格：",paraId:7,tocIndex:0},{value:"chart\n  .interval()\n  .data([\n    { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n    //...\n  ])\n  .encode('x', 'month')\n  .encode('y', ['end', 'start'])\n  .encode('color', (d) =>\n    d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n  )\n  .style('strokeWidth', 2)\n  .style('fillStyle', 'zigzag'); // 指定填充风格\n\nchart.render();\n",paraId:9,tocIndex:0},{value:"效果如下，可以看到原本的填充色活泼了起来！\n",paraId:10,tocIndex:0},{value:"当然 ",paraId:11,tocIndex:0},{value:"fillStyle",paraId:11,tocIndex:0},{value:" 还有很多填充方式，下图展示了目前支持的所有效果。更多选项详见 ",paraId:11,tocIndex:0},{value:"@antv/g-plugin-rough-canvas-renderer 文档",paraId:11,tocIndex:0},{value:"：",paraId:11,tocIndex:0},{value:"最后，选择一款手绘风格的字体能让整体风格趋于统一。在上面的",paraId:12,tocIndex:0},{value:"示例",paraId:13,tocIndex:0},{value:"中我们选择了 ",paraId:12,tocIndex:0},{value:"'Gaegu'",paraId:12,tocIndex:0},{value:"，可以参考",paraId:12,tocIndex:0},{value:"如何加载外部字体",paraId:12,tocIndex:0},{value:"。",paraId:12,tocIndex:0},{value:"G2 使用 ",paraId:14,tocIndex:2},{value:"g-canvas",paraId:14,tocIndex:2},{value:" 作为默认渲染器。如果切换到 ",paraId:14,tocIndex:2},{value:"g-svg",paraId:14,tocIndex:2},{value:"，也有对应的手绘风格插件可以选择：",paraId:14,tocIndex:2},{value:"@antv/plugin-rough-svg-renderer",paraId:14,tocIndex:2},{value:"，使用方式完全一致。",paraId:14,tocIndex:2},{value:"使用 ",paraId:15,tocIndex:3},{value:"fillStyle",paraId:15,tocIndex:3},{value:" 代替 ",paraId:15,tocIndex:3},{value:"fill",paraId:15,tocIndex:3},{value:" 能实现类似 Pattern 的效果，因此在无障碍模式下也有不错的应用场景，例如考虑色弱人士和黑白打印。",paraId:15,tocIndex:3},{value:"在下面的",paraId:16,tocIndex:3},{value:"示例",paraId:17,tocIndex:3},{value:"中，我们将 ",paraId:16,tocIndex:3},{value:"fill/stroke",paraId:16,tocIndex:3},{value:" 都设置和黑色，将 ",paraId:16,tocIndex:3},{value:"fillStyle",paraId:16,tocIndex:3},{value:" 作为颜色属性：",paraId:16,tocIndex:3},{value:"chart\n  .interval()\n  //... 省略 data, transform 等\n  .scale('color', {\n    range: [\n      'hachure',\n      'solid',\n      'zigzag',\n      'cross-hatch',\n      'dots',\n      'dashed',\n      'zigzag-line',\n    ],\n  })\n  .style('fill', 'black')\n  .style('stroke', 'black')\n  .style('strokeWidth', '4')\n  .style('colorAttribute', 'fillStyle');\n",paraId:18,tocIndex:3},{value:"效果如下：",paraId:19,tocIndex:3}]},44959:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(60109);const t=[{value:"band 是特殊的 ",paraId:0},{value:"ordinal",paraId:1},{value:" 比例尺，它的值域范围是一个连续的范围。",paraId:0},{value:"band 比例尺经常用于柱形图的 x 通道。",paraId:2,tocIndex:0},{value:"chart\n  .interval()\n  .encode('x', 'type')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'band',\n    /* 其他配置项 */\n  });\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"domain",paraId:4,tocIndex:1},{value:"设置定义域数组",paraId:4,tocIndex:1},{value:"number[] | string[] | Date[]",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"range",paraId:4,tocIndex:1},{value:"设置数据映射的值域范围",paraId:4,tocIndex:1},{value:"number[]",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"[0, 1]",paraId:4,tocIndex:1},{value:"unknown",paraId:4,tocIndex:1},{value:"对于 ",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"， ",paraId:4,tocIndex:1},{value:"NaN",paraId:4,tocIndex:1},{value:"，",paraId:4,tocIndex:1},{value:"null",paraId:4,tocIndex:1},{value:" 空值，返回的数据",paraId:4,tocIndex:1},{value:"any",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"round",paraId:4,tocIndex:1},{value:"输出值去四舍五入",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"paddingInner",paraId:4,tocIndex:1},{value:"设置比例尺的内部间距，在 [0, 1] 范围内",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"paddingOuter",paraId:4,tocIndex:1},{value:"设置比例尺的外部间距，在 [0, 1] 范围内",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"padding",paraId:4,tocIndex:1},{value:"同时设置 ",paraId:4,tocIndex:1},{value:"paddingInner",paraId:4,tocIndex:1},{value:" 和 ",paraId:4,tocIndex:1},{value:"paddingOuter",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"align",paraId:4,tocIndex:1},{value:"对齐方式，在 [0, 1] 范围内",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0.5",paraId:4,tocIndex:1},{value:"compare",paraId:4,tocIndex:1},{value:"对定义域进行映射前的排序",paraId:4,tocIndex:1},{value:"(a: string or number, b: string or number) => number",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"flex",paraId:4,tocIndex:1},{value:"设置分配比例",paraId:4,tocIndex:1},{value:"number[]",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"|<------------------------------------------- range -------------------------------------------\x3e|\n|             |                   |             |                   |             |             |\n|<--step*PO--\x3e|<----bandWidth----\x3e|<--step*PI--\x3e|<----bandWidth----\x3e|<--step*PI--\x3e|<--step*PO--\x3e|\n|             | ***************** |             | ***************** |             |             |\n|             | ******* A ******* |             | ******* B ******* |             |             |\n|             | ***************** |             | ***************** |             |             |\n|             |<--------------step-------------\x3e|                                               |\n|-----------------------------------------------------------------------------------------------|\n",paraId:5,tocIndex:1},{value:"怎么设置柱形图，柱子之间的间距？",paraId:6,tocIndex:2},{value:"chart\n  .interval()\n  // ...\n  .scale('x', {\n    type: 'band',\n    padding: 0.5,\n  });\n",paraId:7,tocIndex:2}]},32318:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(195);const t=[{value:"针对连续数据，对数据进行连续映射的比例尺，本质是一个线性公式：",paraId:0},{value:"y = ax + b",paraId:0},{value:"，从一个数值范围映射到另外一个数值范围。",paraId:0},{value:"linear 比例尺常规用于将数据映射到归一化坐标上。",paraId:1,tocIndex:0},{value:"chart\n  .line()\n  .encode('x', 'year')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'linear',\n    range: [0.2, 0.8],\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"这个例子中会将 y 通道的比例尺设置它的映射方式，从而影响到图形在画布上的位置。",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"domain",paraId:4,tocIndex:1},{value:"设置数据的定义域范围",paraId:4,tocIndex:1},{value:"number[]",paraId:4,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:4,tocIndex:1},{value:"domainMin",paraId:4,tocIndex:1},{value:"设置数据的定义域最小值",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"输入数据的最小值",paraId:4,tocIndex:1},{value:"domainMax",paraId:4,tocIndex:1},{value:"设置数据的定义域最大值",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"输入数据的最大",paraId:4,tocIndex:1},{value:"range",paraId:4,tocIndex:1},{value:"设置数据映射的值域范围",paraId:4,tocIndex:1},{value:"number[]",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"[0, 1]",paraId:4,tocIndex:1},{value:"rangeMin",paraId:4,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:4,tocIndex:1},{value:"number | string",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"rangeMax",paraId:4,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:4,tocIndex:1},{value:"number | string",paraId:4,tocIndex:1},{value:"1",paraId:4,tocIndex:1},{value:"unknown",paraId:4,tocIndex:1},{value:"对于 ",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"， ",paraId:4,tocIndex:1},{value:"NaN",paraId:4,tocIndex:1},{value:"，",paraId:4,tocIndex:1},{value:"null",paraId:4,tocIndex:1},{value:" 空值，返回的数据",paraId:4,tocIndex:1},{value:"any",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"tickCount",paraId:4,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"5",paraId:4,tocIndex:1},{value:"tickMethod",paraId:4,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:4,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:4,tocIndex:1},{value:"d3-ticks",paraId:4,tocIndex:1},{value:"round",paraId:4,tocIndex:1},{value:"输出值去四舍五入",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"clamp",paraId:4,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"nice",paraId:4,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"interpolate",paraId:4,tocIndex:1},{value:"自定义差值函数",paraId:4,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:4,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:4,tocIndex:1},{value:"怎么自定义 y 轴的刻度？",paraId:5,tocIndex:2},{value:"比如只需要在刻度上显示 0, 100, 600，那就以下方式设置 y 比例尺。",paraId:6,tocIndex:2},{value:"chart\n  .line()\n  // ...\n  .scale('y', {\n    type: 'linear',\n    domain: [0, 700],\n    tickMethod: () => [0, 100, 600]\n  });\n",paraId:7,tocIndex:2}]},76951:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(79216);const t=[{value:"log 是使用对数函数进行数据映射，它的映射函数为 ",paraId:0},{value:"y = log(x) + b",paraId:0},{value:"。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'year')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'log',\n    /* 其他配置项 */\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"domain",paraId:2,tocIndex:1},{value:"设置数据的定义域范围",paraId:2,tocIndex:1},{value:"number[]",paraId:2,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:2,tocIndex:1},{value:"domainMin",paraId:2,tocIndex:1},{value:"设置数据的定义域最小值",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"输入数据的最小值",paraId:2,tocIndex:1},{value:"domainMax",paraId:2,tocIndex:1},{value:"设置数据的定义域最大值",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"输入数据的最大",paraId:2,tocIndex:1},{value:"range",paraId:2,tocIndex:1},{value:"设置数据映射的值域范围",paraId:2,tocIndex:1},{value:"number[]",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"string[]",paraId:2,tocIndex:1},{value:"[0, 1]",paraId:2,tocIndex:1},{value:"rangeMin",paraId:2,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"rangeMax",paraId:2,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1},{value:"unknown",paraId:2,tocIndex:1},{value:"对于 ",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"， ",paraId:2,tocIndex:1},{value:"NaN",paraId:2,tocIndex:1},{value:"，",paraId:2,tocIndex:1},{value:"null",paraId:2,tocIndex:1},{value:" 空值，返回的数据",paraId:2,tocIndex:1},{value:"any",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"tickCount",paraId:2,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"5",paraId:2,tocIndex:1},{value:"tickMethod",paraId:2,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:2,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:2,tocIndex:1},{value:"calculateLogTicks",paraId:2,tocIndex:1},{value:"round",paraId:2,tocIndex:1},{value:"输出值去四舍五入",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"clamp",paraId:2,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"nice",paraId:2,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"interpolate",paraId:2,tocIndex:1},{value:"自定义差值函数",paraId:2,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:2,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:2,tocIndex:1},{value:"base",paraId:2,tocIndex:1},{value:"设定对数底",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"10",paraId:2,tocIndex:1},{value:"log 底数默认为 10，怎么设定 log 的底数",paraId:3,tocIndex:1},{value:"chart\n  .line()\n  // ...\n  .scale('y', {\n    type: 'log',\n    base: 100,\n  });\n",paraId:4,tocIndex:1}]},28420:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71905);const t=[{value:"ordinal 是将有序且离散的定义域映射到有序离散的值域，通常用于分类的数据，比如：班级、商品类别等形式的数据。",paraId:0},{value:"linear 比例尺常规用于将数据映射到归一化坐标上。",paraId:1,tocIndex:0},{value:"chart\n  .line()\n  .encode('x', 'type')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'ordinal',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"这个例子中会将 y 通道的比例尺设置它的映射方式，从而影响到图形在画布上的位置。",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"domain",paraId:4,tocIndex:1},{value:"设置数据的定义域范围",paraId:4,tocIndex:1},{value:"any[]",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"range",paraId:4,tocIndex:1},{value:"设置数据映射的值域范围",paraId:4,tocIndex:1},{value:"any[]",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"unknown",paraId:4,tocIndex:1},{value:"对于 ",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"， ",paraId:4,tocIndex:1},{value:"NaN",paraId:4,tocIndex:1},{value:"，",paraId:4,tocIndex:1},{value:"null",paraId:4,tocIndex:1},{value:" 空值，返回的数据",paraId:4,tocIndex:1},{value:"any",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"compare",paraId:4,tocIndex:1},{value:"比较两个值，用于排序的比较器",paraId:4,tocIndex:1},{value:"`(a: number",paraId:4,tocIndex:1},{value:"string, b: number",paraId:4,tocIndex:1},{value:"柱形图怎么指定柱子的颜色色板？",paraId:5,tocIndex:2},{value:"chart\n  .interval()\n  // ...\n  .encode('color', 'type')\n  .scale('color', {\n    type: 'ordinal',\n    range: ['red', 'green', 'blue'],\n  });\n",paraId:6,tocIndex:2}]},18018:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(66262);const t=[{value:"point 是一个特殊 ",paraId:0},{value:"band",paraId:1},{value:" 比例尺，固定配置 ",paraId:0},{value:"bandWith = 0",paraId:0},{value:"。",paraId:0},{value:"chart\n  .interval()\n  .encode('x', 'type')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'point',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置定义域数组",paraId:3,tocIndex:1},{value:"number[] | string[] | Date[]",paraId:3,tocIndex:1},{value:"[]",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"[0, 1]",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"， ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"round",paraId:3,tocIndex:1},{value:"输出值去四舍五入",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"paddingInner",paraId:3,tocIndex:1},{value:"设置比例尺的内部间距，在 [0, 1] 范围内",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"paddingOuter",paraId:3,tocIndex:1},{value:"设置比例尺的外部间距，在 [0, 1] 范围内",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"padding",paraId:3,tocIndex:1},{value:"同时设置 ",paraId:3,tocIndex:1},{value:"paddingInner",paraId:3,tocIndex:1},{value:" 和 ",paraId:3,tocIndex:1},{value:"paddingOuter",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"align",paraId:3,tocIndex:1},{value:"对齐方式，在 [0, 1] 范围内",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0.5",paraId:3,tocIndex:1},{value:"compare",paraId:3,tocIndex:1},{value:"对定义域进行映射前的排序",paraId:3,tocIndex:1},{value:"(a: string or number, b: string or number) => number",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"|<------------------------------------------- range -------------------------------------------\x3e|\n|             |                                 |                                 |             |\n|<--step*PO--\x3e|<--------------step-------------\x3e|<--------------step-------------\x3e|<--step*PO--\x3e|\n|             |                                 |                                 |             |\n|             A                                 B                                 C             |\n|-----------------------------------------------------------------------------------------------|\n",paraId:4,tocIndex:1}]},86653:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(6348);const t=[{value:"pow 是使用指数函数进行数据映射，它的映射函数为 ",paraId:0},{value:"y = x ^ exp + b",paraId:0},{value:"。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'year')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'pow',\n    /* 其他配置项 */\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"domain",paraId:2,tocIndex:1},{value:"设置数据的定义域范围",paraId:2,tocIndex:1},{value:"number[]",paraId:2,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:2,tocIndex:1},{value:"domainMin",paraId:2,tocIndex:1},{value:"设置数据的定义域最小值",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"输入数据的最小值",paraId:2,tocIndex:1},{value:"domainMax",paraId:2,tocIndex:1},{value:"设置数据的定义域最大值",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"输入数据的最大",paraId:2,tocIndex:1},{value:"range",paraId:2,tocIndex:1},{value:"设置数据映射的值域范围",paraId:2,tocIndex:1},{value:"number[]",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"string[]",paraId:2,tocIndex:1},{value:"[0, 1]",paraId:2,tocIndex:1},{value:"rangeMin",paraId:2,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"rangeMax",paraId:2,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1},{value:"unknown",paraId:2,tocIndex:1},{value:"对于 ",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"， ",paraId:2,tocIndex:1},{value:"NaN",paraId:2,tocIndex:1},{value:"，",paraId:2,tocIndex:1},{value:"null",paraId:2,tocIndex:1},{value:" 空值，返回的数据",paraId:2,tocIndex:1},{value:"any",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"tickCount",paraId:2,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"5",paraId:2,tocIndex:1},{value:"tickMethod",paraId:2,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:2,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:2,tocIndex:1},{value:"calculatePowTicks",paraId:2,tocIndex:1},{value:"round",paraId:2,tocIndex:1},{value:"输出值去四舍五入",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"clamp",paraId:2,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"nice",paraId:2,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"interpolate",paraId:2,tocIndex:1},{value:"自定义差值函数",paraId:2,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:2,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:2,tocIndex:1},{value:"exponent",paraId:2,tocIndex:1},{value:"设定指数",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"2",paraId:2,tocIndex:1}]},8967:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(8944);const t=[{value:"quantile 类似于 ",paraId:0},{value:"threshold",paraId:1},{value:"，但是计算切片的方式是基于元素在数据中的索引。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'price')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'quantile',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置数据的定义域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:"[]",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"any[]",paraId:3,tocIndex:1},{value:"[]",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"， ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickCount",paraId:3,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"5",paraId:3,tocIndex:1},{value:"tickMethod",paraId:3,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:3,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:3,tocIndex:1},{value:"wilkinson-extended",paraId:3,tocIndex:1},{value:"nice",paraId:3,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1}]},4900:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(21331);const t=[{value:"quantize 类似于 ",paraId:0},{value:"threshold",paraId:1},{value:"，但是计算切片的方式是基于元素的数据值。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'price')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'quantize',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置数据的定义域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:"[]",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"any[]",paraId:3,tocIndex:1},{value:"[]",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"， ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickCount",paraId:3,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"5",paraId:3,tocIndex:1},{value:"tickMethod",paraId:3,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:3,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:3,tocIndex:1},{value:"wilkinson-extended",paraId:3,tocIndex:1},{value:"nice",paraId:3,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1}]},1751:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(47313);const t=[{value:"sqrt 是指数固定为 ",paraId:0},{value:"0.5",paraId:0},{value:" 的 ",paraId:0},{value:"pow",paraId:1},{value:" 比例尺，它的映射函数为 ",paraId:0},{value:"y = x ^ 0.5 + b",paraId:0},{value:"。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'year')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'sqrt',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置数据的定义域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:3,tocIndex:1},{value:"domainMin",paraId:3,tocIndex:1},{value:"设置数据的定义域最小值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"输入数据的最小值",paraId:3,tocIndex:1},{value:"domainMax",paraId:3,tocIndex:1},{value:"设置数据的定义域最大值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"输入数据的最大",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"[0, 1]",paraId:3,tocIndex:1},{value:"rangeMin",paraId:3,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:3,tocIndex:1},{value:"number | string",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"rangeMax",paraId:3,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:3,tocIndex:1},{value:"number | string",paraId:3,tocIndex:1},{value:"1",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"， ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickCount",paraId:3,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"5",paraId:3,tocIndex:1},{value:"tickMethod",paraId:3,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:3,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:3,tocIndex:1},{value:"d3-ticks",paraId:3,tocIndex:1},{value:"round",paraId:3,tocIndex:1},{value:"输出值去四舍五入",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"clamp",paraId:3,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"nice",paraId:3,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"interpolate",paraId:3,tocIndex:1},{value:"自定义差值函数",paraId:3,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:3,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:3,tocIndex:1},{value:"exponent",paraId:3,tocIndex:1},{value:"设定指数",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0.5",paraId:3,tocIndex:1}]},51723:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(47646);const t=[{value:"threshold 是将连续的值域范围划分为多个切片，并将这些切片映射到一个离散的数据中。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'price')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'threshold',\n    /* 其他配置项 */\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"domain",paraId:2,tocIndex:1},{value:"设置数据的定义域范围",paraId:2,tocIndex:1},{value:"number[]",paraId:2,tocIndex:1},{value:"[0.5]",paraId:2,tocIndex:1},{value:"range",paraId:2,tocIndex:1},{value:"设置数据映射的值域范围",paraId:2,tocIndex:1},{value:"any[]",paraId:2,tocIndex:1},{value:"[0, 1]",paraId:2,tocIndex:1},{value:"unknown",paraId:2,tocIndex:1},{value:"对于 ",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"， ",paraId:2,tocIndex:1},{value:"NaN",paraId:2,tocIndex:1},{value:"，",paraId:2,tocIndex:1},{value:"null",paraId:2,tocIndex:1},{value:" 空值，返回的数据",paraId:2,tocIndex:1},{value:"any",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1}]},44149:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88312);const t=[{value:"time 是特殊的 ",paraId:0},{value:"linear",paraId:1},{value:" 比例尺，它的值域是一组时间顺序的数据，映射函数为 ",paraId:0},{value:"y = x.getTime() + b",paraId:0},{value:"。",paraId:0},{value:"chart\n  .interval()\n  .encode('x', 'time')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'time',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置数据的定义域范围",paraId:3,tocIndex:1},{value:"Date[]",paraId:3,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:3,tocIndex:1},{value:"domainMin",paraId:3,tocIndex:1},{value:"设置数据的定义域最小值",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"输入数据的最小值",paraId:3,tocIndex:1},{value:"domainMax",paraId:3,tocIndex:1},{value:"设置数据的定义域最大值",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"输入数据的最大",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"Date[]",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"[0, 1]",paraId:3,tocIndex:1},{value:"rangeMin",paraId:3,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"rangeMax",paraId:3,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"1",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"， ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickCount",paraId:3,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"5",paraId:3,tocIndex:1},{value:"tickInterval",paraId:3,tocIndex:1},{value:"设置推荐的 tick 之间的间隔，tickInterval 优先级高于 tickCount。",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickMethod",paraId:3,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:3,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:3,tocIndex:1},{value:"d3Time",paraId:3,tocIndex:1},{value:"round",paraId:3,tocIndex:1},{value:"输出值去四舍五入",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"clamp",paraId:3,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"nice",paraId:3,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"mask",paraId:3,tocIndex:1},{value:"设置时间显示的格式，底层使用 ",paraId:3,tocIndex:1},{value:"fetcha",paraId:3,tocIndex:1},{value:".",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"utc",paraId:3,tocIndex:1},{value:"是否 utc",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"interpolate",paraId:3,tocIndex:1},{value:"自定义差值函数",paraId:3,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:3,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:3,tocIndex:1}]},30478:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(42295);const t=[{value:"学术风格的主题。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 80,\n  theme: 'academy',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .axis('x', { zIndex: 1 });\n\nchart\n  .interaction('tooltip', { shared: true })\n  .interaction('elementHighlight', { background: true });\n\nchart.render();\n",paraId:1,tocIndex:0}]},59929:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(34584);const t=[{value:"经典主题。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 80,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .axis('x', { zIndex: 1 });\n\nchart\n  .interaction('tooltip', { shared: true })\n  .interaction('elementHighlight', { background: true });\n\nchart.render();\n",paraId:1,tocIndex:0}]},74804:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(72597);const t=[{value:"经典暗黑主题。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 80,\n  theme: 'classicDark',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .axis('x', { zIndex: 1 });\n\nchart\n  .interaction('tooltip', { shared: true })\n  .interaction('elementHighlight', { background: true });\n\nchart.render();\n",paraId:1,tocIndex:0}]},62986:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(2304);const t=[{value:"主要用于绘制 3D 条形图。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴，最后在场景中添加光源。",paraId:3,tocIndex:0},{value:"(() => {\n  // Create a WebGL renderer.\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  const data = [];\n  for (let x = 0; x < 5; ++x) {\n    for (let z = 0; z < 5; ++z) {\n      data.push({\n        x: `x-${x}`,\n        z: `z-${z}`,\n        y: 10 - x - z,\n        color: Math.random() < 0.33 ? 0 : Math.random() < 0.67 ? 1 : 2,\n      });\n    }\n  }\n\n  chart\n    .interval3D()\n    .data({\n      type: 'inline',\n      value: data,\n    })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('z', 'z')\n    .encode('color', 'color')\n    .encode('shape', 'cube')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 })\n    .style('opacity', 0.7);\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 50, 1280 / 960);\n    camera.setType(g.CameraType.ORBITING);\n    camera.rotate(-20, -20, 0);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 2.5,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0},{value:"目前 interval3D 有以下内置 shape 图形：",paraId:7,tocIndex:1},{value:"图形",paraId:8,tocIndex:1},{value:"描述",paraId:8,tocIndex:1},{value:"示例",paraId:8,tocIndex:1},{value:"cube",paraId:8,tocIndex:1},{value:"绘制立方体",paraId:8,tocIndex:1},{value:"cylinder",paraId:8,tocIndex:1},{value:"绘制圆柱",paraId:8,tocIndex:1},{value:"cone",paraId:8,tocIndex:1},{value:"绘制圆锥",paraId:8,tocIndex:1},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"fill",paraId:9,tocIndex:2},{value:"图形的填充色",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<string>",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"opacity",paraId:9,tocIndex:2},{value:"图形的整体透明度",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<number>",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"cursor",paraId:9,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<string>",paraId:9,tocIndex:2},{value:"'default'",paraId:9,tocIndex:2}]},88172:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70089);const t=[{value:"主要用于绘制 3D 折线图。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴。无需在场景中添加光源。",paraId:3,tocIndex:0},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  const pointCount = 31;\n  let r;\n  const data = [];\n\n  for (let i = 0; i < pointCount; i++) {\n    r = 10 * Math.cos(i / 10);\n    data.push({\n      x: r * Math.cos(i),\n      y: r * Math.sin(i),\n      z: i,\n    });\n  }\n\n  chart\n    .line3D()\n    .data(data)\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('z', 'z')\n    .encode('size', 4)\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0}]},83377:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(53427);const t=[{value:"主要用于绘制 3D 散点图，利用点的粒度来分析数据的分布情况。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴，最后在场景中添加光源。",paraId:3,tocIndex:0},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Cylinders')\n    .encode('shape', 'cube')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0},{value:"目前 point3D 有以下几个内置 shape 图形，包含 3D 和 2D：",paraId:7,tocIndex:1},{value:"图形",paraId:8,tocIndex:1},{value:"描述",paraId:8,tocIndex:1},{value:"示例",paraId:8,tocIndex:1},{value:"cube",paraId:8,tocIndex:1},{value:"绘制立方体",paraId:8,tocIndex:1},{value:"sphere",paraId:8,tocIndex:1},{value:"绘制球体",paraId:8,tocIndex:1},{value:"hollow",paraId:8,tocIndex:1},{value:"绘制空心圆",paraId:8,tocIndex:1},{value:"hollowDiamond",paraId:8,tocIndex:1},{value:"绘制空心钻石",paraId:8,tocIndex:1},{value:"hollowHexagon",paraId:8,tocIndex:1},{value:"绘制空心六边形",paraId:8,tocIndex:1},{value:"hollowSquare",paraId:8,tocIndex:1},{value:"绘制空心方块",paraId:8,tocIndex:1},{value:"hollowTriangleDown",paraId:8,tocIndex:1},{value:"绘制空心向下三角形",paraId:8,tocIndex:1},{value:"hollowTriangle",paraId:8,tocIndex:1},{value:"绘制空心三角形",paraId:8,tocIndex:1},{value:"hollowBowtie",paraId:8,tocIndex:1},{value:"绘制空心蝴蝶结",paraId:8,tocIndex:1},{value:"point",paraId:8,tocIndex:1},{value:"绘制圆",paraId:8,tocIndex:1},{value:"plus",paraId:8,tocIndex:1},{value:"绘制加号",paraId:8,tocIndex:1},{value:"diamond",paraId:8,tocIndex:1},{value:"绘制钻石",paraId:8,tocIndex:1},{value:"square",paraId:8,tocIndex:1},{value:"绘制方块",paraId:8,tocIndex:1},{value:"triangle",paraId:8,tocIndex:1},{value:"绘制三角形",paraId:8,tocIndex:1},{value:"triangleDown",paraId:8,tocIndex:1},{value:"绘制向下三角形",paraId:8,tocIndex:1},{value:"hexagon",paraId:8,tocIndex:1},{value:"绘制六边形",paraId:8,tocIndex:1},{value:"cross",paraId:8,tocIndex:1},{value:"绘制交叉符号",paraId:8,tocIndex:1},{value:"bowtie",paraId:8,tocIndex:1},{value:"绘制蝴蝶结",paraId:8,tocIndex:1},{value:"hyphen",paraId:8,tocIndex:1},{value:"绘制连字符",paraId:8,tocIndex:1},{value:"line",paraId:8,tocIndex:1},{value:"绘制竖线",paraId:8,tocIndex:1},{value:"tick",paraId:8,tocIndex:1},{value:"绘制 tick",paraId:8,tocIndex:1},{value:"使用球体效果如下：",paraId:9,tocIndex:1},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Cylinders')\n    .encode('shape', 'sphere')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:1},{value:"而在使用 2D 图形时，无需添加光源：",paraId:11,tocIndex:1},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Cylinders')\n    .encode('shape', 'triangle')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:1},{value:"属性",paraId:13,tocIndex:2},{value:"描述",paraId:13,tocIndex:2},{value:"类型",paraId:13,tocIndex:2},{value:"默认值",paraId:13,tocIndex:2},{value:"fill",paraId:13,tocIndex:2},{value:"图形的填充色",paraId:13,tocIndex:2},{value:"string",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<string>",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"opacity",paraId:13,tocIndex:2},{value:"图形的整体透明度",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<number>",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"cursor",paraId:13,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:13,tocIndex:2},{value:"string",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<string>",paraId:13,tocIndex:2},{value:"'default'",paraId:13,tocIndex:2},{value:"其他的 point3D 图形配置项和 ",paraId:14,tocIndex:2},{value:"cube",paraId:14,tocIndex:2},{value:" 一致。",paraId:14,tocIndex:2},{value:"属性",paraId:15,tocIndex:3},{value:"描述",paraId:15,tocIndex:3},{value:"类型",paraId:15,tocIndex:3},{value:"默认值",paraId:15,tocIndex:3},{value:"fill",paraId:15,tocIndex:3},{value:"图形的填充色",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"fillOpacity",paraId:15,tocIndex:3},{value:"图形的填充透明度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"stroke",paraId:15,tocIndex:3},{value:"图形的描边",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"strokeOpacity",paraId:15,tocIndex:3},{value:"描边透明度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"lineWidth",paraId:15,tocIndex:3},{value:"图形描边的宽度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"lineDash",paraId:15,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:15,tocIndex:3},{value:"[number,number]",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<[number, number]>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"opacity",paraId:15,tocIndex:3},{value:"图形的整体透明度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowColor",paraId:15,tocIndex:3},{value:"图形阴影颜色",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowBlur",paraId:15,tocIndex:3},{value:"图形阴影的高斯模糊系数",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowOffsetX",paraId:15,tocIndex:3},{value:"设置阴影距图形的水平距离",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowOffsetY",paraId:15,tocIndex:3},{value:"设置阴影距图形的垂直距离",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"cursor",paraId:15,tocIndex:3},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"'default'",paraId:15,tocIndex:3}]},62354:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(86668);const t=[{value:"主要用于绘制 3D 曲面图。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴。无需在场景中添加光源。",paraId:3,tocIndex:0},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  // We set the width/height to 100;\n  const size = 100;\n  const points = [];\n  for (let i = 0; i <= 2 * size; ++i) {\n    const theta = (Math.PI * (i - size)) / size;\n    for (let j = 0; j <= 2 * size; ++j) {\n      var phi = (Math.PI * (j - size)) / size;\n\n      const x = (10.0 + Math.cos(theta)) * Math.cos(phi);\n      const y = (10.0 + Math.cos(theta)) * Math.sin(phi);\n\n      points.push({\n        x: i,\n        y: j,\n        z: Math.sin(theta) * x * y,\n      });\n    }\n  }\n\n  chart\n    .surface3D()\n    .data(points)\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('z', 'z')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 1 })\n    .axis('y', { gridLineWidth: 1, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 1 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 2000, 45, 500 / 500);\n    camera.rotate(30, 30, 0);\n    camera.dolly(60);\n    camera.setType(g.CameraType.ORBITING);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0}]},50159:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(8342);const t=[{value:"对连续的 x 和 连续的 y 通道进行分箱，并且对通道根据指定的 reducer 进行聚合。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用 bin 变换。",paraId:1,tocIndex:0},{value:"chart\n  .point()\n  .encode('x', 'x')\n  // ...\n  .transform({\n    type: 'bin',\n    /* options */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"thresholdsX",paraId:3,tocIndex:1},{value:"对 x 分箱的数量",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"d3.thresholdScott",paraId:3,tocIndex:1},{value:"thresholdsY",paraId:3,tocIndex:1},{value:"对 y 分箱的数量",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"d3.thresholdScott",paraId:3,tocIndex:1},{value:"[channel]",paraId:3,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:3,tocIndex:1},{value:"Reducer",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:4,tocIndex:1}]},57491:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70602);const t=[{value:"对 x 通道进行分箱，如果希望对 y 通道进行分箱，使用 binX + transpose 坐标系。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用 binX 变换。",paraId:1,tocIndex:0},{value:"chart\n  .point()\n  .encode('x', 'x')\n  // ...\n  .transform({\n    type: 'binX',\n    /* options */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"thresholds",paraId:3,tocIndex:1},{value:"对 x 分箱的数量",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"d3.thresholdScott",paraId:3,tocIndex:1},{value:"[channel]",paraId:3,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:3,tocIndex:1},{value:"Reducer",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:4,tocIndex:1}]},99823:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(84087);const t=[{value:"对 y 和 y1 通道求差集。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/temperature-compare.json',\n  transforms: [\n    {\n      type: 'map',\n      callback: (d) => (d) => ({\n        ...d,\n        date: new Date(d.date),\n      })\n    }\n  ]\n});\n\nchart\n  .area()\n  .data({\n    transform: [\n      {\n        type: 'fold',\n        fields: ['New York', 'San Francisco'],\n        key: 'city',\n        value: 'temperature',\n      },\n    ],\n  })\n  .transform([{ type: 'diffY' }]) // Diff the 2 area shape.\n  .encode('x', 'date')\n  .encode('y', 'temperature')\n  .encode('color', 'city')\n  .encode('shape', 'hvh')\n  .scale('color', { range: ['#67a9cf', '#ef8a62'] });\n\nchart\n  .line()\n  .encode('x', 'date')\n  .encode('y', 'San Francisco')\n  .encode('shape', 'hvh')\n  .style('stroke', '#000');\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"groupBy",paraId:3,tocIndex:1},{value:"按照哪个通道分组数据",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"x",paraId:3,tocIndex:1},{value:"series",paraId:3,tocIndex:1},{value:"是否存在分组",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"true",paraId:3,tocIndex:1}]},71774:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(38747);const t=[{value:"生成 series 通道值为 color 通道的值，根据 series 通道实现分组效果。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' });\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"groupBy",paraId:3,tocIndex:1},{value:"按照哪个通道分组数据",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"x",paraId:3,tocIndex:1},{value:"reverse",paraId:3,tocIndex:1},{value:"是否逆序",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"orderBy",paraId:3,tocIndex:1},{value:"排序方式",paraId:3,tocIndex:1},{value:"TransformOrder",paraId:3,tocIndex:1},{value:"() => null",paraId:3,tocIndex:1},{value:"padding",paraId:3,tocIndex:1},{value:"分组数据之间的间距（0 ~ 1）",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype TransformOrder =\n  | 'value'\n  | 'sum'\n  | 'series'\n  | 'maxIndex'\n  | string[]\n  | null\n  | ((data: Record<string, Primitive>) => Primitive);\n",paraId:4,tocIndex:1},{value:"怎么设置分组柱形图，柱子之间的间距？",paraId:5,tocIndex:2},{value:"使用 ",paraId:6,tocIndex:2},{value:"dodgeX",paraId:6,tocIndex:2},{value:" 的 paddig 配置。",paraId:6,tocIndex:2},{value:"chart\n  .interval()\n  .transform({ type: 'dodgeX', padding: 0.5 }) // <----\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age');\n",paraId:7,tocIndex:2}]},52760:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(59930);const t=[{value:"根据指定通道设置 x 比例尺的 flex 属性，实现不等宽矩形的效果。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 1000,\n  paddingBottom: 100,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/90873879-09d7-4842-a493-03fb560267bc.csv',\n  })\n  .transform({ type: 'flexX', field: 'gdp' })\n  .encode('x', 'country')\n  .encode('y', 'value')\n  .encode('color', 'country')\n  .axis('y', { labelFormatter: '~s' });\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"field",paraId:3,tocIndex:1},{value:"指定生成权重数组的字段，优先级比 channel 高",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"(d: any) => Primitive[]",paraId:3,tocIndex:1},{value:"channel",paraId:3,tocIndex:1},{value:"指定生成权重数组的通道",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"y",paraId:3,tocIndex:1},{value:"reducer",paraId:3,tocIndex:1},{value:"聚合每一组权重的函数",paraId:3,tocIndex:1},{value:"Reducer",paraId:3,tocIndex:1},{value:"sum",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer = 'sum' | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:4,tocIndex:1}]},38095:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(8973);const t=[{value:"对离散的 x 和 连续的 y 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 300,\n});\n\nchart\n  .cell()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .transform({ type: 'group', color: 'max' })\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', (d) => new Date(d.date).getUTCMonth())\n  .encode('color', 'temp_max')\n  .style('inset', 0.5)\n  .scale('color', {\n    type: 'sequential',\n    palette: 'gnBu',\n  });\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"channels",paraId:3,tocIndex:1},{value:"针对哪些通道做数据分组聚合",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"['x', 'y']",paraId:3,tocIndex:1},{value:"[channel]",paraId:3,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:3,tocIndex:1},{value:"Reducer",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:4,tocIndex:1}]},76154:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(93112);const t=[{value:"对离散的 color 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 120,\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  })\n  .transform({ type: 'groupColor', y: 'count' })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'normalizeY' })\n  .axis('y', { labelFormatter: '.0%' })\n  .encode('color', 'sex')\n  .label({ text: 'sex', position: 'inside' });\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"[channel]",paraId:3,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:3,tocIndex:1},{value:"Reducer",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:4,tocIndex:1}]},2409:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(37996);const t=[{value:"对离散的 x 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。等效于 ",paraId:0},{value:"channels = ['x']",paraId:0},{value:" 的 ",paraId:0},{value:"group",paraId:1},{value:"。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 800,\n  height: 1200,\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/b6f2ff26-b232-447d-a613-0df5e30104a0.csv',\n});\n\nchart\n  .link()\n  .scale('y', { formatter: '.0%' })\n  .transform({ type: 'groupX', y: 'min', y1: 'max' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .style('stroke', '#000');\n\nchart\n  .point()\n  .scale('color', { palette: 'spectral' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('shape', 'point')\n  .encode('color', 'age');\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"[channel]",paraId:4,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:4,tocIndex:1},{value:"Reducer",paraId:4,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:5,tocIndex:1}]},11103:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(78764);const t=[{value:"对离散的 y 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。等效于 ",paraId:0},{value:"channels = ['y']",paraId:0},{value:" 的 ",paraId:0},{value:"group",paraId:1},{value:"。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 80,\n  height: 180,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  transform: [\n    {\n      type: 'map',\n      callback: (d) => ({ ...d, body_mass_g: +d.body_mass_g }),\n    },\n  ],\n});\n\nchart\n  .point()\n  .encode('x', 'body_mass_g')\n  .encode('y', 'species')\n  .style('stroke', '#000');\n\nchart\n  .link()\n  .transform({ type: 'groupY', x: 'min', x1: 'max' })\n  .encode('x', 'body_mass_g')\n  .encode('y', 'species')\n  .style('stroke', '#000');\n\nchart\n  .point()\n  .transform({ type: 'groupY', x: 'median' })\n  .encode('y', 'species')\n  .encode('x', 'body_mass_g')\n  .encode('shape', 'line')\n  .encode('size', 12)\n  .style('stroke', 'red');\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"[channel]",paraId:4,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:4,tocIndex:1},{value:"Reducer",paraId:4,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:5,tocIndex:1}]},64454:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(54331);const t=[{value:"根据离散的 x 和 离散的 y 比例尺，生成 dy 和 dx 通道，实现在某个区域散开的效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.coordinate({ type: 'polar' });\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  })\n  .transform({ type: 'jitter' })\n  .encode('x', 'clarity')\n  .encode('color', 'clarity')\n  .legend(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"分组在 x,y 方向上的间距 [0 ~ 1]",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"paddingX",paraId:2,tocIndex:1},{value:"分组在 x 方向的间距 [0 ~ 1]",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"paddingY",paraId:2,tocIndex:1},{value:"分组在 y 方向的间距 [0 ~ 1]",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"random",paraId:2,tocIndex:1},{value:"随机函数，返回值为 [0, 1)",paraId:2,tocIndex:1},{value:"() => number",paraId:2,tocIndex:1},{value:"Math.random",paraId:2,tocIndex:1}]},59044:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(19683);const t=[{value:"根据离散的 x 比例尺，生成 dx 通道，实现在某个区域的 x 方向散开的效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .transform({ type: 'sortX', channel: 'x' })\n  .transform({ type: 'jitterX' })\n  .encode('y', 'Horsepower')\n  .encode('x', 'Cylinders')\n  .encode('shape', 'hollow')\n  .encode('color', 'Cylinders')\n  .scale('x', { type: 'point' })\n  .scale('color', { type: 'ordinal' });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"每个分组之间的间距 [0 ~ 1]",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"random",paraId:2,tocIndex:1},{value:"随机函数，返回值为 [0, 1)",paraId:2,tocIndex:1},{value:"() => number",paraId:2,tocIndex:1},{value:"Math.random",paraId:2,tocIndex:1}]},23052:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26035);const t=[{value:"根据离散的 y 比例尺，生成 dy 通道，实现在某个区域的 y 方向散开的效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .transform({ type: 'sortY' })\n  .transform({ type: 'jitterY' })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Cylinders')\n  .encode('color', 'Cylinders')\n  .scale('y', { type: 'point' })\n  .scale('color', { type: 'ordinal' });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"每个分组之间的间距 [0 ~ 1]",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"random",paraId:2,tocIndex:1},{value:"随机函数，返回值为 [0, 1)",paraId:2,tocIndex:1},{value:"() => number",paraId:2,tocIndex:1},{value:"Math.random",paraId:2,tocIndex:1}]},74746:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(90290);const t=[{value:"对 y 和 y1 通道根据指定的 basis 进行归一化处理。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.year === 2000,\n      },\n    ],\n  })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'normalizeY' })\n  .encode('x', 'age')\n  .encode('y', 'people')\n  .encode('color', 'sex')\n  .scale('color', { type: 'ordinal', range: ['#ca8861', '#675193'] })\n  .axis('y', { labelFormatter: '.0%' })\n  .label({ text: 'people', position: 'inside', style: { fill: 'white' } });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"groupBy",paraId:2,tocIndex:1},{value:"按照哪个通道分组数据",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"string[]",paraId:2,tocIndex:1},{value:"x",paraId:2,tocIndex:1},{value:"basis",paraId:2,tocIndex:1},{value:"使用某一个聚合数据进行归一化计算",paraId:2,tocIndex:1},{value:"Basis",paraId:2,tocIndex:1},{value:"max",paraId:2,tocIndex:1},{value:"type Basis =\n  | 'deviation'\n  | 'first'\n  | 'last'\n  | 'max'\n  | 'mean'\n  | 'median'\n  | 'min'\n  | 'sum'\n  | (I, Y) => number;\n",paraId:3,tocIndex:1}]},21619:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(56497);const t=[{value:"让元素在空间中紧凑排列，常常有用于单元可视化。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/titanic.json',\n    transform: [\n      {\n        type: 'sortBy',\n        fields: ['survived'],\n      },\n      {\n        type: 'map',\n        callback: ({ survived, ...d }) => ({\n          ...d,\n          survived: survived + '',\n        }),\n      },\n    ],\n  })\n  .encode('x', 'pclass');\n\nfacetRect\n  .point()\n  .transform({ type: 'pack' }) // 指定 pack transform\n  .legend('color', { labelFormatter: (d) => (d === '1' ? 'Yes' : 'No') })\n  .encode('color', 'survived')\n  .encode('shape', 'point')\n  .encode('size', 3)\n  .tooltip({\n    title: '',\n    items: ['pclass', 'survived'],\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"每个元素之间的间距，单位为px",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"direction",paraId:2,tocIndex:1},{value:"元素的堆叠方向",paraId:2,tocIndex:1},{value:"'row' | 'col'",paraId:2,tocIndex:1},{value:"col",paraId:2,tocIndex:1}]},80440:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(3550);const t=[{value:"针对线、柱、条、散点类图表，当数据量远大于屏幕像素的时候，开启一些内置的采样策略，可以有效的优化图表的绘制效率，默认关闭，也就是按照原始数据全部渲染。",paraId:0},{value:"这是使用 ",paraId:1,tocIndex:0},{value:"sample",paraId:1,tocIndex:0},{value:" 的示例",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data(data);\n\nchart\n  .line()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .transform({\n    type: 'sample',\n    thresholds: 500,\n    strategy: 'max',\n  })\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"groupBy",paraId:3,tocIndex:1},{value:"数据分组的字段",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"series",paraId:3,tocIndex:1},{value:"thresholds",paraId:3,tocIndex:1},{value:"采样策略启用的数据量阈值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"2000",paraId:3,tocIndex:1},{value:"strategy",paraId:3,tocIndex:1},{value:"采用指定的采样策略",paraId:3,tocIndex:1},{value:"Strategy",paraId:3,tocIndex:1},{value:"median",paraId:3,tocIndex:1},{value:"strategy",paraId:4,tocIndex:1},{value:" 内置有 6 种策略，分别为：",paraId:4,tocIndex:1},{value:"lttb",paraId:5,tocIndex:1},{value:" - 采用 Largest-Triangle-Three-Bucket 算法，可以最大程度保证采样后线条的趋势，形状和极值。",paraId:5,tocIndex:1},{value:"median ",paraId:5,tocIndex:1},{value:" - 取过滤点的中位数",paraId:5,tocIndex:1},{value:"max",paraId:5,tocIndex:1},{value:" - 取过滤点的最大值",paraId:5,tocIndex:1},{value:"min",paraId:5,tocIndex:1},{value:" - 取过滤点的最小值",paraId:5,tocIndex:1},{value:"first",paraId:5,tocIndex:1},{value:" - 取第一个值",paraId:5,tocIndex:1},{value:"last",paraId:5,tocIndex:1},{value:" - 取第最后一个值",paraId:5,tocIndex:1},{value:"(I: number[], X: number[], Y: number[], thresholds: number) => number[]",paraId:5,tocIndex:1},{value:" - 使用自定义的函数进行采样",paraId:5,tocIndex:1},{value:"怎么做自定义的抽样策略？",paraId:6,tocIndex:2},{value:"function strategy(I: number[], X: number[], Y: number[], thresholds: number) {\n  // 这里对这一组数据进行抽样，返回一个数据的索引值\n  return [1, 101, 202 /*...*/];\n}\n\nchart\n  .line()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .transform([{ type: 'sample', strategy }]);\n",paraId:7,tocIndex:2}]},37778:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(42729);const t=[{value:"按照指定通道进行分组，根据指定通道和 selector 从每组选择出数据。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 800,\n  paddingLeft: 50,\n  paddingRight: 100,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/indices.json',\n});\n\nchart\n  .line()\n  .encode('x', (d) => new Date(d.Date))\n  .encode('y', 'Close')\n  .encode('color', 'Symbol')\n  .axis('y', { title: '↑ Change in price (%)' });\n\nchart\n  .text()\n  .encode('x', (d) => new Date(d.Date))\n  .encode('y', 'Close')\n  .encode('series', 'Symbol')\n  .encode('color', 'Symbol')\n  .encode('text', 'Symbol')\n  .transform({ type: 'select', channel: 'series', selector: 'last' })\n  .style('dx', 12);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"groupBy",paraId:2,tocIndex:1},{value:"针对指定的通道进行分组",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"string[]",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"channel",paraId:2,tocIndex:1},{value:"针对每个分组，使用指定的通道进行指定的数据抽取",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:"selector",paraId:2,tocIndex:1},{value:"针对每个分组，指定对应的数据抽取操作",paraId:2,tocIndex:1},{value:"Selector",paraId:2,tocIndex:1},{value:"first",paraId:2,tocIndex:1},{value:"type Selector =\n  | 'min'\n  | 'max'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: number[]) => number[]);\n",paraId:3,tocIndex:1}]},43866:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88157);const t=[{value:"按照指定通道进行分组，根据 x 通道和 selector 从每组选择出数据。",paraId:0},{value:"具体案例可以参考 ",paraId:1,tocIndex:0},{value:"select",paraId:2,tocIndex:0},{value:"，下面伪代码示意一下。",paraId:1,tocIndex:0},{value:"chart\n  .point()\n  // ...\n  .transform({\n    type: 'selectX',\n    selector: 'mean',\n    /* options */\n  });\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"groupBy",paraId:4,tocIndex:1},{value:"针对指定的通道进行分组",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"series",paraId:4,tocIndex:1},{value:"selector",paraId:4,tocIndex:1},{value:"针对每个分组，使用指定的通道进行指定的数据抽取，输出到 x 通道",paraId:4,tocIndex:1},{value:"Selector",paraId:4,tocIndex:1},{value:"first",paraId:4,tocIndex:1},{value:"type Selector =\n  | 'min'\n  | 'max'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: number[]) => number[]);\n",paraId:5,tocIndex:1}]},23976:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(43713);const t=[{value:"按照指定的通道进行分组，根据 y 通道和 selector 从每组选择出数据。",paraId:0},{value:"具体案例可以参考 ",paraId:1,tocIndex:0},{value:"select",paraId:2,tocIndex:0},{value:"，下面伪代码示意一下。",paraId:1,tocIndex:0},{value:"chart\n  .point()\n  // ...\n  .transform({\n    type: 'selectY',\n    selector: 'mean',\n    /* options */\n  });\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"groupBy",paraId:4,tocIndex:1},{value:"针对指定的通道进行分组",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"series",paraId:4,tocIndex:1},{value:"selector",paraId:4,tocIndex:1},{value:"针对每个分组，使用指定的通道进行指定的数据抽取，输出到 y 通道",paraId:4,tocIndex:1},{value:"Selector",paraId:4,tocIndex:1},{value:"first",paraId:4,tocIndex:1},{value:"type Selector =\n  | 'min'\n  | 'max'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: number[]) => number[]);\n",paraId:5,tocIndex:1}]},3885:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(75726);const t=[{value:"对离散的 color 比例尺的定义域根据指定通道排序。",paraId:0},{value:"案例可以参考 ",paraId:1,tocIndex:0},{value:"sortX",paraId:2,tocIndex:0},{value:"，下面是伪代码示意。",paraId:1,tocIndex:0},{value:"chart\n  .interval()\n  // ...\n  .transform({\n    type: 'sortColor',\n    /* options */\n  });\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"reverse",paraId:4,tocIndex:1},{value:"是否逆序",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"by",paraId:4,tocIndex:1},{value:"指定排序的通道",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"slice",paraId:4,tocIndex:1},{value:"选择一个分片范围",paraId:4,tocIndex:1},{value:"number | [number, number]",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"reducer",paraId:4,tocIndex:1},{value:"分组聚合，用于比较大小",paraId:4,tocIndex:1},{value:"Reducer",paraId:4,tocIndex:1},{value:"max",paraId:4,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:5,tocIndex:1}]},89810:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71673);const t=[{value:"对离散的 x 比例尺的定义域根据指定通道排序。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst labelFormatter = (d) => Math.abs(d) + (d < 0 ? 'BC' : d > 0 ? 'AC' : '');\nconst left = (d) => d.end > -1500 && d.start > -3000;\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 1000,\n  paddingRight: 80,\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/world-history.json',\n  })\n  .transform({ type: 'sortX', by: 'y' })\n  .transform({ type: 'sortColor', by: 'y', reducer: 'min' })\n  .axis('y', [\n    {\n      tickCount: 5,\n      labelFormatter,\n      grid: null,\n      title: null,\n      labelTextAlign: 'start',\n    },\n    {\n      position: 'top',\n      labelFormatter,\n      title: null,\n      labelTextAlign: 'start',\n    },\n  ])\n  .axis('x', false)\n  .encode('x', 'civilization')\n  .encode('y', ['start', 'end'])\n  .encode('color', 'region')\n  .scale('color', { palette: 'set2' })\n  .label({\n    text: 'civilization',\n    position: (d) => (left(d) ? 'left' : 'right'),\n    style: {\n      textAlign: (d) => (left(d) ? 'end' : 'start'),\n      dx: (d) => (left(d) ? -5 : 5),\n      fontSize: 10,\n    },\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"是否逆序",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"by",paraId:2,tocIndex:1},{value:"指定排序的通道",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"slice",paraId:2,tocIndex:1},{value:"选择一个分片范围",paraId:2,tocIndex:1},{value:"number | [number, number]",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"reducer",paraId:2,tocIndex:1},{value:"分组聚合，用于比较大小",paraId:2,tocIndex:1},{value:"Reducer",paraId:2,tocIndex:1},{value:"max",paraId:2,tocIndex:1},{value:"ordinal",paraId:2,tocIndex:1},{value:"reducer 处理逻辑，若被处理的数据是连续在设置为 ",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:3,tocIndex:1}]},49605:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50870);const t=[{value:"对离散的 y 比例尺的定义域根据指定通道排序。",paraId:0},{value:"chart\n  .interval()\n  // ...\n  .transform({\n    type: 'sortY',\n    /* options */\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"是否逆序",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"by",paraId:2,tocIndex:1},{value:"指定排序的通道",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"slice",paraId:2,tocIndex:1},{value:"选择一个分片范围",paraId:2,tocIndex:1},{value:"number | [number, number]",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"reducer",paraId:2,tocIndex:1},{value:"分组聚合，用于比较大小",paraId:2,tocIndex:1},{value:"Reducer",paraId:2,tocIndex:1},{value:"max",paraId:2,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:3,tocIndex:1}]},87132:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(36004);const t=[{value:"对 enterDuration 和 enterDelay 通道进行堆叠，实现分组动画的效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data([\n    { type: 'Apple', year: '2001', value: 260 },\n    { type: 'Orange', year: '2001', value: 100 },\n    { type: 'Banana', year: '2001', value: 90 },\n    { type: 'Apple', year: '2002', value: 210 },\n    { type: 'Orange', year: '2002', value: 150 },\n    { type: 'Banana', year: '2002', value: 30 },\n  ])\n  .transform({ type: 'stackEnter', groupBy: 'x' })\n  .encode('x', 'year')\n  .encode('y', 'value')\n  .encode('color', 'type')\n  .encode('series', 'type')\n  .encode('enterDuration', 1000);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"groupBy",paraId:2,tocIndex:1},{value:"选择一个分组通道",paraId:2,tocIndex:1},{value:"string | string[]",paraId:2,tocIndex:1},{value:"x",paraId:2,tocIndex:1},{value:"orderBy",paraId:2,tocIndex:1},{value:"排序的通道",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:"null",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"是否逆序",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"duration",paraId:2,tocIndex:1},{value:"动画间隔",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"3000",paraId:2,tocIndex:1},{value:"reducer",paraId:2,tocIndex:1},{value:"分组取值方式",paraId:2,tocIndex:1},{value:"(I: number[], V: any[]) => any",paraId:2,tocIndex:1},{value:"(I, V) => V[I[0]]",paraId:2,tocIndex:1}]},3081:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26510);const t=[{value:"按照指定通道分组，对每组的 y 和 y1 通道进行堆叠，实现堆叠效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'sortX', by: 'y', reverse: true })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"groupBy",paraId:2,tocIndex:1},{value:"指定分组通道",paraId:2,tocIndex:1},{value:"string | string[]",paraId:2,tocIndex:1},{value:"x",paraId:2,tocIndex:1},{value:"orderBy",paraId:2,tocIndex:1},{value:"指定排序的数据",paraId:2,tocIndex:1},{value:"TransformOrder",paraId:2,tocIndex:1},{value:"null",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"y 通道选择的数据通道来源",paraId:2,tocIndex:1},{value:"`'y'\\",paraId:2,tocIndex:1},{value:"'y1'`",paraId:2,tocIndex:1},{value:"y1",paraId:2,tocIndex:1},{value:"y1 通道选择的数据通道来源",paraId:2,tocIndex:1},{value:"`'y'\\",paraId:2,tocIndex:1},{value:"'y1'`",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"是否逆序",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"是否有分组字段",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype TransformOrder =\n  | 'value'\n  | 'sum'\n  | 'series'\n  | 'maxIndex'\n  | string[]\n  | null\n  | ((data: Record<string, Primitive>) => Primitive);\n",paraId:3,tocIndex:1}]},88680:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(47139);const t=[{value:"按照指定通道分组，给每组的 y 和 y1 通道添加偏移，实现对称效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n  transform: [{\n    type: 'map',\n    callback: (d) => ({\n      ...d,\n      date: new Date(d.date),\n    })\n  }],\n});\n\nchart\n  .area()\n  .transform({ type: 'stackY' })\n  .transform({ type: 'symmetryY' })\n  .encode('x', 'date')\n  .encode('y', 'unemployed')\n  .encode('color', 'industry');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"groupBy",paraId:2,tocIndex:1},{value:"指定分组通道",paraId:2,tocIndex:1},{value:"string | string[]",paraId:2,tocIndex:1},{value:"x",paraId:2,tocIndex:1},{value:"怎么绘制一个对称的条形图？",paraId:3,tocIndex:2},{value:"同样的，使用这个 transform 即可，如下：",paraId:4,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 800,\n  height: 300,\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data([\n    { x: 'A', y: 100 },\n    { x: 'B', y: 200 },\n    { x: 'C', y: 300 },\n    { x: 'D', y: 250 },\n  ])\n  .transform({ type: 'stackY' })\n  .transform({ type: 'symmetryY' })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .scale('x', { padding: 0.5 })\n  .legend(false);\n\nchart.render();\n",paraId:5,tocIndex:2}]}}]);