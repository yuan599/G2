"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9706],{41127:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(53183);var t={}},98400:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(68459);var t={}},90532:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(56570);var t={}},48928:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(13756);var t={}},51230:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(77494);var t={}},56889:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(5620);var t={}},62681:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(55343);var t={}},80965:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(46318);var t={}},96783:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(39419);var t={}},25506:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(26233);var t={}},18524:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(85050);var t={}},93267:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(46612);var t={}},12742:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(84888);var t={}},61921:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(1274);var t={}},45296:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(72973);var t={}},97779:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(61432);var t={}},79858:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(72993);var t={}},20917:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(82711);var t={}},47694:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(31572);var t={}},84501:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(60965);var t={}},54896:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(46287);var t={}},20779:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(56855);var t={}},48055:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(4304);var t={}},75037:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(5275);var t={}},15973:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(10219);var t={}},70021:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(48018);var t={}},402:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(99505);var t={}},94026:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(46140);var t={}},21206:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(12722);var t={}},12575:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(17059);var t={}},36105:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(20459);var t={}},68215:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(93282);var t={}},66129:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(46404);var t={}},33025:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(1287);var t={}},5086:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50292);var t={}},84178:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(43771);var t={}},25440:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(5940);var t={}},68577:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(51331);var t={}},33663:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(79356);var t={}},21012:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(28773);var t={}},60500:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(12339);var t={}},45228:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(97830);var t={}},62881:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(88845);var t={}},37739:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(10310);var t={}},28744:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(15508);var t={}},48220:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(65669);var t={}},46275:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(10399);var t={}},6079:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(58482);var t={}},26116:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(62625);var t={}},26090:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(68702);var t={}},3567:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(33051);var t={}},9454:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(26638);var t={}},35195:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(35860);var t={}},44307:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(89391);var t={}},40327:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(39129);var t={}},57257:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(2978);var t={}},1219:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(14601);var t={}},40212:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(40895);var t={}},26596:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(10848);var t={}},83664:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87278);var t={}},23108:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71153);var t={}},21802:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(94952);var t={}},44478:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(28010);var t={}},54583:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(47085);var t={}},39881:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50934);var t={}},36813:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(58881);var t={}},69448:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(95498);var t={}},50165:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(74466);var t={}},56985:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(48451);var t={}},65305:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(56090);var t={}},27408:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70340);var t={}},54999:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(9687);var t={}},21626:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(40549);var t={}},35772:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(67009);var t={}},54119:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(40813);var t={}},2344:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(22716);var t={}},94636:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(34759);var t={}},58489:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(44707);var t={}},77181:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(18763);var t={}},75768:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(63039);var t={}},7693:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(98326);var t={}},74926:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(35059);var t={}},38965:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(29529);var t={}},22918:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(14161);var t={}},38565:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(31550);var t={}},64990:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(62083);var t={}},29266:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(51686);var t={}},55592:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(40317);var t={}},9974:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(56908);var t={}},51330:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(40420);var t={}},7964:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(73442);var t={}},62488:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(16125);var t={}},93344:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71232);var t={}},6439:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(5095);var t={}},18380:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(68259);var t={}},51043:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(26520);var t={}},32259:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(94308);var t={}},65698:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(7950);var t={}},75171:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(14193);var t={}},94552:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70480);var t={}},71026:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(42376);var t={}},4493:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(75353);var t={}},76937:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(98271);var t={}},14097:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(14962);var t={}},50569:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87649);var t={}},71504:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(75309);var t={}},31669:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(96709);var t={}},79e3:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(9356);var t={}},20315:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70527);var t={}},89609:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(68405);var t={}},94866:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(69071);var t={}},77284:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70885);var t={}},53779:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(60369);var t={}},3269:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(24322);var t={}},14891:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(44745);var t={}},33376:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(76026);var t={}},30476:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(40246);var t={}},84770:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(75343);var t={}},79398:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(55750);var t={}},92365:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(62848);var t={}},67637:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(59617);var t={}},57566:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(77186);var t={}},47175:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(2275);var t={}},32873:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(44494);var t={}},75853:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(43724);var t={}},43233:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(66883);var t={}},6829:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(31249);var t={}},11046:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(57019);var t={}},68767:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(944);var t={}},55431:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(24374);var t={}},46002:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(8343);var t={}},11901:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(20103);var t={}},24646:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(11918);var t={}},12698:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(18198);var t={}},70391:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(77702);var t={}},8548:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(54298);var t={}},38016:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(22676);var t={}},1567:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(36005);var t={}},87292:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(39207);var t={}},25163:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(35323);var t={}},25590:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(19362);var t={}},12908:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(29409);var t={}},38811:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(41276);var t={}},66654:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(24397);var t={}},42202:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(23658);var t={}},19843:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(66286);var t={}},57086:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(67350);var t={}},15586:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(35990);var t={}},20601:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(58212);var t={}},89864:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(97098);var t={}},74835:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(19079);var t={}},22445:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(34069);var t={}},15959:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(89795);var t={}},53702:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(68189);var t={}},51479:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(13358);var t={}},18617:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(59578);var t={}},85761:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(79979);var t={}},51253:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(98660);var t={}},87166:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(19707);var t={}},18252:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(63370);var t={}},4840:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(25319);var t={}},64330:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87744);var t={}},89385:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(4151);var t={}},32657:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(11340);var t={}},25695:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(70909);var t={}},30915:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(38500);var t={}},96202:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71584);var t={}},12521:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(74544);var t={}},5750:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(22603);var t={}},22465:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(83700);var t={}},39001:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(23537);var t={}},25269:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(50157);var t={}},1598:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(31566);var t={}},7319:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(12723);var t={}},44807:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(24009);var t={}},21229:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(71018);var t={}},84570:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(80835);var t={}},71175:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(87390);var t={}},58216:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(61638);var t={}},13976:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(81213);var t={}},97630:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(13312);var t={}},75213:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(6187);var t={}},40849:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(16970);var t={}},30597:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(21466);var t={}},87914:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(67238);var t={}},88725:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(56023);var t={}},89603:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(7050);var t={}},22970:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(4356);var t={}},8657:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(27065);var t={}},593:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(99588);var t={}},97872:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(78845);var t={}},7232:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(55938);var t={}},34661:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(61185);var t={}},13733:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(59633);var t={}},59071:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(18493);var t={}},74999:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(37107);var t={}},88526:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(79966);var t={}},64497:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(24241);var t={}},55942:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(9516);var t={}},58099:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(13780);var t={}},56845:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(88106);var t={}},294:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(17278);var t={}},82801:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(35723);var t={}},73516:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(42890);var t={}},87972:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(41759);var t={}},78895:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(76280);var t={}},52363:function(a,e,n){n.r(e),n.d(e,{demos:function(){return t}});n(67294),n(69424);var t={}},57326:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(53183);const t=[]},27040:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(68459);const t=[]},79593:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(56570);const t=[]},29037:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(13756);const t=[]},51982:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(77494);const t=[]},5549:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(5620);const t=[]},93630:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(55343);const t=[]},24779:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(46318);const t=[]},92729:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(39419);const t=[]},11991:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26233);const t=[]},12686:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(85050);const t=[]},41126:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(46612);const t=[{value:"When using AntV G2 to render charts, manually setting the ",paraId:0,tocIndex:1},{value:"padding",paraId:0,tocIndex:1},{value:" can cause the chart title to not render properly or disappear entirely.",paraId:0,tocIndex:1},{value:"Related issue: ",paraId:1,tocIndex:1},{value:"Title is not displayed after setting",paraId:1,tocIndex:1},{value:"G2 dynamically calculates the space required for all components by default, but once a fixed ",paraId:2,tocIndex:2},{value:"padding",paraId:2,tocIndex:2},{value:" value is specified, this automatic adjustment logic is skipped, which may lead to incomplete rendering of the components.",paraId:2,tocIndex:2},{value:"There are two ways to resolve this issue:",paraId:3,tocIndex:3},{value:"Allow G2 to automatically calculate the optimal spacing to ensure that all components are rendered correctly:",paraId:4,tocIndex:4},{value:"chart\n  .interval()\n  .encode('x', 'category')\n  .encode('y', 'value')\n  .encode('color', 'type');\n",paraId:5,tocIndex:4},{value:"If you must manually set the ",paraId:6,tocIndex:5},{value:"padding",paraId:6,tocIndex:5},{value:", make sure to reserve enough space for dynamically generated components:",paraId:6,tocIndex:5},{value:"chart\n  .padding(50)\n  .interval()\n  .encode('x', 'category')\n  .encode('y', 'value')\n  .encode('color', 'type');\n",paraId:7,tocIndex:5},{value:"When manually setting ",paraId:8,tocIndex:6},{value:"padding",paraId:8,tocIndex:6},{value:", it is recommended to debug and find the appropriate values.",paraId:8,tocIndex:6},{value:"Consider the space requirements for titles, legends, and other components.",paraId:8,tocIndex:6},{value:"If a specific layout is not required, it's better to use G2's automatic layout system.",paraId:8,tocIndex:6}]},17671:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(84888);const t=[{value:"Animate in G2 is an important part of visualization and can improve the expressiveness of visualization. Animate can be declared at the level of mark:",paraId:0},{value:"({\n  type: 'interval',\n  animate: {\n    enter: {\n      type: 'scaleInX',\n      duration: 100,\n      delay: 10,\n    },\n    update: {\n      type: 'morphing',\n    },\n  },\n});\n",paraId:1},{value:"// API\n// First way\nchart\n  .interval()\n  .animate('enter', { type: 'scaleInX', duration: 100, delay: 10 })\n  .animate('update', { type: 'morphing' });\n\n// Second way\nchart.interval().animate({\n  enter: {\n    type: 'scaleInX',\n    duration: 100,\n    delay: 10,\n  },\n  update: {\n    type: 'morphing',\n  },\n});\n",paraId:2},{value:"Mark specifies animation properties through ",paraId:3,tocIndex:0},{value:"mark.animate",paraId:3,tocIndex:0},{value:", there are three parts of animation that can be specified:",paraId:3,tocIndex:0},{value:"enter",paraId:4,tocIndex:0},{value:"- New graphics",paraId:4,tocIndex:0},{value:"update",paraId:4,tocIndex:0},{value:"- Updated graphics",paraId:4,tocIndex:0},{value:"exit",paraId:4,tocIndex:0},{value:"- deleted graphics",paraId:4,tocIndex:0},{value:"Each part of the animation has the following properties:",paraId:5,tocIndex:0},{value:"type",paraId:6,tocIndex:0},{value:"duration",paraId:6,tocIndex:0},{value:"delay",paraId:6,tocIndex:0},{value:"easing",paraId:6,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .animate('enter', {\n      type: 'scaleInY', // Specify the type of entry animation\n      duration: 1000, // Specify the execution time of the entrance animation\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:7,tocIndex:0},{value:"Animation properties can be used as a channel in G2, and can also encode data. For example, in the gantt chart below, the appearance and duration of each bar are linearly related to the data.",paraId:8,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ transform: [{ type: 'transpose' }] })\n    .data([\n      { name: 'event planning', startTime: 1, endTime: 4 },\n      { name: 'layout logistics', startTime: 3, endTime: 13 },\n      { name: 'select vendors', startTime: 5, endTime: 8 },\n      { name: 'hire venue', startTime: 9, endTime: 13 },\n      { name: 'hire caterer', startTime: 10, endTime: 14 },\n      { name: 'hire event decorators', startTime: 12, endTime: 17 },\n      { name: 'rehearsal', startTime: 14, endTime: 16 },\n      { name: 'event celebration', startTime: 17, endTime: 18 },\n    ])\n    .encode('x', 'name')\n    .encode('y', ['endTime', 'startTime'])\n    .encode('color', 'name')\n    .encode('enterDuration', (d) => d.endTime - d.startTime) // Calculate the duration and encode\n    .encode('enterDelay', 'startTime'); // Specify the time of occurrence and encode\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:9,tocIndex:1},{value:"G2 also provides the StackEnter mark transform to implement group animation. This mark transform will first group graphics, and then stack their appearance time and duration in space to achieve the effect of appearing sequentially.",paraId:10,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { type: 'Apple', year: '2001', value: 260 },\n      { type: 'Orange', year: '2001', value: 100 },\n      { type: 'Banana', year: '2001', value: 90 },\n      { type: 'Apple', year: '2002', value: 210 },\n      { type: 'Orange', year: '2002', value: 150 },\n      { type: 'Banana', year: '2002', value: 30 },\n    ])\n    //Group by color and appear in order\n    .transform({ type: 'stackEnter', groupBy: 'color' })\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .encode('color', 'type')\n    .encode('series', 'type')\n    .encode('enterDuration', 1000); // The duration of each group is 1000\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:11,tocIndex:2},{value:"The animations above are all excessive animations and do not involve data updates. G2 also provides the ability to create keyframe animations. use ",paraId:12,tocIndex:3},{value:"chart.timingKeyframe",paraId:12,tocIndex:3},{value:" to create a time container that holds a series of views and applies smooth transitions to related graphical elements within those views. The corresponding relationship is specified by two channels, ",paraId:12,tocIndex:3},{value:"key",paraId:12,tocIndex:3},{value:" and ",paraId:12,tocIndex:3},{value:"groupKey",paraId:12,tocIndex:3},{value:".",paraId:12,tocIndex:3},{value:"(async () => {\n  const data = await fetch(\n    'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  ).then((res) => res.json());\n\n  const chart = new G2.Chart();\n\n  // Refer to the description of css animation\n  const keyframe = chart\n    .timingKeyframe() // Create container\n    .attr('iterationCount', 2) // Number of iterations\n    .attr('direction', 'alternate') // Direction\n    .attr('duration', 1000); // Duration\n\n  keyframe\n    .interval()\n    .transform({ type: 'groupX', y: 'mean' })\n    .data(data)\n    .encode('x', 'gender')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('key', 'gender'); // Specify key\n\n  keyframe\n    .point()\n    .data(data)\n    .encode('x', 'height')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('shape', 'point')\n    .encode('groupKey', 'gender'); // Specify groupKey\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:13,tocIndex:3},{value:"TimingSequence",paraId:14,tocIndex:4},{value:" is still under development, please stay tuned.",paraId:14,tocIndex:4}]},77089:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(1274);const t=[{value:"G2 has designed a ",paraId:0},{value:"specification (spec)",paraId:0},{value:" to describe the visualizations that can be drawn, which allows users to render charts by calling ",paraId:0},{value:"chart.options(options)",paraId:0},{value:" with specified ",paraId:0},{value:"options",paraId:0},{value:" that meet the specification. For example, a basic bar chart can be drawn as follows:",paraId:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: {\n      x: 'genre',\n      y: 'sold',\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:1},{value:"Based on the underlying spec, in order to provide more diverse and flexible capabilities to declare charts, G2 also provides a series of functional APIs to declare charts, such as declaring the simple bar chart above:",paraId:2,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:3,tocIndex:0},{value:"Simply put, ",paraId:4,tocIndex:0},{value:"calling the functional API is just generating internal options. There is no essential difference between the two, and their drawing capabilities are the same. It's more of a stylistic choice.",paraId:4,tocIndex:0},{value:" For example, when calling ",paraId:4,tocIndex:0},{value:"chart.interval",paraId:4,tocIndex:0},{value:", an Interval mark is added to ",paraId:4,tocIndex:0},{value:"children",paraId:4,tocIndex:0},{value:":",paraId:4,tocIndex:0},{value:"({\n  type: 'view',\n  children: [{ type: 'interval' }],\n});\n",paraId:5,tocIndex:0},{value:"chart.interval().encode('x', 'genre')",paraId:6,tocIndex:0},{value:" just sets the ",paraId:6,tocIndex:0},{value:"encode",paraId:6,tocIndex:0},{value:" in options：",paraId:6,tocIndex:0},{value:"({\n  type: 'view',\n  children: [{ type: 'interval', encode: { x: 'genre' } }],\n});\n",paraId:7,tocIndex:0},{value:"Therefore, understanding the mapping relationship between the functional API and Options is very important. In the subsequent introduction, the spec will be introduced first, followed by the corresponding API.",paraId:8,tocIndex:0},{value:"Overall, G2's spec is a hierarchical ",paraId:9,tocIndex:1},{value:"view tree",paraId:9,tocIndex:1},{value:", composed of different nodes. Nodes specify their types through ",paraId:9,tocIndex:1},{value:"node.type",paraId:9,tocIndex:1},{value:", different types have different functions, and they are nested through ",paraId:9,tocIndex:1},{value:"node.children",paraId:9,tocIndex:1},{value:".",paraId:9,tocIndex:1},{value:"({\n  type: 'spaceFlex',\n  children: [\n    {\n      type: 'view',\n      children: [{ type: 'line' }, { type: 'point' }],\n    },\n    {\n      type: 'interval',\n    },\n  ],\n});\n",paraId:10,tocIndex:1},{value:"The view can be simply understood as a chart, or ",paraId:11,tocIndex:1},{value:"a single view plot",paraId:11,tocIndex:1},{value:'. This "tree" manages views in time and space through different container nodes, thereby managing our views in time and space to draw ',paraId:11,tocIndex:1},{value:"multiple view plots",paraId:11,tocIndex:1},{value:".",paraId:11,tocIndex:1},{value:"The API declares the hierarchical relationship by adding the corresponding ",paraId:12,tocIndex:1},{value:"child",paraId:12,tocIndex:1},{value:" node to the specified ",paraId:12,tocIndex:1},{value:"parent",paraId:12,tocIndex:1},{value:" in the form of ",paraId:12,tocIndex:1},{value:"parent.[child]()",paraId:12,tocIndex:1},{value:". For example, the above hierarchical relationship needs to be declared as follows using the API:",paraId:12,tocIndex:1},{value:"const spaceFlex = chart.spaceFlex();\n\nconst view = spaceFlex.view();\n\nview.line();\n\nview.point();\n\nspaceFlex.interval();\n",paraId:13,tocIndex:1},{value:"Next, we introduce three types of nodes:",paraId:14,tocIndex:1},{value:"Mark nodes",paraId:15,tocIndex:1},{value:"View nodes",paraId:15,tocIndex:1},{value:"Composite nodes",paraId:15,tocIndex:1},{value:"Mark nodes are leaf nodes on this tree, which cannot be nested further, that is, they cannot contain the ",paraId:16,tocIndex:2},{value:"children",paraId:16,tocIndex:2},{value:" attribute. Marks are similar to the concept of a chart. For example, an Interval mark can draw a bar chart.",paraId:16,tocIndex:2},{value:"({\n  type: 'interval',\n});\n",paraId:17,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval', // Mark node\n    data: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: {\n      x: 'genre',\n      y: 'sold',\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:18,tocIndex:2},{value:"If you want to have multiple marks in the chart, you need to put them into view nodes to draw a single view plot. View nodes can only nest mark nodes.",paraId:19,tocIndex:3},{value:"({\n  type: 'view',\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n",paraId:20,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'view', // view node\n    data: [\n      { year: '1991', value: 3 },\n      { year: '1992', value: 4 },\n      { year: '1993', value: 3.5 },\n      { year: '1994', value: 5 },\n      { year: '1995', value: 4.9 },\n      { year: '1996', value: 6 },\n      { year: '1997', value: 7 },\n      { year: '1998', value: 9 },\n      { year: '1999', value: 13 },\n    ],\n    encode: {\n      x: 'year',\n      y: 'value',\n    },\n    children: [\n      { type: 'line' }, // Line mark\n      { type: 'point' }, // Point mark\n    ],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:21,tocIndex:3},{value:"Used to draw multiple views in a chart (multi-view chart). It can nest composite nodes, view nodes and mark nodes.",paraId:22,tocIndex:4},{value:"({\n  type: 'spaceFlex',\n  children: [\n    { type: 'spaceFlex' }, // composite node\n    { type: 'view' }, // view node\n    { type: 'interval' }, // mark node\n  ],\n});\n",paraId:23,tocIndex:4},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'spaceFlex',\n    width: 800,\n    height: 400,\n    children: [\n      {\n        type: 'interval',\n        padding: 'auto',\n        data: [\n          { genre: 'Shooter', sold: 350 },\n          { genre: 'Sports', sold: 275 },\n          { genre: 'Other', sold: 150 },\n          { genre: 'Action', sold: 120 },\n          { genre: 'Strategy', sold: 115 },\n        ],\n        encode: { x: 'genre', y: 'sold' },\n      },\n      {\n        type: 'interval',\n        padding: 'auto',\n        data: [\n          { genre: 'Shooter', sold: 350 },\n          { genre: 'Sports', sold: 275 },\n          { genre: 'Other', sold: 150 },\n          { genre: 'Action', sold: 120 },\n          { genre: 'Strategy', sold: 115 },\n        ],\n        encode: { y: 'sold', color: 'genre' },\n        transform: [{ type: 'stackY' }],\n        coordinate: { type: 'theta' },\n        legend: { color: false },\n      },\n    ],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:24,tocIndex:4}]},3430:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(72973);const t=[{value:"In G2, the ",paraId:0},{value:"Axis",paraId:0},{value:" can be understood as the visualization of the scale corresponding to the spatial channels (x, y, and position).",paraId:0},{value:"The axis can be configured at the mark level:",paraId:1},{value:"({\n  type: 'interval',\n  axis: {\n    x: { labelFormatter: '%0' },\n    y: { tickCount: 5 },\n  },\n});\n",paraId:2},{value:"// API\n// First method\nchart\n  .interval()\n  .axis('x', { labelFormatter: '%0' })\n  .axis('y', { tickCount: 5 });\n\n// Second method\nchart.interval().axis({\n  x: { labelFormatter: '%0' },\n  y: { tickCount: 5 },\n});\n",paraId:3},{value:"The axis can also be configured at the view level:",paraId:4},{value:"({\n  type: 'view',\n  axis: {\n    x: { labelFormatter: '%0' },\n    y: { tickCount: 5 },\n  },\n});\n",paraId:5},{value:"// API\n// First method\nchart.axis('x', { labelFormatter: '%0' }).axis('y', { tickCount: 5 });\n\n// Second method\nchart.axis({\n  x: { labelFormatter: '%0' },\n  y: { tickCount: 5 },\n});\n",paraId:6},{value:"In G2, each mark has its own axis. If the scale corresponding to the mark is synchronized, the axes will be merged.",paraId:7,tocIndex:0},{value:"The axis has transitivity. The axis declared on the view will be passed to the marks declared by ",paraId:8,tocIndex:1},{value:"children",paraId:8,tocIndex:1},{value:". If the mark has an axis for the corresponding channel, it will be merged; otherwise, it will not be affected.",paraId:8,tocIndex:1},{value:"Hide the axis of each channel:",paraId:9,tocIndex:2},{value:"({\n  type: 'interval',\n  axis: { y: false }, // Hide the y-axis\n});\n",paraId:10,tocIndex:2},{value:"Hide multiple axes:",paraId:11,tocIndex:2},{value:"({\n  type: 'interval',\n  axis: false,\n});\n",paraId:12,tocIndex:2}]},32590:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(61432);const t=[{value:"Most of G2's abilities are exposed to the user through the ",paraId:0},{value:"Chart",paraId:0},{value:" object, such as drawing a simple bar chart:",paraId:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:1},{value:"Next, let's take a look at the core usage of ",paraId:2},{value:"Chart",paraId:2},{value:".",paraId:2},{value:"Each G2 visualization is created by instantiating a ",paraId:3,tocIndex:0},{value:"Chart",paraId:3,tocIndex:0},{value:" object to create a new ",paraId:3,tocIndex:0},{value:"chart instance",paraId:3,tocIndex:0},{value:":",paraId:3,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  /* Chart options */\n});\n",paraId:4,tocIndex:0},{value:"You can specify some global options through the ",paraId:5,tocIndex:1},{value:"new Chart(options)",paraId:5,tocIndex:1},{value:": such as mounted containers, width, height, etc. All options are ",paraId:5,tocIndex:1},{value:"optional",paraId:5,tocIndex:1},{value:".",paraId:5,tocIndex:1},{value:"// Specify options as needed\nconst chart = new Chart({\n  width: 800, // chart height\n  height: 400, // chart width\n  container: 'chart', // ID of the container to be mounted\n});\n",paraId:6,tocIndex:1},{value:"Chart instances can only be rendered on the screen after they are mounted. There are two ways to mount them.",paraId:7,tocIndex:2},{value:'<div id="chart"></div>\n',paraId:8,tocIndex:2},{value:"The first is automatic mounting.",paraId:9,tocIndex:2},{value:"const chart = new Chart({\n  container: 'chart', //Specify the mounting container id\n});\n\n// or\nconst chart = new Chart({\n  container: document.getElementById('chart'), // Specify the mounting container\n});\n",paraId:10,tocIndex:2},{value:"The second way is to mount it manually.",paraId:11,tocIndex:2},{value:"const chart = new Chart();\n\n// Declare visualization\n// ...\n\nconst container = chart.getContainer(); // Get the mounted container\ndocument.getElementById('chart').appendChild(container);\n",paraId:12,tocIndex:2},{value:"Of course, before you can see the chart, you still need to call ",paraId:13,tocIndex:3},{value:"chart.render",paraId:13,tocIndex:3},{value:"。",paraId:13,tocIndex:3},{value:"//Create chart instance\nconst chart = new Chart({\n  container: 'chart',\n});\n\n// Declare visualization\n// ...\n\n// render\nchart\n  .render()\n  .then(() => {\n    //Rendering successful\n  })\n  .catch((error) => {\n    //Rendering failed\n  });\n",paraId:14,tocIndex:3},{value:"After modifying the declared visualization via the API provided by the chart instance, the chart can be updated simply by calling ",paraId:15,tocIndex:4},{value:"chart.render",paraId:15,tocIndex:4},{value:" again.",paraId:15,tocIndex:4},{value:"// first rendering\nchart.render();\n\n// update statement\n// ...\n\n//Update chart\nchart.render();\n",paraId:16,tocIndex:4},{value:"Clearing the canvas and canceling event listening will also clear the chart configuration and is often used to draw new charts.",paraId:17,tocIndex:5},{value:"chart.clear();\n",paraId:18,tocIndex:5},{value:"Destroying the canvas and canceling event listening are often used when destroying components and pages.",paraId:19,tocIndex:6},{value:"chart.destroy();\n",paraId:20,tocIndex:6}]},62248:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(72993);const t=[{value:"In G2, ",paraId:0},{value:"View Composition",paraId:0},{value:" provides the ability to draw multiple charts in a single visualization. G2 defines a ",paraId:0},{value:"view graph",paraId:0},{value:" to describe a ",paraId:0},{value:"multi-view plot",paraId:0},{value:".",paraId:0},{value:"({\n  type: 'spaceLayer',\n  children: [{ type: 'view' }, { type: 'view' }],\n});\n",paraId:1},{value:"// API\nconst layer = chart.spaceLayer();\n\nlayer.view();\n\nlayer.view();\n",paraId:2},{value:"The most basic way of view composition is ",paraId:3,tocIndex:0},{value:"Space Composition",paraId:3,tocIndex:0},{value:", which is simply a division of space.",paraId:3,tocIndex:0},{value:"A more common way of composition is ",paraId:4,tocIndex:0},{value:"composition.spaceLayer",paraId:4,tocIndex:0},{value:": overlaying multiple charts together, using scenarios where these views have different coordinate systems, such as the bar and pie charts below.",paraId:4,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  const layer = chart.spaceLayer();\n\n  // Bar chart\n  layer\n    .interval()\n    .data([\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Other', sold: 150 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Strategy', sold: 115 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  // Pie chart\n  layer\n    .interval() // Create an interval\n    .attr('paddingLeft', 300) // Setting position\n    .attr('paddingBottom', 250)\n    .coordinate({ type: 'theta' }) // Specify coordinate system\n    .transform({ type: 'stackY' })\n    .data([\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Other', sold: 150 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Strategy', sold: 115 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .legend('color', false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:5,tocIndex:0},{value:"You can also use ",paraId:6,tocIndex:0},{value:"composition.spaceFlex",paraId:6,tocIndex:0},{value:" to arrange views horizontally or vertically.",paraId:6,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n  const flex = chart.spaceFlex();\n\n  // Bar chart\n  flex\n    .interval()\n    .data([\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Other', sold: 150 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Strategy', sold: 115 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  // Pie chart\n  flex\n    .interval() // Create an interval\n    .coordinate({ type: 'theta' }) // Specify coordinate system\n    .transform({ type: 'stackY' })\n    .data([\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Other', sold: 150 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Strategy', sold: 115 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .legend('color', false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:7,tocIndex:0},{value:"Also, these composition methods can be nested, so it's easy to implement a report through a separate statement.",paraId:8,tocIndex:0},{value:"Facet Composition",paraId:9,tocIndex:1},{value:" differs from Space Composition in that it also partitions the data, with each view presenting a subset of the original data.",paraId:9,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart({\n    height: 260,\n    width: 800,\n    paddingLeft: 40,\n    paddingBottom: 50,\n  });\n\n  const facetRect = chart\n    .facetRect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n    })\n    // Partition the data based on the 'series' field,\n    // and arrange them in the x direction\n    .encode('x', 'series');\n\n  facetRect\n    .point()\n    .attr('padding', 'auto')\n    .attr('inset', 10)\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .style('stroke', '#000');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:1},{value:"Repeat Composition",paraId:11,tocIndex:2},{value:" differs from facet in that each view shows the full amount of data, but with repeated encoding to create multiple views.",paraId:11,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart({\n    width: 900,\n    height: 900,\n    padding: 'auto',\n    paddingLeft: 55,\n    paddingBottom: 45,\n  });\n\n  const repeatMatrix = chart\n    .repeatMatrix()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n      // Data processing\n    })\n    // Specify the encodings to be repeated\n    // A total of 4 * 4 = 16 views will be generated\n    // The x and y encodings of each view are the cross product of the following fields\n    .encode('position', [\n      'culmen_length_mm',\n      'culmen_depth_mm',\n      'flipper_length_mm',\n      'body_mass_g',\n    ]);\n\n  repeatMatrix.point().attr('padding', 'auto').encode('color', 'species');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:2},{value:"Time Composition",paraId:13,tocIndex:3},{value:" manages views in space and is used for animation.",paraId:13,tocIndex:3},{value:"(async () => {\n  const data = await fetch(\n    'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  ).then((res) => res.json());\n\n  const chart = new G2.Chart();\n\n  // Refer to css animation description\n  const keyframe = chart\n    .timingKeyframe() // Create container\n    .attr('iterationCount', 2)\n    .attr('direction', 'alternate') \n    .attr('duration', 1000);\n\n  keyframe\n    .interval()\n    .transform({ type: 'groupX', y: 'mean' })\n    .data(data)\n    .encode('x', 'gender')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('key', 'gender'); // Specify key\n\n  keyframe\n    .point()\n    .data(data)\n    .encode('x', 'height')\n    .encode('y', 'weight')\n    .encode('color', 'gender')\n    .encode('shape', 'point')\n    .encode('groupKey', 'gender'); // Specify groupKey\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:3}]},30678:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(82711);const t=[{value:"The Coordinate System",paraId:0},{value:" in G2 will perform a series of point transform. In G2, the mark's position channels x and y will be mapped to the range [0,1] through a scale mapping, after that, the coordinate system is used to transform points into canvas coordinates, thereby changing the spatial display of the mark.",paraId:0},{value:"The coordinate system be configured at the level of view:",paraId:1},{value:"({\n  type: 'view',\n  coordinate: { type: 'polar' },\n});\n",paraId:2},{value:"// API\nchart.coordinate({ type: 'polar' });\n",paraId:3},{value:"It can also be configured at the level of mark:",paraId:4},{value:"({\n  type: 'interval',\n  coordinate: { type: 'polar' },\n});\n",paraId:5},{value:"// API\nchart.interval().coordinate({ type: 'polar' });\n",paraId:6},{value:"Each view can only have one coordinate system. In addition to its own attributes, the coordinate system also contains a series of ",paraId:7,tocIndex:0},{value:"Coordinate Transform",paraId:7,tocIndex:0},{value:"。",paraId:7,tocIndex:0},{value:"({\n  type: 'polar', // type\n  innerRadius: 0.6, // its own properties\n  outerRadius: 0.8,\n  transform: [{ type: 'transpose' }], // Coordinate transform\n});\n",paraId:8,tocIndex:0},{value:"The coordinate system of the level of mark has bubbling properties. The coordinate system of the level of mark will be merged with the coordinate system of the view, and the coordinate system of the first mark has the highest priority.",paraId:9,tocIndex:1},{value:"chart.coordinate({ type: 'theta' });\nchart.line().coordinate({ type: 'polar' });\nchart.area().coordinate({ type: 'radial' });\n",paraId:10,tocIndex:1},{value:"Equivalent to the following situation:",paraId:11,tocIndex:1},{value:"chart.coordinate({ type: 'polar' });\nchart.line();\nchart.area():\n",paraId:12,tocIndex:1},{value:"This feature is conducive to encapsulation and coordinate-related composite mark, such as pie charts:",paraId:13,tocIndex:1},{value:"(() => {\n  function Pie({ encode = {}, ...rest } = {}) {\n    const { value, ...restEncode } = encode;\n    return {\n      ...rest,\n      type: 'interval',\n      coordinate: { type: 'theta' }, // Encapsulation coordinate system\n      transform: [{ type: 'stackY' }],\n      encode: {\n        ...restEncode,\n        y: value,\n      },\n    };\n  }\n\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: Pie, // Use this compound mark\n    data: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: { value: 'sold', color: 'genre' },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:1},{value:'The default coordinate system is the Cartesian coordinate system. In addition, there is also a kind of coordinate system that transforms charts to polar coordinate systems and is used to draw a series of "circle" charts. This type of coordinate system is called ',paraId:15,tocIndex:2},{value:"Radial Coordinate",paraId:15,tocIndex:2},{value:"。",paraId:15,tocIndex:2},{value:"For example, you can use interval mark and polar coordinate transform to draw rose charts.",paraId:16,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'polar' })\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .axis('y', false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:17,tocIndex:3},{value:"You can also use interval mark and theta coordinate system to draw pie charts.",paraId:18,tocIndex:4},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'theta' })\n    .transform({ type: 'stackY' })\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:19,tocIndex:4},{value:"You can also use interval mark and radial coordinate systems to draw radial charts.",paraId:20,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'radial', endAngle: Math.PI })\n    .data([\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Other', sold: 150 },\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Shooter', sold: 350 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .axis('y', false)\n    .legend('color', false)\n    .axis('x', { title: null });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:21,tocIndex:5},{value:"In addition to the previous relatively basic coordinate transform, there are also some slightly more complex coordinate transform, such as parallel coordinate system.",paraId:22,tocIndex:6},{value:"(() => {\n  const axis = {\n    zIndex: 1,\n    titlePosition: 'right',\n    line: true,\n    labelStroke: '#fff',\n    labelStrokeWidth: 5,\n    labelFontSize: 10,\n    labelStrokeLineJoin: 'round',\n    titleStroke: '#fff',\n    titleFontSize: 10,\n    titleStrokeWidth: 5,\n    titleStrokeLineJoin: 'round',\n    titleTransform: 'translate(-50%, 0) rotate(-90)',\n    lineStroke: 'black',\n    tickStroke: 'black',\n    lineStrokeWidth: 1,\n  };\n\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n    })\n    .coordinate({ type: 'parallel' }) // Specify parallel coordinate transform\n    //Specify the data dimension of concern\n    //Each data dimension corresponds to an axis\n    .encode('position', [\n      'economy (mpg)',\n      'cylinders',\n      'displacement (cc)',\n      'power (hp)',\n      'weight (lb)',\n      '0-60 mph (s)',\n      'year',\n    ])\n    .encode('color', 'weight (lb)')\n    .style('strokeWidth', 1.5)\n    .style('strokeOpacity', 0.4)\n    .scale('color', {\n      type: 'sequential',\n      palette: 'brBG',\n      offset: (t) => 1 - t,\n    })\n    .legend({\n      color: { length: 400 },\n    })\n    .axis('position', axis)\n    .axis('position1', axis)\n    .axis('position2', axis)\n    .axis('position3', axis)\n    .axis('position4', axis)\n    .axis('position5', axis)\n    .axis('position6', axis)\n    .axis('position7', axis)\n    .interaction('tooltip', { series: false });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:23,tocIndex:6},{value:"The above coordinate system can be used in combination with the coordinate transform.",paraId:24,tocIndex:7},{value:"One of the more commonly used transform is transpose, which is mainly used to change the direction of the chart. For example, draw horizontal bar charts.",paraId:25,tocIndex:8},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ transform: [{ type: 'transpose' }] }) // Appoint transpose\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:26,tocIndex:8},{value:"There is also a fisheye coordinate transform, which is used to set the focus of the chart. Here is how to use it.",paraId:27,tocIndex:9},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n    })\n    .encode('x', 'GDP')\n    .encode('y', 'LifeExpectancy')\n    .encode('size', 'Population')\n    .encode('color', 'continent')\n    .encode('shape', 'point')\n    .scale('size', { type: 'log', range: [4, 20] })\n    .axis('x', { labelFormatter: '~s' })\n    .style('fillOpacity', 0.3)\n    .style('lineWidth', 1)\n    .legend(false)\n    .interaction('fisheye');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:28,tocIndex:9},{value:"At present, we only support ",paraId:29,tocIndex:10},{value:"cartesian3D",paraId:29,tocIndex:10},{value:" coordinate system:",paraId:29,tocIndex:10},{value:"chart.coordinate({ type: 'cartesian3D' });\n",paraId:30,tocIndex:10}]},52100:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(31572);const t=[{value:"In G2, ",paraId:0},{value:"Data",paraId:0},{value:" is primarily used to specify the data to be visualized and data transformation (pre-processing).  Data can be specified at the view level:",paraId:0},{value:"({\n  type: 'view',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:1},{value:"// API form\nchart.data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n",paraId:2},{value:"It can also be specified at the mark level:",paraId:3},{value:"({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:4},{value:"// API form\nchart.interval().data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n",paraId:5},{value:"A complete data declaration consists of two parts: ",paraId:6,tocIndex:0},{value:"Connector",paraId:6,tocIndex:0},{value:" and ",paraId:6,tocIndex:0},{value:"Data Transform",paraId:6,tocIndex:0},{value:". Connector is the way to get data, specified by ",paraId:6,tocIndex:0},{value:"data.type",paraId:6,tocIndex:0},{value:", and data transform is the pre-processing function, specified by ",paraId:6,tocIndex:0},{value:"data.transform",paraId:6,tocIndex:0},{value:".",paraId:6,tocIndex:0},{value:"({\n  data: {\n    type: 'fetch', // specify connector type\n    // Specify connector value\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    transform: [\n      // specify transforms, multiple can be specified\n      { type: 'filter', callback: (d) => d.sex === 'gender' },\n    ],\n  },\n});\n",paraId:7,tocIndex:0},{value:"If the data satisfies the following three conditions:",paraId:8,tocIndex:0},{value:"Inline data",paraId:9,tocIndex:0},{value:"Is an array",paraId:9,tocIndex:0},{value:"No pre-processing function",paraId:9,tocIndex:0},{value:"It can be directly specified as ",paraId:10,tocIndex:0},{value:"data",paraId:10,tocIndex:0},{value:":",paraId:10,tocIndex:0},{value:"({\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n",paraId:11,tocIndex:0},{value:"Each mark has its data, which means we can visualize multiple datasets in one view, such as the following interval chart:",paraId:12,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rangeX()\n    .data([\n      { year: [new Date('1933'), new Date('1945')], event: 'Nazi Rule' },\n      {\n        year: [new Date('1948'), new Date('1989')],\n        event: 'GDR (East Germany)',\n      },\n    ])\n    .encode('x', 'year')\n    .encode('color', 'event')\n    .scale('color', { independent: true, range: ['#FAAD14', '#30BF78'] })\n    .style('fillOpacity', 0.75)\n    .tooltip(false);\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/year-population.json',\n    })\n    .encode('x', (d) => new Date(d.year))\n    .encode('y', 'population')\n    .encode('color', '#333');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:13,tocIndex:1},{value:"The view can also be data-bound. The data bound to a view is transitive: it will be passed to the marks in ",paraId:14,tocIndex:2},{value:"view.children",paraId:14,tocIndex:2},{value:". If the mark does not have data, its data will be set; otherwise, there is no effect. This means that for marks that share data, you can bind the data to the view.",paraId:14,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.data([\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ]);\n\n  chart.line().encode('x', 'year').encode('y', 'value');\n\n  chart.point().encode('x', 'year').encode('y', 'value');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:15,tocIndex:2},{value:"Since the data is bound to the mark, updating the data can be a bit complicated. Take the following case as an example:",paraId:16,tocIndex:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst interval = chart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold');\n\nchart.render();\n",paraId:17,tocIndex:3},{value:"There are several ways to update the data of the interval in the above example:",paraId:18,tocIndex:3},{value:"First method: The most basic way.",paraId:19,tocIndex:3},{value:"// Update the data bound to the interval\ninterval.data(newData);\n\n// Update the chart rendering through chart\nchart.render();\n",paraId:20,tocIndex:3},{value:"Second method: Syntactic sugar for the above method.",paraId:21,tocIndex:3},{value:"// Update interval data and render the chart\ninterval.changeData(newData);\n",paraId:22,tocIndex:3},{value:"Third method: Get the interval object through the query API, then update the data.",paraId:23,tocIndex:3},{value:"chart.getNodesByType('rect')[0].changeData(data);\n",paraId:24,tocIndex:3},{value:"How to use third-party libraries to draw statistical regression lines?",paraId:25,tocIndex:4},{value:"With the ability to customize data conversion, we can use external data processing-related libraries. In the example below, we use the third-party library ",paraId:26,tocIndex:4},{value:"d3-regression",paraId:26,tocIndex:4},{value:" to generate a linear statistical regression line:",paraId:26,tocIndex:4},{value:"import { regressionLinear } from 'd3-regression';\n\nnode.data({\n  // Use D3's regression linear to perform linear regression on the data\n  transform: [\n    {\n      type: 'custom',\n      callback: regressionLinear(),\n    },\n  ],\n});\n",paraId:27,tocIndex:4},{value:"More examples of statistical regression lines can be found in ",paraId:28,tocIndex:4},{value:"Data Analysis-regression",paraId:29,tocIndex:4},{value:".",paraId:28,tocIndex:4}]},46583:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(60965);const t=[{value:"In G2, ",paraId:0},{value:"encoding",paraId:0},{value:" is mainly used to specify the relationship between visual element attributes and data. You can specify encoding at the mark level:",paraId:0},{value:"({\n  type: 'interval',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:1},{value:"// API\n// First kind\nchart.interval().encode('x', 'name').encode('y', 'value');\n\n// Second kind\nchart.interval().encode({ x: 'name', y: 'value' });\n",paraId:2},{value:"You can also specify encoding at the view level:",paraId:3},{value:"({\n  type: 'view',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:4},{value:"// API\n// First kind\nchart.encode('x', 'name').encode('y', 'value');\n\n// Second kind\nchart.encode({ x: 'name', y: 'value' });\n",paraId:5},{value:"To control the style of the mark, we often bind a column of data to its visual attribute. For example, in the example below, we bind the 'height' column of data to the 'x' attribute, the 'weight' column of data to the 'y' attribute, and the 'gender' column of data to the 'color' attribute.",paraId:6,tocIndex:0},{value:"table({\n  url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n});\n",paraId:7,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:8,tocIndex:0},{value:"This binding process is called ",paraId:9,tocIndex:0},{value:"encode",paraId:9,tocIndex:0},{value:". We often say that a visual attribute of the graph is encoded by a column of data, and this data-driven property is called a ",paraId:9,tocIndex:0},{value:"channel",paraId:9,tocIndex:0},{value:". For example, the x, y, and color channels of the point mark in the example above are each encoded by the corresponding column of data.",paraId:9,tocIndex:0},{value:"A complete encoding consists of ",paraId:10,tocIndex:0},{value:"encode.type",paraId:10,tocIndex:0},{value:" and ",paraId:10,tocIndex:0},{value:"encode.value",paraId:10,tocIndex:0},{value:":",paraId:10,tocIndex:0},{value:"({\n  type: 'point',\n  encode: {\n    x: { type: 'field', value: 'weight' },\n    y: { type: 'field', value: 'height' },\n    color: { type: 'field', value: 'gender' },\n  },\n});\n",paraId:11,tocIndex:0},{value:"In most cases, you can directly specify the value, as shown below for encoding some built-in categories:",paraId:12,tocIndex:0},{value:"Specify the binding of the channel and a certain column of the data:",paraId:13,tocIndex:1},{value:"({\n  type: 'interval',\n  encode: { x: { type: 'field', value: 'name' } },\n});\n",paraId:14,tocIndex:1},{value:"// Syntax sugar\n({\n  type: 'interval',\n  encode: { x: 'name' },\n});\n",paraId:15,tocIndex:1},{value:"Specify the binding of the channel and some newly generated bindings:",paraId:16,tocIndex:2},{value:"({\n  type: 'interval',\n  encode: {\n    color: {\n      type: 'transform',\n      value: (d) => (d.value > 100 ? 'high' : 'low'),\n    },\n  },\n});\n",paraId:17,tocIndex:2},{value:"// Syntax sugar\n({\n  type: 'interval',\n  encode: {\n    color: (d) => (d.value > 100 ? 'high' : 'low'),\n  },\n});\n",paraId:18,tocIndex:2},{value:"Set the channel value to a constant, which is often used to specify the color channel.",paraId:19,tocIndex:3},{value:"({\n  type: 'interval',\n  encode: { color: { type: 'constant', value: 'steelblue' } },\n});\n",paraId:20,tocIndex:3},{value:"// Syntax sugar\n({\n  type: 'interval',\n  encode: { color: 'steelblue' },\n});\n",paraId:21,tocIndex:3},{value:"Specify the value of a channel as an array.",paraId:22,tocIndex:4},{value:"({\n  type: 'line',\n  encode: {\n    x: { type: 'column', value: [0, 1, , 2, 3] },\n  },\n});\n",paraId:23,tocIndex:4},{value:"For some big data scenarios, using array columns is more suitable, here is a simple example.",paraId:24,tocIndex:4},{value:"(() => {\n  const I = [0, 1, 2, 3, 4];\n  const X = I.map((i) => ((i - 2) * Math.PI) / 2);\n  const Y = X.map((x) => Math.sin(x));\n\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data(I)\n    .encode('x', { type: 'column', value: X })\n    .encode('y', { type: 'column', value: Y })\n    .encode('shape', 'smooth');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:25,tocIndex:4},{value:"Certainly, for spatial channels like x and y channels, you often need more than one column of data, such as a waterfall chart, you can specify multiple columns for a channel through an array.",paraId:26,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n      { month: 'Feb.', profit: 772096, start: 387264, end: 1159360 },\n      { month: 'Mar.', profit: 638075, start: 1159360, end: 1797435 },\n      { month: 'Apr.', profit: -211386, start: 1797435, end: 1586049 },\n      { month: 'May', profit: -138135, start: 1586049, end: 1447914 },\n      { month: 'Jun', profit: -267238, start: 1447914, end: 1180676 },\n      { month: 'Jul.', profit: 431406, start: 1180676, end: 1612082 },\n      { month: 'Aug.', profit: 363018, start: 1612082, end: 1975100 },\n      { month: 'Sep.', profit: -224638, start: 1975100, end: 1750462 },\n      { month: 'Oct.', profit: -299867, start: 1750462, end: 1450595 },\n      { month: 'Nov.', profit: 607365, start: 1450595, end: 2057960 },\n      { month: 'Dec.', profit: 1106986, start: 2057960, end: 3164946 },\n      { month: 'Total', start: 0, end: 3164946 },\n    ])\n    .encode('x', 'month')\n    .encode('y', ['end', 'start']) // specify two columns of data\n    .encode('color', (d) =>\n      d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n    )\n    .axis('y', { labelFormatter: '~s' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:27,tocIndex:5},{value:"In addition, you can specify them separately in the form of ",paraId:28,tocIndex:5},{value:"${channel}${index}",paraId:28,tocIndex:5},{value:":",paraId:28,tocIndex:5},{value:"// Equivalent to the above form\nchart.encode('y', 'end').encode('y1', 'start');\n",paraId:29,tocIndex:5},{value:"Different marks have different channels, but there are also some common channels. Some common and drawing-related common channels are as follows:",paraId:30,tocIndex:6},{value:"x",paraId:31,tocIndex:6},{value:" - x position",paraId:31,tocIndex:6},{value:"y",paraId:31,tocIndex:6},{value:" - y position",paraId:31,tocIndex:6},{value:"z",paraId:31,tocIndex:6},{value:" - z position",paraId:31,tocIndex:6},{value:"color",paraId:31,tocIndex:6},{value:" - color, fill color or border color, determined by shape",paraId:31,tocIndex:6},{value:"opacity",paraId:31,tocIndex:6},{value:" - opacity, fill-opacity or border opacity, determined by the style",paraId:31,tocIndex:6},{value:"shape",paraId:31,tocIndex:6},{value:" - shape",paraId:31,tocIndex:6},{value:"size",paraId:31,tocIndex:6},{value:" - size, different marks have different functions",paraId:31,tocIndex:6},{value:"series",paraId:31,tocIndex:6},{value:" - series, used to split into series",paraId:31,tocIndex:6},{value:"key",paraId:31,tocIndex:6},{value:" - unique mark, used for data updates",paraId:31,tocIndex:6},{value:"Channel encode has transitivity, the encoding of the view is passed to the mark specified by ",paraId:32,tocIndex:7},{value:"children",paraId:32,tocIndex:7},{value:", if the mark does not have the encoding of the corresponding channel, then set, otherwise do nothing. For example, draw a point line chart:",paraId:32,tocIndex:7},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .data([\n      { year: '1991', value: 3 },\n      { year: '1992', value: 4 },\n      { year: '1993', value: 3.5 },\n      { year: '1994', value: 5 },\n      { year: '1995', value: 4.9 },\n      { year: '1996', value: 6 },\n      { year: '1997', value: 7 },\n      { year: '1998', value: 9 },\n      { year: '1999', value: 13 },\n    ])\n    .encode('x', 'year') // View level encoding\n    .encode('y', 'value');\n\n  chart.line();\n\n  chart.point();\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:33,tocIndex:7}]},29531:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(46287);const t=[{value:"In G2, ",paraId:0},{value:"Interaction",paraId:0},{value:" provides the ability to explore data as needed.",paraId:0},{value:"Interaction can be set at the view level:",paraId:1},{value:"({\n  type: 'view',\n  interaction: {\n    tooltip: {},\n    brushHighlight: {},\n  },\n});\n",paraId:2},{value:"// API\n// First method\nchart.interaction('tooltip', {}).interaction('brushHighlight', {});\n\n// Second method\nchart.interaction({\n  tooltip: {},\n  brushHighlight: {},\n});\n",paraId:3},{value:"Interaction can also be set at the mark level:",paraId:4},{value:"({\n  type: 'interval',\n  interaction: {\n    tooltip: {},\n    brushHighlight: {},\n  },\n});\n",paraId:5},{value:"// API\n//First method\nchart.interval().interaction('tooltip', {}).interaction('brushHighlight', {});\n\n//Second method\nchart.interval().interaction({\n  tooltip: {},\n  brushHighlight: {},\n});\n",paraId:6},{value:"G2's interactions are effective for each view. If you want to turn off the interaction, you can do as follows:",paraId:7,tocIndex:0},{value:"({\n  type: 'view',\n  interaction: {\n    tooltip: false,\n    brushHighlight: false,\n  },\n});\n",paraId:8,tocIndex:0},{value:"Interaction has a bubbling nature. The view interaction will be overridden by the interaction set by its mark, and the coordinate system corresponding to the last mark has the highest priority.",paraId:9,tocIndex:1},{value:"chart.interaction('elementHighlight', { link: true, background: true });\nchart.line().interaction('elementHighlight', { link: false });\nchart.area().interaction('elementHighlight', { background: false });\n",paraId:10,tocIndex:1},{value:"This is equivalent to the following situation:",paraId:11,tocIndex:1},{value:"chart.interaction('elementHighlight', { link: false, background: false });\nchart.line();\nchart.area():\n",paraId:12,tocIndex:1},{value:"In G2, you can set the interaction state of the mark through ",paraId:13,tocIndex:2},{value:"mark.state",paraId:13,tocIndex:2},{value:", such as setting the select and unselect states as follows. When using elementSelect, these two states will be consumed.",paraId:13,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .transform({ type: 'sortX', by: 'y', reverse: true })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .axis('y', { labelFormatter: '.0%' })\n    .state({\n      selected: { fill: '#f4bb51' }, // set selected state\n      unselected: { opacity: 0.6 }, // set unselected state\n    })\n    .interaction('elementSelect', true);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:2},{value:"In addition to selected and unselected, there are the following built-in state types:",paraId:15,tocIndex:2},{value:"active",paraId:16,tocIndex:2},{value:"inactive",paraId:16,tocIndex:2},{value:"If the built-in interaction cannot meet your needs, you can also implement some interactions through custom interaction. Here is a custom highlight interaction.",paraId:17,tocIndex:3},{value:'(() => {\n  const { Chart, PLOT_CLASS_NAME, ELEMENT_CLASS_NAME, register } = G2;\n\n  register(\'interaction.customElementHighlight\', () => {\n    return (context, _, emitter) => {\n      const { container } = context;\n      const plotArea = container.querySelector(`.${PLOT_CLASS_NAME}`);\n      const elements = plotArea.querySelectorAll(`.${ELEMENT_CLASS_NAME}`);\n      const elementSet = new Set(elements);\n\n      const pointerover = (e) => {\n        const { target: element } = e;\n        if (!elementSet.has(element)) return;\n        element.style.stroke = "red";\n        element.style.lineWidth = 2;\n      };\n\n      const pointerout = (e) => {\n        const { target: element } = e;\n        if (!elementSet.has(element)) return;\n        element.style.stroke = null;\n      };\n\n      plotArea.addEventListener(\'pointerover\', pointerover);\n      plotArea.addEventListener(\'pointerout\', pointerout);\n      return () => {\n        plotArea.removeEventListener(\'pointerover\', pointerover);\n        plotArea.removeEventListener(\'pointerout\', pointerout);\n      };\n    };\n  })\n\n  const chart = new Chart();\n\n  chart\n    .interval()\n    .data([\n      { name: "London", 月份: "Jan.", 月均降雨量: 18.9 },\n      { name: "London", 月份: "Feb.", 月均降雨量: 28.8 },\n      { name: "London", 月份: "Mar.", 月均降雨量: 39.3 },\n      { name: "London", 月份: "Apr.", 月均降雨量: 81.4 },\n      { name: "London", 月份: "May", 月均降雨量: 47 },\n      { name: "London", 月份: "Jun.", 月均降雨量: 20.3 },\n      { name: "London", 月份: "Jul.", 月均降雨量: 24 },\n      { name: "London", 月份: "Aug.", 月均降雨量: 35.6 },\n      { name: "Berlin", 月份: "Jan.", 月均降雨量: 12.4 },\n      { name: "Berlin", 月份: "Feb.", 月均降雨量: 23.2 },\n      { name: "Berlin", 月份: "Mar.", 月均降雨量: 34.5 },\n      { name: "Berlin", 月份: "Apr.", 月均降雨量: 99.7 },\n      { name: "Berlin", 月份: "May", 月均降雨量: 52.6 },\n      { name: "Berlin", 月份: "Jun.", 月均降雨量: 35.5 },\n      { name: "Berlin", 月份: "Jul.", 月均降雨量: 37.4 },\n      { name: "Berlin", 月份: "Aug.", 月均降雨量: 42.4 },\n    ])\n    .transform({ type: \'dodgeX\' })\n    .encode(\'x\', \'月份\')\n    .encode(\'y\', \'月均降雨量\')\n    .encode(\'color\', \'name\')\n    .interaction(\'customElementHighlight\', true);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n',paraId:18,tocIndex:3},{value:"Interaction syntax is still under design...",paraId:19,tocIndex:4}]},94263:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(56855);const t=[{value:"Label",paraId:0},{value:" in G2 is one of the means to annotate charts. Multiple labels can be added to a mark:",paraId:0},{value:"({\n  type: 'interval',\n  labels: [\n    {\n      text: 'genre', // Specify the bound field\n      dy: -15, // Specify style\n    },\n    {\n      text: 'sold', // Specify the bound field\n      fill: '#fff', // Specify style\n      dy: 5,\n    },\n  ],\n});\n",paraId:1},{value:"// API method\n// First way\nchart\n  .interval()\n  .label({\n    text: 'genre', // Specify the bound field\n    dy: -15, //Specify style\n  })\n  .label({\n    text: 'sold', // Specify the bound field\n    fill: '#fff', // Specify style\n    dy: 5,\n  });\n\n// Second way\nchart.interval().label([\n  {\n    text: 'genre', // Specify the bound field\n    dy: -15, // Specify style\n  },\n  {\n    text: 'sold', // Specify the bound field\n    fill: '#fff', // Specify style\n    dy: 5,\n  },\n]);\n",paraId:2},{value:"At the level of View, you can declare label transform through ",paraId:3},{value:"labelTransform",paraId:3},{value:":",paraId:3},{value:"({\n  type: 'view',\n  labelTransform: [{ type: 'overlapHide' }, { type: 'contrastReverse' }],\n});\n",paraId:4},{value:"// API method\n// First way\nchart\n  .labelTransform({ type: 'overlapHide' })\n  .labelTransform({ type: 'contrastReverse' });\n\n// Second way\nchart.labelTransform([{ type: 'overlapHide' }, { type: 'contrastReverse' }]);\n",paraId:5},{value:"Each mark can have multiple labels. The configuration of a label is roughly as follows:",paraId:6,tocIndex:0},{value:"({\n  type: 'interval',\n  labels: [\n    {\n      text: 'name', // Bound field or a constant string\n      dy: -2, // @antv/g supported styles\n      fill: 'red', // @antv/g supported styles\n      selector: 'last', // Selector\n      transform: [], // Label transform\n    },\n  ],\n});\n",paraId:7,tocIndex:0},{value:"Here's a simple example:",paraId:8,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    // Declare the first label\n    .label({\n      text: 'genre', // Specify the bound field\n      style: {\n        dy: -15, // Specify style\n      },\n    })\n    // Declare the second label\n    .label({\n      text: 'sold', // Specify the bound field\n      style: {\n        fill: '#fff', // Specify style\n        dy: 5,\n      },\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:9,tocIndex:0},{value:"For the mark of a graph corresponding to multiple data items, we can select the mark that needs to be retained through ",paraId:10,tocIndex:1},{value:"selector",paraId:10,tocIndex:1},{value:". Currently supported values ​​are as follows:",paraId:10,tocIndex:1},{value:"first",paraId:11,tocIndex:1},{value:" - the first one",paraId:11,tocIndex:1},{value:"last",paraId:11,tocIndex:1},{value:" - the last one",paraId:11,tocIndex:1},{value:"function",paraId:11,tocIndex:1},{value:" - custom selector",paraId:11,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/indices.json',\n    })\n    .transform({ type: 'normalizeY', basis: 'first', groupBy: 'color' })\n    .encode('x', (d) => new Date(d.Date))\n    .encode('y', 'Close')\n    .encode('color', 'Symbol')\n    .axis('y', { title: '↑ Change in price (%)' })\n    .label({\n      text: 'Symbol',\n      selector: 'last', // Select the last one\n      style: {\n        fontSize: 10,\n      },\n    });\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:1},{value:"When the display of labels does not meet expectations, such as overlapping or unclear colors, we can use ",paraId:13,tocIndex:2},{value:"Label Transform",paraId:13,tocIndex:2},{value:" to optimize label display.",paraId:13,tocIndex:2},{value:"It can be found that in the example below, the labels corresponding to times such as 2004 have overlapped.",paraId:14,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n    })\n    .transform({ type: 'groupX', y: 'mean' })\n    .encode('x', (d) => new Date(d.date).getFullYear())\n    .encode('y', 'price')\n    .encode('color', 'symbol')\n    .label({\n      text: 'price',\n      fontSize: 10,\n    })\n    .tooltip({ channel: 'y', valueFormatter: '.1f' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:15,tocIndex:2},{value:"At this time, we can set the label transform for the corresponding label: overlapDodgeY, which is used to prevent the labels from overlapping in the y direction.",paraId:16,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/cb99c4ab-e0a3-4c76-9586-fe7fa2ff1a8c.csv',\n    })\n    .transform({ type: 'groupX', y: 'mean' })\n    .encode('x', (d) => new Date(d.date).getFullYear())\n    .encode('y', 'price')\n    .encode('color', 'symbol')\n    .label({\n      text: 'price',\n      transform: [{ type: 'overlapDodgeY' }], // Appoint labelTransform\n      fontSize: 10,\n    })\n    .tooltip({ channel: 'y', valueFormatter: '.1f' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:17,tocIndex:2},{value:"Label transform can also be declared at the level of view to process labels for the entire view.",paraId:18,tocIndex:3},{value:"({\n  type: 'view',\n  labelTransform: [],\n});\n",paraId:19,tocIndex:3}]},73072:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(4304);const t=[{value:"Layout",paraId:0},{value:" in G2 is used to specify some parameters of layout methods marked by specific layout functions, such as Snakey, WordCloud, ForceGraph, etc.",paraId:0},{value:"({\n  type: 'sankey',\n  layout: {\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  },\n});\n",paraId:1},{value:"// API\nchart.sankey().layout({ nodeAlign: 'center', nodePadding: 0.03 });\n",paraId:2}]},74914:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(5275);const t=[{value:"In G2, the ",paraId:0},{value:"Legend",paraId:0},{value:" can be understood as the visualization of the non-spatial channel (color, opacity, size, shape) corresponding to the scale.",paraId:0},{value:"The legend can be configured at the mark level:",paraId:1},{value:"({\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:2},{value:"// API\n// First method\nchart.interval().legend('color', {}).legend('size', {});\n\n// Second method\nchart.interval().legend({\n  color: {},\n  size: {},\n});\n",paraId:3},{value:"Legends can also be configured at the view level:",paraId:4},{value:"({\n  type: 'view',\n  legend: {\n    color: {},\n    size: {},\n  },\n});\n",paraId:5},{value:"In G2, each mark has its own legend. If the scale corresponding to the mark is synchronized, the legends will be merged.",paraId:6,tocIndex:0},{value:"The legend has transitivity. The legend declared on the view will be passed to the ",paraId:7,tocIndex:1},{value:"children",paraId:7,tocIndex:1},{value:" declared mark. If the mark has a corresponding channel legend, it will be merged; otherwise, it will not be affected.",paraId:7,tocIndex:1},{value:"Hide the legend of each channel:",paraId:8,tocIndex:2},{value:"({\n  type: 'interval',\n  legend: { color: false }, // Hide the legend of the color channel\n});\n",paraId:9,tocIndex:2},{value:"Hide multiple legends:",paraId:10,tocIndex:2},{value:"({\n  type: 'interval',\n  legend: false,\n});\n",paraId:11,tocIndex:2}]},28622:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(10219);const t=[{value:"There is ",paraId:0},{value:"no concept of chart",paraId:0},{value:" in G2, but the mark is used as the basic visual component unit. Any chart is composed of multiple marks. Unlike traditional drawing systems, marks provide the ability to draw abstract data.",paraId:0},{value:"Marks can be declared as top-level types as follows:",paraId:1},{value:"({\n  type: 'interval',\n  encode: {\n    x: 'name',\n    y: 'value',\n  },\n});\n",paraId:2},{value:"It can also be placed inside a view and add multiple marks to the view:",paraId:3},{value:"({\n  type: 'view',\n  children: [{ type: 'line' }, { type: 'point' }],\n});\n",paraId:4},{value:"The API is used as follows:",paraId:5},{value:"const chart = new Chart();\n\nchart.interval();\n",paraId:6},{value:"// multiple marks\nconst chart = new Chart();\n\nchart.line();\n\nchart.point();\n",paraId:7},{value:'Marks are the leaf nodes in the view tree and are the "first-class citizens" in G2: the most important concept in G2, a mark is composed of the following core concepts:',paraId:8,tocIndex:0},{value:"data",paraId:9,tocIndex:0},{value:" - visual data",paraId:10,tocIndex:0},{value:"encode",paraId:11,tocIndex:0},{value:" - encoding information",paraId:10,tocIndex:0},{value:"scale",paraId:12,tocIndex:0},{value:" - mapping rules",paraId:10,tocIndex:0},{value:"transform",paraId:13,tocIndex:0},{value:" - transformation channel values",paraId:10,tocIndex:0},{value:"layout",paraId:14,tocIndex:0},{value:" - configuration of layout algorithms",paraId:10,tocIndex:0},{value:"coordinate",paraId:15,tocIndex:0},{value:" - transformation of coordinate systems",paraId:10,tocIndex:0},{value:"style",paraId:16,tocIndex:0},{value:" - visual styles",paraId:10,tocIndex:0},{value:"viewStyle",paraId:17,tocIndex:0},{value:" - visual styles of the view",paraId:10,tocIndex:0},{value:"animate",paraId:18,tocIndex:0},{value:" - animation properties",paraId:10,tocIndex:0},{value:"state",paraId:19,tocIndex:0},{value:" - style of state",paraId:10,tocIndex:0},{value:"label",paraId:20,tocIndex:0},{value:" - data labels",paraId:10,tocIndex:0},{value:"title",paraId:21,tocIndex:0},{value:" - chart title",paraId:10,tocIndex:0},{value:"axis",paraId:22,tocIndex:0},{value:" - coordinate axes",paraId:10,tocIndex:0},{value:"legend",paraId:23,tocIndex:0},{value:" - legend",paraId:10,tocIndex:0},{value:"tooltip",paraId:24,tocIndex:0},{value:" - prompt information",paraId:10,tocIndex:0},{value:"scrollbar",paraId:25,tocIndex:0},{value:" - scrollbar",paraId:10,tocIndex:0},{value:"slider",paraId:26,tocIndex:0},{value:" - drag axis",paraId:10,tocIndex:0},{value:"interaction",paraId:27,tocIndex:0},{value:" - interaction",paraId:10,tocIndex:0},{value:"theme",paraId:28,tocIndex:0},{value:" - theme",paraId:10,tocIndex:0},{value:"({\n  type: 'mark',\n  data: [],\n  encode: {},\n  scale: {},\n  transform: [],\n  layout: {},\n  coordinate: {},\n  style: {},\n  viewStyle: {},\n  animate: {},\n  state: {},\n  label: {},\n  title: {},\n  axis: {},\n  legend: {},\n  tooltip: {},\n  scrollbar: {},\n  slider: {},\n  interaction: {},\n  theme: {},\n});\n",paraId:29,tocIndex:0},{value:"Marks are templates that generate a series of ",paraId:30,tocIndex:1},{value:"data-driven",paraId:30,tocIndex:1},{value:" graphics, each graph corresponds to one or more ",paraId:30,tocIndex:1},{value:"data items",paraId:30,tocIndex:1},{value:" (Data Item). For example, in the scatter plot below, there is only one point mark, and this mark generates multiple circles.",paraId:30,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    })\n    .encode('x', 'height')\n    .encode('y', 'weight')\n    .encode('color', 'gender');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:31,tocIndex:1},{value:"In the line chart below, a line corresponds to multiple data items.",paraId:32,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/indices.json',\n    })\n    .transform({ type: 'normalizeY', basis: 'first', groupBy: 'color' })\n    .encode('x', (d) => new Date(d.Date))\n    .encode('y', 'Close')\n    .encode('color', 'Symbol')\n    .axis('y', { title: '↑ Change in price (%)' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:33,tocIndex:1},{value:"G2's marks can be layered, in other words: multiple marks can be added to one view. In the following example, two marks, a line and a point, are added to the chart:",paraId:34,tocIndex:2},{value:"(() => {\n  const data = [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ];\n\n  const chart = new G2.Chart();\n\n  chart.line().data(data).encode('x', 'year').encode('y', 'value');\n\n  chart.point().data(data).encode('x', 'year').encode('y', 'value');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:35,tocIndex:2},{value:"Marks in G2 can be composed into one mark through a mechanism and then used, for example, the point line chart above:",paraId:36,tocIndex:3},{value:"(() => {\n  // Define a composite mark\n  function PointLine({ encode, data } = {}) {\n    return [\n      { type: 'line', data, encode },\n      { type: 'point', data, encode },\n    ];\n  }\n\n  const data = [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ];\n\n  const chart = new G2.Chart();\n\n  // Use the composite mark in Options\n  chart.mark(PointLine).data(data).encode('x', 'year').encode('y', 'value');\n\n  // Use the composite mark in Spec\n  chart.options({\n    type: PointLine,\n    data,\n    encode: { x: 'year', y: 'value' },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:37,tocIndex:3},{value:"The composability feature of marks provides a simple yet powerful way to extend the capabilities of G2. G2 also uses this mechanism to implement some rather complex marks, such as Sankey diagrams: using two Polygon marks for composition.",paraId:38,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart({\n    width: 900,\n    height: 600,\n  });\n\n  // Sankey mark\n  chart\n    .sankey()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/energy.json',\n      transform: [\n        {\n          type: 'custom',\n          callback: (data) => ({ links: data }),\n        },\n      ],\n    })\n    .layout({\n      nodeAlign: 'center',\n      nodePadding: 0.03,\n    })\n    .style('labelSpacing', 3)\n    .style('labelFontWeight', 'bold')\n    .style('nodeStrokeWidth', 1.2)\n    .style('linkFillOpacity', 0.4);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:39,tocIndex:3},{value:"Annotation",paraId:40,tocIndex:4},{value:" is mainly used to annotate the places that need attention in the visualized chart. In G2, annotation is also a mark. In other words, some marks can also be used for annotation, such as Text, Images and others.",paraId:40,tocIndex:4},{value:"Since annotation is also a mark, it can also perform transformation. For example, the Select transform below.",paraId:41,tocIndex:5},{value:"The Select mark transformation provides the ability to select a shape from a set of shapes. For example, in the example below, the country with the largest GDP in each continent is marked.",paraId:42,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/1ecf85d2-8279-46a1-898d-d2e1814617f9.json',\n  });\n\n  chart\n    .point()\n    .encode('x', 'GDP')\n    .encode('y', 'LifeExpectancy')\n    .encode('color', 'Continent');\n\n  chart\n    .text()\n    // Group graphics by series, that is, by Continent\n    // Select by x channel, select the maximum, that is, the country with the highest GDP\n    .transform({ type: 'select', channel: 'x', selector: 'max' })\n    .encode('text', 'Country')\n    .encode('x', 'GDP')\n    .encode('y', 'LifeExpectancy')\n    .encode('series', 'Continent')\n    .style('textAlign', 'end');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:43,tocIndex:5},{value:"For simple text marks that do not need to be grouped, you can use data marks, otherwise, you can consider the above method.",paraId:44,tocIndex:5},{value:"For annotations, one issue is to position them in the right place. Currently, there are three positioning methods:",paraId:45,tocIndex:6},{value:"Data-driven positioning",paraId:46,tocIndex:6},{value:"Absolute positioning",paraId:46,tocIndex:6},{value:"Relative positioning",paraId:46,tocIndex:6},{value:"In G2, you can specify data-driven positioning through ",paraId:47,tocIndex:7},{value:"mark.data",paraId:47,tocIndex:7},{value:". For example, if you want to annotate the safe daily intake of sugar and fat, you can do it as follows.",paraId:47,tocIndex:7},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data([\n      { x: 95, y: 95, z: 13.8, name: 'BE', country: 'Belgium' },\n      { x: 86.5, y: 102.9, z: 14.7, name: 'DE', country: 'Germany' },\n      { x: 80.8, y: 91.5, z: 15.8, name: 'FI', country: 'Finland' },\n      { x: 80.4, y: 102.5, z: 12, name: 'NL', country: 'Netherlands' },\n      { x: 80.3, y: 86.1, z: 11.8, name: 'SE', country: 'Sweden' },\n      { x: 78.4, y: 70.1, z: 16.6, name: 'ES', country: 'Spain' },\n      { x: 74.2, y: 68.5, z: 14.5, name: 'FR', country: 'France' },\n      { x: 73.5, y: 83.1, z: 10, name: 'NO', country: 'Norway' },\n      { x: 71, y: 93.2, z: 24.7, name: 'UK', country: 'United Kingdom' },\n      { x: 69.2, y: 57.6, z: 10.4, name: 'IT', country: 'Italy' },\n      { x: 68.6, y: 20, z: 16, name: 'RU', country: 'Russia' },\n      { x: 65.5, y: 126.4, z: 35.3, name: 'US', country: 'United States' },\n      { x: 65.4, y: 50.8, z: 28.5, name: 'HU', country: 'Hungary' },\n      { x: 63.4, y: 51.8, z: 15.4, name: 'PT', country: 'Portugal' },\n      { x: 64, y: 82.9, z: 31.3, name: 'NZ', country: 'New Zealand' },\n    ])\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('size', 'z')\n    .encode('shape', 'point')\n    .scale('x', { nice: true })\n    .scale('y', { nice: true, domainMax: 165, zero: true })\n    .scale('size', { range: [10, 40] })\n    .style('stroke', '#1890ff')\n    .style('fillOpacity', 0.3)\n    .style('fill', '#1890ff')\n    .label({\n      text: 'name',\n      position: 'inside',\n      fill: '#1890ff',\n      stroke: '#fff',\n    })\n    .legend(false);\n\n  chart\n    .lineY()\n    .data([50])\n    .style('stroke', '#000')\n    .style('strokeOpacity', 0.45)\n    .style('lineDash', [3, 3])\n    .label({\n      text: 'Safe sugar intake 50g/day',\n      position: 'right',\n      textBaseline: 'bottom',\n      fill: '#000',\n      fillOpacity: 0.45,\n      background: true,\n      backgroundFill: '#000',\n      backgroundOpacity: 0.15,\n    });\n\n  chart\n    .lineX()\n    .data([65])\n    .style('stroke', '#000')\n    .style('strokeOpacity', 0.45)\n    .style('lineDash', [3, 3])\n    .label({\n      text: 'Safe fat intake 65g/day',\n      position: 'top-left',\n      textBaseline: 'bottom',\n      fill: '#000',\n      fillOpacity: 0.45,\n      background: true,\n      backgroundFill: '#000',\n      backgroundOpacity: 0.15,\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:48,tocIndex:7},{value:"In addition to data-driven positioning, G2 also provides non-data-driven positioning methods. You can specify the x and y attributes through ",paraId:49,tocIndex:8},{value:"mark.style",paraId:49,tocIndex:8},{value:", and x and y have the following two types.",paraId:49,tocIndex:8},{value:"Percentage",paraId:50,tocIndex:8},{value:"：The percentage of the content area.",paraId:50,tocIndex:8},{value:"Number",paraId:50,tocIndex:8},{value:"：Coordinates in pixels.",paraId:50,tocIndex:8},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'theta', innerRadius: 0.5 })\n    .transform({ type: 'stackY' })\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  // Absolute positioning\n  chart.text().style({\n    x: 290, // Pixel coordinates\n    y: 200, // Pixel coordinates\n    text: 'hello',\n    textAlign: 'center',\n    fontSize: 60,\n    textBaseline: 'middle',\n  });\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:51,tocIndex:8},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'theta', innerRadius: 0.5 })\n    .transform({ type: 'stackY' })\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('y', 'sold')\n    .encode('color', 'genre');\n\n  // Relative positioning\n  chart.text().style({\n    x: '50%', // percentage\n    y: '50%', // percentage\n    text: 'hello',\n    textAlign: 'center',\n    fontSize: 60,\n    textBaseline: 'middle',\n  });\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:52,tocIndex:9}]},72903:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(48018);const t=[{value:"In G2, the ",paraId:0},{value:"scale",paraId:0},{value:" is a crucial abstraction for visualization: it maps abstract data to visual data, serving as the bridge between abstract data and visual data. If the encode determines which channels of the mark need to be visualized, then the scale determines how these channels should be visualized.",paraId:0},{value:"G2 internally infers the type, domain, and range of the scale based on the data type and the type of the mark, but you can also specify the corresponding configuration. The scale can be configured at the mark level:",paraId:1},{value:"({\n  type: 'interval',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'log', // specify type\n      domain: [10, 100], // specify domain\n      range: [0, 1], // specify range\n    },\n  },\n});\n",paraId:2},{value:"// API\n// First way\nchart\n  .interval()\n  .scale('x', { padding: 0.5 })\n  .scale('y', {\n    type: 'log', // specify type\n    domain: [10, 100], // specify domain\n    range: [0, 1], // specify range\n  });\n\n// Second way\nchart.interval().scale({\n  x: { padding: 0.5 },\n  y: {\n    type: 'log', // specify type\n    domain: [10, 100], // specify domain\n    range: [0, 1], // specify range\n  },\n});\n",paraId:3},{value:"The scale can also be configured at the view level:",paraId:4},{value:"({\n  type: 'view',\n  scale: {\n    x: { padding: 0.5 },\n    y: {\n      type: 'log', // specify type\n      domain: [10, 100], // specify domain\n      range: [0, 1], // specify range\n    },\n  },\n});\n",paraId:5},{value:"// API form\n// First way\nchart.scale('x', { padding: 0.5 }).scale('y', {\n  type: 'log', // specify type\n  domain: [10, 100], // specify domain\n  range: [0, 1], // specify range\n});\n\n// Second way\nchart.scale({\n  x: { padding: 0.5 },\n  y: {\n    type: 'log', // specify type\n    domain: [10, 100], // specify domain\n    range: [0, 1], // specify range\n  },\n});\n",paraId:6},{value:"Every channel of the mark is bound to a scale. This scale transforms the column data bound to the channel from the data range: ",paraId:7,tocIndex:0},{value:"domain",paraId:7,tocIndex:0},{value:" to the visual range: ",paraId:7,tocIndex:0},{value:"range",paraId:7,tocIndex:0},{value:". Different types of scales are suitable for different types of data and use cases.",paraId:7,tocIndex:0},{value:"The scale of the same channel of the mark in the same view is synchronized by default: it synchronizes the type, domain, and range of the scale, as well as other configurations. This means that all marks in a view will be drawn with the same scale. For example, the LineX mark in the figure below, although it does not have complete data, is still drawn at the accurate position, because the scale is synchronized.",paraId:8,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data([\n      { year: '1991', value: 3 },\n      { year: '1992', value: 4 },\n      { year: '1993', value: 3.5 },\n      { year: '1994', value: 5 },\n      { year: '1995', value: 4.9 },\n      { year: '1996', value: 6 },\n      { year: '1997', value: 7 },\n      { year: '1998', value: 9 },\n      { year: '1999', value: 13 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value');\n\n  chart.lineX().data(['1996']).style('stroke', 'red').style('strokeWidth', 2);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:9,tocIndex:1},{value:"If you want to unsynchronized (for example, when drawing a dual-axis chart), you need to set ",paraId:10,tocIndex:2},{value:"scale.independent",paraId:10,tocIndex:2},{value:" to ",paraId:10,tocIndex:2},{value:"true",paraId:10,tocIndex:2},{value:". The scale that has set this property will not synchronize with any other scale. In the example below, the y-axis of the interval and line will use two different scales, thus generating two different coordinate axes.",paraId:10,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'view',\n    data: [\n      { time: '10:10', call: 4, waiting: 2, people: 2 },\n      { time: '10:15', call: 2, waiting: 6, people: 3 },\n      { time: '10:20', call: 13, waiting: 2, people: 5 },\n      { time: '10:25', call: 9, waiting: 9, people: 1 },\n      { time: '10:30', call: 5, waiting: 2, people: 3 },\n      { time: '10:35', call: 8, waiting: 2, people: 1 },\n      { time: '10:40', call: 13, waiting: 1, people: 2 },\n    ],\n    children: [\n      {\n        type: 'interval',\n        encode: { x: 'time', y: 'waiting' },\n        axis: { y: { title: 'Waiting', titleFill: '#5B8FF9' } },\n      },\n      {\n        type: 'line',\n        encode: { x: 'time', y: 'people', shape: 'smooth' },\n        scale: { y: { independent: true } }, // Set y-axis scale to unsynchronized\n        style: { stroke: '#fdae6b', lineWidth: 2 },\n        axis: {\n          y: {\n            position: 'right',\n            grid: null,\n            title: 'People',\n            titleFill: '#fdae6b',\n          },\n        },\n      },\n    ],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:11,tocIndex:2},{value:"If you want to synchronize scales in groups, you can declare ",paraId:12,tocIndex:2},{value:"scale.key",paraId:12,tocIndex:2},{value:". Scales with the same key will synchronize. For example, the y-axis of Line and Point Mark in the example below will synchronize because the key of both is 'line'.",paraId:12,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'view',\n    data: [\n      { time: '10:10', call: 4, waiting: 2, people: 2 },\n      { time: '10:15', call: 2, waiting: 6, people: 3 },\n      { time: '10:20', call: 13, waiting: 2, people: 5 },\n      { time: '10:25', call: 9, waiting: 9, people: 1 },\n      { time: '10:30', call: 5, waiting: 2, people: 3 },\n      { time: '10:35', call: 8, waiting: 2, people: 1 },\n      { time: '10:40', call: 13, waiting: 1, people: 2 },\n    ],\n    children: [\n      {\n        type: 'interval',\n        encode: { x: 'time', y: 'waiting' },\n        axis: { y: { title: 'Waiting', titleFill: '#5B8FF9' } },\n      },\n      {\n        type: 'line',\n        encode: { x: 'time', y: 'people', shape: 'smooth' },\n        scale: { y: { key: 'line' } }, // Set key to 'line'\n        style: { stroke: '#fdae6b', lineWidth: 2 },\n        axis: {\n          y: {\n            position: 'right',\n            grid: null,\n            title: 'People',\n            titleFill: '#fdae6b',\n          },\n        },\n      },\n      {\n        type: 'point',\n        encode: { x: 'time', y: 'people' },\n        scale: { y: { key: 'line' } }, // Set key to 'line'\n        style: { stroke: '#fdae6b', lineWidth: 2 },\n      },\n    ],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:13,tocIndex:2},{value:"The scale can be configured in the view hierarchy and passed to the ",paraId:14,tocIndex:3},{value:"children",paraId:14,tocIndex:3},{value:" specified by the mark. If the channel corresponding to the mark does not set the scale, it is set; otherwise, it has no effect. When not drawing multi-axis charts, the scale can be set at the view hierarchy.",paraId:14,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .data([\n      { year: '1991', value: 3 },\n      { year: '1992', value: 4 },\n      { year: '1993', value: 3.5 },\n      { year: '1994', value: 5 },\n      { year: '1995', value: 4.9 },\n      { year: '1996', value: 6 },\n      { year: '1997', value: 7 },\n      { year: '1998', value: 9 },\n      { year: '1999', value: 13 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .scale('y', { nice: true }); // Scale setting at the view hierarchy\n\n  chart.line();\n\n  chart.point();\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:15,tocIndex:3},{value:"Common scales are divided into three major categories:",paraId:16,tocIndex:4},{value:"Continuous scale",paraId:17,tocIndex:4},{value:"Discrete scale",paraId:17,tocIndex:4},{value:"Discretizing scale",paraId:17,tocIndex:4},{value:"The first type of scale is the continuous scale, mainly used for continuous data. Common continuous scales include Linear, Time, Log, etc. For example, the x and y channels in the scatter plot below use the linear scale.",paraId:18,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'weight') // weight is continuous data\n    .encode('y', 'height') // height is continuous data\n    .encode('color', 'gender');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:19,tocIndex:5},{value:"The second type of scale is the ordinal scale, mainly used for discrete data. Common ordinal scales include ordinal, point, etc. For example, the color channel in the bar chart below uses the ordinal scale.",paraId:20,tocIndex:6},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre') // genre is discrete data\n    .scale('color', {\n      // Specify the color after mapping\n      range: ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#c564be'],\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:21,tocIndex:6},{value:"The third type of scale is the discretizing scale, mainly used for continuous data, which will be discretized and then mapped, such as threshold, quantize, etc. The color channel below uses the quantile scale.",paraId:22,tocIndex:7},{value:"(() => {\n  const chart = new G2.Chart({\n    \n    height: 240,\n  });\n\n  chart\n    .cell()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/89c20fe8-0c6f-46c8-b36b-4cb653dba8ed.json',\n      transform: [{ type: 'map', callback: (d) => ({ salary: d }) }],\n    })\n    .scale('color', {\n      type: 'quantile',\n      // divided into three groups, each group corresponds to the following color\n      range: ['#eee', 'pink', 'red'],\n    })\n    .encode('y', (_, i) => (i % 5) + 1)\n    .encode('x', (_, i) => ((i / 5) | 0) + 1)\n    .encode('color', 'salary') // is continuous data, the scale groups data by quantile\n    .style('stroke', '#000')\n    .style('inset', 2);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:23,tocIndex:7}]},61822:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(99505);const t=[{value:"In G2, the ",paraId:0},{value:"Scrollbar",paraId:0},{value:" can be used to filter data, and it can be bound with the x or y channel. By default, the scrollbar is turned off.",paraId:0},{value:"The scrollbar can be configured at the mark level:",paraId:1},{value:"({\n  type: 'interval',\n  scrollbar: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:2},{value:"// API\n// First method\nchart.interval().scrollbar('x', {}).scrollbar('y', {});\n\n// Second method\nchart.interval().scrollbar({\n  x: {},\n  y: {},\n});\n",paraId:3},{value:"The scrollbar can also be configured at the view level:",paraId:4},{value:"({\n  type: 'view',\n  scrollbar: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:5},{value:"In G2, each mark has its own scrollbar. If the scale corresponding to the mark is synchronized, the scrollbars will also merge.",paraId:6,tocIndex:0},{value:"The scrollbar has transitivity. The scrollbar declared on the view will be passed to the ",paraId:7,tocIndex:1},{value:"children",paraId:7,tocIndex:1},{value:" declared mark. If this mark has a corresponding channel scrollbar, it will merge; otherwise, it will not effect.",paraId:7,tocIndex:1}]},58095:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(46140);const t=[{value:"Regardless of whether it is a single view plot or a multiple view plot, layout information (chart width and height, etc.) is specified at the top level of the options.",paraId:0},{value:"const markLevel = {\n  type: 'interval',\n  width: 640,\n  height: 180,\n  margin: 10,\n};\n\nconst viewLevel = {\n  type: 'view',\n  width: 640,\n  height: 180,\n  margin: 10,\n  // ...\n};\n\nconst compositionLevel = {\n  type: 'spaceFlex',\n  width: 640,\n  height: 180,\n  margin: 10,\n};\n",paraId:1},{value:"The API can be specified when initializing the Chart object:",paraId:2},{value:"const chart = new Chart({\n  type: 'view',\n  width: 640,\n  height: 180,\n  margin: 10,\n  // ...\n});\n",paraId:3},{value:"It can also be specified via ",paraId:4},{value:"node.attr",paraId:4},{value:":",paraId:4},{value:"chart.interval().attr('padding', 10).attr('margin', 20);\n\nchart.view().attr('padding', 10).attr('margin', 20);\n\nchart.spaceFlex().attr('padding', 10).attr('margin', 20);\n",paraId:5},{value:"When width and height are not specified in the declaration options, G2 will use ",paraId:6,tocIndex:0},{value:"640px",paraId:6,tocIndex:0},{value:" as the width and ",paraId:6,tocIndex:0},{value:"480px",paraId:6,tocIndex:0},{value:" as the height by default.",paraId:6,tocIndex:0},{value:"({ type: 'view' });\n",paraId:7,tocIndex:0},{value:"You can also specify the width and height through ",paraId:8,tocIndex:1},{value:"options.width",paraId:8,tocIndex:1},{value:" and ",paraId:8,tocIndex:1},{value:"options.height",paraId:8,tocIndex:1},{value:".",paraId:8,tocIndex:1},{value:"({ type: 'view', width: 600, height: 400 });\n",paraId:9,tocIndex:1},{value:"If you want the width and height of the chart to be consistent with the container, you can set ",paraId:10,tocIndex:2},{value:"options.autoFit",paraId:10,tocIndex:2},{value:" to ",paraId:10,tocIndex:2},{value:"true",paraId:10,tocIndex:2},{value:". Its priority is higher than the specified width and height.",paraId:10,tocIndex:2},{value:"({ type: 'view', autoFit: true });\n",paraId:11,tocIndex:2},{value:"The view model in G2 defines how a view is divided. Different areas drawn will draw different things and can be set through different options. Now you can simply think of the view as a diagram. The view model of G2 is as follows:",paraId:12,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'point',\n      height: 280,\n    marginTop: 30,\n    marginLeft: 40,\n    marginBottom: 10,\n    marginRight: 20,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/commits.json',\n    },\n    encode: {\n      x: (d) => new Date(d.time).getUTCHours(),\n      y: (d) => new Date(d.time).getUTCDay(),\n      size: 'count',\n      shape: 'point',\n    },\n    transform: [{ type: 'group', size: 'sum' }, { type: 'sortY' }],\n    scale: { y: { type: 'point' } },\n    style: { shape: 'point', fill: '#59a14f' },\n    axis: {\n      x: { title: 'time (hours)', tickCount: 24 },\n      y: { title: 'time (day)', grid: true },\n    },\n    legend: false,\n    inset: 10,\n    viewStyle: {\n      viewFill: '#4e79a7',\n      plotFill: '#f28e2c',\n      mainFill: '#e15759',\n      contentFill: '#76b7b2',\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:13,tocIndex:3},{value:"View Area",paraId:14,tocIndex:3},{value:"：The blue + orange + red + cyan part in the above figure, where the blue part is called ",paraId:14,tocIndex:3},{value:"the margin area",paraId:14,tocIndex:3},{value:", is mainly used to fix components (axes, legends, etc.) to the border distance.",paraId:14,tocIndex:3},{value:"Plot Area",paraId:14,tocIndex:3},{value:"：The orange + red + cyan part in the above figure, the orange part is called ",paraId:14,tocIndex:3},{value:"the padding area",paraId:14,tocIndex:3},{value:", this area is used for drawing components.",paraId:14,tocIndex:3},{value:"Main Area",paraId:14,tocIndex:3},{value:"：The red + cyan part in the above figure, where the red part is called ",paraId:14,tocIndex:3},{value:"the breathing area",paraId:14,tocIndex:3},{value:", is used to create a distance between components and marks (graphic elements) to prevent overlap, especially useful for scatter plots.",paraId:14,tocIndex:3},{value:"Content Area",paraId:14,tocIndex:3},{value:"：he cyan part in the above figure, is mainly used for drawing marks (graphic elements).",paraId:14,tocIndex:3},{value:"You can set the size of each area with the following configuration:",paraId:15,tocIndex:3},{value:"margin",paraId:16,tocIndex:3},{value:" - Set the values of the four directions of the margin, the priority is lower than setting individually",paraId:16,tocIndex:3},{value:"marginLeft",paraId:16,tocIndex:3},{value:" - Set the left margin",paraId:16,tocIndex:3},{value:"marginTop",paraId:16,tocIndex:3},{value:" - Set the top margin",paraId:16,tocIndex:3},{value:"marginRight",paraId:16,tocIndex:3},{value:" - Set the right margin",paraId:16,tocIndex:3},{value:"marginBottom",paraId:16,tocIndex:3},{value:" - Set the bottom margin",paraId:16,tocIndex:3},{value:"padding",paraId:16,tocIndex:3},{value:" - Set the values of the four directions of the padding, the priority is lower than setting individually",paraId:16,tocIndex:3},{value:"paddingLeft",paraId:16,tocIndex:3},{value:" - Set the left padding",paraId:16,tocIndex:3},{value:"paddingTop",paraId:16,tocIndex:3},{value:" - Set the top padding",paraId:16,tocIndex:3},{value:"paddingRight",paraId:16,tocIndex:3},{value:" - Set the right padding",paraId:16,tocIndex:3},{value:"paddingBottom",paraId:16,tocIndex:3},{value:" - Set the bottom padding",paraId:16,tocIndex:3},{value:"inset",paraId:16,tocIndex:3},{value:" - Set the values of the four directions of the breathing area, the priority is lower than setting individually",paraId:16,tocIndex:3},{value:"insetLeft",paraId:16,tocIndex:3},{value:" - Set the left breathing area",paraId:16,tocIndex:3},{value:"insetTop",paraId:16,tocIndex:3},{value:" - Set the top breathing area",paraId:16,tocIndex:3},{value:"insetRight",paraId:16,tocIndex:3},{value:" - Set the right breathing area",paraId:16,tocIndex:3},{value:"insetBottom",paraId:16,tocIndex:3},{value:" - Set the bottom breathing area",paraId:16,tocIndex:3},{value:"The size of the content area is obtained from the following formula:",paraId:17,tocIndex:3},{value:"const contentWidth =\n  width -\n  paddingLeft -\n  paddingRight -\n  marginLeft -\n  marginRight -\n  insetLeft -\n  insetRight;\n\nconst contentHeight =\n  height -\n  paddingTop -\n  paddingBottom -\n  marginTop -\n  marginBottom -\n  insetTop -\n  insetBottom;\n",paraId:18,tocIndex:3}]},44661:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12722);const t=[{value:"In G2, the ",paraId:0},{value:"Slider",paraId:0},{value:" can be used to filter data, and it can be bound with the x or y channel. By default, the slider is turned off.",paraId:0},{value:"The slider can be configured at the mark level:",paraId:1},{value:"({\n  type: 'interval',\n  slider: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:2},{value:"// API\n// First method\nchart.interval().slider('x', {}).slider('y', {});\n\n// Second method\nchart.interval().slider({\n  x: {},\n  y: {},\n});\n",paraId:3},{value:"The slider can also be configured at the view level:",paraId:4},{value:"({\n  type: 'view',\n  slider: {\n    x: {},\n    y: {},\n  },\n});\n",paraId:5},{value:"In G2, each mark has its own slider. If the scale corresponding to the mark is synchronized, the sliders will also merge.",paraId:6,tocIndex:0},{value:"The slider has transitivity. The slider declared on the view will be passed to the mark declared by ",paraId:7,tocIndex:1},{value:"children",paraId:7,tocIndex:1},{value:". If this mark has a slider for the corresponding channel, they will merge; otherwise, it will not be affected.",paraId:7,tocIndex:1}]},50303:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(17059);const t=[{value:"State in G2 is mainly used to control the state style of mark. These states will be interactively triggered and the attributes are style attributes supported by @antv/g.",paraId:0},{value:"({\n  type: 'interval',\n  state: {\n    active: { fill: 'red', stroke: 'blue', strokeWidth: 2 },\n    inactive: { fill: '#aaa' },\n  },\n});\n",paraId:1},{value:"// API\n// First way\nchart\n  .interval()\n  .state('active', { fill: 'red', stroke: 'blue', strokeWidth: 2 })\n  .state('inactive', { fill: '#aaa' });\n\n// Second way\nchart.interval().state({\n  active: { fill: 'red', stroke: 'blue', strokeWidth: 2 },\n  inactive: { fill: '#aaa' },\n});\n",paraId:2},{value:"There are currently 4 built-in states:",paraId:3,tocIndex:0},{value:"active - the style when highlighted",paraId:4,tocIndex:0},{value:"inactive - style when not highlighted",paraId:4,tocIndex:0},{value:"selected - style when selected",paraId:4,tocIndex:0},{value:"unselected - style when not selected",paraId:4,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .axis('y', { labelFormatter: '.0%' })\n    .state('active', { fill: 'red' })\n    .state('inactive', { fill: '#aaa' })\n    .interaction('elementHighlight'); // Set up highlight interaction\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:5,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .axis('y', { labelFormatter: '.0%' })\n    .state('selected', { fill: 'red', stroke: 'blue', strokeWidth: 2 })\n    .state('unselected', { fill: '#aaa' })\n    .interaction('elementSelect'); // Set up selection interaction\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:6,tocIndex:2}]},16219:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(20459);const t=[{value:"Style in G2 is mainly used to control the visual style of mark and view. Supported styles refer to @antv/g supported styles.",paraId:0},{value:"Mark can set its own style or the style of the view:",paraId:1},{value:"({\n  type: 'interval',\n  style: {\n    // own style\n    stroke: 'black',\n    strokeWidth: 2,\n  },\n  viewStyle: {\n    // View style\n    viewFill: 'red',\n    contentFill: 'yellow',\n  },\n});\n",paraId:2},{value:"// API\n// First way\nchart\n  .interval()\n  .style('stroke', 'black')\n  .style('strokeWidth', 2)\n  .viewStyle('viewFill', 'red')\n  .viewStyle('contentFill', 'yellow');\n\n// Second way\nchart\n  .interval()\n  .style({\n    stroke: 'black',\n    strokeWidth: 2,\n  })\n  .viewStyle({\n    viewFill: 'red',\n    contentFill: 'yellow',\n  });\n",paraId:3},{value:"View can set its own style:",paraId:4},{value:"({\n  type: 'view',\n  style: {\n    viewFill: 'red',\n    contentFill: 'yellow',\n  },\n});\n",paraId:5},{value:"// API\n// First way\nchart.style('viewFill', 'red').style('contentFill', 'yellow');\n\n// Second way\nchart.style({\n  viewFill: 'red',\n  contentFill: 'yellow',\n});\n",paraId:6},{value:"In addition to ",paraId:7,tocIndex:0},{value:"mark.encode",paraId:7,tocIndex:0},{value:", the visual properties of the mark can also be set through ",paraId:7,tocIndex:0},{value:"mark.style",paraId:7,tocIndex:0},{value:". There are two main differences between the two:",paraId:7,tocIndex:0},{value:"The channel set by ",paraId:8,tocIndex:0},{value:"mark.encode",paraId:8,tocIndex:0},{value:" will be a bit special, either unique to the mark, such as the src channel of image; or it has some special logic, such as the x channel that affects the generation of the x-direction coordinate axis.",paraId:8,tocIndex:0},{value:"mark.encode",paraId:8,tocIndex:0},{value:" is more inclined to set up channels related to data, but ",paraId:8,tocIndex:0},{value:"mark.style",paraId:8,tocIndex:0},{value:" prefers to set up channels that have nothing to do with data. Although ",paraId:8,tocIndex:0},{value:"mark.style",paraId:8,tocIndex:0},{value:" also supports callbacks to set up data-driven channels.",paraId:8,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .style('fill', 'steelblue') // Set data-independent channels\n    .style('strokeWidth', (d) => (d.frequency > 0.1 ? 2 : 1)) // Set data-related channels\n    .style('stroke', (d) => (d.frequency > 0.1 ? 'red' : 'black'))\n    .axis('y', { labelFormatter: '.0%' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:9,tocIndex:0},{value:"The styles of each area can be set in the form of ",paraId:10,tocIndex:1},{value:"${name}${Style}",paraId:10,tocIndex:1},{value:", among them, Style is all styles supported by the rectangle of G, such as ",paraId:10,tocIndex:1},{value:"fill",paraId:10,tocIndex:1},{value:"，",paraId:10,tocIndex:1},{value:"stroke",paraId:10,tocIndex:1},{value:",etc. Please note that the first letter should be capitalized to form camel case.",paraId:10,tocIndex:1},{value:"view${Style}",paraId:11,tocIndex:1},{value:"- Set the style of the view area",paraId:11,tocIndex:1},{value:"plot${Style}",paraId:11,tocIndex:1},{value:"- Set the style of the drawing area",paraId:11,tocIndex:1},{value:"main${Style}",paraId:11,tocIndex:1},{value:"- Set the style of the main area",paraId:11,tocIndex:1},{value:"content${Style}",paraId:11,tocIndex:1},{value:"- Set styles of the content areas",paraId:11,tocIndex:1},{value:"For example, color each area in the picture below:",paraId:12,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'view',\n    height: 280,\n    inset: 10,\n    marginTop: 30,\n    marginLeft: 40,\n    marginBottom: 10,\n    marginRight: 20,\n    style: {\n      // Set the view style\n      viewFill: '#4e79a7',\n      plotFill: '#f28e2c',\n      mainFill: '#e15759',\n      contentFill: '#76b7b2',\n    },\n    children: [\n      {\n        type: 'point',\n        data: {\n          type: 'fetch',\n          value: 'https://assets.antv.antgroup.com/g2/commits.json',\n        },\n        encode: {\n          x: (d) => new Date(d.time).getUTCHours(),\n          y: (d) => new Date(d.time).getUTCDay(),\n          size: 'count',\n          shape: 'point',\n        },\n        transform: [{ type: 'group', size: 'sum' }, { type: 'sortY' }],\n        scale: { y: { type: 'point' } },\n        style: { shape: 'point', fill: '#59a14f' },\n        axis: {\n          x: { title: 'time (hours)', tickCount: 24 },\n          y: { title: 'time (day)', grid: true },\n        },\n        legend: false,\n      },\n    ],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:13,tocIndex:1}]},67440:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(93282);const t=[{value:"In G2, ",paraId:0},{value:"Theme",paraId:0},{value:" refers to the default styles of the graphics in a chart.",paraId:0},{value:"Themes can be configured at the view level:",paraId:1},{value:"({\n  type: 'view',\n  theme: {},\n});\n",paraId:2},{value:"// API\nchart.theme({});\n",paraId:3},{value:"Themes can also be configured at the mark level:",paraId:4},{value:"({\n  type: 'interval',\n  theme: {},\n});\n",paraId:5},{value:"// API\nchart.interval().theme({});\n",paraId:6},{value:"G2 provides built-in themes that can be switched using the ",paraId:7,tocIndex:0},{value:"type",paraId:7,tocIndex:0},{value:" property.",paraId:7,tocIndex:0},{value:"chart.theme({ type: 'classicDark' }); // use the dark theme\n",paraId:8,tocIndex:0},{value:"There are two ways to customize the theme, the first is to specify in theme that you want to override certain theme styles:",paraId:9,tocIndex:1},{value:"const theme = {};\n\n// Spec format\nconst options = {\n  theme: {\n    type: 'light',\n    ...theme,\n  },\n};\n\n// API format\nchart.theme({ type: 'light', ...theme });\n",paraId:10,tocIndex:1},{value:"The following example overrides the default color of the light theme:",paraId:11,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    },\n    encode: { x: 'letter', y: 'frequency' },\n    axis: { y: { labelFormatter: '.0%' } },\n    theme: {\n      color: 'red', // Set the default color to red\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:1},{value:"If you want to customize all theme styles, you can add a new theme, override the default theme, register it, and then use it.",paraId:13,tocIndex:1},{value:"(() => {\n  // define the theme\n  function CustomTheme() {\n    const light = G2.Light();\n    return { ...light, color: 'red' };\n  }\n\n  // register the theme\n  G2.register('theme.custom', CustomTheme);\n\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    },\n    encode: { x: 'letter', y: 'frequency' },\n    axis: { y: { labelFormatter: '.0%' } },\n    theme: { type: 'custom' }, // use the theme\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:1},{value:"The default themes included are:",paraId:15,tocIndex:1},{value:"G2.Light",paraId:16,tocIndex:1},{value:"G2.Dark",paraId:16,tocIndex:1},{value:"G2.Classic",paraId:16,tocIndex:1},{value:"G2.ClassicDark",paraId:16,tocIndex:1},{value:"G2.Academy",paraId:16,tocIndex:1},{value:"For a complete theme configuration, you can refer to the ",paraId:17,tocIndex:1},{value:"light",paraId:17,tocIndex:1},{value:" theme.",paraId:17,tocIndex:1}]},43436:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(46404);const t=[{value:"Title in G2 is used to specify the title of the chart.",paraId:0},{value:"Titles can be configured at the level of mark:",paraId:1},{value:"({\n  type: 'interval',\n  title: {\n    title: 'hello',\n    subtitle: 'world',\n  },\n});\n",paraId:2},{value:"// API\nchart.interval().title({\n  title: 'hello',\n  subtitle: 'world',\n});\n",paraId:3},{value:"Titles can also be configured at the level of view:",paraId:4},{value:"({\n  type: 'view',\n  title: {\n    title: 'hello',\n    subtitle: 'world',\n  },\n});\n",paraId:5},{value:"// API\nchart.title({ title: 'hello', subtitle: 'world' });\n",paraId:6},{value:"More options about title, see the API document of ",paraId:7},{value:"title",paraId:8},{value:".",paraId:7}]},9496:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(1287);const t=[{value:"In G2, the ",paraId:0},{value:"Tooltip",paraId:0},{value:" can provide additional information about data points, helping users better understand and interpret visualization. In visualization, Tooltip usually has the following roles:",paraId:0},{value:"Display detailed information",paraId:1},{value:": Tooltip can display detailed information about data points, such as specific values, percentages, or other related attributes. This helps users understand the data more deeply.",paraId:1},{value:"Improve readability",paraId:1},{value:": In complex visualizations, Tooltip can help users more easily identify and understand data points. For example, in a scatter plot, when data points are dense, Tooltip can display detailed information of a specific point without having to hover the mouse over each point.",paraId:1},{value:"Enhance interactivity",paraId:1},{value:": Tooltip can enhance the interactivity of visualization. Users can view more information by hovering over or clicking on data points, making the visualization more dynamic and interesting.",paraId:1},{value:"Highlight key information",paraId:1},{value:": Tooltip can be used to highlight key information. For example, in a time series chart, you can use Tooltip to display important events or mutations at specific time points.",paraId:1},{value:"In G2, you can specify the tooltip information that this mark needs to display through ",paraId:2},{value:"mark.tooltip",paraId:2},{value:".",paraId:2},{value:"({\n  type: 'interval',\n  tooltip: {\n    title: 'name', // title\n    items: ['genre'], // data items\n  },\n});\n",paraId:3},{value:"// API\nchart.interval().tooltip({\n  title: 'name', // title\n  items: ['genre'], // data items\n});\n",paraId:4},{value:"And combine ",paraId:5},{value:"view.interaction.tooltip",paraId:5},{value:" to configure the rendering and additional configuration of tooltip information.",paraId:5},{value:"({\n  type: 'view',\n  interaction: {\n    tooltip: { series: true },\n  },\n});\n",paraId:6},{value:"// API\nchart.interaction('tooltip', { series: true });\n",paraId:7},{value:"When there is only one mark in this view, you can also configure the rendering and additional configuration of tooltip information through ",paraId:8},{value:"mark.interaction.tooltip",paraId:8},{value:".",paraId:8},{value:"({\n  type: 'line',\n  interaction: {\n    tooltip: { series: true },\n  },\n});\n",paraId:9},{value:"// API\nchart.line().interaction('tooltip', { series: true });\n",paraId:10},{value:"Different marks have different default tooltip information, you can override the default content through ",paraId:11,tocIndex:0},{value:"mark.tooltip(tooltipData)",paraId:11,tocIndex:0},{value:". The complete structure of tooltipData is as follows:",paraId:11,tocIndex:0},{value:"({\n  type: 'interval',\n  data: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n  tooltip: {\n    title: (d) => (d.sold > 150 ? 'high' : 'low'), // set title\n    items: [\n      'genre', // First item\n      'sold', // Second item\n    ],\n  },\n});\n",paraId:12,tocIndex:0},{value:"When you don't need to set the title, you can directly declare it as an array:",paraId:13,tocIndex:0},{value:"({\n  type: 'interval',\n  tooltip: ['genre', 'sold'],\n});\n",paraId:14,tocIndex:0},{value:"// API\n// First method\nchart.interval().tooltip('genre').tooltip('sold');\n\n// Second method\nchart.interval().tooltip(['genre', 'sold']);\n",paraId:15,tocIndex:0},{value:"The complete structure of title and item is as follows:",paraId:16,tocIndex:0},{value:"type Item = {\n  color?: string; // color of the marker\n  name?: string; // name of the item\n  value?: string; // value of the item\n};\n",paraId:17,tocIndex:0},{value:"They can be set in the following ways.",paraId:18,tocIndex:0},{value:"Their values can come from the original data, specified by a string or ",paraId:19,tocIndex:1},{value:"item.field",paraId:19,tocIndex:1},{value:".",paraId:19,tocIndex:1},{value:"({\n  tooltip: {\n    title: 'sold',\n    items: ['genre'],\n  },\n});\n",paraId:20,tocIndex:1},{value:"// Equivalent to\n({\n  tooltip: {\n    title: 'sold',\n    items: [{ field: 'genre' }],\n  },\n});\n",paraId:21,tocIndex:1},{value:"Their values can come from channel values, specified by ",paraId:22,tocIndex:2},{value:"item.channel",paraId:22,tocIndex:2},{value:", often used for charts that generate new channels using ",paraId:22,tocIndex:2},{value:"mark.transform",paraId:22,tocIndex:2},{value:".",paraId:22,tocIndex:2},{value:"({\n  tooltip: {\n    title: { channel: 'x' },\n    items: [{ channel: 'y' }],\n  },\n});\n",paraId:23,tocIndex:2},{value:"You can specify the display of the title or item value through ",paraId:24,tocIndex:3},{value:"item.valueFormatter",paraId:24,tocIndex:3},{value:", which can be a function or a string supported by d3-format.",paraId:24,tocIndex:3},{value:"({\n  tooltip: {\n    items: [{ channel: 'y', valueFormatter: '.0%' }],\n  },\n});\n",paraId:25,tocIndex:3},{value:"Of course, for title and item, callbacks are also provided to achieve the greatest customization ability.",paraId:26,tocIndex:4},{value:"({\n  tooltip: {\n    items: [\n      (d, index, data, column) => ({\n        color: d.sold > 150 ? 'red' : 'blue', // specify the color of the item\n        name: index === 0 ? d.genre : `${d.genre} ${data[i].genre}`, // specify the name of the item\n        value: column.y.value[i], // use the value of the y channel\n      }),\n    ],\n  },\n});\n",paraId:27,tocIndex:4},{value:"G2 opens Tooltip interaction by default. If you need to configure Tooltip properties, you can do so through ",paraId:28,tocIndex:5},{value:"chart.interaction.tooltip",paraId:28,tocIndex:5},{value:".",paraId:28,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .line()\n    .data([\n      { year: '1991', value: 3 },\n      { year: '1992', value: 4 },\n      { year: '1993', value: 3.5 },\n      { year: '1994', value: 5 },\n      { year: '1995', value: 4.9 },\n      { year: '1996', value: 6 },\n      { year: '1997', value: 7 },\n      { year: '1998', value: 9 },\n      { year: '1999', value: 13 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value')\n    .interaction('tooltip', {\n      crosshairsStroke: 'red',\n      crosshairsStrokeWidth: 4,\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:29,tocIndex:5},{value:"If you don't want to display the tooltip information for this Mark, you can do so through ",paraId:30,tocIndex:6},{value:"mark.tooltip",paraId:30,tocIndex:6},{value:".",paraId:30,tocIndex:6},{value:"({\n  type: 'interval',\n  tooltip: false,\n});\n",paraId:31,tocIndex:6},{value:"chart.interval().tooltip(false);\n",paraId:32,tocIndex:6},{value:"If you don't want the chart to have tooltip interaction, you can do so through ",paraId:33,tocIndex:6},{value:"chart.interaction",paraId:33,tocIndex:6},{value:".",paraId:33,tocIndex:6},{value:"({\n  type: 'view',\n  interaction: { tooltip: false },\n});\n",paraId:34,tocIndex:6},{value:"chart.interaction('tooltip', false);\n",paraId:35,tocIndex:6},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n      format: 'csv',\n    },\n    encode: {\n      x: 'state',\n      y: 'population',\n      color: 'age',\n    },\n    transform: [\n      { type: 'sortX', by: 'y', reverse: true, reducer: 'sum', slice: 6 },\n      { type: 'dodgeX' },\n    ],\n    legend: false,\n    interaction: {\n      tooltip: {\n        shared: true,\n        mount: 'body',\n        css: {\n          '.g2-tooltip': {\n            background: '#eee',\n            'border-radius': ' 0.25em !important',\n          },\n          '.g2-tooltip-title': {\n            'font-size': '20px',\n            'font-weight': 'bold',\n            'padding-bottom': '0.25em',\n          },\n          '.g2-tooltip-list-item': {\n            background: '#ccc',\n            padding: '0.25em',\n            margin: '0.25em',\n            'border-radius': '0.25em',\n          },\n          '.g2-tooltip-list-item-name-label': {\n            'font-weight': 'bold',\n            'font-size': '16px',\n          },\n          'g2-tooltip-list-item-marker': {\n            'border-radius': '0.25em',\n            width: '15px',\n            height: '15px',\n          },\n          '.g2-tooltip-list-item-value': {\n            'font-weight': 'bold',\n            'font-size': '16px',\n          },\n        },\n      },\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:36,tocIndex:7}]},79836:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50292);const t=[{value:"The Mark Transform",paraId:0},{value:" in G2 offers a convenient method for transforming data and mark options, mainly used for analyzing data. The core of mark transform, which ",paraId:0},{value:"filters, modifies, aggregates and generates",paraId:0},{value:" new channel values.",paraId:0},{value:"Transform is an array, executed in the order when they are declared. It can be configured at the level of mark:",paraId:1},{value:"({\n  type: 'interval',\n  transform: [{ type: 'stackY' }, { type: 'sortX' }],\n});\n",paraId:2},{value:"// API\n// First way\nchart.interval().transform({ type: 'stackY' }).transform({ type: 'sortX' });\n\n// Second way\nchart.interval().transform([{ type: 'stackY' }, { type: 'sortX' }]);\n",paraId:3},{value:"Transform can also configure the level of view:",paraId:4},{value:"({\n  type: 'view',\n  transform: [{ type: 'stackY' }, { type: 'sortX' }],\n});\n",paraId:5},{value:"// API\n// First way\nchart.transform({ type: 'stackY' }).transform({ type: 'sortX' });\n\n// Second way\nchart.transform([{ type: 'stackY' }, { type: 'sortX' }]);\n",paraId:6},{value:"Mark transform will modify the data bound to each channel, thereby changing the display form of the chart. For example, StackY transform stacks the column data bound to bar graph y and y1 channels:",paraId:7,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city')\n    .transform({ type: 'stackY' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:8,tocIndex:0},{value:"Transform declared on the view will be passed on to the mark declared in ",paraId:9,tocIndex:1},{value:"children",paraId:9,tocIndex:1},{value:". Set if it is not transformed, otherwise, it has no effect. For example, the following stacked area chart with transform:",paraId:9,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city')\n    .transform({ type: 'stackY' }); // Transform of the level of view\n\n  chart.area().style('fillOpacity', 0.5);\n\n  chart.line().style('strokeWidth', 2).tooltip(false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:1},{value:"There are generally two common transform functions:",paraId:11,tocIndex:2},{value:"Prevent overlap",paraId:12,tocIndex:2},{value:"Data aggregation",paraId:12,tocIndex:2},{value:"One function of transform is to prevent overlap. For example, the bars in the following data bar chart overlap.",paraId:13,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:3},{value:"At this time, you can declare a DodgeX to draw a grouped bar chart:",paraId:15,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { city: 'London', month: 'Jan.', rainfall: 18.9 },\n      { city: 'London', month: 'Feb.', rainfall: 28.8 },\n      { city: 'London', month: 'Mar.', rainfall: 39.3 },\n      { city: 'London', month: 'Apr.', rainfall: 81.4 },\n      { city: 'London', month: 'May', rainfall: 47 },\n      { city: 'London', month: 'Jun.', rainfall: 20.3 },\n      { city: 'London', month: 'Jul.', rainfall: 24 },\n      { city: 'London', month: 'Aug.', rainfall: 35.6 },\n      { city: 'Berlin', month: 'Jan.', rainfall: 12.4 },\n      { city: 'Berlin', month: 'Feb.', rainfall: 23.2 },\n      { city: 'Berlin', month: 'Mar.', rainfall: 34.5 },\n      { city: 'Berlin', month: 'Apr.', rainfall: 99.7 },\n      { city: 'Berlin', month: 'May', rainfall: 52.6 },\n      { city: 'Berlin', month: 'Jun.', rainfall: 35.5 },\n      { city: 'Berlin', month: 'Jul.', rainfall: 37.4 },\n      { city: 'Berlin', month: 'Aug.', rainfall: 42.4 },\n    ])\n    .encode('x', 'month')\n    .encode('y', 'rainfall')\n    .encode('color', 'city')\n    .transform({ type: 'dodgeX' }); // Declare transform\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:16,tocIndex:3},{value:"This is actually one of the functions of mark transform: ",paraId:17,tocIndex:3},{value:"Prevent overlap",paraId:17,tocIndex:3},{value:". In addition to DodgeX, there are also transform such as StackY and JitterX that can be used to prevent overlap.",paraId:17,tocIndex:3},{value:"In addition to preventing overlap, there is also a type of mark transform mainly used for data aggregation: such as Bin and Group. Different from traditional data aggregation, mark aggregation occurs in drawing, not before drawing. This eliminates the need for us to manipulate abstract raw data, but directly manipulate channel values. This greatly improves our efficiency in exploring data.",paraId:18,tocIndex:4},{value:"First, let's draw a scatterplot as follows, showing the correlation between penguin culmen_depth_mm and culmen_length_mm.",paraId:19,tocIndex:4},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n      transform: [\n        { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n      ],\n    })\n    .encode('x', (d) => +d.culmen_depth_mm)\n    .encode('y', (d) => +d.culmen_length_mm);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:20,tocIndex:4},{value:"At this time, if you want to see the distribution of penguin culmen_depth_mm, you can use bin to binning the data.",paraId:21,tocIndex:4},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n      transform: [\n        { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n      ],\n    })\n    .encode('x', (d) => +d.culmen_depth_mm)\n    .transform({\n      type: 'binX', // Bin the x channel value\n      y: 'count', // Generate the y channel and select the count reducer to count the total number of each box\n    })\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:22,tocIndex:4},{value:"Bin is mainly used to aggregate numerical data, and Group is mainly used for discrete data.",paraId:23,tocIndex:4},{value:"We can also declare multiple transform at the same time. For example, in the penguin example above, if we consider one more data dimension: the gender of the penguin, we can declare Bin and StackY transform continuously.",paraId:24,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n      transform: [\n        { type: 'filter', callback: (d) => d.culmen_depth_mm !== null },\n      ],\n    })\n    .encode('x', (d) => +d.culmen_depth_mm)\n    .encode('color', 'sex')\n    .transform({ type: 'binX', y: 'count' }) // 声明 bin 转换\n    .transform({ type: 'stackY', orderBy: 'sum', reverse: true }) // 声明 stack 转换\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:25,tocIndex:5}]},95767:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(43771);const t=[{value:"The ",paraId:0},{value:"view",paraId:0},{value:" in G2 is used to draw multiple marks. A view has a coordinate system and is the smallest unit of application interaction.",paraId:0},{value:"({\n  type: 'view',\n  children: [{ type: 'interval' }],\n});\n",paraId:1},{value:"The top-level Chart is a view by default:",paraId:2},{value:"// Add an Interval to this view\nchart.interval();\n",paraId:3},{value:"When the top-level Chart adds a compound node, you can declare the view through ",paraId:4},{value:"chart.view",paraId:4},{value:":",paraId:4},{value:"const spaceFlex = chart.spaceFlex();\n\nconst view = spaceFlex.view();\n\nview.line();\nview.point();\n",paraId:5},{value:"data",paraId:6,tocIndex:0},{value:" - Visual data",paraId:7,tocIndex:0},{value:"encode",paraId:8,tocIndex:0},{value:" - Encoding information",paraId:7,tocIndex:0},{value:"scale",paraId:9,tocIndex:0},{value:" - Mapping rules",paraId:7,tocIndex:0},{value:"transform",paraId:10,tocIndex:0},{value:" - Channel value transformation",paraId:7,tocIndex:0},{value:"layout",paraId:11,tocIndex:0},{value:" - Configuration of layout algorithm",paraId:7,tocIndex:0},{value:"coordinate",paraId:12,tocIndex:0},{value:" - Coordinate system transformation",paraId:7,tocIndex:0},{value:"style",paraId:13,tocIndex:0},{value:" - Visual style",paraId:7,tocIndex:0},{value:"labelTransform",paraId:14,tocIndex:0},{value:" - Data label transformation",paraId:7,tocIndex:0},{value:"title",paraId:15,tocIndex:0},{value:" - Chart title",paraId:7,tocIndex:0},{value:"axis",paraId:16,tocIndex:0},{value:" - Coordinate axis",paraId:7,tocIndex:0},{value:"legend",paraId:17,tocIndex:0},{value:" - Legend",paraId:7,tocIndex:0},{value:"scrollbar",paraId:18,tocIndex:0},{value:" - Scrollbar",paraId:7,tocIndex:0},{value:"slider",paraId:19,tocIndex:0},{value:" - Drag bar",paraId:7,tocIndex:0},{value:"interaction",paraId:20,tocIndex:0},{value:" - Interaction",paraId:7,tocIndex:0},{value:"theme",paraId:21,tocIndex:0},{value:" - Theme",paraId:7,tocIndex:0},{value:"({\n  type: 'view',\n  data: [],\n  encode: {},\n  scale: {},\n  transform: [],\n  coordinate: {},\n  style: {},\n  labelTransform: {},\n  title: {},\n  axis: {},\n  legend: {},\n  tooltip: {},\n  scrollbar: {},\n  slider: {},\n  interaction: {},\n  theme: {},\n});\n",paraId:22,tocIndex:0}]},47507:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(5940);const t=[{value:"Taking a 3D scatter plot as an example, creating the chart requires the following steps:",paraId:0},{value:"Create WebGL renderers and plugin.",paraId:1},{value:"Extend threedlib.",paraId:1},{value:"Set z-channel, scale and axes.",paraId:1},{value:"Set up the camera in the scene.",paraId:1},{value:"Add light source.",paraId:1},{value:"Add custom legend.",paraId:1},{value:"Using camera interaction and animation.",paraId:1},{value:"First install the dependencies:",paraId:2,tocIndex:0},{value:"$ npm install @antv/g-webgl @antv/g-plugin-3d @antv/g-plugin-control --save\n",paraId:3,tocIndex:0},{value:"and then use ",paraId:4,tocIndex:0},{value:"@antv/g-webgl",paraId:4,tocIndex:0},{value:" as a renderer and register the following two plugins:",paraId:4,tocIndex:0},{value:"g-plugin-3d",paraId:5,tocIndex:0},{value:" Provide geometry, materials and lighting in 3D scenes.",paraId:5,tocIndex:0},{value:"g-plugin-control",paraId:5,tocIndex:0},{value:" Provide camera interaction in 3D scenes.",paraId:5,tocIndex:0},{value:"import { Renderer as WebGLRenderer } from '@antv/g-webgl';\nimport { Plugin as ThreeDPlugin, DirectionalLight } from '@antv/g-plugin-3d';\nimport { Plugin as ControlPlugin } from '@antv/g-plugin-control';\n\nconst renderer = new WebGLRenderer();\nrenderer.registerPlugin(new ThreeDPlugin());\nrenderer.registerPlugin(new ControlPlugin());\n",paraId:6,tocIndex:0},{value:"Due to the huge size of 3D-related functional code, we separated it into ",paraId:7,tocIndex:1},{value:"threedlib",paraId:8,tocIndex:1},{value:", extend it and customize the Chart object at runtime:",paraId:7,tocIndex:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\n",paraId:9,tocIndex:1},{value:"Using ",paraId:10,tocIndex:2},{value:"depth",paraId:10,tocIndex:2},{value:" to specified depth when creating the Chart",paraId:10,tocIndex:2},{value:"const chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400,\n});\n",paraId:11,tocIndex:2},{value:"We use ",paraId:12,tocIndex:2},{value:"point3D",paraId:13,tocIndex:2},{value:" mark and select cube as the shape to draw.\nThen set the z channel, scale and axes.",paraId:12,tocIndex:2},{value:"chart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('color', 'Origin')\n  .coordinate({ type: 'cartesian3D' })\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n",paraId:14,tocIndex:2},{value:"In a 3D scene we can use orthographic or perspective projection, and the camera can be get from the Chart context after the first rendering is completed. You can then use the ",paraId:15,tocIndex:3},{value:"camera API",paraId:15,tocIndex:3},{value:" provide by G to complete the settings of projection mode and camera type. In the example below, we use perspective projection,",paraId:15,tocIndex:3},{value:"chart.render().then(() => {\n  const { canvas } = chart.getContext();\n  const camera = canvas.getCamera(); // get camera\n\n  camera.setPerspective(0.1, 5000, 45, 500 / 500);\n  camera.setType(CameraType.ORBITING);\n});\n",paraId:16,tocIndex:3},{value:"The effect is as follows:",paraId:17,tocIndex:3},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // initialize Chart instance\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Origin')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:18,tocIndex:3},{value:"We can also let the camera fix the viewpoint and rotate it at a certain angle. Here we use ",paraId:19,tocIndex:3},{value:"rotate",paraId:19,tocIndex:3},{value:"：",paraId:19,tocIndex:3},{value:"camera.rotate(-20, -20, 0);\n",paraId:20,tocIndex:3},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // initialize Chart instance\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Origin')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setType(g.CameraType.ORBITING);\n    camera.rotate(-20, -20, 0);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:21,tocIndex:3},{value:'The material needs to match the light source to present a certain "three-dimensional feeling". Here we use what G provides ',paraId:22,tocIndex:4},{value:"directional light source",paraId:22,tocIndex:4},{value:"：",paraId:22,tocIndex:4},{value:"import { DirectionalLight } from '@antv/g-plugin-3d';\n\nconst light = new DirectionalLight({\n  style: {\n    intensity: 3,\n    fill: 'white',\n    direction: [-1, 0, 1],\n  },\n});\ncanvas.appendChild(light);\n",paraId:23,tocIndex:4},{value:"we can use ",paraId:24,tocIndex:4},{value:"intensity",paraId:24,tocIndex:4},{value:" to increase the intensity of the light source:",paraId:24,tocIndex:4},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // initialize Chart instance\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Origin')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 5,\n        fill: 'white',\n        direction: [0, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:25,tocIndex:4},{value:"You may notice that in the example above we intentionally turned off the legend:",paraId:26,tocIndex:5},{value:"chart.legend(false);\n",paraId:27,tocIndex:5},{value:"This is because graphics in a 3D scene are all affected by the camera, but HUD components like legends are better suited to being drawn independently. refer to ",paraId:28,tocIndex:5},{value:"Custom legend",paraId:29,tocIndex:5},{value:", we can customize the legend using HTML:",paraId:28,tocIndex:5},{value:"(() => {\n  // add legend\n  function legendColor(chart) {\n    // create and mound legend\n    const node = chart.getContainer();\n    const legend = document.createElement('div');\n    legend.style.display = 'flex';\n    node.insertBefore(legend, node.childNodes[0]);\n\n    // create and mount Items\n    const { color: scale } = chart.getScale();\n    const { domain } = scale.getOptions();\n    const items = domain.map((value) => {\n      const item = document.createElement('div');\n      const color = scale.map(value);\n      item.style.marginLeft = '1em';\n      item.innerHTML = `\n    <span style=\"\n      background-color:${color};\n      display:inline-block;\n      width:10px;\n      height:10px;\"\n    ></span>\n    <span>${value}</span>\n    `;\n      return item;\n    });\n    items.forEach((d) => legend.append(d));\n\n    // event listener\n    const selectedValues = [...domain];\n    const options = chart.options();\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const value = domain[i];\n      item.style.cursor = 'pointer';\n      item.onclick = () => {\n        const index = selectedValues.indexOf(value);\n        if (index !== -1) {\n          selectedValues.splice(index, 1);\n          item.style.opacity = 0.5;\n        } else {\n          selectedValues.push(value);\n          item.style.opacity = 1;\n        }\n        changeColor(selectedValues);\n      };\n    }\n\n    // rerender view\n    function changeColor(value) {\n      const { transform = [] } = options;\n      const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n      chart.options({\n        ...options,\n        transform: newTransform, // set new transform\n        scale: { color: { domain } },\n      });\n      chart.render(); // rerender chart\n    }\n  }\n\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // initialize Chart instance\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Origin')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    legendColor(chart);\n\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:30,tocIndex:5},{value:"Interaction in 3D scenes is very different from 2D scenes. ",paraId:31,tocIndex:6},{value:"g-plugin-control",paraId:31,tocIndex:6},{value:" provides camera-based interaction in 3D scenes. When we drag the canvas, the camera will be controlled to rotate around the viewpoint, and the zoom of the mouse wheel will cause the camera to perform a dolly operation. It should be noted that the scaling operation has no effect under orthogonal projection, but the rotation operation is still effective.",paraId:31,tocIndex:6},{value:"When users go through some camera operations, they sometimes want to return to the initial state, for example ",paraId:32,tocIndex:6},{value:"plot.ly",paraId:32,tocIndex:6},{value:" provides “Reset camera to default” button in the operation toolbar. Use what G provides ",paraId:32,tocIndex:6},{value:"Camera animation API",paraId:32,tocIndex:6},{value:", we can achieve smooth transition between any camera positions:",paraId:32,tocIndex:6},{value:"const camera = canvas.getCamera();\ncamera.createLandmark('default', {\n  position: [250, 250, 500],\n  focalPoint: [250, 250, 0],\n  zoom: 1,\n});\n\nbutton.onclick = () => {\n  camera.gotoLandmark('default', {\n    duration: 300,\n    easing: 'linear',\n  });\n};\n",paraId:33,tocIndex:6},{value:"(() => {\n  function cameraButton(chart) {\n    const node = chart.getContainer();\n    const button = document.createElement('button');\n    button.textContent = 'Reset camera to default';\n    node.insertBefore(button, node.childNodes[0]);\n\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.createLandmark('default', {\n      position: [250, 250, 500],\n      focalPoint: [250, 250, 0],\n      zoom: 1,\n    });\n\n    button.onclick = () => {\n      camera.gotoLandmark('default', {\n        duration: 300,\n        easing: 'linear',\n      });\n    };\n  }\n  // add legend\n  function legendColor(chart) {\n    // create and mount legend 并且挂在图例\n    const node = chart.getContainer();\n    const legend = document.createElement('div');\n    legend.style.display = 'flex';\n    node.insertBefore(legend, node.childNodes[0]);\n\n    // create and mount Items\n    const { color: scale } = chart.getScale();\n    const { domain } = scale.getOptions();\n    const items = domain.map((value) => {\n      const item = document.createElement('div');\n      const color = scale.map(value);\n      item.style.marginLeft = '1em';\n      item.innerHTML = `\n    <span style=\"\n      background-color:${color};\n      display:inline-block;\n      width:10px;\n      height:10px;\"\n    ></span>\n    <span>${value}</span>\n    `;\n      return item;\n    });\n    items.forEach((d) => legend.append(d));\n\n    // event listeners\n    const selectedValues = [...domain];\n    const options = chart.options();\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const value = domain[i];\n      item.style.cursor = 'pointer';\n      item.onclick = () => {\n        const index = selectedValues.indexOf(value);\n        if (index !== -1) {\n          selectedValues.splice(index, 1);\n          item.style.opacity = 0.5;\n        } else {\n          selectedValues.push(value);\n          item.style.opacity = 1;\n        }\n        changeColor(selectedValues);\n      };\n    }\n\n    // rerender view\n    function changeColor(value) {\n      const { transform = [] } = options;\n      const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n      chart.options({\n        ...options,\n        transform: newTransform, // set new transform\n        scale: { color: { domain } },\n      });\n      chart.render(); // rerender chart\n    }\n  }\n\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // initialize Chart instance\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Origin')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    legendColor(chart);\n    cameraButton(chart);\n\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:34,tocIndex:6}]},50559:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(51331);const t=[{value:"G2 version 5.0.19 publishs the on-demand packaging function. You can leverage the ",paraId:0},{value:"Tree-Shaking",paraId:0},{value:" capability of bundling tools like ",paraId:0},{value:"Rollup",paraId:0},{value:",",paraId:0},{value:"Webpack",paraId:0},{value:" to use G2 features on demand, thereby reducing the packaged size. Although there is still a lot of room for optimization from the results, this function has the following significance:",paraId:0},{value:"Prevent the package size of existing G2 5.0 users from meaninglessly increasing.",paraId:1},{value:"It can more clearly analyze dependencies and organize the overall architecture of G2 5.0.",paraId:1},{value:"Provide an idea for expanding G2 5.0 capabilities.",paraId:1},{value:"For example, package the following web page, which uses G2 to draw a bar chart:",paraId:2,tocIndex:0},{value:"<html>\n  <div id=\"container\"></div>\n  <script type=\"module\">\n    import { corelib, extend, Runtime } from '@antv/g2';\n\n    //Extend corelib's capabilities based on Runtime\n    const Chart = extend(Runtime, corelib());\n\n    //Initialize the expanded chart instance\n    const chart = new Chart({\n      container: 'container',\n    });\n\n    // Declare visualization\n    chart.options({\n      type: 'interval',\n      data: [\n        { genre: 'Sports', sold: 275 },\n        { genre: 'Strategy', sold: 115 },\n        { genre: 'Action', sold: 120 },\n        { genre: 'Shooter', sold: 350 },\n        { genre: 'Other', sold: 150 },\n      ],\n      encode: {\n        x: 'genre',\n        y: 'sold',\n      },\n    });\n\n    // Render visualization\n    chart.render();\n  <\/script>\n</html>\n",paraId:3,tocIndex:0},{value:"and use Chart object which exposed from ",paraId:4,tocIndex:0},{value:"import { Chart } from '@antv/g2'",paraId:4,tocIndex:0},{value:" directly. The bundle package size is compared as follows:",paraId:4,tocIndex:0},{value:"(() => {\n  const data = [\n    { lib: 'Chart', size: 957772, type: 'raw' },\n    { lib: 'Chart', size: 288753, type: 'gzip' },\n    { lib: 'Runtime', size: 855619, type: 'raw' },\n    { lib: 'Runtime', size: 252045, type: 'gzip' },\n  ];\n\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data,\n    encode: {\n      x: 'lib',\n      y: 'size',\n      color: 'type',\n    },\n    transform: [{ type: 'dodgeX' }],\n    scale: {\n      y: { nice: true },\n    },\n    axis: {\n      y: { labelFormatter: (d) => d / 1000 + 'kb' },\n      x: { title: false },\n    },\n    legend: {\n      color: { title: false },\n    },\n    labels: [{ text: (d) => (d.size / 1000).toFixed(2) + 'kb' }],\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:5,tocIndex:0},{value:"It can be seen that the size has been reduced ",paraId:6,tocIndex:0},{value:"100kb",paraId:6,tocIndex:0},{value:" about.",paraId:6,tocIndex:0},{value:"The architecture of G2 is composed of Runtime + library. Runtime is responsible for the rendering process, and library is a JavaScript object composed of a series of visual components, used to process or draw data at different stages of the entire rendering.",paraId:7,tocIndex:1},{value:"const library = {\n  'mark.interval': Interval,\n  'mark.forceGraph': ForceGraph,\n  'mark.geoPath': GeoPath,\n  'scale.linear': Linear,\n  'scale.log': Log,\n  //...\n};\n",paraId:8,tocIndex:1},{value:"Therefore, the size of G2 after packaging is determined by the size of the runtime and the library. The size of the runtime is fixed, but the size of the library can change:",paraId:9,tocIndex:1},{value:"If I only use statistical charts in my project, I will not rely on geography or graph analysis-related capabilities, and the visualization components corresponding to these capabilities do not need to be included in the library I use.",paraId:9,tocIndex:1},{value:"Based on the above theory, we can control the final package size by controlling the visual components contained in the library.",paraId:10,tocIndex:1},{value:"The following is a brief introduction to the APIs related to on-demand packaging.",paraId:11,tocIndex:2},{value:"options",paraId:12},{value:"Returns a G2 runtime. This runtime does not contain any Library and requires cooperation with ",paraId:13,tocIndex:3},{value:"G2",paraId:14,tocIndex:3},{value:".extend",paraId:14,tocIndex:3},{value:".",paraId:13,tocIndex:3},{value:"You can use single library, for example using only core capabilities:",paraId:15,tocIndex:3},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:16,tocIndex:3},{value:"You can also use multiple libraries at the same time, such as using core and geographic capabilities:",paraId:17,tocIndex:3},{value:"import { Runtime, extend, corelib, geolib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...geolib(),\n});\n",paraId:18,tocIndex:3},{value:"Runtime",paraId:12},{value:"library",paraId:12},{value:"Enhance ",paraId:19,tocIndex:4},{value:"Runtime",paraId:19,tocIndex:4},{value:" according to a specified ",paraId:19,tocIndex:4},{value:"library",paraId:19,tocIndex:4},{value:", including adding types and corresponding Chart APIs.",paraId:19,tocIndex:4},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:20,tocIndex:4},{value:"Returns the standard library, which contains all capabilities of G2 except 3D, that is, all visualization components of ",paraId:21,tocIndex:5},{value:"G2.corelib",paraId:22,tocIndex:5},{value:"，",paraId:21,tocIndex:5},{value:"G2.plotlib",paraId:23,tocIndex:5},{value:"，",paraId:21,tocIndex:5},{value:"G2.geolib",paraId:24,tocIndex:5},{value:", and ",paraId:21,tocIndex:5},{value:"G2.graphlib",paraId:25,tocIndex:5},{value:". ",paraId:21,tocIndex:5},{value:"G2.Chart",paraId:26,tocIndex:5},{value:" is using this library. (",paraId:21,tocIndex:5},{value:"Source code",paraId:21,tocIndex:5},{value:"·",paraId:21,tocIndex:5},{value:"Case",paraId:21,tocIndex:5},{value:")",paraId:21,tocIndex:5},{value:"import { Runtime, extend, stdlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, stdlib());\n\nconst chart = new Chart();\n\nchart.interval(); // corelib\nchart.sankey(); // plotlib\nchart.geoPath(); // graphlib\nchart.forceGraph(); // graphlib\n",paraId:27,tocIndex:5},{value:"Return to the core library, containing only basic mark. You can view the included visual components through the source code. (",paraId:28,tocIndex:6},{value:"Source code",paraId:28,tocIndex:6},{value:"·",paraId:28,tocIndex:6},{value:"Case",paraId:28,tocIndex:6},{value:")",paraId:28,tocIndex:6},{value:"import { Runtime, extend, corelib } from '@antv/g2';\n\nconst Chart = extend(Runtime, corelib());\n",paraId:29,tocIndex:6},{value:"Return to an advanced statistical analysis library, including some sophisticated statistical tags (Snakey et al.) and transformations (Venn et al.). It cannot be used independently, must be used with ",paraId:30,tocIndex:7},{value:"G2.corelib",paraId:31,tocIndex:7},{value:". You can view the included visual components through the source code. (",paraId:30,tocIndex:7},{value:"Source code",paraId:30,tocIndex:7},{value:"·",paraId:30,tocIndex:7},{value:"Case",paraId:30,tocIndex:7},{value:")",paraId:30,tocIndex:7},{value:"import { Runtime, extend, corelib, plotlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...plotlib(),\n});\n\nconst chart = new Chart();\n\nchart.sankey();\n",paraId:32,tocIndex:7},{value:"Returns the geographical analysis library, including geographical tags (GeoPath, etc.) and projections (Projection). It cannot be used independently, must be used with ",paraId:33,tocIndex:8},{value:"G2.corelib",paraId:34,tocIndex:8},{value:". You can view the included visual components through the source code. (",paraId:33,tocIndex:8},{value:"Source code",paraId:33,tocIndex:8},{value:"·",paraId:33,tocIndex:8},{value:"Case",paraId:33,tocIndex:8},{value:")",paraId:33,tocIndex:8},{value:"import { Runtime, extend, corelib, geolib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...geolib(),\n});\n\nconst chart = new Chart();\n\nchart.geoPath();\n",paraId:35,tocIndex:8},{value:"Returns a graph analysis library, containing graph markup (ForceGraph, etc.). It cannot be used independently, must be used with ",paraId:36,tocIndex:9},{value:"G2.corelib",paraId:37,tocIndex:9},{value:". You can view the included visual components through the source code. (",paraId:36,tocIndex:9},{value:"Source code",paraId:36,tocIndex:9},{value:"·",paraId:36,tocIndex:9},{value:"Case",paraId:36,tocIndex:9},{value:")",paraId:36,tocIndex:9},{value:"import { Runtime, extend, corelib, graphlib } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...graphlib(),\n});\n\nconst chart = new Chart();\n\nchart.forceGraph();\n",paraId:38,tocIndex:9},{value:"Returns the enhanced analysis library, providing enhanced analysis tags (Auto, etc.). This library will depend on ",paraId:39,tocIndex:10},{value:"@antv/ava",paraId:39,tocIndex:10},{value:", providing capabilities such as automatic chart drawing and automatic annotation. It cannot be used independently, must be used with ",paraId:39,tocIndex:10},{value:"G2.corelib",paraId:40,tocIndex:10},{value:".",paraId:39,tocIndex:10},{value:"import { Runtime, extend, corelib } from '@antv/g2';\nimport { autolib } from '@antv/g2-extension-ava';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...autolib(),\n});\n\nconst chart = new Chart();\n\nchart.auto(); // Auto Mark\n",paraId:41,tocIndex:10},{value:"Under development, expected to be online by the end of October",paraId:42,tocIndex:11},{value:"Return to the 3D analysis library, providing capabilities for 3D visualization. This library will not be included in ",paraId:43,tocIndex:11},{value:"G2.stdlib",paraId:44,tocIndex:11},{value:". It cannot be used independently, it needs to be used with ",paraId:43,tocIndex:11},{value:"G2.corelib",paraId:45,tocIndex:11},{value:". ",paraId:43,tocIndex:11},{value:"Example",paraId:46,tocIndex:11},{value:"import { Runtime, extend, corelib } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\nimport { Renderer } from '@antv/g-webgl';\n\nconst Chart = extend(Runtime, {\n  ...corelib(),\n  ...threedlib(),\n});\n\nconst chart = new Chart({\n  renderer: new Renderer(), //Use webgl renderer\n  depth: 400, // Set depth\n});\n\nchart.point3D();\n",paraId:47,tocIndex:11},{value:"At present, the ability to package on demand has been published, but it can be found that the effect is not very obvious, and the size is only reduced by about 10%. By analyzing the following dependency graph (G2 5.0.18 use ",paraId:48,tocIndex:12},{value:"G2.stdlib",paraId:49,tocIndex:12},{value:") can have the following ideas for further optimization:",paraId:48,tocIndex:12},{value:"Reduce the size of the runtime: put some capabilities in the library and use them on demand.",paraId:50,tocIndex:12},{value:"Dependency governance: remove some duplicate dependencies, such as",paraId:50,tocIndex:12},{value:"@antv/util",paraId:50,tocIndex:12},{value:";Reduce the size of some dependencies",paraId:50,tocIndex:12},{value:"@antv/component",paraId:50,tocIndex:12},{value:"。",paraId:50,tocIndex:12},{value:"Provide a smaller library than corelib: mark-level on-demand packaging can be achieved.",paraId:50,tocIndex:12},{value:"The current thinking for the third idea is: provide ",paraId:51,tocIndex:12},{value:"G2.litelib",paraId:51,tocIndex:12},{value:", mark can be imported on demand.",paraId:51,tocIndex:12},{value:"import { Runtime, extend, litelib, Interval } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...litelib,\n  'mark.interval': Interval,\n});\n\nconst chart = new Chart();\n\nchart.interval();\n",paraId:52,tocIndex:12},{value:"Expected ",paraId:53,tocIndex:12},{value:"litelib",paraId:53,tocIndex:12},{value:" contains only the basic components needed to draw a visualization, all other components need to be used on demand through ",paraId:53,tocIndex:12},{value:"import",paraId:53,tocIndex:12},{value:", such as using tooltip interaction:",paraId:53,tocIndex:12},{value:"import { Runtime, extend, litelib, Interval, Tooltip } from '@antv/g2';\n\nconst Chart = extend(Runtime, {\n  ...litelib,\n  'mark.interval': Interval,\n  'interaction.tooltip': Tooltip,\n});\n\nconst chart = new Chart();\n\nchart.options({\n  type: 'interval',\n  interaction: { tooltip: true }, // 使用 tooltip 交互\n});\n",paraId:54,tocIndex:12},{value:"If you are interested in related things or have ideas for optimizing the package size of G2 5.0, you can provide relevant ",paraId:55,tocIndex:12},{value:"idea",paraId:55,tocIndex:12},{value:", or play around in the G2 5.0 ",paraId:55,tocIndex:12},{value:"test environment",paraId:55,tocIndex:12},{value:"!",paraId:55,tocIndex:12}]},23228:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(79356);const t=[{value:"Color plays a very important role in visualization. It helps us better understand data, highlight key information, enhance visual appeal and improve readability. And in visualization, color often serves the following purposes:",paraId:0},{value:"Distinguish data categories",paraId:1},{value:": Distinguish between different data categories. For example, in a bar chart, we can use different colors to represent different product categories to make it easier to identify and compare them.",paraId:1},{value:"Represents the amount of data",paraId:1},{value:": Represent the amount of data. For example, in a heat map, we can use shades of color to represent the size of the data, with darker colors representing larger values ​​and lighter colors representing smaller values.",paraId:1},{value:"Highlight key information",paraId:1},{value:": Highlight key information. For example, in a line chart, we can use bright colors to represent data points of interest to make them easier to find.",paraId:1},{value:"Enhance visual appeal",paraId:1},{value:": Make the visualization more attractive. Using bright colors and interesting color schemes can make visualizations more lively and interesting.",paraId:1},{value:"Improve readability",paraId:1},{value:": Improve the readability of visualizations. For example, on a map, we can use different colors to represent different geographical areas to make them easier to identify and understand.",paraId:1},{value:"Seting data-independent colors via ",paraId:2},{value:"mark.style(fill, color)",paraId:2},{value:" or ",paraId:2},{value:"mark.style(stroke, color)",paraId:2},{value:". If you want to set data-driven colors, you can use the following methods to set the colors:",paraId:2},{value:"encode: ",paraId:3},{value:"mark.encode",paraId:3},{value:"style: ",paraId:3},{value:"mark.style",paraId:3},{value:"Most common way to set data-driven colors is through ",paraId:4,tocIndex:0},{value:"mark.encode",paraId:4,tocIndex:0},{value:", and configure the final visual display through a color scale.",paraId:4,tocIndex:0},{value:"scale.identity",paraId:5,tocIndex:0},{value:": Identity mapping",paraId:5,tocIndex:0},{value:"scale.range",paraId:5,tocIndex:0},{value:": Custom color palette",paraId:5,tocIndex:0},{value:"scale.palette",paraId:5,tocIndex:0},{value:": Built-in color palette",paraId:5,tocIndex:0},{value:"scale.relations",paraId:5,tocIndex:0},{value:": Custom mapping relationship",paraId:5,tocIndex:0},{value:"When setting the color scale to the identity scale, the color channel data will be drawn into the final visualization as visual data, but the scale will not be generated.",paraId:6,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275, color: 'red' },\n      { genre: 'Strategy', sold: 115, color: 'blue' },\n      { genre: 'Action', sold: 120, color: 'green' },\n      { genre: 'Shooter', sold: 350, color: 'red' },\n      { genre: 'Other', sold: 150, color: 'black' },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'color')\n    .scale('color', { type: 'identity' }); // Setting this scale to identity mapping.\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:7,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .encode('color', 'letter')\n    .axis('y', { labelFormatter: '.0%' })\n    .scale('color', {\n      type: 'ordinal',\n      range: ['#7593ed', '#95e3b0', '#6c7893', '#e7c450', '#7460eb'],\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:8,tocIndex:2},{value:"In G2, you can set ",paraId:9,tocIndex:3},{value:"scale.palette",paraId:9,tocIndex:3},{value:" to specify swatches. This palette can be discrete:",paraId:9,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .encode('color', 'letter')\n    .axis('y', { labelFormatter: '.0%' })\n    .scale('color', { palette: 'tableau10' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:3},{value:"It(palette) can also be continuous:",paraId:11,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart({\n    \n    height: 320,\n  });\n\n  chart\n    .cell()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n    })\n    .transform({ type: 'group', color: 'max' })\n    .encode('x', (d) => new Date(d.date).getUTCDate())\n    .encode('y', (d) => new Date(d.date).getUTCMonth())\n    .encode('color', 'temp_max')\n    .scale('color', { palette: 'rainbow' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:3},{value:"You can refer to this for the current built-in color palette ",paraId:13,tocIndex:3},{value:"palette documentation",paraId:14,tocIndex:3},{value:".",paraId:13,tocIndex:3},{value:"Specifying a series of mapping rules through ",paraId:15,tocIndex:4},{value:"scale.relations",paraId:15,tocIndex:4},{value:". This priority will be higher than the default mapping method from domain to range. For example, for the color channel, this configuration is useful if you want specific values ​​to be mapped to specific colors, or to handle outliers.",paraId:15,tocIndex:4},{value:"chart.interval().scale('color', {\n  relations: [\n    ['dog', 'red'], // dog is identically mapped to red\n    [(d) => d === undefined, 'grey'], // If the value is undefined, it is gray\n  ],\n});\n",paraId:16,tocIndex:4},{value:"Setting colors through ",paraId:17,tocIndex:5},{value:"mark.style",paraId:17,tocIndex:5},{value:". The color setting here takes higher priority compared to setting ",paraId:17,tocIndex:5},{value:"encode.color",paraId:17,tocIndex:5},{value:" and no legend will be generated.",paraId:17,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .style('fill', (datum, index, data) => {\n      const { frequency } = datum;\n      if (frequency > 0.1) return '#3376cd';\n      if (frequency > 0.05) return '#f4bb51';\n      return '#b43a29';\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:18,tocIndex:5}]},47984:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(28773);const t=[{value:"G2 is highly extensible: all visual components can be customized. Here are some common ways to customize visual components.",paraId:0},{value:"Each mark can have a custom shape, and the shape determines the final display form of the mark. There are three main steps to customizing a shape:",paraId:1,tocIndex:0},{value:"Define shape components.",paraId:2,tocIndex:0},{value:"Register shape.",paraId:2,tocIndex:0},{value:"Use shape.",paraId:2,tocIndex:0},{value:"First let's take a look at how to define shape components. A shape component is a function that accepts the style of the shape ",paraId:3,tocIndex:0},{value:"style",paraId:3,tocIndex:0},{value:" and context ",paraId:3,tocIndex:0},{value:"context",paraId:3,tocIndex:0},{value:" , and the function returns a drawing function ",paraId:3,tocIndex:0},{value:"render",paraId:3,tocIndex:0},{value:". The ",paraId:3,tocIndex:0},{value:"style",paraId:3,tocIndex:0},{value:" is the processed options specified through ",paraId:3,tocIndex:0},{value:"mark.style",paraId:3,tocIndex:0},{value:", and ",paraId:3,tocIndex:0},{value:"context",paraId:3,tocIndex:0},{value:" contains ",paraId:3,tocIndex:0},{value:"document",paraId:3,tocIndex:0},{value:" for creating graphics in ",paraId:3,tocIndex:0},{value:"@antv/g",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"The ",paraId:4,tocIndex:0},{value:"render",paraId:4,tocIndex:0},{value:" function accepts the control points of the graph ",paraId:4,tocIndex:0},{value:"P",paraId:4,tocIndex:0},{value:", mapping value ",paraId:4,tocIndex:0},{value:"value",paraId:4,tocIndex:0},{value:" and default value ",paraId:4,tocIndex:0},{value:"defaults",paraId:4,tocIndex:0},{value:", returns the graph of @antv/g. ",paraId:4,tocIndex:0},{value:"P",paraId:4,tocIndex:0},{value:" is an array composed of a series of canvas coordinates, ",paraId:4,tocIndex:0},{value:"value",paraId:4,tocIndex:0},{value:" is the processed value specified through ",paraId:4,tocIndex:0},{value:"mark.encode",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"defaults",paraId:4,tocIndex:0},{value:" is the value specified in the theme for ",paraId:4,tocIndex:0},{value:"theme.mark.shape",paraId:4,tocIndex:0},{value:". The definition of a shape component is roughly as follows:",paraId:4,tocIndex:0},{value:"function ShapeTriangle(style, context) {\n  const { document } = context;\n  return (P, value, defaults) => {\n    return document.createElement('rect', {\n      //...\n    });\n  };\n}\n",paraId:5,tocIndex:0},{value:"The next step is to register the shape by calling ",paraId:6,tocIndex:0},{value:"G2.register('shape.${mark}.${shape}', Shape)",paraId:6,tocIndex:0},{value:" to complete the registering of the shape. ",paraId:6,tocIndex:0},{value:"mark",paraId:6,tocIndex:0},{value:" is the name of the marker, ",paraId:6,tocIndex:0},{value:"shape",paraId:6,tocIndex:0},{value:" is the name of the shape, ",paraId:6,tocIndex:0},{value:"Shape",paraId:6,tocIndex:0},{value:" is a defined shape component. For example, register a triangle shape for the Interval tag:",paraId:6,tocIndex:0},{value:"import { register } from '@antv/g2';\n\nregister('shape.interval.triangle', ShapeTriangle);\n",paraId:7,tocIndex:0},{value:"The last step is to use the shape, which can be passed ",paraId:8,tocIndex:0},{value:"mark.encode",paraId:8,tocIndex:0},{value:" specified, or via ",paraId:8,tocIndex:0},{value:"mark.style",paraId:8,tocIndex:0},{value:" designation.",paraId:8,tocIndex:0},{value:"({\n  type: 'interval',\n  encode: { shape: 'triangle' },\n  // or\n  style: { shape: 'triangle' },\n});\n",paraId:9,tocIndex:0},{value:"// API\nchart.interval().encode('shape', 'triangle');\n\n// or\nchart.interval().style('shape', 'triangle');\n",paraId:10,tocIndex:0},{value:"Below is a complete example showing how to customize the shape.",paraId:11,tocIndex:0},{value:"(() => {\n  // Define graphic components\n  function ShapeTriangle(style, context) {\n    const { document } = context;\n    return (P, value, defaults) => {\n      const { color: defaultColor } = defaults;\n      const [p0, p1, p2, p3] = P;\n      const pm = [(p0[0] + p1[0]) / 2, p0[1]];\n      const { color = defaultColor } = value;\n      return document.createElement('polygon', {\n        style: {\n          ...style,\n          fill: color,\n          points: [pm, p2, p3],\n        },\n      });\n    };\n  }\n\n  // Register the triangle\n  G2.register('shape.interval.triangle', ShapeTriangle);\n\n  // Initialize chart\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('shape', 'triangle'); // Use this shape\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:0},{value:"Sometimes the built-in Tooltip cannot meet the needs. In this case, you can use ",paraId:13,tocIndex:1},{value:"render",paraId:13,tocIndex:1},{value:" function in ",paraId:13,tocIndex:1},{value:"mark.interaction.tooltip.render",paraId:13,tocIndex:1},{value:" or ",paraId:13,tocIndex:1},{value:"view.interaction.tooltip.render",paraId:13,tocIndex:1},{value:" to render custom prompts.",paraId:13,tocIndex:1},{value:"This ",paraId:14,tocIndex:1},{value:"render",paraId:14,tocIndex:1},{value:" function accepts event object ",paraId:14,tocIndex:1},{value:"event",paraId:14,tocIndex:1},{value:" and prompt data ",paraId:14,tocIndex:1},{value:"tooltipData",paraId:14,tocIndex:1},{value:", and returns a string or DOM object. ",paraId:14,tocIndex:1},{value:"event",paraId:14,tocIndex:1},{value:" is the mouse object thrown by ",paraId:14,tocIndex:1},{value:"@antv/g",paraId:14,tocIndex:1},{value:", ",paraId:14,tocIndex:1},{value:"tooltipData",paraId:14,tocIndex:1},{value:" is the title and items data declared through ",paraId:14,tocIndex:1},{value:"mark.tooltip",paraId:14,tocIndex:1},{value:". If the return value is a string, it will be used as the innerHTML of the tooltip container, otherwise the return value will be mounted. A hint's render function might look like this:",paraId:14,tocIndex:1},{value:"function render(event, tooltipData) {\n  const { title, items } = tooltipData;\n  return `<div></div>`;\n}\n",paraId:15,tocIndex:1},{value:"Here's a simple example:",paraId:16,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    })\n    .transform([{ type: 'sortX', by: 'y', reverse: true }])\n    .encode('x', 'letter')\n    .encode('y', 'frequency')\n    .interaction('tooltip', {\n      // The method of render callback returns innerHTML or DOM element.\n      render: (event, { title, items }) => `<div>\n      <h3 style=\"padding:0;margin:0\">${title}</h3>\n      <ul>${items.map(\n        (d) =>\n          `<li><span style=\"color: ${d.color}\">${d.name}</span> ${d.value}</li>`,\n      )}</ul>\n      </div>`,\n    });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:17,tocIndex:1},{value:"The built-in legend of G2 is drawn with canvas or svg. If you want to render the legend with HTML, you can customize the legend as follows:",paraId:18,tocIndex:2},{value:"Turn off the built-in legend and render the chart.",paraId:19,tocIndex:2},{value:"Wait for chart rendering to complete and render the HTML legend based on the scale data.",paraId:19,tocIndex:2},{value:"Add interactions if you need.",paraId:19,tocIndex:2},{value:"The first step is to turn off the built-in legend and rendering the chart.",paraId:20,tocIndex:2},{value:"chart.options({ legend: false });\n",paraId:21,tocIndex:2},{value:"Then wait for the chart rendering to complete and call ",paraId:22,tocIndex:2},{value:"legendColor",paraId:22,tocIndex:2},{value:" to render HTML legend:",paraId:22,tocIndex:2},{value:"chart.render().then(legendColor);\n",paraId:23,tocIndex:2},{value:"In ",paraId:24,tocIndex:2},{value:"legendColor",paraId:24,tocIndex:2},{value:" function, we first need to draw the legend. In the following example, after drawing the legend, it is added to the front of the canvas:",paraId:24,tocIndex:2},{value:"function legendColor(chart) {\n  const node = chart.getContainer();\n  const legend = document.createElement('div');\n  node.insertBefore(legend, node.childNodes[0]);\n\n  // ...\n}\n",paraId:25,tocIndex:2},{value:"After drawing the legend, we need to draw the legend items. This data is obtained from the scale of the corresponding channel: ",paraId:26,tocIndex:2},{value:"chart.getScale().color",paraId:26,tocIndex:2},{value:", and obtain the corresponding name and value through the domain and range of scale.",paraId:26,tocIndex:2},{value:"function legendColor(chart) {\n  // ...\n  const scale = chart.getScale().color;\n  const { domain } = scale.getOptions();\n  const items = domain.map(() => {});\n  // ...\n}\n",paraId:27,tocIndex:2},{value:"After drawing the legend items, we should add interaction to each legend item using ",paraId:28,tocIndex:2},{value:"item.onclick",paraId:28,tocIndex:2},{value:", collect the currently selected value, and then apply a Filter transformation to the chart declaration based on this value. Finally, re-render the chart. The complete implementation is as follows:",paraId:28,tocIndex:2},{value:"(() => {\n  // Add legend\n  function legendColor(chart) {\n    // Create a legend and attach it to the chart.\n    const node = chart.getContainer();\n    const legend = document.createElement('div');\n    legend.style.display = 'flex';\n    node.insertBefore(legend, node.childNodes[0]);\n\n    // Create and mount items.\n    const { color: scale } = chart.getScale();\n    const { domain } = scale.getOptions();\n    const items = domain.map((value) => {\n      const item = document.createElement('div');\n      const color = scale.map(value);\n      item.style.marginLeft = '1em';\n      item.innerHTML = `\n      <span style=\"\n        background-color:${color};\n        display:inline-block;\n        width:10px;\n        height:10px;\"\n      ></span>\n      <span>${value}</span>\n      `;\n      return item;\n    });\n    items.forEach((d) => legend.append(d));\n\n    // Listening events\n    const selectedValues = [...domain];\n    const options = chart.options();\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const value = domain[i];\n      item.style.cursor = 'pointer';\n      item.onclick = () => {\n        const index = selectedValues.indexOf(value);\n        if (index !== -1) {\n          selectedValues.splice(index, 1);\n          item.style.opacity = 0.5;\n        } else {\n          selectedValues.push(value);\n          item.style.opacity = 1;\n        }\n        changeColor(selectedValues);\n      };\n    }\n\n    // Re-render the view\n    function changeColor(value) {\n      const { transform = [] } = options;\n      const newTransform = [{ type: 'filter', color: { value } }, ...transform];\n      chart.options({\n        ...options,\n        transform: newTransform, // Specify a new transform\n        scale: { color: { domain } },\n      });\n      chart.render(); // Re-render the chart\n    }\n  }\n\n  // Render the chart\n  const container = document.createElement('div');\n\n  const chart = new G2.Chart({\n    \n    container,\n  });\n\n  chart.options({\n    type: 'interval',\n    data: [\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: { x: 'genre', y: 'sold', color: 'genre' },\n    legend: false,\n  });\n\n  chart.render().then(legendColor);\n\n  return chart.getContainer();\n})();\n",paraId:29,tocIndex:2},{value:"If you don’t want to use G2’s default coordinate axes, you can follow the following steps to customize the drag axis:",paraId:30,tocIndex:3},{value:"Render the slider after rendering.",paraId:31,tocIndex:3},{value:"Listen to slider events.",paraId:31,tocIndex:3},{value:"The key to the first step is determining the position and length of the slide  using the coordinate object obtained through ",paraId:32,tocIndex:3},{value:"chart.getCoordinate",paraId:32,tocIndex:3},{value:". In the second step, the key is to use ",paraId:32,tocIndex:3},{value:"chart.getScale",paraId:32,tocIndex:3},{value:" to invert the selected range on the scale, and then obtain the selected data range, and finally update the scale's domain.",paraId:32,tocIndex:3},{value:"(() => {\n  function sliderX(chart) {\n    // Create and mount range\n    const container = chart.getContainer();\n    const range = document.createElement('input');\n    container.append(range);\n\n    // Set the width and other properties of the range based on coordinate\n    const coordinate = chart.getCoordinate();\n    const { paddingLeft, width } = coordinate.getOptions();\n    range.type = 'range';\n    range.min = 0;\n    range.max = width;\n    range.value = width;\n    range.style.display = 'block';\n    range.style.width = width + 'px';\n    range.style.marginLeft = paddingLeft + 'px';\n\n    // Listen to the change event and obtain the filtered domain through scale\n    // Update domain and render\n    const scale = chart.getScaleByChannel('x');\n    const options = chart.options();\n    range.onchange = (event) => {\n      const value = event.target.value;\n      const range = [0, value / width];\n      const domain = range.map((d) => scale.invert(d));\n      chart.options({\n        ...options,\n        scale: { x: { domain } },\n      });\n      chart.render();\n    };\n  }\n\n  // Render chart\n  const container = document.createElement('div');\n  const chart = new G2.Chart({ container });\n\n  chart.options({\n    type: 'line',\n      data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n    },\n    encode: { x: 'date', y: 'close' },\n  });\n\n  chart.render().then(sliderX);\n\n  return chart.getContainer();\n})();\n",paraId:33,tocIndex:3}]},9973:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12339);const t=[{value:"G2 exposes some events to get the chart life cycle and interaction information. G2 exports a ",paraId:0},{value:"ChartEvent",paraId:0},{value:" type, used to define the type of event.",paraId:0},{value:"import { Chart, ChartEvent } from '@antv/g2';\n\nconst chart = new Chart({\n  container,\n  canvas,\n});\n\nchart.data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n\nchart\n  .interval()\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre')\n  .axis({ x: { animate: false }, y: { animate: false } });\n\nchart.on('interval:click', (e) => {\n  console.log(e.data.data); // Display clicked data\n});\n\nchart.on('element:click', (e) => {\n  console.log(e.data.data); // Display clicked data\n});\n\nchart.render();\n",paraId:1},{value:"If you want to get the life cycle information of the chart, you can do the following:",paraId:2,tocIndex:0},{value:"chart.on(ChartEvent.AFTER_RENDER, (ev) => {\n  console.log(ev);\n});\n",paraId:3,tocIndex:0},{value:"G2 currently provides the following lifecycle events:",paraId:4,tocIndex:0},{value:"Event name",paraId:5,tocIndex:0},{value:"Explanation",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_RENDER",paraId:5,tocIndex:0},{value:"Before rendering",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_PAINT",paraId:5,tocIndex:0},{value:"Before drawing",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_PAINT",paraId:5,tocIndex:0},{value:"After drawing",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_RENDER",paraId:5,tocIndex:0},{value:"After rendering",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CHANGE_DATA",paraId:5,tocIndex:0},{value:"Before changing data",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CHANGE_DATA",paraId:5,tocIndex:0},{value:"After changing data",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CLEAR",paraId:5,tocIndex:0},{value:"Before cleaning the canvas",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CLEAR",paraId:5,tocIndex:0},{value:"After cleaning the canvas",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_DESTROY",paraId:5,tocIndex:0},{value:"Before destroying the canvas",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_DESTROY",paraId:5,tocIndex:0},{value:"After destroying the canvas",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"BEFORE_CHANGE_SIZE",paraId:5,tocIndex:0},{value:"Before changing canvas size",paraId:5,tocIndex:0},{value:"ChartEvent.",paraId:5,tocIndex:0},{value:"AFTER_CHANGE_SIZE",paraId:5,tocIndex:0},{value:"After changing canvas size",paraId:5,tocIndex:0},{value:"Before rendering",paraId:6,tocIndex:0},{value:": Refers to G2 starting to process data, perform layout, drawing graphics and other operations.",paraId:6,tocIndex:0},{value:"Before drawing",paraId:6,tocIndex:0},{value:": Refers to the completion of data processing, layout, graphics drawing and other operations, but has not yet been drawn.",paraId:6,tocIndex:0},{value:"After drawing",paraId:6,tocIndex:0},{value:": Refers to G2 completing all drawing operations, but animation may exist. After the animation ends, the chart is truly rendered.",paraId:6,tocIndex:0},{value:"After rendering",paraId:6,tocIndex:0},{value:": Refers to G2 completing all drawing operations, including animation.",paraId:6,tocIndex:0},{value:"After cleaning the canvas",paraId:6,tocIndex:0},{value:": The chart in the container has been cleaned up, but the G2 instance still exists and can continue to be used.",paraId:6,tocIndex:0},{value:"After destroying the canvas",paraId:6,tocIndex:0},{value:": The G2 instance has been destroyed and can no longer be used.",paraId:6,tocIndex:0},{value:"If you want to get the interactive information of the chart, you can do the following:",paraId:7,tocIndex:1},{value:"Monitor the global ",paraId:8,tocIndex:1},{value:"element",paraId:8,tocIndex:1},{value:" event",paraId:8,tocIndex:1},{value:"chart.on(`element:${ChartEvent.EventType}`, (ev) => {\n  console.log(ev);\n});\n",paraId:9,tocIndex:1},{value:"Monitor specified ",paraId:10,tocIndex:1},{value:"element",paraId:10,tocIndex:1},{value:" event",paraId:10,tocIndex:1},{value:"chart.on(`${markType}:${ChartEvent.EventType}`, (ev) => {\n  console.log(ev);\n});\n\n// For example, listen to the click event of the bar in the bar chart\nchart.on(`interval:${ChartEvent.CLICK}`, (ev) => {\n  console.log(ev);\n});\n",paraId:11,tocIndex:1},{value:"Listen to plot area events",paraId:12,tocIndex:1},{value:"chart.on('plot:click', (event) => console.log(event));\n",paraId:13,tocIndex:1},{value:"Listen to global component events",paraId:14,tocIndex:1},{value:"chart.on('component:click', (event) => console.log(event));\n",paraId:15,tocIndex:1},{value:"Listen to global label events",paraId:16,tocIndex:1},{value:"chart.on('label:click', (event) => console.log(event));\n",paraId:17,tocIndex:1},{value:"Event name",paraId:18,tocIndex:2},{value:"Explanation",paraId:18,tocIndex:2},{value:"Callback parameters",paraId:18,tocIndex:2},{value:"ChartEvent.",paraId:18,tocIndex:2},{value:"CLICK",paraId:18,tocIndex:2},{value:"Click",paraId:18,tocIndex:2},{value:"Event",paraId:18,tocIndex:2},{value:"ChartEvent.",paraId:18,tocIndex:2},{value:"DBLCLICK",paraId:18,tocIndex:2},{value:"Double click",paraId:18,tocIndex:2},{value:"Event",paraId:18,tocIndex:2},{value:"Event name",paraId:19,tocIndex:3},{value:"Explanation",paraId:19,tocIndex:3},{value:"Callback parameters",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_TAP",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_DOWN",paraId:19,tocIndex:3},{value:"When the pointer is pressed",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_UP",paraId:19,tocIndex:3},{value:"When the pointer is released",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_OVER",paraId:19,tocIndex:3},{value:"When the pointer enters the target element",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_OUT",paraId:19,tocIndex:3},{value:"When the pointer leaves the target element",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_MOVE",paraId:19,tocIndex:3},{value:"When the pointer changes coordinates",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_ENTER",paraId:19,tocIndex:3},{value:"When the pointer enters the target element or its child elements",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_LEAVE",paraId:19,tocIndex:3},{value:"When the pointer leaves the target element or its child elements",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"ChartEvent.",paraId:19,tocIndex:3},{value:"POINTER_UPOUTSIDE",paraId:19,tocIndex:3},{value:"Event",paraId:19,tocIndex:3},{value:"If you want to listen to drag events, you need to set the draggable and droppable properties.",paraId:20,tocIndex:4},{value:"chart.interval().style('draggable', true).style('droppable', true);\n",paraId:21,tocIndex:4},{value:"Event name",paraId:22,tocIndex:4},{value:"Explanation",paraId:22,tocIndex:4},{value:"Callback parameters",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_START",paraId:22,tocIndex:4},{value:"When starting to drag",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG",paraId:22,tocIndex:4},{value:"During dragging",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_END",paraId:22,tocIndex:4},{value:"When dragging is complete",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_ENTER",paraId:22,tocIndex:4},{value:"When the element is dragged into the target element",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_LEAVE",paraId:22,tocIndex:4},{value:"When the element is dragged away from the target element",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DRAG_OVER",paraId:22,tocIndex:4},{value:"When the element is dragged and hovered within the target element",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4},{value:"ChartEvent.",paraId:22,tocIndex:4},{value:"DROP",paraId:22,tocIndex:4},{value:"When the element is placed inside the target element",paraId:22,tocIndex:4},{value:"Event",paraId:22,tocIndex:4}]},77634:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(97830);const t=[{value:"G2 5.0, like version 4.0, provides a set of imperative Functional APIs to declare charts. For example, the simplest bar chart is declared as follows.",paraId:0},{value:"(() => {\n  // Initialize chart instance\n  const chart = new G2.Chart();\n\n  // Declare visualization\n  chart\n    .interval() // Create an Interval tag\n    .data([\n      // Bind data\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre') // Encode x channel\n    .encode('y', 'sold'); // Encode y channel\n\n  // Render visualization\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:1},{value:"In addition to this functional style, G2 5.0 also provides a new API: Spec API. The API declares visualizations through a JavaScript object.",paraId:2},{value:"Currently we declare the visualization through ",paraId:3,tocIndex:0},{value:"chart.options(spec)",paraId:3,tocIndex:0},{value:", the following example can achieve the same effect as above.",paraId:3,tocIndex:0},{value:"(() => {\n  // Initialize chart instance\n  const chart = new G2.Chart();\n\n  // Declare visualization\n  chart.options({\n    type: 'interval', // Create an Interval tag\n    data: [\n      // Bind data\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ],\n    encode: {\n      x: 'genre', // Encode x channel\n      y: 'sold', // Encode y channel\n    },\n  });\n\n  // Render visualization\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:4,tocIndex:0},{value:"It can be found that the initialization of the chart instance and the final rendering of the two APIs are the same, but the way of declaring the visualization in between is different. Next, let's take a brief look at the similarities and differences between the two methods.",paraId:5,tocIndex:1},{value:"The Functional API is implemented based on Spec API. In simple terms, each Chart instance has an options object. Functional API generates this options object through a series of methods, while Spec API directly sets this options object. No matter which form of API it is, G2 will directly render the current options in the end, so the ability of the two to declare visualization is completely equivalent.",paraId:6,tocIndex:1},{value:"In most scenarios, the two are more of a stylistic choice, but there are some differences:",paraId:7,tocIndex:1},{value:"Ease of use",paraId:8,tocIndex:1},{value:': Spec API is superior in terms of ease of use and is more friendly to beginners or users who do not need to understand G2 in depth. JavaScript objects, which are more structural expressions, are naturally easier to understand than function expressions. And it is often a whole, making it easier to copy, paste and "adjust parameters".',paraId:8,tocIndex:1},{value:"Flexibility",paraId:8,tocIndex:1},{value:": The Functional API excels in flexibility and is better suited for users familiar with functional programming and ",paraId:8,tocIndex:1},{value:"D3",paraId:8,tocIndex:1},{value:". However, its flexibility does not necessarily result in the ability to create more complex visualizations; it is more about the flexibility in how visualizations are declared. One advantage is that it is easier to organize focus points.",paraId:8,tocIndex:1},{value:"For example, if you want the bars in the bar graph above to appear one by one, you need to add an encode and transform. The first Spec API below looks a little clearer than the second Functional API, but the latter can put animation-related properties (the same focus) together, while the former cannot.",paraId:9,tocIndex:1},{value:"chart.options({\n  type: 'interval',\n  data,\n  encode: {\n    x: 'genre',\n    y: 'sold',\n    enterDuration: 1000,\n  },\n  transform: [{ type: 'stackEnter' }],\n});\n",paraId:10,tocIndex:1},{value:"chart\n  .interval()\n  .data(data)\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  // These two are related to animation and can be put together.\n  .encode('enterDuration', 1000)\n  .transform({ type: 'stackEnter' });\n",paraId:11,tocIndex:1},{value:"Of course, Spec API is not only simple, it also has more application scenarios:",paraId:12,tocIndex:2},{value:"Smart Visualization",paraId:13,tocIndex:2},{value:": Recommendations and error corrections can be made based on Spec.",paraId:13,tocIndex:2},{value:"Higher-Level Abstraction",paraId:13,tocIndex:2},{value:": Transforming the Options corresponding to Spec is easier than direct invocation.",paraId:13,tocIndex:2},{value:"Low Code Construction",paraId:13,tocIndex:2},{value:": You can directly generate a configuration panel based on Spec and build a BI tool.",paraId:13,tocIndex:2},{value:"Chart Operations",paraId:13,tocIndex:2},{value:": Spec can also be regarded as a data structure. If it is a data structure, it can perform a series of operations, such as adding pictures, etc.",paraId:13,tocIndex:2},{value:"Server-Side Rendering",paraId:13,tocIndex:2},{value:": You can directly render the Options corresponding to Spec into images.",paraId:13,tocIndex:2},{value:"......",paraId:13,tocIndex:2},{value:"Later, G2 will make a series of tools based on this new set of APIs for everyone to use. If you have ideas, you can discuss and participate here ",paraId:14,tocIndex:2},{value:"Build together",paraId:14,tocIndex:2},{value:".",paraId:14,tocIndex:2},{value:"The following uses some cases to show you how to use Spec API.",paraId:15,tocIndex:3},{value:"(() => {\n  // Initialize chart instance\n  const chart = new G2.Chart();\n\n  // Declare visualization\n  chart.options({\n    type: 'interval',\n    height: 640,\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/79fd9317-d2af-4bc4-90fa-9d07357398fd.csv',\n    },\n    transform: [{ type: 'stackY' }],\n    coordinate: { type: 'theta' },\n    scale: {\n      color: { palette: 'spectral', offset: (t) => t * 0.8 + 0.1 },\n    },\n    legend: false,\n    encode: { y: 'value', color: 'name' },\n    style: { stroke: 'white' },\n    labels: [\n      {\n        text: 'name',\n        radius: 0.8,\n        style: { fontSize: 10, fontWeight: 'bold' },\n      },\n      {\n        text: (d, i, data) => (i < data.length - 3 ? d.value : ''),\n        radius: 0.8,\n        style: { fontSize: 9, dy: 12 },\n      },\n    ],\n    animate: { enter: { type: 'waveIn', duration: 1000 } },\n  });\n\n  // Render visualization\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:16,tocIndex:4},{value:"(() => {\n  // Initialize chart instance\n  const chart = new G2.Chart();\n\n  // Declare visualization\n  chart.options({\n    type: 'spaceFlex',\n    width: 900,\n    data: {\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n    },\n    direction: 'col',\n    ratio: [1, 2],\n    children: [\n      {\n        type: 'interval',\n        paddingBottom: 0,\n        paddingRight: 300,\n        transform: [{ type: 'groupX', y: 'max' }],\n        axis: { x: false },\n        encode: {\n          x: (d) => new Date(d.date).getUTCDate(),\n          y: 'temp_max',\n          color: 'steelblue',\n        },\n      },\n      {\n        type: 'spaceFlex',\n        ratio: [2, 1],\n        children: [\n          {\n            type: 'cell',\n            paddingRight: 0,\n            paddingBottom: 50,\n            transform: [{ type: 'group', color: 'max' }],\n            encode: {\n              x: (d) => new Date(d.date).getUTCDate(),\n              y: (d) => new Date(d.date).getUTCMonth(),\n              color: 'temp_max',\n            },\n            style: { inset: 0.5 },\n            axis: {\n              x: { title: 'Date' },\n              y: { title: 'Month' },\n            },\n            scale: { color: { palette: 'gnBu' } },\n            legend: false,\n          },\n          {\n            type: 'interval',\n            paddingBottom: 50,\n            transform: [{ type: 'groupX', y: 'max' }],\n            coordinate: { transform: [{ type: 'transpose' }] },\n            axis: { x: false },\n            encode: {\n              x: (d) => new Date(d.date).getUTCMonth(),\n              y: 'temp_max',\n              color: 'steelblue',\n            },\n          },\n        ],\n      },\n    ],\n  });\n\n  // Render\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:17,tocIndex:5}]},34265:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88845);const t=[{value:"The G2 stack team will continue to maintain the v4 version and release patch version fixes for bugs, but will no longer receive new Feature Requests until the end of 2023. The original v4 official website has been migrated to ",paraId:0},{value:"https://g2-v4.antv.vision/",paraId:0},{value:".",paraId:0},{value:"This article aims to help users already familiar with G24.0 understand the differences between versions 4.0 and 5.0. Readers can choose to read the new document directly instead of reading this article from beginning to end. This article will highlight the changes in the corresponding API for various concepts between the two versions.",paraId:1},{value:"In 4.0, the padding and appendPadding are an array, 5.0 splits it and modifies appendPadding to margin.",paraId:2,tocIndex:0},{value:"// 4.0\nconst chart = new Chart({\n  width: 600,\n  height: 400,\n  padding: [10, 20, 30, 40],\n  appendPadding: [10, 20, 30, 40],\n});\n\n// 5.0\nconst chart = new Chart({\n  width: 600,\n  height: 400,\n  paddingLeft: 10,\n  paddingTop: 20,\n  paddingRight: 30,\n  paddingBottom: 40,\n  marginLeft: 10,\n  marginTop: 20,\n  marginRight: 30,\n  marginBottom: 40,\n});\n",paraId:3,tocIndex:0},{value:"In 4.0, each view is bound to a single set of data, and the marks (visual elements)  within that view share the same data. In 5.0 all markers in each view can have independent data, and scales are synchronized by default.",paraId:4,tocIndex:1},{value:"// 4.0\nchart.data(data);\nchart.line();\nchart.point();\n\n// 5.0\nchart.line().data(data1);\nchart.line().data(data2);\n",paraId:5,tocIndex:1},{value:"5.0 has the following differences from 4.0 in encoding methods:",paraId:6,tocIndex:2},{value:"4.0 uses top-level APIs such as ",paraId:7,tocIndex:3},{value:"geometry.position",paraId:7,tocIndex:3},{value:" and ",paraId:7,tocIndex:3},{value:"geometry.color",paraId:7,tocIndex:3},{value:" to encode channels. 5.0 uses ",paraId:7,tocIndex:3},{value:"mark.encode",paraId:7,tocIndex:3},{value:" to encode and does not support the * syntax.",paraId:7,tocIndex:3},{value:"// 4.0\nchart.interval().position('name*value').color('genre');\n\n// 5.0\nchart\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'genre');\n",paraId:8,tocIndex:3},{value:"The callback of encode in 4.0 will provide the corresponding fields from the original data. In 5.0, the callback of encode only provide raw data.",paraId:9,tocIndex:4},{value:"// 4.0\nchart.interval().color('name*value', (name, value) => {});\n\n// 5.0\nchart\n  .interval()\n  // Need to deconstruct by yourself\n  .encode('color', ({ name, value }) => {});\n",paraId:10,tocIndex:4},{value:"In 4.0, the callbacks return visual data. In 5.0, the callbacks return abstract data by default.",paraId:11,tocIndex:5},{value:"// 4.0\nchart.interval().color('name', (name) => (name > 10 ? 'red' : 'yellow'));\n\n// 5.0\nchart\n  .interval()\n  .encode('color', (d) => (d.name > 10 ? 'high' : 'low')) // Abstract data\n  .scale('color', { range: ['red', 'yellow'] }); // Specify the domain\n\n// 5.0\nchart\n  .interval()\n  .encode('color', (d) => (d.name > 10 ? 'red' : 'yellow'))\n  .scale('color', { type: 'identity' });\n",paraId:12,tocIndex:5},{value:"4.0 declares the color domain via the second parameter of ",paraId:13,tocIndex:6},{value:"geometry.color",paraId:13,tocIndex:6},{value:", and 5.0 specifies via ",paraId:13,tocIndex:6},{value:"scale.color",paraId:13,tocIndex:6},{value:".",paraId:13,tocIndex:6},{value:"// 4.0\nchart.interval().color('name', ['red', 'blue']);\nchart.interval().color('name', '#fff-#000');\n\n// 5.0\nchart\n  .interval()\n  .encode('color', 'name') // Discrete\n  .scale('color', { range: ['red', 'blue'] });\n\nchart\n  .interval()\n  .encode('color', 'name') // Continuous\n  .scale('color', { range: '#fff-#000' });\n",paraId:14,tocIndex:6},{value:"In 4.0, it will try to parse the time string, but 5.0 will not try to parse it and you need to explicitly convert them into Date objects.",paraId:15,tocIndex:7},{value:"const data = [\n  { year: '2020-10-01', value: 1 },\n  { year: '2022-10-01', value: 2 },\n  { year: '2023-10-01', value: 3 },\n];\n\n// 4.0\nchart.line().position('year*value');\n\n// 5.0\nchart\n  .line()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'value');\n",paraId:16,tocIndex:7},{value:"In 4.0, the style callback applies to the entire object. In 5.0, it applies to each individual property.",paraId:17,tocIndex:8},{value:"// 4.0\nchart\n  .interval()\n  .style('a*b', (a, b) =>\n    a + b > 10\n      ? { stroke: 'red', strokeWidth: 10 }\n      : { stroke: 'black', strokeWidth: 5 },\n  );\n\n// 5.0\nchart\n  .interval()\n  .style('stroke', ({ a, b }) => (a + b > 10 ? 'red' : 'black'))\n  .style('strokeWidth', ({ a, b }) => (a + b > 10 ? 10 : 5));\n",paraId:18,tocIndex:8},{value:"5.0 has the following series of differences from 4.0 when using a scale:",paraId:19,tocIndex:9},{value:"The 4.0 scale is bound to the field, and the 5.0 scale is bound to the channel.",paraId:20,tocIndex:10},{value:"const data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n// 4.0\nchart.data(data);\nchart.scale('genre', {});\nchart.interval().color('genre');\n\n// 5.0\nchart\n  .interval()\n  .data(data)\n  .encode('color', 'genre')\n  // Set the color channel scale\n  .scale('color', {});\n",paraId:21,tocIndex:10},{value:"Some properties of the scale have changed as follows:",paraId:22,tocIndex:11},{value:"Domain: values ​​-> domain",paraId:23,tocIndex:11},{value:"Minimum value of domain: min -> domainMin",paraId:23,tocIndex:11},{value:"Maximum value of domain: max -> domainMax",paraId:23,tocIndex:11},{value:"// 4.0\nchart.scale('genre', { values: ['a', 'b', 'c'] });\n\n// 5.0\nchart.scale('color', { domain: ['a', 'b', 'c'] });\n",paraId:24,tocIndex:11},{value:"In 4.0, the discrete scales are ",paraId:25,tocIndex:12},{value:"cat",paraId:25,tocIndex:12},{value:" and ",paraId:25,tocIndex:12},{value:"timeCat",paraId:25,tocIndex:12},{value:". In 5.0, cat becomes ",paraId:25,tocIndex:12},{value:"band",paraId:25,tocIndex:12},{value:", ",paraId:25,tocIndex:12},{value:"point",paraId:25,tocIndex:12},{value:" and ",paraId:25,tocIndex:12},{value:"ordinal",paraId:25,tocIndex:12},{value:" scales, and ",paraId:25,tocIndex:12},{value:"timeCat",paraId:25,tocIndex:12},{value:" is removed.",paraId:25,tocIndex:12},{value:"// 4.0\nchart.scale('genre', { type: 'cat' });\n\n// 5.0\nchart\n  .interval()\n  .encode('x', 'name')\n  .encode('color', 'name')\n  // The x channel of interval defaults to band scale\n  .scale('x', { type: 'band', range: [0.1, 0.9] })\n  .scale('color', { type: 'ordinal', range: ['red', 'blue'] });\n\nchart\n  .point()\n  .encode('x', 'name')\n  // Point scale\n  .scale('point', {});\n",paraId:26,tocIndex:12},{value:"In 4.0, coordinate system properties are specified in the ",paraId:27,tocIndex:13},{value:"cfg",paraId:27,tocIndex:13},{value:" with coordinate transformations defined through ",paraId:27,tocIndex:13},{value:"actions",paraId:27,tocIndex:13},{value:". In 5.0, coordinate system properties are flattened and coordinate transformations are declared through ",paraId:27,tocIndex:13},{value:"transform",paraId:27,tocIndex:13},{value:".",paraId:27,tocIndex:13},{value:"// 4.0\nchart.coordinate({\n  type: 'polar',\n  cfg: {\n    radius: 0.85,\n  },\n  actions: [['transpose']],\n});\n\n// 5.0\nchart.coordinate({\n  type: 'polar',\n  outerRadius: 0.85,\n  transform: [{ type: 'transpose' }],\n});\n",paraId:28,tocIndex:13},{value:"In 4.0, each element can only declare one tag, and in 5.0 each element can declare multiple tags.",paraId:29,tocIndex:14},{value:"// 4.0\nchart.interval().label('field', (d) =>\n  d > 10\n    ? 'red'\n    : 'blue'\n    ? {\n        style: { color: 'red', stroke: 'red' },\n      }\n    : {\n        style: { color: 'black', stroke: 'black' },\n      },\n);\n\n// 5.0\nchart\n  .interval()\n  .label({\n    text: 'field', // Specify content\n    style: {\n      color: d > 10 ? 'red' : 'black', // Set properties\n      stroke: d > 10 ? 'red' : 'black',\n    },\n  })\n  .label({ text: (d) => d.value });\n",paraId:30,tocIndex:14},{value:"In 4.0, you can customize the prompt information through ",paraId:31,tocIndex:15},{value:"tooltip.containerTpl",paraId:31,tocIndex:15},{value:", and in 5.0, you can customize the prompt information through the render function.",paraId:31,tocIndex:15},{value:"// 4.0\nchart.tooltip({ containerTpl: `<div></div>` });\n\n// 5.0\nchart.interaction('tooltip', {\n  render: () => `<div></div>`,\n});\n",paraId:32,tocIndex:15},{value:"There is the appear animation in 4.0, and in version 5.0, it has been merged into the enter animation.",paraId:33,tocIndex:16},{value:"// 4.0\nchart.interval().animate({\n  appear: {\n    animation: 'fade-in',\n    easing: 'easeQuadIn',\n    delay: 100,\n    duration: 600,\n  },\n});\n\n// 5.0\nchart.interval().animate('enter', {\n  type: 'fadeIn',\n  easing: 'easeQuadIn',\n  delay: 100,\n  duration: 600,\n});\n",paraId:34,tocIndex:16},{value:"In 4.0, using ",paraId:35,tocIndex:17},{value:"chart.removeInteraction(name)",paraId:35,tocIndex:17},{value:" can remove the interactions. In 5.0,  using ",paraId:35,tocIndex:17},{value:"chart.interaction(name, false)",paraId:35,tocIndex:17},{value:" to remove interaction.",paraId:35,tocIndex:17},{value:"// 4.0\nchart.removeInteraction('tooltip');\n\n// 5.0\nchart.interaction('tooltip', false);\n",paraId:36,tocIndex:17},{value:"In 4.0, the elements in the diagram are divided into geometry elements (Geometry) and annotations (Annotation). In 5.0, both are annotations (Marks).",paraId:37,tocIndex:18},{value:"In 4.0, annotations are declared through the annotation namespace, and the declaration method in 5.0 is consistent with marks.",paraId:38,tocIndex:19},{value:"// 4.0\nchart.annotation().line({});\n\n// 5.0\nchart.lineX();\n",paraId:39,tocIndex:19},{value:"In 4.0, start and end are used to mark specific values, and in 5.0, transform is used to mark specific values.",paraId:40,tocIndex:20},{value:"// 4.0\nchart.annotation().line({\n  start: ['min', 'mean'],\n  end: ['max', 'mean'],\n});\n\n// 5.0\nchart\n  .lineX()\n  .encode('y', 'value')\n  // Select the minimum value of the y channel\n  .transform({ type: 'selectY', y: 'mean' });\n",paraId:41,tocIndex:20},{value:"In 4.0, facets are declared through the facet namespace, and 5.0 facets are consistent with marks.",paraId:42,tocIndex:21},{value:"// 4.0\nchart.facet('rect', {\n  fields: ['cut', 'clarity'],\n  eachView(view) {\n    view\n      .point()\n      .position('carat*price')\n      .color('cut')\n      .shape('circle')\n      .style({ fillOpacity: 0.3, stroke: null })\n      .size(3);\n  },\n});\n\n// 5.0\nchart\n  .facetRect()\n  .encode('x', 'cut')\n  .encode('y', 'clarity')\n  .point()\n  .encode('x', 'carat')\n  .encode('y', 'price')\n  .encode('color', 'cut')\n  .encode('shape', 'point')\n  .encode('size', 3)\n  .style('fillOpacity', 0.3)\n  .style('stroke', null);\n",paraId:43,tocIndex:21}]},86079:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(10310);const t=[{value:"Compared with monotonous fill colors, using pattern fills can enrich expressiveness and it's also useful in accessibility and black-and-white printing scenarios. To achieve this, we offer three methods in increasing order of complexity and usage cost:",paraId:0},{value:"Use built-in patterns.",paraId:1},{value:"Custom pattern using the G API.",paraId:1},{value:"Use other pattern sources.",paraId:1},{value:"We have built three common patterns into the ",paraId:2,tocIndex:0},{value:"g-pattern",paraId:2,tocIndex:0},{value:", and the appearance can be easily adjusted through parameters. This is also the simplest way to use pattern:",paraId:2,tocIndex:0},{value:"Dots",paraId:3,tocIndex:0},{value:" made of dots",paraId:3,tocIndex:0},{value:"Lines",paraId:3,tocIndex:0},{value:" made of straight lines",paraId:3,tocIndex:0},{value:"Squares",paraId:3,tocIndex:0},{value:" made of squares",paraId:3,tocIndex:0},{value:"The usage is as follows, first install the dependencies:",paraId:4,tocIndex:0},{value:"$ npm install @antv/g-pattern  --save;\n",paraId:5,tocIndex:0},{value:"Then you can use the built-in patterns. In this ",paraId:6,tocIndex:0},{value:"example",paraId:7,tocIndex:0},{value:":",paraId:6,tocIndex:0},{value:"We used ",paraId:8,tocIndex:0},{value:"lines",paraId:8,tocIndex:0},{value:", and set attributes like background color, opacity, line color, and spacing.",paraId:8,tocIndex:0},{value:"Through ",paraId:8,tocIndex:0},{value:"repetition",paraId:8,tocIndex:0},{value:", the tiling mode is specified as horizontal and vertical directions",paraId:8,tocIndex:0},{value:"Through ",paraId:8,tocIndex:0},{value:"transform",paraId:8,tocIndex:0},{value:", the pattern is rotated 30 degrees clockwise",paraId:8,tocIndex:0},{value:"import { lines } from '@antv/g-pattern';\n\nchart\n  //... Omit other imperative calls\n  .style('fill', (_, idx) => {\n    return {\n      image: lines({\n        backgroundColor: colors[idx],\n        backgroundOpacity: 0.65,\n        stroke: colors[idx],\n        lineWidth: 4,\n        spacing: 5,\n      }),\n      repetition: 'repeat',\n      transform: 'rotate(30)',\n    };\n  });\n",paraId:9,tocIndex:0},{value:"The effect is as follows:",paraId:10,tocIndex:0},{value:"For more detailed parameter meanings and effects, see ",paraId:11,tocIndex:0},{value:"complete g-pattern API",paraId:11,tocIndex:0},{value:"。",paraId:11,tocIndex:0},{value:"When the above-mentioned built-in patterns do not meet the requirements, you can use ",paraId:12,tocIndex:1},{value:"G API",paraId:12,tocIndex:1},{value:" to customize, just like describing the scene.",paraId:12,tocIndex:1},{value:"In this ",paraId:13,tocIndex:1},{value:"example",paraId:14,tocIndex:1},{value:", we first get ",paraId:13,tocIndex:1},{value:"document",paraId:13,tocIndex:1},{value:" object from context, create a ",paraId:13,tocIndex:1},{value:"rect",paraId:13,tocIndex:1},{value:" and a ",paraId:13,tocIndex:1},{value:"path",paraId:13,tocIndex:1},{value:" by ",paraId:13,tocIndex:1},{value:"document.createElement",paraId:13,tocIndex:1},{value:", and using them as pattern sources:",paraId:13,tocIndex:1},{value:"mark.style('fill', ({ value }) => {\n  const { document } = chart.getContext().canvas;\n  const background = document.createElement('rect', {\n    style: {\n      width,\n      height,\n      fill: color,\n    },\n  });\n\n  const line = document.createElement('path', {\n    style: {\n      d: `\n                M 0 ${-height} L ${width * 2} ${height}\n                M ${-width} ${-height} L ${width} ${height}\n                M ${-width} 0 L ${width} ${height * 2}`,\n      stroke,\n      lineWidth: 1,\n      strokeOpacity: 0.9,\n    },\n  });\n  background.appendChild(line);\n\n  return {\n    image: background,\n    repetition: 'repeat',\n  };\n});\n",paraId:15,tocIndex:1},{value:"The effect is as follows:",paraId:16,tocIndex:1},{value:"For more usage, please refer to ",paraId:17,tocIndex:1},{value:"G API",paraId:17,tocIndex:1},{value:"。",paraId:17,tocIndex:1},{value:"Refer to ",paraId:18,tocIndex:2},{value:"G API",paraId:18,tocIndex:2},{value:", other available patterns sources include:",paraId:18,tocIndex:2},{value:"Image URL, e.g.",paraId:19,tocIndex:2},{value:"'http://example.png'",paraId:19,tocIndex:2},{value:"HTMLImageElement",paraId:19,tocIndex:2},{value:"HTMLCanvasElement",paraId:19,tocIndex:2},{value:"HTMLVideoElement",paraId:19,tocIndex:2},{value:"Among them, image URL, HTMLImageElement, and HTMLVideoElement are all static resources, while HTMLCanvasElement can be used to programmatically generate patterns, with the following results:",paraId:20,tocIndex:2},{value:"In this ",paraId:21,tocIndex:2},{value:"example",paraId:22,tocIndex:2},{value:", we used ",paraId:21,tocIndex:2},{value:"HTMLCanvasElement",paraId:21,tocIndex:2},{value:" with ",paraId:21,tocIndex:2},{value:"canvas API",paraId:21,tocIndex:2},{value:" to customize:",paraId:21,tocIndex:2},{value:"// 程序化生成\nconst canvas = createCanvas(width, height);\nconst ctx = canvas.getContext('2d');\ndrawRect(ctx, width, height, color);\ndrawLinePattern(ctx, stroke, width, height, cross);\n\n// 使用\nchart.style('fill', ({ value }) => {\n  return { image: canvas, repetition: 'repeat' };\n});\n",paraId:23,tocIndex:2},{value:"It is not difficult to see that this programmatic generation method requires the users to have deep understanding of ",paraId:24,tocIndex:2},{value:"canvas API",paraId:24,tocIndex:2},{value:", but it also offers the highest level of flexibility.",paraId:24,tocIndex:2}]},1502:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(15508);const t=[{value:"Server-side rendering (SSR) refers to rendering charts in non-browser environments, such as Node.js, Python, Java, PHP, and other backend languages. Typically, in backend environments, the output is a static image without interaction or animation. The typical usage scenarios are as follows:",paraId:0},{value:"Pre-rendering images on the backend to improve page load speed.",paraId:1},{value:"Script batch processing for easy distribution.",paraId:1},{value:"Server-side visualization service.",paraId:1},{value:"Generate images for screenshot comparisons, used in code unit testing.",paraId:1},{value:"...",paraId:1},{value:"In the Node.js ecosystem, the following libraries implement common rendering APIs found in the browser environment:",paraId:2,tocIndex:0},{value:"Node-canvas",paraId:3,tocIndex:0},{value:" it provides an implementation of the Canvas2D API based on Cairo.",paraId:3,tocIndex:0},{value:"JSdom",paraId:3,tocIndex:0},{value:" it offers an implementation of the DOM API.",paraId:3,tocIndex:0},{value:"By creating corresponding renderers based on those, G2 can render PNG or SVG results. Below, we will introduce example code for both implementations separately.",paraId:4,tocIndex:0},{value:"online example",paraId:5,tocIndex:1},{value:"First, use JSDOM to create a container ",paraId:6,tocIndex:1},{value:"container",paraId:6,tocIndex:1},{value:" where the chart will be rendered. Additionally, save the ",paraId:6,tocIndex:1},{value:"window",paraId:6,tocIndex:1},{value:" and ",paraId:6,tocIndex:1},{value:"document",paraId:6,tocIndex:1},{value:" objects for later use:",paraId:6,tocIndex:1},{value:"const jsdom = require('jsdom');\n\nconst { JSDOM } = jsdom;\nconst { window } = new JSDOM(`<!DOCTYPE html>`);\nconst { document } = window;\nconst container = document.createElement('div');\n",paraId:7,tocIndex:1},{value:"Then, create a SVG renderer, remove plugins that depend on the DOM API, and create a canvas:",paraId:8,tocIndex:1},{value:"const { Canvas } = require('@antv/g');\nconst { Renderer } = require('@antv/g-svg');\n\nconst renderer = new Renderer();\nconst htmlRendererPlugin = renderer.getPlugin('html-renderer');\nrenderer.unregisterPlugin(htmlRendererPlugin);\nconst domInteractionPlugin = renderer.getPlugin('dom-interaction');\nrenderer.unregisterPlugin(domInteractionPlugin);\n\nconst gCanvas = new Canvas({\n  renderer,\n  width,\n  height,\n  container, // use container created in last step\n  document,\n  offscreenCanvas: offscreenNodeCanvas,\n  requestAnimationFrame: window.requestAnimationFrame,\n  cancelAnimationFrame: window.cancelAnimationFrame,\n});\n",paraId:9,tocIndex:1},{value:"Then, proceed to create a G2 Chart as usual by providing the previously created canvas and container. For more details, refer to the documentation under ",paraId:10,tocIndex:1},{value:"getting started",paraId:11,tocIndex:1},{value:"：",paraId:10,tocIndex:1},{value:"const { Chart } = require('@antv/g2');\n\nconst chart = new Chart({\n  width,\n  height,\n  canvas: gCanvas,\n  container,\n});\n",paraId:12,tocIndex:1},{value:"Finally, render the chart, retrieve the rendering result from JSDOM, serialize it into an SVG string. Afterwards, you can choose to save it as a local file. In this example code, the result is directly output to the console.",paraId:13,tocIndex:1},{value:"const xmlserializer = require('xmlserializer');\n\n(async () => {\n  await chart.render();\n\n  const svg = xmlserializer.serializeToString(container.childNodes[0]);\n  console.log(svg); // '<svg>...</svg>\n\n  chart.destroy();\n})();\n",paraId:14,tocIndex:1},{value:"It is worth mentioning that currently, in G2's integration testing, due to SVG's excellent cross-platform compatibility, we also apply this technology for ",paraId:15,tocIndex:1},{value:"screenshot comparisons",paraId:15,tocIndex:1},{value:".",paraId:15,tocIndex:1},{value:"online example",paraId:16,tocIndex:2},{value:"The solution based on jsdom can only generate SVG. If you want to generate images in formats like PNG, you can use ",paraId:17,tocIndex:2},{value:"node-canvas",paraId:17,tocIndex:2},{value:".",paraId:17,tocIndex:2},{value:"Firstly, create two node-canvases, one for rendering the scene and the other for measuring text width:",paraId:18,tocIndex:2},{value:"const { createCanvas } = require('canvas');\nconst nodeCanvas = createCanvas(width, height);\nconst offscreenNodeCanvas = createCanvas(1, 1);\n",paraId:19,tocIndex:2},{value:"Then create a canvas renderer and canvas:",paraId:20,tocIndex:2},{value:"import { Canvas } from '@antv/g';\nimport { Renderer } from '@antv/g-canvas';\n\nconst renderer = new Renderer();\n// Omitting the removal of DOM-related plugin code.\nconst gCanvas = new Canvas({\n  width,\n  height,\n  canvas: nodeCanvas,\n  renderer,\n  offscreenCanvas: offscreenNodeCanvas,\n});\n",paraId:21,tocIndex:2},{value:"Next, create a G2 Chart as usual and render it. After completion, use the ",paraId:22,tocIndex:2},{value:"createPNGStream",paraId:22,tocIndex:2},{value:" method provided by node-canvas to create a ",paraId:22,tocIndex:2},{value:"ReadableStream",paraId:22,tocIndex:2},{value:" containing the PNG encoding. Similarly, ",paraId:22,tocIndex:2},{value:"createJPEGStream",paraId:22,tocIndex:2},{value:" and ",paraId:22,tocIndex:2},{value:"createPDFStream",paraId:22,tocIndex:2},{value:" are also available for exporting JPEG and PDF, respectively.",paraId:22,tocIndex:2},{value:"function writePNG(nodeCanvas) {\n  return new Promise<string>((resolve, reject) => {\n    const f = path.join(os.tmpdir(), `${Math.random()}.png`);\n    const out = fs.createWriteStream(f);\n    const stream = nodeCanvas.createPNGStream();\n    stream.pipe(out);\n    out.on('finish', () => resolve(f)).on('error', reject);\n  });\n}\n",paraId:23,tocIndex:2},{value:"Because the code of G2 is written and developed in JavaScript, it cannot be used directly in Python, Java, PHP and other language environments. However, you can install the Node.JS environment in the service and then use the corresponding back-end language command line API to drive the above-mentioned Node.JS code to perform SSR.",paraId:24,tocIndex:3},{value:"Refer to ",paraId:25,tocIndex:3},{value:"python calls node js",paraId:25,tocIndex:3},{value:", other languages ​​are similar.",paraId:25,tocIndex:3}]},31851:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(65669);const t=[{value:"Here is a brief introduction to how to use G2 in some front-end frameworks. We will use different frameworks to achieve the following update effects of bar chart.",paraId:0},{value:"Achieving this effect mainly relies on the following two functions.",paraId:1},{value:"// Render bar chart\nfunction renderBarChart(container) {\n  const chart = new Chart({\n    container,\n    });\n\n  // Prepare data\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n\n  // Declare visualization\n  chart\n    .interval() // Create an Interval tag\n    .data(data) // Bind data\n    .encode('x', 'genre') // Encode x channel\n    .encode('y', 'sold') // Encode y channel\n    .encode('key', 'genre') // Specify key\n    .animate('update', { duration: 300 }); // Specify the time to update the animation\n\n  // Render visualization\n  chart.render();\n\n  return chart;\n}\n",paraId:2},{value:"//Update bar chart data\nfunction updateBarChart(chart) {\n  // Get Interval Mark\n  const interval = chart.getNodesByType('interval')[0];\n\n  // Simulate and update Interval data\n  const newData = interval.data().map((d) => ({\n    ...d,\n    sold: Math.random() * 400 + 100,\n  }));\n\n  interval.data(newData);\n\n  // Re-render\n  chart.render();\n}\n",paraId:3},{value:"It should be noted here that in the framework, it is not recommended to use the ",paraId:4},{value:"new Chart({ container: 'id' })",paraId:4},{value:" to specify the container. Instead, use the HTML element directly as the container: ",paraId:4},{value:"new Chart({ container: HTMLContainer })",paraId:4},{value:". This is to prevent problems where different components have the same id and cannot be rendered predictably.",paraId:4},{value:"Next, let's take a look at how to use these two functions in the framework.",paraId:5},{value:"In Vue, the first step is to import the defined ",paraId:6,tocIndex:0},{value:"G2Demo",paraId:6,tocIndex:0},{value:" component.",paraId:6,tocIndex:0},{value:"\x3c!-- App.vue --\x3e\n<template>\n  <div id=\"app\">\n    <G2Demo />\n  </div>\n</template>\n\n<script>\n  import G2Demo from './components/G2Demo';\n\n  export default {\n    name: 'App',\n    components: {\n      G2Demo,\n    },\n  };\n<\/script>\n",paraId:7,tocIndex:0},{value:"If using ",paraId:8,tocIndex:1},{value:"Vue2",paraId:8,tocIndex:1},{value:" and ",paraId:8,tocIndex:1},{value:"Vue3",paraId:8,tocIndex:1},{value:" options API, you can define the ",paraId:8,tocIndex:1},{value:"G2Demo",paraId:8,tocIndex:1},{value:" component as follows, complete code reference ",paraId:8,tocIndex:1},{value:"here",paraId:8,tocIndex:1},{value:".",paraId:8,tocIndex:1},{value:"\x3c!-- components/G2Demo.vue --\x3e\n<template>\n  <div>\n    <div ref=\"container\"></div>\n    <button @click=\"onClick\">Update Data</button>\n  </div>\n</template>\n\n<script>\n  import { Chart } from '@antv/g2';\n\n  function renderBarChart(container) {\n    // as shown above\n  }\n\n  function updateBarChart(chart) {\n    // as shown above\n  }\n\n  export default {\n    name: 'G2Demo',\n    props: {},\n    mounted() {\n      // save the bar chart instance\n      this.chart = renderBarChart(this.$refs.container);\n    },\n    methods: {\n      onClick() {\n        updateBarChart(this.chart);\n      },\n    },\n  };\n<\/script>\n",paraId:9,tocIndex:1},{value:"If you use the composition API of Vue3, the implementation is as follows, complete code reference ",paraId:10,tocIndex:2},{value:"here",paraId:10,tocIndex:2},{value:".",paraId:10,tocIndex:2},{value:"<script setup>\n  import { onMounted, ref } from 'vue';\n  import { Chart } from '@antv/g2';\n\n  let chart;\n  const container = ref(null);\n\n  onMounted(() => {\n    chart = renderBarChart(container.value);\n  });\n\n  function onClick() {\n    updateBarChart(chart);\n  }\n\n  function renderBarChart(container) {\n    // as above\n  }\n\n  function updateBarChart(chart) {\n    // as above\n  }\n<\/script>\n\n<template>\n  <div>\n    <div ref=\"container\"></div>\n    <button @click=\"onClick\">Update Data</button>\n  </div>\n</template>\n",paraId:11,tocIndex:2},{value:"In ",paraId:12,tocIndex:3},{value:"React",paraId:12,tocIndex:3},{value:", the first step is also to import the defined ",paraId:12,tocIndex:3},{value:"G2Demo",paraId:12,tocIndex:3},{value:" component.",paraId:12,tocIndex:3},{value:"import './styles.css';\nimport G2Demo from './components/G2Demo';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <G2Demo />\n    </div>\n  );\n}\n",paraId:13,tocIndex:3},{value:"Next, define the ",paraId:14,tocIndex:3},{value:"G2Demo",paraId:14,tocIndex:3},{value:" component, complete code reference ",paraId:14,tocIndex:3},{value:"here",paraId:14,tocIndex:3},{value:".",paraId:14,tocIndex:3},{value:"import { Chart } from '@antv/g2';\nimport { useEffect, useRef } from 'react';\n\nexport default function G2Demo() {\n  const container = useRef(null);\n  const chart = useRef(null);\n\n  useEffect(() => {\n    if (!chart.current) {\n      chart.current = renderBarChart(container.current);\n    }\n  }, []);\n\n  function renderBarChart(container) {\n    // as above\n  }\n\n  function updateBarChart(chart) {\n    // as above\n  }\n\n  return (\n    <div className=\"App\">\n      <div ref={container}></div>\n      <button onClick={() => updateBarChart(chart.current)}>Update Data</button>\n    </div>\n  );\n}\n",paraId:15,tocIndex:3}]},92651:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(10399);const t=[{value:"There are currently two ways to use G2:",paraId:0},{value:"Package manager",paraId:1},{value:"CDN",paraId:1},{value:"If you use Node-based packaging tools such as Webpack and Rollup, you can install G2 through package managers such as NPM or Yarn.",paraId:2,tocIndex:0},{value:"# Install via NPM\nnpm install @antv/g2\n",paraId:3,tocIndex:0},{value:"# Install via Yarn\nyarn add @antv/g2\n",paraId:4,tocIndex:0},{value:"After successful installation, provide a container for G2:",paraId:5,tocIndex:0},{value:'<div id="container"></div>\n',paraId:6,tocIndex:0},{value:"Then enter the following code:",paraId:7,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\n// Prepare data\nconst data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\n//Initialize chart instance\nconst chart = new Chart({\n  container: 'container',\n});\n\n// Declare visualization\nchart\n  .interval() // Create an Interval tag\n  .data(data) // Bind data\n  .encode('x', 'genre') // Encode x channel\n  .encode('y', 'sold'); // Encode y channel\n\n// Render visualization\nchart.render();\n",paraId:8,tocIndex:0},{value:"G2 also provides a UMD version, which can be loaded directly through CDN and used directly. At this time ",paraId:9,tocIndex:1},{value:"Chart",paraId:9,tocIndex:1},{value:" object can be accessed through namespaces ",paraId:9,tocIndex:1},{value:"G2",paraId:9,tocIndex:1},{value:".",paraId:9,tocIndex:1},{value:"<script src=\"https://unpkg.com/@antv/g2/dist/g2.min.js\"><\/script>\n<script>\n  // Prepare data\n  const data = [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ];\n\n  //Initialize chart instance\n  const chart = new G2.Chart({\n    container: 'container',\n  });\n\n  // Declare visualization\n  chart\n    .interval() // Create an Interval tag\n    .data(data) // Bind data\n    .encode('x', 'genre') // Encode x channel\n    .encode('y', 'sold'); // Encode y channel\n\n  // Render visualization\n  chart.render();\n<\/script>\n",paraId:10,tocIndex:1},{value:"No matter which method you use, if you draw a bar chart like the following, it means that everything is going well and the journey of exploring visualization and G2 has officially begun.",paraId:11,tocIndex:2},{value:"(() => {\n  // Initializing chart instance\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:2}]},71575:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(58482);const t=[{value:"G2",paraId:0},{value:" It is a concise progressive syntax mainly used for making web-based visualizations. It provides a set of functional style, declarative API and component programming paradigm, hoping to help users quickly complete ",paraId:0},{value:"dashboard building",paraId:0},{value:" 、",paraId:0},{value:"data exploration",paraId:0},{value:" 、",paraId:0},{value:"storytelling",paraId:0},{value:" and other diverse needs.",paraId:0},{value:"This article will give you a brief introduction to the core concepts of G2:",paraId:1},{value:"Mark",paraId:2},{value:": Draw data-driven graphics",paraId:2},{value:"Transform",paraId:2},{value:": Derived data",paraId:2},{value:"Scale",paraId:2},{value:": Mapping abstract data into visual data",paraId:2},{value:"Coordinate system",paraId:2},{value:": applies point transformation to the spatial channel",paraId:2},{value:"View composition (Composition)",paraId:2},{value:": Manage and enhance views",paraId:2},{value:"Animation",paraId:2},{value:": Data-driven animation and continuous deformation animation",paraId:2},{value:"Interaction",paraId:2},{value:": Manipulate the view and display detailed information",paraId:2},{value:'"Talk is cheap, show me the code", then let\'s take a look at what visualization effects G2 can make based on the following simple data set.',paraId:3},{value:"table({\n  url: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n});\n",paraId:4},{value:"In the documentation on the G2 official website, specific code blocks will mount the DOM they return and display them on the web page.",paraId:5},{value:"(() => {\n  const chart = new G2.Chart();\n  // ...\n  return chart.getContainer(); // Mount the container for the chart\n})();\n",paraId:6},{value:"This is the syntax for a specific operating environment on the G2 official website. Please refer to G2 when using it in actual projects.",paraId:7},{value:"start using",paraId:8},{value:"。",paraId:7},{value:"Mark",paraId:9,tocIndex:0},{value:" It is the smallest visual unit in G2. All charts in G2 are composed of different markers.",paraId:9,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:0},{value:"Transform",paraId:11,tocIndex:1},{value:" will change the display form of data and marks, and is mostly used for data analysis.",paraId:11,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'height')\n    .encode('color', 'gender')\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY' })\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:1},{value:"Scale",paraId:13,tocIndex:2},{value:" is used to control the visual style of markup.",paraId:13,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'height')\n    .encode('color', 'gender')\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY' })\n    .scale('color', { range: ['steelblue', 'orange'] })\n    .scale('y', { nice: true })\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:2},{value:"Coordinate System",paraId:15,tocIndex:3},{value:" will change the display format of the chart.",paraId:15,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'height')\n    .encode('color', 'gender')\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY' })\n    .scale('color', { range: ['steelblue', 'orange'] })\n    .scale('y', { type: 'sqrt', nice: true })\n    .coordinate({ type: 'polar' })\n    .axis('y', { title: false })\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:16,tocIndex:3},{value:"View composition",paraId:17,tocIndex:4},{value:" is used to create multi-view diagrams.",paraId:17,tocIndex:4},{value:"(() => {\n  const chart = new G2.Chart({\n    paddingLeft: 60,\n    \n  });\n\n  const facet = chart\n    .facetRect()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('y', 'gender');\n\n  facet\n    .rect()\n    .encode('x', 'height')\n    .encode('color', 'gender')\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY' })\n    .scale('y', { nice: true })\n    .attr('frame', false)\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:18,tocIndex:4},{value:"Animation",paraId:19,tocIndex:5},{value:" supports group animation and keyframe animation. You can click the run button on the left to see the effect.",paraId:19,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'height')\n    .encode('color', 'gender')\n    .encode('enterDuration', 1000)\n    .transform({ type: 'stackEnter', groupBy: ['color'] })\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY' })\n    .style('insetLeft', 1);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:20,tocIndex:5},{value:"(async () => {\n  const data = await fetch(\n    'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  ).then((res) => res.json());\n\n  const chart = new G2.Chart();\n\n  const keyframe = chart\n    .timingKeyframe()\n    .attr('direction', 'alternate')\n    .attr('iterationCount', 4);\n\n  keyframe\n    .interval()\n    .attr('padding', 'auto')\n    .data(data)\n    .encode('x', 'gender')\n    .encode('color', 'gender')\n    .encode('key', 'gender')\n    .transform({ type: 'groupX', y: 'count' });\n\n  keyframe\n    .point()\n    .attr('padding', 'auto')\n    .data(data)\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender')\n    .encode('groupKey', 'gender')\n    .encode('shape', 'point');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:21,tocIndex:5},{value:"Interactions can explore data on demand.",paraId:22,tocIndex:6},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    })\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender')\n    .encode('shape', 'point')\n    .style({\n      fillOpacity: 0.7,\n      transform: 'scale(1, 1)',\n      transformOrigin: 'center center',\n    })\n    .state('inactive', {\n      fill: 'black',\n      fillOpacity: 0.5,\n      transform: 'scale(0.5, 0.5)',\n    })\n    .interaction('brushXHighlight', true);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:23,tocIndex:6},{value:"Because G2's tags can be combined, it also provides ",paraId:24,tocIndex:7},{value:"composite mark",paraId:24,tocIndex:7},{value:" mechanism to extend G2, so you can basically draw any visualization quickly. exist",paraId:24,tocIndex:7},{value:"Case page",paraId:25,tocIndex:7},{value:"You can get more inspiration by",paraId:24,tocIndex:7},{value:"Options page",paraId:26,tocIndex:7},{value:"Get a comprehensive look at what G2 is capable of.",paraId:24,tocIndex:7}]},18736:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(62625);const t=[{value:'The name and design concept of G2 comes from Graphic Grammar "',paraId:0},{value:"The Grammar of Graphics",paraId:0},{value:"》. The core of this theory is to reject the classification of charts and use some basic marks and a series of visual components (scale bars, coordinate systems, etc.) to describe a visualization.",paraId:0},{value:'Thanks to this, compared to low-level visualization tools like D3, G2 has lower usage and learning costs, which can improve research and development efficiency. Compared with the chart template library, G2 can produce different types of charts, which also changes the way G2 users think about charts: charts are no longer an indivisible whole, but can be combined by tags with different uses. This allows you to spend less time writing code or wondering whether this chart can be realized, and more time "thinking visually in the data world."',paraId:1},{value:"Of course, it is only our basic mission to draw more charts more easily. We also hope to convey correct visual thinking to everyone in the process. Language is the most direct way to transmit thinking, so we attach great importance to simplicity and professionalism when designing grammar or API. We refer to many academic research results and best practices in the industry. Based on the original graphics grammar, enhancements including but not limited to the following have been made:",paraId:2},{value:"Simplified syntax for data exploration",paraId:3},{value:"Add animation syntax",paraId:3},{value:"Add syntax for unit visualization",paraId:3},{value:"Add interactive syntax (still under design)",paraId:3},{value:"...",paraId:3},{value:"In simpler terms: ",paraId:4},{value:"With G2, you can get more visualization effects more professionally and quickly, and gain visual thinking at the same time",paraId:4},{value:" .",paraId:4},{value:"You can draw a chart in one sentence, and in addition to drawing the graph itself, you can also add axes, legends, and even interactive prompts!",paraId:5,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  //One sentence statement visualization\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    })\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:6,tocIndex:0},{value:"G2 simplicity comes from ",paraId:7,tocIndex:0},{value:"default value",paraId:7,tocIndex:0},{value:" : You only need to provide the tag type, data and encoding type, and G2 will infer the rest for you. Of course, the great thing about G2 is that the default values ​​can be overridden as needed. We hope that G2 can look good and display insightful information by default, and you can optimize the display of charts based on your specific scenarios and domain knowledge. Will the appeal chart be more readable if the axis tick display is optimized? If you change it to the following color, do you like it better?",paraId:7,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .point()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    })\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender')\n    .scale('x', { nice: true }) // Optimize coordinate tick display\n    .scale('y', { nice: true }) // Optimize coordinate tick display\n    .scale('color', { range: ['steelblue', 'orange'] }); // Change color\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:8,tocIndex:0},{value:"You may think that a scatter plot is too simple, so let’s see how G2 draws a sankey graph in one sentence!",paraId:9,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart({\n    width: 900,\n    height: 600,\n    \n  });\n\n// Sankey mark\n  chart\n    .sankey()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/energy.json',\n      transform: [\n        {\n          type: 'custom',\n          callback: (data) => ({ links: data }),\n        },\n      ],\n    })\n    .layout({\n      nodeAlign: 'center',\n      nodePadding: 0.03,\n    })\n    .style('labelSpacing', 3)\n    .style('labelFontWeight', 'bold')\n    .style('nodeStrokeWidth', 1.2)\n    .style('linkFillOpacity', 0.4);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:0},{value:"G2 can draw a variety of chart types. In addition to supporting basic fold and column pie charts, it also supports vector fields, parallel coordinate systems and other slightly more complex charts, such as the following connection chart:",paraId:11,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .link()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n    })\n    .encode('x', ['POP_1980', 'POP_2015'])\n    .encode('y', ['R90_10_1980', 'R90_10_2015'])\n    .encode('color', (d) => d.R90_10_2015 - d.R90_10_1980)\n    .scale('x', { type: 'log' })\n    .style('arrow', true)\n    .style('arrowSize', 6)\n    .axis('x', { labelFormatter: '~s' })\n    .tooltip({ title: { channel: 'color', valueFormatter: '.1f' } })\n    .legend(false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:1},{value:"The most wonderful thing about G2 is that you can get new charts by combining different charts (more precisely marks)! For example, if we add the point mark of the scatter chart and the link mark of the connection chart to a chart, we can obtain a labeled point-line connection chart.",paraId:13,tocIndex:1},{value:"(() => {\n  const chart = new G2.Chart({\n    height: 180,\n    \n  });\n\n  chart.data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n    transform: [\n      {\n        type: 'map',\n        callback: (d) => ({ ...d, body_mass_g: +d.body_mass_g }),\n      },\n    ],\n  });\n\n  // Point Symbol\n  chart\n    .point()\n    .encode('x', 'body_mass_g')\n    .encode('y', 'species')\n    .style('stroke', '#000')\n    .tooltip({ channel: 'x' });\n\n  // Link Symbol\n  chart\n    .link()\n    .encode('x', 'body_mass_g')\n    .encode('y', 'species')\n    .transform({ type: 'groupY', x: 'min', x1: 'max' })\n    .style('stroke', '#000')\n    .tooltip(false);\n\n  // Point Symbol\n  chart\n    .point()\n    .encode('y', 'species')\n    .encode('x', 'body_mass_g')\n    .encode('shape', 'line')\n    .encode('size', 12)\n    .transform({ type: 'groupY', x: 'median' })\n    .style('stroke', 'red')\n    .tooltip({ channel: 'x' });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:14,tocIndex:1},{value:"In the process of visualization, processing data often takes a lot of time, and there is a certain cost of getting started. To simplify this process, reduce data preprocessing time and standardize common data analysis capabilities, G2 provides a series of ",paraId:15,tocIndex:2},{value:"Transform",paraId:15,tocIndex:2},{value:" to aggregate and generate new data. For example, the following calculates the task distribution of athletes with different weights:",paraId:15,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n    })\n    .encode('x', 'weight')\n    .transform({ type: 'binX', y: 'count' })\n    .style('inset', 0.5);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:16,tocIndex:2},{value:"Want your chart split by gender?",paraId:17,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .rect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n    })\n    .encode('x', 'weight')\n    .encode('color', 'sex') // Include color coding\n    .transform({ type: 'binX', y: 'count' })\n    .transform({ type: 'stackY', orderBy: 'series' })\n    .style('inset', 0.5);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:18,tocIndex:2},{value:"Want to see the distribution of each gender being separated?",paraId:19,tocIndex:2},{value:"(() => {\n  const chart = new G2.Chart({\n    \n    paddingLeft: 50,\n    paddingBottom: 50,\n  });\n\n  const facet = chart.facetRect().encode('y', 'sex').data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n  });\n\n  facet\n    .rect()\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/athletes.json',\n    })\n    .encode('x', 'weight')\n    .transform({ type: 'binX', y: 'count' })\n    .style('inset', 0.5);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:20,tocIndex:2},{value:"G2 can draw data-driven animations to achieve the effect of visual storytelling. First, all animation properties (animation type, delay and duration) can be bound to data, such as the following data-driven Gantt chart animation:",paraId:21,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ transform: [{ type: 'transpose' }] })\n    .data([\n      { name: 'event planning', startTime: 1, endTime: 4 },\n      { name: 'layout logistics', startTime: 3, endTime: 13 },\n      { name: 'select vendors', startTime: 5, endTime: 8 },\n      { name: 'hire venue', startTime: 9, endTime: 13 },\n      { name: 'hire caterer', startTime: 10, endTime: 14 },\n      { name: 'hire event decorators', startTime: 12, endTime: 17 },\n      { name: 'rehearsal', startTime: 14, endTime: 16 },\n      { name: 'event celebration', startTime: 17, endTime: 18 },\n    ])\n    .encode('x', 'name')\n    .encode('y', ['endTime', 'startTime'])\n    .encode('color', 'name')\n    .encode('enterDuration', (d) => d.endTime - d.startTime) // Bind animation duration with durationTime.\n    .encode('enterDelay', 'startTime') // Bind enterDelay and startTime\n    .scale('enterDuration', { zero: true, range: [0, 3000] });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:22,tocIndex:3},{value:'At the same time, the animation channel can be converted to control the order and time of appearance of data elements. For example, in the rose picture below, each "petal" appears in sequence:',paraId:23,tocIndex:3},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .coordinate({ type: 'polar' })\n    .data({\n      type: 'fetch',\n      value: 'https://assets.antv.antgroup.com/g2/deaths.json',\n    })\n    .encode('x', 'Month')\n    .encode('y', 'Death')\n    .encode('color', 'Type')\n    .transform({ type: 'stackY' })\n    // Appear by order\n    .transform({ type: 'stackEnter', groupBy: ['color', 'x'], duration: 3000 })\n    .scale('y', { type: 'sqrt' })\n    .animate('enter', { type: 'waveIn' })\n    .axis('y', false);\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:24,tocIndex:3},{value:"In addition to animation in a certain view, you can also do continuous deformation animation between different views: graphics are related together through data, such as the transition animation of scatter plots and aggregated bars below:",paraId:25,tocIndex:3},{value:"(async () => {\n  const data = await fetch(\n    'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  ).then((res) => res.json());\n\n  const chart = new G2.Chart();\n\n  // Keyframe container, apply transition animation to the view inside\n  const keyframe = chart\n    .timingKeyframe()\n    .attr('direction', 'alternate')\n    .attr('iterationCount', 4);\n\n  // First view: Scatter plot\n  keyframe\n    .interval()\n    .attr('padding', 'auto')\n    .data(data)\n    .encode('x', 'gender')\n    .encode('color', 'gender')\n    .encode('key', 'gender')\n    .transform({ type: 'groupX', y: 'count' });\n\n  // Second view: Aggregated bar chart\n  keyframe\n    .point()\n    .attr('padding', 'auto')\n    .data(data)\n    .encode('x', 'weight')\n    .encode('y', 'height')\n    .encode('color', 'gender')\n    .encode('groupKey', 'gender')\n    .encode('shape', 'point');\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:26,tocIndex:3},{value:"In addition to providing rich built-in interactions, G2 also provides the ability to link different views through ",paraId:27,tocIndex:4},{value:"chart.on",paraId:27,tocIndex:4},{value:" and ",paraId:27,tocIndex:4},{value:"chart.emit",paraId:27,tocIndex:4},{value:' for interactive coordination.interactions between different views, such as the "Focus and Context" ability shown below:',paraId:27,tocIndex:4},{value:"(() => {\n  const container = document.createElement('div');\n  const focusContainer = document.createElement('div');\n  const contextContainer = document.createElement('div');\n  container.append(focusContainer);\n  container.append(contextContainer);\n\n  // Render focus view\n  const focus = new G2.Chart({\n    container: focusContainer,\n      height: 360,\n    paddingLeft: 50,\n  });\n\n  focus\n    .area()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n    })\n    .encode('x', 'date')\n    .encode('y', 'close')\n    .animate(false)\n    .axis('x', { grid: false, title: false, tickCount: 5 })\n    .axis('y', { grid: false, tickCount: 5 })\n    .interaction('tooltip', false)\n    .interaction('brushXFilter', true);\n\n  focus.render();\n\n  // Render context view\n  const context = new G2.Chart({\n    container: contextContainer,\n      paddingLeft: 50,\n    paddingTop: 0,\n    paddingBottom: 0,\n    height: 60,\n  });\n\n  context\n    .area()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n    })\n    .encode('x', 'date')\n    .encode('y', 'close')\n    .animate(false)\n    .axis(false)\n    .interaction('tooltip', false)\n    .interaction('brushXHighlight', { series: true });\n\n  context.render();\n\n  // Add event listeners for communication between different charts.\n  focus.on('brush:filter', (e) => {\n    const { nativeEvent } = e;\n    if (!nativeEvent) return;\n    const { selection } = e.data;\n    const { x: scaleX } = focus.getScale();\n    const [[x1, x2]] = selection;\n    const domainX = scaleX.getOptions().domain;\n    if (x1 === domainX[0] && x2 === domainX[1]) {\n      context.emit('brush:remove', {});\n    } else {\n      context.emit('brush:highlight', { data: { selection } });\n    }\n  });\n\n  context.on('brush:highlight', (e) => {\n    const { nativeEvent, data } = e;\n    if (!nativeEvent) return;\n    const { selection } = data;\n    focus.emit('brush:filter', { data: { selection } });\n  });\n\n  context.on('brush:remove', (e) => {\n    const { nativeEvent } = e;\n    if (!nativeEvent) return;\n    const { x: scaleX, y: scaleY } = context.getScale();\n    const selection = [scaleX.getOptions().domain, scaleY.getOptions().domain];\n    focus.emit('brush:filter', { data: { selection } });\n  });\n\n  return container;\n})();\n",paraId:28,tocIndex:4},{value:"G2 provides two styles of API: ",paraId:29,tocIndex:5},{value:"Functional API",paraId:29,tocIndex:5},{value:" and ",paraId:29,tocIndex:5},{value:"Optional API",paraId:29,tocIndex:5},{value:" . The former declares the chart through a series of function chain calls, and the latter declares the chart through a JavaScript object. For example in ",paraId:29,tocIndex:5},{value:"concise syntax",paraId:30,tocIndex:5},{value:", if you use the optional API, the scatter plot in can be declared as follows:",paraId:29,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart();\n\n  // Declare the chart via the options API\n  chart.options({\n    type: 'point',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n    },\n    encode: {\n      x: 'weight',\n      y: 'height',\n      color: 'gender',\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:31,tocIndex:5},{value:"You can find that the charts drawn by the two are exactly the same! In fact, this is indeed true: the visual expression capabilities of the two APIs are the same. In other words, diagrams that can be drawn by the functional API can also be drawn by the optional API, and vice versa. In terms of implementation, the functional API is built on the optional API, which is converted into the corresponding JavaScript and then rendered.",paraId:32,tocIndex:5},{value:"The choice between the two is more of a matter of style: if you are familiar with D3, like functional programming, or are an old user of G2, you can choose the functional API; if you have just started using G2 and are exposed to visualization, then the optional API is recommended API. Of course, if you are packaging your own chart library based on G2, it is recommended to use the optional API. However, there is a best practice: use the option API when initializing the chart, and use the functional API when updating the chart.",paraId:33,tocIndex:5},{value:"(() => {\n  const chart = new G2.Chart({\n    height: 150,\n    padding: 10,\n    \n  });\n\n  const mock = () => Array.from({ length: 20 }, () => Math.random());\n\n  //Initialize chart\n  //Use optional API\n  chart.options({\n    type: 'interval',\n    data: mock(),\n    encode: { x: (_, i) => i, y: (d) => d, key: (_, i) => i },\n    axis: false,\n    tooltip: {\n      items: [{ channel: 'y', valueFormatter: '.0%' }],\n    },\n  });\n\n  chart.render();\n\n  //Update chart\n  // Use functional API\n  const button = document.createElement('button');\n  button.style.display = 'block';\n  button.textContent = 'Update data';\n  button.onclick = () => {\n    const interval = chart.getNodeByType('interval'); // Get interval\n    interval.data(mock()); // Update interval data\n    chart.render(); // Render chart\n  };\n\n  const node = chart.getContainer();\n  node.insertBefore(button, node.childNodes[0]);\n  return node;\n})();\n",paraId:34,tocIndex:5},{value:"G2 provides a simple compound mark mechanism for enhancing charts or customizing charts. For example, composite point, line and area mark, you can use the built-in mark just like any built-in mark.",paraId:35,tocIndex:6},{value:"(() => {\n  //Declare composite mark\n  function PointLineArea({ data, encode = {}, style = {} } = {}) {\n    const { fillOpacity = 0.1 } = style;\n    return [\n      {\n        type: 'area',\n        data,\n        encode,\n        style: { fillOpacity },\n      },\n      { type: 'line', data, encode },\n      { type: 'point', data, encode },\n    ];\n  }\n\n  const chart = new G2.Chart();\n\n  // The usage of composite mark in API\n  chart\n    .mark(PointLineArea)\n    .data([\n      { year: '1991', value: 15468 },\n      { year: '1992', value: 16100 },\n      { year: '1993', value: 15900 },\n      { year: '1994', value: 17409 },\n      { year: '1995', value: 17000 },\n      { year: '1996', value: 31056 },\n      { year: '1997', value: 31982 },\n      { year: '1998', value: 32040 },\n      { year: '1999', value: 33233 },\n    ])\n    .encode('x', 'year')\n    .encode('y', 'value');\n\n  // Using composite mark in Spec\n  chart.options({\n    type: PointLineArea,\n    data: [\n      { year: '1991', value: 15468 },\n      { year: '1992', value: 16100 },\n      { year: '1993', value: 15900 },\n      { year: '1994', value: 17409 },\n      { year: '1995', value: 17000 },\n      { year: '1996', value: 31056 },\n      { year: '1997', value: 31982 },\n      { year: '1998', value: 32040 },\n      { year: '1999', value: 33233 },\n    ],\n    encode: { x: 'year', y: 'value' },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:36,tocIndex:6},{value:"Composite mark makes it easier to add charts based on G2 and simpler to maintain. At the same time, some marks within G2 are also implemented based on this method.",paraId:37,tocIndex:6},{value:"G2 is an architecture built by ",paraId:38,tocIndex:7},{value:"Runtime",paraId:38,tocIndex:7},{value:" and a series of ",paraId:38,tocIndex:7},{value:"Visual component (Component)",paraId:38,tocIndex:7},{value:" constituted. The runtime is mainly responsible for completing data mapping, creation and inference of scales, etc., as well as cascading visualization components. Different visualization components have different functions, such as Scale for mapping data and Shape for drawing mapped graphics. Here's how to customize a triangular bar chart:",paraId:38,tocIndex:7},{value:"(() => {\n  // Customize a triangle shape\n  G2.register('shape.interval.triangle', (style, context) => {\n    const { document } = context;\n    return (P, value, defaults) => {\n      const { color: defaultColor } = defaults;\n      const [p0, p1, p2, p3] = P;\n      const pm = [(p0[0] + p1[0]) / 2, p0[1]];\n      const { color = defaultColor } = value;\n      return document.createElement('polygon', {\n        style: {\n          ...style,\n          fill: color,\n          points: [pm, p2, p3],\n        },\n      });\n    };\n  });\n\n  const chart = new G2.Chart();\n\n  chart\n    .interval()\n    .data([\n      { genre: 'Sports', sold: 275 },\n      { genre: 'Strategy', sold: 115 },\n      { genre: 'Action', sold: 120 },\n      { genre: 'Shooter', sold: 350 },\n      { genre: 'Other', sold: 150 },\n    ])\n    .encode('x', 'genre')\n    .encode('y', 'sold')\n    .encode('color', 'genre')\n    .encode('shape', 'triangle'); // Using this shape\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:39,tocIndex:7},{value:"The visual components available in G2 Runtime are organized through Library. Library is essentially a JavaScript object as follows:",paraId:40,tocIndex:8},{value:"const library = {\n  'mark.interval': Interval,\n  'scale.linear': Linear,\n  //...\n};\n",paraId:41,tocIndex:8},{value:"Therefore, on-demand packaging can be achieved by modifying the library and the packaging tool Tree Shaking, thereby reducing the package size. For example, if you only need to draw some simple charts in your project, and do not need to draw geography (GeoPath), graphs (ForceGraph) or advanced statistical charts (Sankey), then you can customize your own Chart object as follows:",paraId:42,tocIndex:8},{value:"import { Runtime, corelib, extend } from '@antv/g2';\n\n//Extend Runtime based on corelib\n// 1. Add type (if using TypeScript)\n// 2. Add mark\nconst Chart = extend(Runtime, { ...corelib() });\n\nconst chart = new Chart({ container: 'container' });\n\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render();\n",paraId:43,tocIndex:8},{value:"If you wish to draw a geographical chart, you can do the following:",paraId:44,tocIndex:8},{value:"import { Runtime, corelib, geolib, extend } from '@antv/g2';\n\n// Ability to use two libs at the same time\nconst Chart = extend(Runtime, { ...corelib, ...geolib });\n\nconst chart = new Chart({ container: 'container' });\n\n// ...\n",paraId:45,tocIndex:8}]},10064:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(68702);const t=[{value:"fadeIn",paraId:0},{value:" 是渐现动画，影响 ",paraId:0},{value:"opacity",paraId:0},{value:" 透明度属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'fadeIn' });\n",paraId:1,tocIndex:0}]},67760:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(33051);const t=[{value:"fadeOut",paraId:0},{value:" 是渐现动画，影响 ",paraId:0},{value:"opacity",paraId:0},{value:" 透明度属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'fadeOut' });\n",paraId:1,tocIndex:0}]},87472:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26638);const t=[{value:"growInX",paraId:0},{value:" 是容器沿着 x 方向放大的矩阵动画，多用于 G.Group 容器类进行动画。影响图形的 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'growInX' });\n",paraId:1,tocIndex:0}]},65136:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(35860);const t=[{value:"growInY",paraId:0},{value:" 是容器沿着 y 方向放大的矩阵动画，多用于 G.Group 容器类进行动画。影响图形的 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'growInY' });\n",paraId:1,tocIndex:0}]},52078:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(89391);const t=[{value:"morphing",paraId:0},{value:" 图形之间的形变动画，通过 SVG Path 之间的过渡形成的动画。",paraId:0},{value:"chart\n  .area()\n  /* ... */\n  .animate('enter', { type: 'morphing' });\n",paraId:1,tocIndex:0}]},54616:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(39129);const t=[{value:"动画的过程本质是视觉属性在时间上的变化，带来视觉上的动画效果。在 G2 中，提供了三种动画场景类型：",paraId:0},{value:"enter",paraId:1},{value:" - 元素第一次出现的出场动画；",paraId:1},{value:"update",paraId:1},{value:" - 数据更新的时候，元素更新的动画；",paraId:1},{value:"exit",paraId:1},{value:" - 数据更新的时候，元素被销毁退出画布的动画；",paraId:1},{value:"利用这 3 种动画场景，结合 G2 动画语法使用数据驱动动画的方式，可以配制出各种各样需要的动画效果。",paraId:2},{value:"chart\n  .interval()\n  /* ... */\n  .animate({\n    /* options */\n  });\n",paraId:3,tocIndex:0},{value:"关于 ",paraId:4,tocIndex:1},{value:"animate",paraId:4,tocIndex:1},{value:" API 的参数，有以下，主要 3 种动画场景（enter、update、exit）和 动画 5 个属性（type、duration、delay、easing、fill）的组合。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"enterType",paraId:5,tocIndex:1},{value:"动画类型",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"enterDuration",paraId:5,tocIndex:1},{value:"动画持续时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"enterDelay",paraId:5,tocIndex:1},{value:"延迟执行时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"enterEasing",paraId:5,tocIndex:1},{value:"动画的缓动函数",paraId:5,tocIndex:1},{value:"Easing",paraId:5,tocIndex:1},{value:"enterFill",paraId:5,tocIndex:1},{value:"动画处于非运行状态时的展示效果",paraId:5,tocIndex:1},{value:"Fill",paraId:5,tocIndex:1},{value:"updateType",paraId:5,tocIndex:1},{value:"动画类型",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"updateDuration",paraId:5,tocIndex:1},{value:"动画持续时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"updateDelay",paraId:5,tocIndex:1},{value:"延迟执行时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"updateEasing",paraId:5,tocIndex:1},{value:"动画的缓动函数",paraId:5,tocIndex:1},{value:"Easing",paraId:5,tocIndex:1},{value:"updateFill",paraId:5,tocIndex:1},{value:"动画处于非运行状态时的展示效果",paraId:5,tocIndex:1},{value:"Fill",paraId:5,tocIndex:1},{value:"exitType",paraId:5,tocIndex:1},{value:"动画类型",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"exitDuration",paraId:5,tocIndex:1},{value:"动画持续时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"exitDelay",paraId:5,tocIndex:1},{value:"延迟执行时间 (ms)",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"exitEasing",paraId:5,tocIndex:1},{value:"动画的缓动函数",paraId:5,tocIndex:1},{value:"Easing",paraId:5,tocIndex:1},{value:"exitFill",paraId:5,tocIndex:1},{value:"动画处于非运行状态时的展示效果",paraId:5,tocIndex:1},{value:"Fill",paraId:5,tocIndex:1},{value:"动画类型 ",paraId:6,tocIndex:2},{value:"Type",paraId:6,tocIndex:2},{value:" 本质是设置动画的方式，会影响的视觉属性。这里具体可以看对应的文档 ",paraId:6,tocIndex:2},{value:"Animation",paraId:7,tocIndex:2},{value:"。当然也可以设置为 ",paraId:6,tocIndex:2},{value:"null",paraId:6,tocIndex:2},{value:"，",paraId:6,tocIndex:2},{value:"undefined",paraId:6,tocIndex:2},{value:"，",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"，代表关闭动画。",paraId:6,tocIndex:2},{value:"缓动函数指定的是动画过程中，视觉属性变化的插值函数。支持以下内置缓动函数，来自 ",paraId:8,tocIndex:3},{value:"easings",paraId:8,tocIndex:3},{value:"，也可以上这个网站预览动画缓动的效果。",paraId:8,tocIndex:3},{value:"constant",paraId:9,tocIndex:3},{value:"accelerate",paraId:9,tocIndex:3},{value:"decelerate",paraId:9,tocIndex:3},{value:"accelerate-decelerate",paraId:9,tocIndex:3},{value:"decelerate-accelerate",paraId:9,tocIndex:3},{value:"linear",paraId:9,tocIndex:3},{value:"ease-in / in",paraId:9,tocIndex:3},{value:"ease-out / out",paraId:9,tocIndex:3},{value:"ease-in-out / in-out",paraId:9,tocIndex:3},{value:"ease-out-in / out-in",paraId:9,tocIndex:3},{value:"ease",paraId:9,tocIndex:3},{value:"in-sine",paraId:9,tocIndex:3},{value:"out-sine",paraId:9,tocIndex:3},{value:"in-out-sine",paraId:9,tocIndex:3},{value:"out-in-sine",paraId:9,tocIndex:3},{value:"steps",paraId:9,tocIndex:3},{value:"in-quad",paraId:9,tocIndex:3},{value:"out-quad",paraId:9,tocIndex:3},{value:"in-out-quad",paraId:9,tocIndex:3},{value:"out-in-quad",paraId:9,tocIndex:3},{value:"step-start",paraId:9,tocIndex:3},{value:"in-cubic",paraId:9,tocIndex:3},{value:"out-cubic",paraId:9,tocIndex:3},{value:"in-out-cubic",paraId:9,tocIndex:3},{value:"out-in-cubic",paraId:9,tocIndex:3},{value:"step-end",paraId:9,tocIndex:3},{value:"in-quart",paraId:9,tocIndex:3},{value:"out-quart",paraId:9,tocIndex:3},{value:"in-out-quart",paraId:9,tocIndex:3},{value:"out-in-quart",paraId:9,tocIndex:3},{value:"in-quint",paraId:9,tocIndex:3},{value:"out-quint",paraId:9,tocIndex:3},{value:"in-out-quint",paraId:9,tocIndex:3},{value:"out-in-quint",paraId:9,tocIndex:3},{value:"in-expo",paraId:9,tocIndex:3},{value:"out-expo",paraId:9,tocIndex:3},{value:"in-out-expo",paraId:9,tocIndex:3},{value:"out-in-expo",paraId:9,tocIndex:3},{value:"in-circ",paraId:9,tocIndex:3},{value:"out-circ",paraId:9,tocIndex:3},{value:"in-out-circ",paraId:9,tocIndex:3},{value:"out-in-circ",paraId:9,tocIndex:3},{value:"in-back",paraId:9,tocIndex:3},{value:"out-back",paraId:9,tocIndex:3},{value:"in-out-back",paraId:9,tocIndex:3},{value:"out-in-back",paraId:9,tocIndex:3},{value:"in-bounce",paraId:9,tocIndex:3},{value:"out-bounce",paraId:9,tocIndex:3},{value:"in-out-bounce",paraId:9,tocIndex:3},{value:"out-in-bounce",paraId:9,tocIndex:3},{value:"in-elastic",paraId:9,tocIndex:3},{value:"out-elastic",paraId:9,tocIndex:3},{value:"in-out-elastic",paraId:9,tocIndex:3},{value:"out-in-elastic",paraId:9,tocIndex:3},{value:"spring / spring-in",paraId:9,tocIndex:3},{value:"spring-out",paraId:9,tocIndex:3},{value:"spring-in-out",paraId:9,tocIndex:3},{value:"spring-out-in",paraId:9,tocIndex:3},{value:"除此之外，还可以通过 ",paraId:10,tocIndex:3},{value:"cubic-bezier(<number>, <number>, <number>, <number>)",paraId:10,tocIndex:3},{value:" 自定义形如三次贝塞尔曲线的函数。以上部分内置函数也是通过它定义完成的，例如 ",paraId:10,tocIndex:3},{value:"ease-in-sine = cubic-bezier(0.47, 0, 0.745, 0.715)",paraId:10,tocIndex:3},{value:"。",paraId:10,tocIndex:3},{value:"该属性规定了图形在动画处于非运行状态（例如动画开始前，结束后）时的展示效果，可以参考 ",paraId:11,tocIndex:4},{value:"WebAPI",paraId:11,tocIndex:4},{value:" 规范。支持以下值：",paraId:11,tocIndex:4},{value:"auto/none",paraId:12,tocIndex:4},{value:" - 默认值，这意味着动画在第一帧开始前和最后一帧结束后都不会影响到图形的展示效果。例如在动画完成后图形会恢复到动画前状态，如果设置了 delay 在延迟期间也不会应用第一帧的效果。",paraId:12,tocIndex:4},{value:"forwards",paraId:12,tocIndex:4},{value:" - 动画完成后停住，不恢复到初始状态",paraId:12,tocIndex:4},{value:"backwards",paraId:12,tocIndex:4},{value:" - 动画开始前应用第一帧效果",paraId:12,tocIndex:4},{value:"both",paraId:12,tocIndex:4},{value:" - 为 forwards 和 backwards 的组合效果",paraId:12,tocIndex:4}]},21410:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(2978);const t=[{value:"pathIn",paraId:0},{value:" 是 SVG Path 路径入场动画。通过影响 ",paraId:0},{value:"lineDash",paraId:0},{value:" 属性来实现。",paraId:0},{value:"chart\n  .line()\n  /* ... */\n  .animate('enter', { type: 'pathIn' });\n",paraId:1,tocIndex:0}]},98713:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(14601);const t=[{value:"scaleInX",paraId:0},{value:" 单个图形沿着 x 方向的生长动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'scaleInX' });\n",paraId:1,tocIndex:0}]},83528:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(40895);const t=[{value:"scaleInY",paraId:0},{value:" 单个图形沿着 y 方向的生长动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'scaleInY' });\n",paraId:1,tocIndex:0}]},1528:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(10848);const t=[{value:"scaleOutX",paraId:0},{value:" 单个图形沿着 x 方向的消失动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'scaleOutX' });\n",paraId:1,tocIndex:0}]},33745:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87278);const t=[{value:"scaleOutY",paraId:0},{value:" 单个图形沿着 y 方向的消失动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'scaleOutY' });\n",paraId:1,tocIndex:0}]},71704:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71153);const t=[{value:"waveIn",paraId:0},{value:" 划入入场动画效果，不同坐标系下效果不同。在直角坐标系下，影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性，在 polar 坐标系下，影响圆弧的 Path 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'waveIn' });\n",paraId:1,tocIndex:0}]},93913:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(94952);const t=[{value:"zoomIn",paraId:0},{value:" 沿着图形中心点的放大动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('enter', { type: 'zoomIn' });\n",paraId:1,tocIndex:0}]},16682:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(28010);const t=[{value:"zoomOut",paraId:0},{value:" 沿着图形中心点的缩小动画。影响 ",paraId:0},{value:"transform.scale",paraId:0},{value:" 属性。",paraId:0},{value:"chart\n  .interval()\n  /* ... */\n  .animate('exit', { type: 'zoomOut' });\n",paraId:1,tocIndex:0}]},97050:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(47085);const t=[{value:"属性",paraId:0},{value:"描述",paraId:0},{value:"类型",paraId:0},{value:"默认值",paraId:0},{value:"title",paraId:0},{value:"关闭标题或设置标题内容",paraId:0},{value:"false",paraId:0},{value:"|",paraId:0},{value:"string",paraId:0},{value:"true",paraId:0},{value:"titleSpacing",paraId:0},{value:"标题到内容区域的间距",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"number[]",paraId:0},{value:"0",paraId:0},{value:"titleInset",paraId:0},{value:"标题文本内边距",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"number[]",paraId:0},{value:"0",paraId:0},{value:"titlePosition",paraId:0},{value:"标题所处位置。可采用简写形式，如",paraId:0},{value:"'i'",paraId:0},{value:" 表示",paraId:0},{value:"'inner'",paraId:0},{value:"'top'",paraId:0},{value:" | ",paraId:0},{value:"'bottom'",paraId:0},{value:" |",paraId:0},{value:"'left'",paraId:0},{value:" |",paraId:0},{value:"'right'",paraId:0},{value:" |",paraId:0},{value:"'left-top'",paraId:0},{value:" |",paraId:0},{value:"'left-bottom'",paraId:0},{value:" |",paraId:0},{value:"'right-top'",paraId:0},{value:" |",paraId:0},{value:"'right-bottom'",paraId:0},{value:" |",paraId:0},{value:"'inner'",paraId:0},{value:" | ",paraId:0},{value:"'lt'",paraId:0},{value:"-",paraId:0},{value:"titleFontSize",paraId:0},{value:"标题文字大小",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0},{value:"titleFontFamily",paraId:0},{value:"标题文字字体",paraId:0},{value:"string",paraId:0},{value:"-",paraId:0},{value:"titleFontWeight",paraId:0},{value:"标题字体粗细",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0},{value:"titleFill",paraId:0},{value:"标题字体颜色",paraId:0},{value:"string",paraId:0},{value:"titleFillOpacity",paraId:0},{value:"标题字体颜色透明度",paraId:0},{value:"number",paraId:0},{value:"titleStroke",paraId:0},{value:"标题字体描边颜色",paraId:0},{value:"string",paraId:0},{value:"-",paraId:0},{value:"titleStrokeOpacity",paraId:0},{value:"标题字体描边颜色透明度",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0}]},96293:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50934);const t=[{value:"属性",paraId:0},{value:"描述",paraId:0},{value:"类型",paraId:0},{value:"默认值",paraId:0},{value:"navEffect",paraId:0},{value:"翻页显示效果",paraId:0},{value:"参见 ",paraId:0},{value:"Web Animations API",paraId:0},{value:"linear",paraId:0},{value:"navDuration",paraId:0},{value:"单次翻页动效时长",paraId:0},{value:"number",paraId:0},{value:"200",paraId:0},{value:"| navOrientation    | 翻页滚动方向",paraId:1},{value:" - 横向",paraId:1},{value:"'horizontal'",paraId:1},{value:" - 纵向",paraId:1},{value:"'vertical'",paraId:1},{value:" | ",paraId:1},{value:"'horizontal'",paraId:1},{value:"|",paraId:1},{value:"'vertical'",paraId:1},{value:"                                               | 'horizontal' |",paraId:1},{value:"| navDefaultPage    | 默认展示页数                                                   | ",paraId:2},{value:"number",paraId:2},{value:"                                                                   | 0            |",paraId:2},{value:"| navLoop      | 是否启用循环翻页                                                     | ",paraId:3},{value:"boolean",paraId:3},{value:"                                                                  | false        |",paraId:3},{value:"| navPageNumFill           | 分页数字颜色                                             | ",paraId:4},{value:"string",paraId:4},{value:"                                                                   | -           |",paraId:4},{value:"| navPageNumFontSize       | 分页数字大小                                             | ",paraId:5},{value:"number",paraId:5},{value:"                                                                   | -           |",paraId:5},{value:"| navPageNumOpacity        | 分页数字透明度                                           | ",paraId:6},{value:"number",paraId:6},{value:"                                                                   | -           |",paraId:6},{value:"| navPageNumStroke         | 分页数字描边                                             | ",paraId:7},{value:"string",paraId:7},{value:"                                                                   | -           |",paraId:7},{value:"| navPageNumStrokeOpacity  | 分页数字描边透明度                                        | ",paraId:8},{value:"number",paraId:8},{value:"                                                                   | -           |",paraId:8},{value:"| navButtonFill            | 分页按钮颜色                                             | ",paraId:9},{value:"string",paraId:9},{value:"                                                                   | -           |",paraId:9},{value:"| navButtonOpacity         | 分页数按钮透明度                                          | ",paraId:10},{value:"number",paraId:10},{value:"                                                                   | -           |",paraId:10},{value:"| navButtonStroke          | 分页按钮描边颜色                                          | ",paraId:11},{value:"string",paraId:11},{value:"                                                                   | -           |",paraId:11},{value:"| navButtonStrokeOpacity   | 分页按钮描边透明度                                      | ",paraId:12},{value:"number",paraId:12},{value:"                                                                   | -            |\n| navFormatter | 页码文本格式化                                                 | ",paraId:12},{value:"(current: number, total: number) => string;",paraId:12},{value:"                              | -            |",paraId:12}]},58650:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(58881);const t=[{value:"属性",paraId:0},{value:"描述",paraId:0},{value:"类型",paraId:0},{value:"默认值",paraId:0},{value:"sparklineType",paraId:0},{value:"迷你图类型：折线图、直方图",paraId:0},{value:"line",paraId:0},{value:" | ",paraId:0},{value:"column",paraId:0},{value:"line",paraId:0},{value:"sparklineIsStack",paraId:0},{value:"是否对数据进行堆叠",paraId:0},{value:"boolean",paraId:0},{value:"false",paraId:0},{value:"sparklineRange",paraId:0},{value:"指定值范围，未指定时将使用 data 的最小值和最大值",paraId:0},{value:"[number, number]",paraId:0},{value:"-",paraId:0},{value:"sparklineColor",paraId:0},{value:"指定颜色",paraId:0},{value:"string",paraId:0},{value:" | ",paraId:0},{value:"string[]",paraId:0},{value:" | ",paraId:0},{value:"(index: number)=>string",paraId:0},{value:"-",paraId:0},{value:"sparklineSmooth",paraId:0},{value:"适用于折线图，平滑曲线",paraId:0},{value:"boolean",paraId:0},{value:"false",paraId:0},{value:"sparklineLineStroke",paraId:0},{value:"适用于折线图，线条颜色",paraId:0},{value:"string",paraId:0},{value:"-",paraId:0},{value:"sparklineLineStrokeOpacity",paraId:0},{value:"适用于折线图，线条透明度",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0},{value:"sparklineLineLineDash",paraId:0},{value:"适用于折线图，线条的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:0},{value:"[number,number]",paraId:0},{value:"-",paraId:0},{value:"sparklineAreaFill",paraId:0},{value:"适用于折线图，填充区域颜色",paraId:0},{value:"string",paraId:0},{value:"-",paraId:0},{value:"sparklineAreaFillOpacity",paraId:0},{value:"适用于折线图，填充区域透明度",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0},{value:"sparklineColumnFill",paraId:0},{value:"适用于直方图，条形颜色",paraId:0},{value:"string",paraId:0},{value:"-",paraId:0},{value:"sparklineColumnFillOpacity",paraId:0},{value:"适用于直方图，条形透明度",paraId:0},{value:"number",paraId:0},{value:"-",paraId:0},{value:"sparklineIsGroup",paraId:0},{value:"适用于直方图，是否分组显示",paraId:0},{value:"boolean",paraId:0},{value:"false",paraId:0},{value:"sparklineSpacing",paraId:0},{value:"适用于直方图，分组直方的间距",paraId:0},{value:"number",paraId:0},{value:"0",paraId:0}]},22208:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(95498);const t=[{value:"属性",paraId:0},{value:"描述",paraId:0},{value:"类型",paraId:0},{value:"默认值",paraId:0},{value:"fill",paraId:0},{value:"图形的填充色",paraId:0},{value:"string",paraId:0},{value:" | ",paraId:0},{value:"Function<string>",paraId:0},{value:"-",paraId:0},{value:"fillOpacity",paraId:0},{value:"图形的填充透明度",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"stroke",paraId:0},{value:"图形的描边",paraId:0},{value:"string",paraId:0},{value:" | ",paraId:0},{value:"Function<string>",paraId:0},{value:"-",paraId:0},{value:"lineWidth",paraId:0},{value:"图形描边的宽度",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"lineDash",paraId:0},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:0},{value:"[number,number]",paraId:0},{value:" | ",paraId:0},{value:"Function<[number, number]>",paraId:0},{value:"-",paraId:0},{value:"strokeOpacity",paraId:0},{value:"描边透明度",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"opacity",paraId:0},{value:"图形的整体透明度",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"shadowColor",paraId:0},{value:"图形阴影颜色",paraId:0},{value:"string",paraId:0},{value:" | ",paraId:0},{value:"Function<string>",paraId:0},{value:"-",paraId:0},{value:"shadowBlur",paraId:0},{value:"图形阴影的高斯模糊系数",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"shadowOffsetX",paraId:0},{value:"设置阴影距图形的水平距离",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"shadowOffsetY",paraId:0},{value:"设置阴影距图形的垂直距离",paraId:0},{value:"number",paraId:0},{value:" | ",paraId:0},{value:"Function<number>",paraId:0},{value:"-",paraId:0},{value:"cursor",paraId:0},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:0},{value:"string",paraId:0},{value:" | ",paraId:0},{value:"Function<string>",paraId:0},{value:"'default'",paraId:0}]},3085:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(74466);const t=[{value:"绘制坐标轴，目前支持直角坐标系坐标轴与极坐标系坐标轴。",paraId:0},{value:"// View Level\nconst viewLevel = {\n  type: 'view',\n  axis: {\n    x: {},\n    y: {},\n  },\n};\n\n// Mark Level\nconst markLevel = {\n  type: 'interval',\n  axis: {\n    x: {},\n    y: {},\n  },\n};\n",paraId:1},{value:"// API\n\nchart.axis('x', {}).axis('y', {});\n\nchart.interval().axis('x', {}).axis('y', {});\n",paraId:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    marginTop: 40,\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    },\n    encode: {\n      x: 'letter',\n      y: 'frequency',\n    },\n    axis: {\n      y: {\n        // Title\n        title: 'Frequency',\n        titleSpacing: 30,\n        titleFill: 'steelblue',\n\n        // Line\n        line: true,\n        arrow: true,\n        lineArrowOffset: 10,\n        lineArrowSize: 30,\n        lineLineWidth: 10,\n\n        // Tick\n        tickLength: 20,\n        tickFilter: (_, i) => i % 3 !== 0,\n\n        // Label\n        labelFormatter: '.0%',\n\n        // Grid\n        gridLineDash: null,\n        gridStroke: 'red',\n        gridStrokeWidth: 5,\n        gridAreaFill: '#eee',\n      },\n      x: {\n        title: 'Letter',\n        labelFormatter: (d) => d.repeat(3),\n        labelFontSize: 30,\n        labelSpacing: 30,\n      },\n    },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:2},{value:"描述",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"默认值",paraId:4,tocIndex:2},{value:"title",paraId:4,tocIndex:2},{value:"关闭标题或设置标题内容",paraId:4,tocIndex:2},{value:"false",paraId:4,tocIndex:2},{value:"|",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:" | ",paraId:4,tocIndex:2},{value:"DisplayObject",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"titleSpacing",paraId:4,tocIndex:2},{value:"标题到坐标轴的距离",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"10",paraId:4,tocIndex:2},{value:"titlePosition",paraId:4,tocIndex:2},{value:"标题相对坐标轴的位置，支持首字母简写形式，如",paraId:4,tocIndex:2},{value:"'top'",paraId:4,tocIndex:2},{value:"简写为",paraId:4,tocIndex:2},{value:"'t'",paraId:4,tocIndex:2},{value:"'top'",paraId:4,tocIndex:2},{value:"|",paraId:4,tocIndex:2},{value:"'bottom'",paraId:4,tocIndex:2},{value:"|",paraId:4,tocIndex:2},{value:"'left'",paraId:4,tocIndex:2},{value:"|",paraId:4,tocIndex:2},{value:"'right'",paraId:4,tocIndex:2},{value:"'lb'",paraId:4,tocIndex:2},{value:"titleFontSize",paraId:4,tocIndex:2},{value:"标题文字大小",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"titleFontFamily",paraId:4,tocIndex:2},{value:"标题文字字体",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"titleFontWeight",paraId:4,tocIndex:2},{value:"标题字体粗细",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"titleStroke",paraId:4,tocIndex:2},{value:"标题字体颜色",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"titleStrokeOpacity",paraId:4,tocIndex:2},{value:"标题透明度",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"属性",paraId:5,tocIndex:3},{value:"描述",paraId:5,tocIndex:3},{value:"类型",paraId:5,tocIndex:3},{value:"默认值",paraId:5,tocIndex:3},{value:"line",paraId:5,tocIndex:3},{value:"是否显示轴线",paraId:5,tocIndex:3},{value:"boolean",paraId:5,tocIndex:3},{value:"true",paraId:5,tocIndex:3},{value:"arrow",paraId:5,tocIndex:3},{value:"是否显示箭头",paraId:5,tocIndex:3},{value:"boolean",paraId:5,tocIndex:3},{value:"true",paraId:5,tocIndex:3},{value:"lineExtension",paraId:5,tocIndex:3},{value:"轴线两侧的延长线",paraId:5,tocIndex:3},{value:"[number, number]",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineArrow",paraId:5,tocIndex:3},{value:"定义轴线箭头形状，默认为箭头形状",paraId:5,tocIndex:3},{value:"DisplayObject",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineArrowOffset",paraId:5,tocIndex:3},{value:"箭头偏移长度",paraId:5,tocIndex:3},{value:"number",paraId:5,tocIndex:3},{value:"15",paraId:5,tocIndex:3},{value:"lineArrowSize",paraId:5,tocIndex:3},{value:"箭头尺寸",paraId:5,tocIndex:3},{value:"number",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineLineWidth",paraId:5,tocIndex:3},{value:"轴线宽度",paraId:5,tocIndex:3},{value:"number",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineLineDash",paraId:5,tocIndex:3},{value:"轴线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:5,tocIndex:3},{value:"[number,number]",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineStroke",paraId:5,tocIndex:3},{value:"轴线描边色",paraId:5,tocIndex:3},{value:"string",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"lineStrokeOpacity",paraId:5,tocIndex:3},{value:"轴线描边色透明度",paraId:5,tocIndex:3},{value:"number",paraId:5,tocIndex:3},{value:"-",paraId:5,tocIndex:3},{value:"属性",paraId:6,tocIndex:4},{value:"描述",paraId:6,tocIndex:4},{value:"类型",paraId:6,tocIndex:4},{value:"默认值",paraId:6,tocIndex:4},{value:"tick",paraId:6,tocIndex:4},{value:"是否显示刻度",paraId:6,tocIndex:4},{value:"boolean",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"tickFilter",paraId:6,tocIndex:4},{value:"刻度线过滤",paraId:6,tocIndex:4},{value:"(datum, index, data)=>boolean",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tickFormatter",paraId:6,tocIndex:4},{value:"刻度线格式化，可用于自定义刻度样式，回调函数中会额外返回该刻度的方向",paraId:6,tocIndex:4},{value:"DisplayObject",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"(datum, index, data, Vector)=> DisplayObject",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tickDirection",paraId:6,tocIndex:4},{value:"刻度朝向，为 ",paraId:6,tocIndex:4},{value:"positive",paraId:6,tocIndex:4},{value:" 时，位于侧轴方向（即主轴顺时针 90 度方向）, 为 ",paraId:6,tocIndex:4},{value:"negative",paraId:6,tocIndex:4},{value:" 时，刻度位于侧轴负方向",paraId:6,tocIndex:4},{value:"'positive'",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"'negative'",paraId:6,tocIndex:4},{value:"'positive'",paraId:6,tocIndex:4},{value:"tickLength",paraId:6,tocIndex:4},{value:"轴线长度",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:"|",paraId:6,tocIndex:4},{value:"(datum, index, data)=>number",paraId:6,tocIndex:4},{value:"15",paraId:6,tocIndex:4},{value:"tickLineWidth",paraId:6,tocIndex:4},{value:"刻度线宽度",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"(datum, index, data, Vector)=>number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tickLineDash",paraId:6,tocIndex:4},{value:"刻度线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:4},{value:"[number,number]",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"(datum, index, data, Vector)=>[number,number]",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tickStroke",paraId:6,tocIndex:4},{value:"刻度线颜色",paraId:6,tocIndex:4},{value:"string",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"(datum, index, data, Vector)=>string",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"tickStrokeOpacity",paraId:6,tocIndex:4},{value:"刻度线透明度",paraId:6,tocIndex:4},{value:"number",paraId:6,tocIndex:4},{value:" | ",paraId:6,tocIndex:4},{value:"(datum, index, data, Vector)=>number",paraId:6,tocIndex:4},{value:"-",paraId:6,tocIndex:4},{value:"属性",paraId:7,tocIndex:5},{value:"描述",paraId:7,tocIndex:5},{value:"类型",paraId:7,tocIndex:5},{value:"默认值",paraId:7,tocIndex:5},{value:"label",paraId:7,tocIndex:5},{value:"是否显示刻度值",paraId:7,tocIndex:5},{value:"boolean",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelOpacity",paraId:7,tocIndex:5},{value:"刻度值透明度",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFilter",paraId:7,tocIndex:5},{value:"刻度值过滤",paraId:7,tocIndex:5},{value:"(datum, index, data)=> boolean",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFormatter",paraId:7,tocIndex:5},{value:"刻度值线格式化",paraId:7,tocIndex:5},{value:"DisplayObject",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data, Vector)=> DisplayObject",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"transform",paraId:7,tocIndex:5},{value:"刻度值转换，避免文本之间发生重叠。当前支持超长文本缩略、重叠刻度值隐藏、自动旋转",paraId:7,tocIndex:5},{value:"Transform[]",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelAutoHide",paraId:7,tocIndex:5},{value:"自动隐藏重叠的刻度值，设置 size 值的时候生效",paraId:7,tocIndex:5},{value:"boolean",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"HideOverlapCfg",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelAutoRotate",paraId:7,tocIndex:5},{value:"自动旋转刻度，设置 size 值的时候生效值",paraId:7,tocIndex:5},{value:"boolean",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"RotateOverlapCfg",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelAutoEllipsis",paraId:7,tocIndex:5},{value:"自动缩略刻度值，设置 size 值的时候生效",paraId:7,tocIndex:5},{value:"boolean",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"EllipsisOverlapCfg",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelAutoWrap",paraId:7,tocIndex:5},{value:"自动换行刻度值，设置 size 值的时候是生效",paraId:7,tocIndex:5},{value:"boolean",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"WrapOverlapCfg",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelAlign",paraId:7,tocIndex:5},{value:"刻度值对齐方式",paraId:7,tocIndex:5},{value:"- 'horizontal' 始终保持水平",paraId:7,tocIndex:5},{value:" - 'parallel' 平行于坐标轴",paraId:7,tocIndex:5},{value:" - 'perpendicular' 垂直于坐标轴",paraId:7,tocIndex:5},{value:"'horizontal'",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"'parallel'",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"'perpendicular'",paraId:7,tocIndex:5},{value:"'parallel'",paraId:7,tocIndex:5},{value:"labelDirection",paraId:7,tocIndex:5},{value:"刻度值位于轴线的位置，参考",paraId:7,tocIndex:5},{value:"tickDirection",paraId:7,tocIndex:5},{value:"'positive'",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"'negative'",paraId:7,tocIndex:5},{value:"'positive'",paraId:7,tocIndex:5},{value:"labelSpacing",paraId:7,tocIndex:5},{value:"刻度值到其对应刻度的间距",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:"0",paraId:7,tocIndex:5},{value:"labelLineWidth",paraId:7,tocIndex:5},{value:"刻度值宽度",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" |",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelLineDash",paraId:7,tocIndex:5},{value:"刻度值描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:5},{value:"[number,number]",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>[number, number]",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFontSize",paraId:7,tocIndex:5},{value:"刻度值文字大小",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFontFamily",paraId:7,tocIndex:5},{value:"刻度值文字字体",paraId:7,tocIndex:5},{value:"string",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>string",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFontWeight",paraId:7,tocIndex:5},{value:"刻度值字体粗细",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" |",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFill",paraId:7,tocIndex:5},{value:"刻度值字体颜色",paraId:7,tocIndex:5},{value:"string",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>string",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelFillOpacity",paraId:7,tocIndex:5},{value:"刻度值文本透明度",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelStroke",paraId:7,tocIndex:5},{value:"刻度值文本描边颜色",paraId:7,tocIndex:5},{value:"string",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>string",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"labelStrokeOpacity",paraId:7,tocIndex:5},{value:"刻度值文本描边透明度",paraId:7,tocIndex:5},{value:"number",paraId:7,tocIndex:5},{value:" | ",paraId:7,tocIndex:5},{value:"(datum, index, data)=>number",paraId:7,tocIndex:5},{value:"-",paraId:7,tocIndex:5},{value:"export interface Transform {\n  /** 避免刻度值重叠时的额外边距 */\n  margin?: number[];\n}\n\nexport interface EllipsisOverlapCfg extends Transform {\n  type: 'ellipsis';\n  /** 缩略替换字符，默认为 ... */\n  suffix?: string;\n  /** 文本短于该长度时不再缩略 */\n  minLength: string | number;\n  /** 文本短于该长度时一定会进行缩略 */\n  maxLength?: string | number;\n  /** 每次缩略执行步长 */\n  step?: string | number;\n}\n\nexport interface RotateOverlapCfg extends Transform {\n  type: 'rotate';\n  /** 可选的旋转角度值 */\n  optionalAngles: number[];\n  /** 当旋转无法避免重叠时，是否恢复为默认旋转角度 */\n  recoverWhenFailed?: boolean;\n}\n\nexport interface HideOverlapCfg extends Transform {\n  type: 'hide';\n  /** 保证第一个刻度值不被隐藏 */\n  keepHeader?: boolean;\n  /** 保证最后一个刻度值不被隐藏 */\n  keepTail?: boolean;\n}\n\nexport interface WrapOverlapCfg extends Transform {\n  type: 'wrap';\n  /** 单行最大宽度 */\n  wordWrapWidth?: number;\n  /** 最大行数 */\n  maxLines?: number;\n  recoverWhenFailed?: boolean;\n}\n",paraId:8,tocIndex:5},{value:"在不同坐标系下网格线会具有不同的样式",paraId:9,tocIndex:6},{value:"场景标签",paraId:10,tocIndex:6},{value:"样式",paraId:10,tocIndex:6},{value:"直角坐标系",paraId:10,tocIndex:6},{value:"极坐标系",paraId:10,tocIndex:6},{value:"极坐标系",paraId:10,tocIndex:6},{value:"极坐标系",paraId:10,tocIndex:6},{value:" ",paraId:10,tocIndex:6},{value:"雷达图",paraId:10,tocIndex:6},{value:"属性",paraId:11,tocIndex:6},{value:"描述",paraId:11,tocIndex:6},{value:"类型",paraId:11,tocIndex:6},{value:"默认值",paraId:11,tocIndex:6},{value:"grid",paraId:11,tocIndex:6},{value:"是否显示网格线",paraId:11,tocIndex:6},{value:"boolean",paraId:11,tocIndex:6},{value:"false",paraId:11,tocIndex:6},{value:"gridFilter",paraId:11,tocIndex:6},{value:"网格线过滤",paraId:11,tocIndex:6},{value:"(datum, index, data)=> boolean",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"gridLength",paraId:11,tocIndex:6},{value:"网格线长度。一般情况下，不需要用户配置。",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:" | ",paraId:11,tocIndex:6},{value:"(datum, index, data)=> number",paraId:11,tocIndex:6},{value:"0",paraId:11,tocIndex:6},{value:"gridAreaFill",paraId:11,tocIndex:6},{value:"网格线区域颜色",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:" | ",paraId:11,tocIndex:6},{value:"string[]",paraId:11,tocIndex:6},{value:"| ",paraId:11,tocIndex:6},{value:"(datum, index, data)=> string",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"gridLineWidth",paraId:11,tocIndex:6},{value:"网格线宽度",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"gridLineDash",paraId:11,tocIndex:6},{value:"网格线描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:11,tocIndex:6},{value:"[number,number]",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"gridStroke",paraId:11,tocIndex:6},{value:"网格线颜色",paraId:11,tocIndex:6},{value:"string",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"gridStrokeOpacity",paraId:11,tocIndex:6},{value:"网格线透明度",paraId:11,tocIndex:6},{value:"number",paraId:11,tocIndex:6},{value:"-",paraId:11,tocIndex:6},{value:"支持设置更新时的动画效果",paraId:12,tocIndex:7},{value:"属性",paraId:13,tocIndex:7},{value:"描述",paraId:13,tocIndex:7},{value:"类型",paraId:13,tocIndex:7},{value:"默认值",paraId:13,tocIndex:7},{value:"animate",paraId:13,tocIndex:7},{value:"是否开启动画",paraId:13,tocIndex:7},{value:"boolean",paraId:13,tocIndex:7},{value:" | ",paraId:13,tocIndex:7},{value:"EffectTiming",paraId:13,tocIndex:7},{value:"-",paraId:13,tocIndex:7},{value:"EffectTiming 支持配置的属性如下：",paraId:14,tocIndex:7},{value:"属性",paraId:15,tocIndex:7},{value:"描述",paraId:15,tocIndex:7},{value:"类型",paraId:15,tocIndex:7},{value:"默认值",paraId:15,tocIndex:7},{value:"delay",paraId:15,tocIndex:7},{value:"延迟执行时间 (ms)",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"-",paraId:15,tocIndex:7},{value:"duration",paraId:15,tocIndex:7},{value:"动画持续时间 (ms)",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"-",paraId:15,tocIndex:7},{value:"easing",paraId:15,tocIndex:7},{value:"动画的缓动函数",paraId:15,tocIndex:7},{value:"Easing",paraId:15,tocIndex:7},{value:"-",paraId:15,tocIndex:7},{value:"endDelay",paraId:15,tocIndex:7},{value:"延迟执行时间 (ms)",paraId:15,tocIndex:7},{value:"number",paraId:15,tocIndex:7},{value:"-",paraId:15,tocIndex:7},{value:"fill",paraId:15,tocIndex:7},{value:"动画处于非运行状态时的展示效果",paraId:15,tocIndex:7},{value:"Fill",paraId:15,tocIndex:7},{value:"-",paraId:15,tocIndex:7}]},12432:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(48451);const t=[{value:"绘制图例，G2 提供了两种图例类型：分类图例（Category Legend）和连续图例（Continuous Legend），分别用于展示分类数据和连续数据。",paraId:0},{value:"// View Level\nconst viewLevel = {\n  type: 'view',\n  legend: {\n    color: {},\n    size: {},\n  },\n};\n\n// Mark Level\nconst markLevel = {\n  type: 'interval',\n  legend: {\n    color: {},\n    size: {},\n  },\n};\n",paraId:1},{value:"// API\nchart.legend('x', {}).legend('y', {});\n\nchart.interval().legend('x', {}).legend('y', {});\n",paraId:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'interval',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n      format: 'csv',\n    },\n    encode: { x: 'age', y: 'people', color: 'sex' },\n    transform: [{ type: 'groupX', y: 'sum' }, { type: 'stackY' }],\n    scale: { color: { type: 'ordinal' } },\n    legend: { color: {} },\n  });\n\n  chart.render();\n\n  return chart.getContainer();\n})();\n",paraId:3,tocIndex:0},{value:"图例项通常由图标、标签和值三部分构成，在部分场景下也可能仅包含图标及标签。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"itemMarker",paraId:5,tocIndex:1},{value:"图例项图标",paraId:5,tocIndex:1},{value:"DisplayObject",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>DisplayObject",paraId:5,tocIndex:1},{value:"'circle'",paraId:5,tocIndex:1},{value:"itemMarkerFill",paraId:5,tocIndex:1},{value:"图例项图标填充色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemMarkerFillOpacity",paraId:5,tocIndex:1},{value:"图例项图标填充色透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemMarkerStroke",paraId:5,tocIndex:1},{value:"图例项图标描边色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemMarkerStrokeOpacity",paraId:5,tocIndex:1},{value:"图例项图标描边色透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelText",paraId:5,tocIndex:1},{value:"图例项标签",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelFontSize",paraId:5,tocIndex:1},{value:"图例项标签文字大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelFontFamily",paraId:5,tocIndex:1},{value:"图例项标签文字字体",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelFontWeight",paraId:5,tocIndex:1},{value:"图例项标签字体粗细",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelFill",paraId:5,tocIndex:1},{value:"图例项标签字体颜色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelFillOpacity",paraId:5,tocIndex:1},{value:"图例项标签字体透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelStroke",paraId:5,tocIndex:1},{value:"图例项标签描边色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemLabelStrokeOpacity",paraId:5,tocIndex:1},{value:"图例项标签描边色透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueText",paraId:5,tocIndex:1},{value:"图例项值",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueFontSize",paraId:5,tocIndex:1},{value:"图例项值文字大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueFontFamily",paraId:5,tocIndex:1},{value:"图例项值文字字体",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueFontWeight",paraId:5,tocIndex:1},{value:"图例项值字体粗细",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueFill",paraId:5,tocIndex:1},{value:"图例项值字体颜色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueFillOpacity",paraId:5,tocIndex:1},{value:"图例项值字体透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueStroke",paraId:5,tocIndex:1},{value:"图例项值描边色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemValueStrokeOpacity",paraId:5,tocIndex:1},{value:"图例项值描边色透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"(datum, index, data)=>number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemSpan",paraId:5,tocIndex:1},{value:"图例项图标、标签和值的空间划分",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"number[]",paraId:5,tocIndex:1},{value:"[1, 1, 1]",paraId:5,tocIndex:1},{value:"itemSpacing",paraId:5,tocIndex:1},{value:"图例项图标、标签和值之间的间距",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:" | ",paraId:5,tocIndex:1},{value:"number[]",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemBackgroundFill",paraId:5,tocIndex:1},{value:"背景颜色",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"itemBackgroundFillOpacity",paraId:5,tocIndex:1},{value:"背景透明度",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"默认采用",paraId:6,tocIndex:2},{value:"流式布局",paraId:6,tocIndex:2},{value:"。",paraId:6,tocIndex:2},{value:"当指定 ",paraId:7,tocIndex:2},{value:"cols",paraId:7,tocIndex:2},{value:" 之后会采用",paraId:7,tocIndex:2},{value:"网格布局",paraId:7,tocIndex:2},{value:"。",paraId:7,tocIndex:2},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"layout",paraId:8,tocIndex:2},{value:"图例项布局方式，网格布局、流式布局",paraId:8,tocIndex:2},{value:"'flex'",paraId:8,tocIndex:2},{value:"|",paraId:8,tocIndex:2},{value:"'grid'",paraId:8,tocIndex:2},{value:"'flex'",paraId:8,tocIndex:2},{value:"cols",paraId:8,tocIndex:2},{value:"指定每列显示的图例项数量，为空时表示列数不受限制",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"colPadding",paraId:8,tocIndex:2},{value:"图例项之间的横向间隔",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0",paraId:8,tocIndex:2},{value:"rowPadding",paraId:8,tocIndex:2},{value:"图例项之间的纵向间隔",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"0",paraId:8,tocIndex:2},{value:"maxRows",paraId:8,tocIndex:2},{value:"最多多少行",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"3",paraId:8,tocIndex:2},{value:"maxCols",paraId:8,tocIndex:2},{value:"最多多少列",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:"3",paraId:8,tocIndex:2},{value:"图例项分页显示时能够控制分页器的行为。",paraId:9,tocIndex:3},{value:"属性",paraId:10,tocIndex:3},{value:"描述",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"默认值",paraId:10,tocIndex:3},{value:"navEffect",paraId:10,tocIndex:3},{value:"翻页显示效果",paraId:10,tocIndex:3},{value:"参见 ",paraId:10,tocIndex:3},{value:"Web Animations API",paraId:10,tocIndex:3},{value:"linear",paraId:10,tocIndex:3},{value:"navDuration",paraId:10,tocIndex:3},{value:"单次翻页动效时长",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"200",paraId:10,tocIndex:3},{value:"| navOrientation    | 翻页滚动方向",paraId:11,tocIndex:3},{value:" - 横向",paraId:11,tocIndex:3},{value:"'horizontal'",paraId:11,tocIndex:3},{value:" - 纵向",paraId:11,tocIndex:3},{value:"'vertical'",paraId:11,tocIndex:3},{value:" | ",paraId:11,tocIndex:3},{value:"'horizontal'",paraId:11,tocIndex:3},{value:"|",paraId:11,tocIndex:3},{value:"'vertical'",paraId:11,tocIndex:3},{value:"                                               | 'horizontal' |",paraId:11,tocIndex:3},{value:"| navDefaultPage    | 默认展示页数                                                   | ",paraId:12,tocIndex:3},{value:"number",paraId:12,tocIndex:3},{value:"                                                                   | 0            |",paraId:12,tocIndex:3},{value:"| navLoop      | 是否启用循环翻页                                                     | ",paraId:13,tocIndex:3},{value:"boolean",paraId:13,tocIndex:3},{value:"                                                                  | false        |",paraId:13,tocIndex:3},{value:"| navPageNumFill           | 分页数字颜色                                             | ",paraId:14,tocIndex:3},{value:"string",paraId:14,tocIndex:3},{value:"                                                                   | -           |",paraId:14,tocIndex:3},{value:"| navPageNumFontSize       | 分页数字大小                                             | ",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:"                                                                   | -           |",paraId:15,tocIndex:3},{value:"| navPageNumOpacity        | 分页数字透明度                                           | ",paraId:16,tocIndex:3},{value:"number",paraId:16,tocIndex:3},{value:"                                                                   | -           |",paraId:16,tocIndex:3},{value:"| navPageNumStroke         | 分页数字描边                                             | ",paraId:17,tocIndex:3},{value:"string",paraId:17,tocIndex:3},{value:"                                                                   | -           |",paraId:17,tocIndex:3},{value:"| navPageNumStrokeOpacity  | 分页数字描边透明度                                        | ",paraId:18,tocIndex:3},{value:"number",paraId:18,tocIndex:3},{value:"                                                                   | -           |",paraId:18,tocIndex:3},{value:"| navButtonFill            | 分页按钮颜色                                             | ",paraId:19,tocIndex:3},{value:"string",paraId:19,tocIndex:3},{value:"                                                                   | -           |",paraId:19,tocIndex:3},{value:"| navButtonOpacity         | 分页数按钮透明度                                          | ",paraId:20,tocIndex:3},{value:"number",paraId:20,tocIndex:3},{value:"                                                                   | -           |",paraId:20,tocIndex:3},{value:"| navButtonStroke          | 分页按钮描边颜色                                          | ",paraId:21,tocIndex:3},{value:"string",paraId:21,tocIndex:3},{value:"                                                                   | -           |",paraId:21,tocIndex:3},{value:"| navButtonStrokeOpacity   | 分页按钮描边透明度                                      | ",paraId:22,tocIndex:3},{value:"number",paraId:22,tocIndex:3},{value:"                                                                   | -            |\n| navFormatter | 页码文本格式化                                                 | ",paraId:22,tocIndex:3},{value:"(current: number, total: number) => string;",paraId:22,tocIndex:3},{value:"                              | -            |",paraId:22,tocIndex:3},{value:"事件类型",paraId:23,tocIndex:4},{value:"描述",paraId:23,tocIndex:4},{value:"类型",paraId:23,tocIndex:4},{value:"click",paraId:23,tocIndex:4},{value:"点击图例项时触发",paraId:23,tocIndex:4},{value:"(item:Selection)=>void",paraId:23,tocIndex:4},{value:"mouseenter",paraId:23,tocIndex:4},{value:"鼠标移入图例项时触发",paraId:23,tocIndex:4},{value:"(item: Selection)=>void",paraId:23,tocIndex:4},{value:"mouseleave",paraId:23,tocIndex:4},{value:"鼠标移出图例项时触发",paraId:23,tocIndex:4},{value:"(item:Selection)=>void",paraId:23,tocIndex:4},{value:"使用离散数据绘制视图时采用的图例类型。",paraId:24,tocIndex:5},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'groupX', y: 'sum' })\n  .encode('x', 'age')\n  .encode('y', 'people')\n  .encode('color', 'sex')\n  .scale('color', { type: 'ordinal', range: ['#ca8861', '#675193'] })\n  .legend('y', {\n    ribbonLen: 200,\n    ribbonSize: 30,\n    labelFormatter: (datum, index, data) => datum.people.toLocaleString(),\n    type: 'size',\n    color: [\n      '#d0e3fa',\n      '#acc7f6',\n      '#8daaf2',\n      '#6d8eea',\n      '#4d73cd',\n      '#325bb1',\n      '#5a3e75',\n      '#8c3c79',\n      '#e23455',\n      '#e7655b',\n    ],\n  });\n\nchart.render();\n",paraId:25,tocIndex:5},{value:"连续数据的图例具有 4 种样式，分别为：",paraId:26,tocIndex:6},{value:"连续表示 ",paraId:27,tocIndex:6},{value:"默认",paraId:27,tocIndex:6},{value:"范围表示 ",paraId:28,tocIndex:6},{value:"block=true",paraId:28,tocIndex:6},{value:"尺寸表示 ",paraId:29,tocIndex:6},{value:"type='size'",paraId:29,tocIndex:6},{value:"尺寸、范围表示 ",paraId:30,tocIndex:6},{value:"type='size'",paraId:30,tocIndex:6},{value:" ",paraId:30,tocIndex:6},{value:"block=true",paraId:30,tocIndex:6},{value:"属性",paraId:31,tocIndex:6},{value:"描述",paraId:31,tocIndex:6},{value:"类型",paraId:31,tocIndex:6},{value:"默认值",paraId:31,tocIndex:6},{value:"color",paraId:31,tocIndex:6},{value:"色带颜色，为数组时会从中按序取色",paraId:31,tocIndex:6},{value:"string[]",paraId:31,tocIndex:6},{value:" | ",paraId:31,tocIndex:6},{value:"interpolate",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"block",paraId:31,tocIndex:6},{value:"是否按区间显示",paraId:31,tocIndex:6},{value:"boolean",paraId:31,tocIndex:6},{value:"false",paraId:31,tocIndex:6},{value:"type",paraId:31,tocIndex:6},{value:"连续图例类型",paraId:31,tocIndex:6},{value:"'size'",paraId:31,tocIndex:6},{value:" | ",paraId:31,tocIndex:6},{value:"'color'",paraId:31,tocIndex:6},{value:"'color'",paraId:31,tocIndex:6},{value:"ribbonSize",paraId:31,tocIndex:6},{value:"色带尺寸",paraId:31,tocIndex:6},{value:"number",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"ribbonFill",paraId:31,tocIndex:6},{value:"色带颜色",paraId:31,tocIndex:6},{value:"string",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"ribbonFillOpacity",paraId:31,tocIndex:6},{value:"色带透明度",paraId:31,tocIndex:6},{value:"number",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"ribbonStroke",paraId:31,tocIndex:6},{value:"色带描边色",paraId:31,tocIndex:6},{value:"string",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"ribbonStrokeOpacity",paraId:31,tocIndex:6},{value:"色带描边色透明度",paraId:31,tocIndex:6},{value:"number",paraId:31,tocIndex:6},{value:"-",paraId:31,tocIndex:6},{value:"color 插值器参考 ",paraId:32,tocIndex:6},{value:"d3-interpolate",paraId:32,tocIndex:6},{value:"滑动窗口标记了当前的值选取范围，通过与滑动窗口交互能够对视图中的值范围进行选择。",paraId:33,tocIndex:7},{value:"\n ",paraId:34},{value:"属性",paraId:35,tocIndex:7},{value:"描述",paraId:35,tocIndex:7},{value:"类型",paraId:35,tocIndex:7},{value:"默认值",paraId:35,tocIndex:7},{value:"handle",paraId:35,tocIndex:7},{value:"是否显示滑动手柄",paraId:35,tocIndex:7},{value:"boolean",paraId:35,tocIndex:7},{value:"true",paraId:35,tocIndex:7},{value:"handleLabel",paraId:35,tocIndex:7},{value:"是否显示手柄文本",paraId:35,tocIndex:7},{value:"boolean",paraId:35,tocIndex:7},{value:"true",paraId:35,tocIndex:7},{value:"handleFormatter",paraId:35,tocIndex:7},{value:"手柄文本格式化",paraId:35,tocIndex:7},{value:"(datum)=>string",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"slidable",paraId:35,tocIndex:7},{value:"窗口是否可以滑动",paraId:35,tocIndex:7},{value:"boolean",paraId:35,tocIndex:7},{value:"true",paraId:35,tocIndex:7},{value:"range",paraId:35,tocIndex:7},{value:"默认选择范围",paraId:35,tocIndex:7},{value:"[number, number]",paraId:35,tocIndex:7},{value:"[min, max]",paraId:35,tocIndex:7},{value:"step",paraId:35,tocIndex:7},{value:"单次滑动步长",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:"1",paraId:35,tocIndex:7},{value:"handleMarkerFill",paraId:35,tocIndex:7},{value:"手柄图标颜色",paraId:35,tocIndex:7},{value:"string",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleMarkerFillOpacity",paraId:35,tocIndex:7},{value:"手柄图标色透明度",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleMarkerStroke",paraId:35,tocIndex:7},{value:"手柄图标描边色",paraId:35,tocIndex:7},{value:"string",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleMarkerStrokeOpacity",paraId:35,tocIndex:7},{value:"手柄图标描边色透明度",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelFontSize",paraId:35,tocIndex:7},{value:"手柄文字大小",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:" | ",paraId:35,tocIndex:7},{value:"Function<number>",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelFontFamily",paraId:35,tocIndex:7},{value:"手柄文字字体",paraId:35,tocIndex:7},{value:"string",paraId:35,tocIndex:7},{value:" | ",paraId:35,tocIndex:7},{value:"Function<string>",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelFontWeight",paraId:35,tocIndex:7},{value:"手柄字体粗细",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:" |",paraId:35,tocIndex:7},{value:"Function<number>",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelFill",paraId:35,tocIndex:7},{value:"手柄字体颜色",paraId:35,tocIndex:7},{value:"string",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelFillOpacity",paraId:35,tocIndex:7},{value:"手柄文本透明度",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelStroke",paraId:35,tocIndex:7},{value:"手柄文本描边色",paraId:35,tocIndex:7},{value:"string",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"handleLabelStrokeOpacity",paraId:35,tocIndex:7},{value:"手柄文本描边色透明度",paraId:35,tocIndex:7},{value:"number",paraId:35,tocIndex:7},{value:"-",paraId:35,tocIndex:7},{value:"属性",paraId:36,tocIndex:8},{value:"描述",paraId:36,tocIndex:8},{value:"类型",paraId:36,tocIndex:8},{value:"默认值",paraId:36,tocIndex:8},{value:"label",paraId:36,tocIndex:8},{value:"是否显示刻度值",paraId:36,tocIndex:8},{value:"boolean",paraId:36,tocIndex:8},{value:"true`",paraId:36,tocIndex:8},{value:"labelFormatter",paraId:36,tocIndex:8},{value:"刻度值格式化",paraId:36,tocIndex:8},{value:"(datum, index, data)=>string",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelFilter",paraId:36,tocIndex:8},{value:"刻度值过滤",paraId:36,tocIndex:8},{value:"(datum, index, data)=>boolean",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelDirection",paraId:36,tocIndex:8},{value:"刻度值位于色带的位置，参考 axis ",paraId:36,tocIndex:8},{value:"direction",paraId:36,tocIndex:8},{value:"'positive'",paraId:36,tocIndex:8},{value:" | ",paraId:36,tocIndex:8},{value:"'negative'",paraId:36,tocIndex:8},{value:"'positive'",paraId:36,tocIndex:8},{value:"labelSpacing",paraId:36,tocIndex:8},{value:"刻度值到色带的间距",paraId:36,tocIndex:8},{value:"number",paraId:36,tocIndex:8},{value:"5",paraId:36,tocIndex:8},{value:"labelAlign",paraId:36,tocIndex:8},{value:"刻度值对齐位置",paraId:36,tocIndex:8},{value:" - ",paraId:36,tocIndex:8},{value:"'value'",paraId:36,tocIndex:8},{value:" 对齐到刻度",paraId:36,tocIndex:8},{value:"- ",paraId:36,tocIndex:8},{value:"'range'",paraId:36,tocIndex:8},{value:" 对齐到范围",paraId:36,tocIndex:8},{value:"'value'",paraId:36,tocIndex:8},{value:"|",paraId:36,tocIndex:8},{value:"'range'",paraId:36,tocIndex:8},{value:"'value'",paraId:36,tocIndex:8},{value:"labelFontSize",paraId:36,tocIndex:8},{value:"刻度值文字大小",paraId:36,tocIndex:8},{value:"number",paraId:36,tocIndex:8},{value:" | ",paraId:36,tocIndex:8},{value:"Function<number>",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelFontFamily",paraId:36,tocIndex:8},{value:"刻度值文字字体",paraId:36,tocIndex:8},{value:"string",paraId:36,tocIndex:8},{value:" | ",paraId:36,tocIndex:8},{value:"Function<string>",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelFontWeight",paraId:36,tocIndex:8},{value:"刻度值字体粗细",paraId:36,tocIndex:8},{value:"number",paraId:36,tocIndex:8},{value:" | ",paraId:36,tocIndex:8},{value:"Function<number>",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelStroke",paraId:36,tocIndex:8},{value:"刻度值字体颜色",paraId:36,tocIndex:8},{value:"string",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"labelStrokeOpacity",paraId:36,tocIndex:8},{value:"刻度值文本透明度",paraId:36,tocIndex:8},{value:"number",paraId:36,tocIndex:8},{value:"-",paraId:36,tocIndex:8},{value:"刻度值对齐方式",paraId:37,tocIndex:8},{value:"对齐到刻度",paraId:38,tocIndex:8},{value:"\n ",paraId:34},{value:"对齐到范围",paraId:39,tocIndex:8},{value:"\n ",paraId:34},{value:"指示器是在与连续图例交互过程中指示当前所在位置所表示值大小的提示组件。",paraId:40,tocIndex:9},{value:"属性",paraId:41,tocIndex:9},{value:"描述",paraId:41,tocIndex:9},{value:"类型",paraId:41,tocIndex:9},{value:"默认值",paraId:41,tocIndex:9},{value:"indicator",paraId:41,tocIndex:9},{value:"是否显示值指示器",paraId:41,tocIndex:9},{value:"boolean",paraId:41,tocIndex:9},{value:"true",paraId:41,tocIndex:9},{value:"indicatorFormatter",paraId:41,tocIndex:9},{value:"值指示器格式化",paraId:41,tocIndex:9},{value:"(datum)=>string | DisplayObject",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorLabelFontSize",paraId:41,tocIndex:9},{value:"值指示器文本文字大小",paraId:41,tocIndex:9},{value:"number",paraId:41,tocIndex:9},{value:" | ",paraId:41,tocIndex:9},{value:"Function<number>",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorLabelFontFamily",paraId:41,tocIndex:9},{value:"值指示器文本文字字体",paraId:41,tocIndex:9},{value:"string",paraId:41,tocIndex:9},{value:" | ",paraId:41,tocIndex:9},{value:"Function<string>",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorLabelFontWeight",paraId:41,tocIndex:9},{value:"值指示器文本字体粗细",paraId:41,tocIndex:9},{value:"number",paraId:41,tocIndex:9},{value:" |",paraId:41,tocIndex:9},{value:"Function<number>",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorLabelStroke",paraId:41,tocIndex:9},{value:"值指示器字体颜色",paraId:41,tocIndex:9},{value:"string",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorLabelStrokeOpacity",paraId:41,tocIndex:9},{value:"值指示器文本透明度",paraId:41,tocIndex:9},{value:"number",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorBackgroundFill",paraId:41,tocIndex:9},{value:"值指示器背景颜色",paraId:41,tocIndex:9},{value:"string",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorBackgroundFillOpacity",paraId:41,tocIndex:9},{value:"值指示器背景透明度",paraId:41,tocIndex:9},{value:"number",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorBackgroundStroke",paraId:41,tocIndex:9},{value:"值指示器背景描边色",paraId:41,tocIndex:9},{value:"string",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"indicatorBackgroundStrokeOpacity",paraId:41,tocIndex:9},{value:"值指示器背景描边色透明度",paraId:41,tocIndex:9},{value:"number",paraId:41,tocIndex:9},{value:"-",paraId:41,tocIndex:9},{value:"事件类型",paraId:42,tocIndex:10},{value:"描述",paraId:42,tocIndex:10},{value:"类型",paraId:42,tocIndex:10},{value:"valuechange",paraId:42,tocIndex:10},{value:"滑动窗口选取范围改变时触发",paraId:42,tocIndex:10},{value:"(range: [number, number])=>void",paraId:42,tocIndex:10},{value:"indicate",paraId:42,tocIndex:10},{value:"指示器值改变时触发",paraId:42,tocIndex:10},{value:"(value: number, range: [number, number])=>void",paraId:42,tocIndex:10},{value:"属性",paraId:43,tocIndex:12},{value:"描述",paraId:43,tocIndex:12},{value:"类型",paraId:43,tocIndex:12},{value:"默认值",paraId:43,tocIndex:12},{value:"title",paraId:43,tocIndex:12},{value:"关闭标题或设置标题内容",paraId:43,tocIndex:12},{value:"false",paraId:43,tocIndex:12},{value:"|",paraId:43,tocIndex:12},{value:"string",paraId:43,tocIndex:12},{value:"true",paraId:43,tocIndex:12},{value:"titleSpacing",paraId:43,tocIndex:12},{value:"标题到内容区域的间距",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:" | ",paraId:43,tocIndex:12},{value:"number[]",paraId:43,tocIndex:12},{value:"0",paraId:43,tocIndex:12},{value:"titleInset",paraId:43,tocIndex:12},{value:"标题文本内边距",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:" | ",paraId:43,tocIndex:12},{value:"number[]",paraId:43,tocIndex:12},{value:"0",paraId:43,tocIndex:12},{value:"titlePosition",paraId:43,tocIndex:12},{value:"标题所处位置。可采用简写形式，如",paraId:43,tocIndex:12},{value:"'i'",paraId:43,tocIndex:12},{value:" 表示",paraId:43,tocIndex:12},{value:"'inner'",paraId:43,tocIndex:12},{value:"'top'",paraId:43,tocIndex:12},{value:" | ",paraId:43,tocIndex:12},{value:"'bottom'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'left'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'right'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'left-top'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'left-bottom'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'right-top'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'right-bottom'",paraId:43,tocIndex:12},{value:" |",paraId:43,tocIndex:12},{value:"'inner'",paraId:43,tocIndex:12},{value:" | ",paraId:43,tocIndex:12},{value:"'lt'",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"titleFontSize",paraId:43,tocIndex:12},{value:"标题文字大小",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"titleFontFamily",paraId:43,tocIndex:12},{value:"标题文字字体",paraId:43,tocIndex:12},{value:"string",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"titleFontWeight",paraId:43,tocIndex:12},{value:"标题字体粗细",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"titleFill",paraId:43,tocIndex:12},{value:"标题字体颜色",paraId:43,tocIndex:12},{value:"string",paraId:43,tocIndex:12},{value:"titleFillOpacity",paraId:43,tocIndex:12},{value:"标题字体颜色透明度",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:"titleStroke",paraId:43,tocIndex:12},{value:"标题字体描边颜色",paraId:43,tocIndex:12},{value:"string",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"titleStrokeOpacity",paraId:43,tocIndex:12},{value:"标题字体描边颜色透明度",paraId:43,tocIndex:12},{value:"number",paraId:43,tocIndex:12},{value:"-",paraId:43,tocIndex:12},{value:"Legend 组件支持调整其在画布中的位置，通过 ",paraId:44,tocIndex:13},{value:"layout",paraId:44,tocIndex:13},{value:" 属性来设置。\n目前支持基本的 Flex 布局方式，支持的属性包括: ",paraId:44,tocIndex:13},{value:"justifyContent",paraId:44,tocIndex:13},{value:", ",paraId:44,tocIndex:13},{value:"alignItems",paraId:44,tocIndex:13},{value:", ",paraId:44,tocIndex:13},{value:"flexDirection",paraId:44,tocIndex:13},{value:"。",paraId:44,tocIndex:13},{value:"属性",paraId:45,tocIndex:13},{value:"描述",paraId:45,tocIndex:13},{value:"类型",paraId:45,tocIndex:13},{value:"默认值",paraId:45,tocIndex:13},{value:"justifyContent",paraId:45,tocIndex:13},{value:"主轴对齐方式",paraId:45,tocIndex:13},{value:"'flex-start'",paraId:45,tocIndex:13},{value:" | ",paraId:45,tocIndex:13},{value:"'flex-end'",paraId:45,tocIndex:13},{value:" | ",paraId:45,tocIndex:13},{value:"'center'",paraId:45,tocIndex:13},{value:"'flex-start'",paraId:45,tocIndex:13},{value:"alignItems",paraId:45,tocIndex:13},{value:"交叉轴对齐",paraId:45,tocIndex:13},{value:"'flex-start'",paraId:45,tocIndex:13},{value:" | ",paraId:45,tocIndex:13},{value:"'flex-end'",paraId:45,tocIndex:13},{value:" | ",paraId:45,tocIndex:13},{value:"'center'",paraId:45,tocIndex:13},{value:"'flex-start'",paraId:45,tocIndex:13},{value:"flexDirection",paraId:45,tocIndex:13},{value:"主轴方向",paraId:45,tocIndex:13},{value:"'row'",paraId:45,tocIndex:13},{value:" | ",paraId:45,tocIndex:13},{value:"'column'",paraId:45,tocIndex:13},{value:"'row'",paraId:45,tocIndex:13},{value:"chart\n  .interval()\n  .data(/** data */)\n  .encode('x' /** x filed */)\n  .encode('y' /** y filed */)\n  .encode('color' /** color filed */)\n  .legend('color', {\n    /** 让图例在水平和垂直方向上保持居中 */\n    layout: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'column',\n    },\n  });\n",paraId:46,tocIndex:13}]},60824:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(56090);const t=[{value:"滚动条（scrollbar）是一个交互组件，当显示区域大小不足以容纳全部信息时，可以将超出部分隐藏，并通过滚动条的垂直或横向滑动来显示出被隐藏部分。",paraId:0},{value:"内容是否超出显示区域取决于内容的多少以及显示区域的尺寸，当需要显示的内容在纵向方向上超过显示区域的大小时，应当使用垂直滚动条以控制显示的部分，横向滚动条同理。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  // 开启 X 轴方向上的滚动条\n  .scrollbar('x', {});\n\nchart.render();\n",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:3},{value:"描述",paraId:3,tocIndex:3},{value:"类型",paraId:3,tocIndex:3},{value:"默认值",paraId:3,tocIndex:3},{value:"ratio",paraId:3,tocIndex:3},{value:"滚动条的比例",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"0.5",paraId:3,tocIndex:3},{value:"value",paraId:3,tocIndex:3},{value:"滚动条的起始位置",paraId:3,tocIndex:3},{value:"[0, 1]",paraId:3,tocIndex:3},{value:"0",paraId:3,tocIndex:3},{value:"slidable",paraId:3,tocIndex:3},{value:"是否可以拖动",paraId:3,tocIndex:3},{value:"boolean",paraId:3,tocIndex:3},{value:"true",paraId:3,tocIndex:3},{value:"scrollable",paraId:3,tocIndex:3},{value:"是否支持滚轮滚动",paraId:3,tocIndex:3},{value:"boolean",paraId:3,tocIndex:3},{value:"true",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"isRound",paraId:3,tocIndex:3},{value:"滚动条样式是否为圆角",paraId:3,tocIndex:3},{value:"boolean",paraId:3,tocIndex:3},{value:"false",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"padding",paraId:3,tocIndex:3},{value:"滚动条轨道内边距",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:" | ",paraId:3,tocIndex:3},{value:"number[]",paraId:3,tocIndex:3},{value:"2",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"thumbFill",paraId:3,tocIndex:3},{value:"滚动条滑块填充色",paraId:3,tocIndex:3},{value:"string",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"thumbFillOpacity",paraId:3,tocIndex:3},{value:"滚动条滑块填充色透明度",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"thumbStroke",paraId:3,tocIndex:3},{value:"滚动条滑块描边色",paraId:3,tocIndex:3},{value:"string",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"thumbStrokeOpacity",paraId:3,tocIndex:3},{value:"滚动条滑块描边色透明度",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"trackSize",paraId:3,tocIndex:3},{value:"滚动条的轨道宽度",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"10",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"trackFill",paraId:3,tocIndex:3},{value:"滚动条轨道填充色",paraId:3,tocIndex:3},{value:"string",paraId:3,tocIndex:3},{value:"-",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"trackFillOpacity",paraId:3,tocIndex:3},{value:"滚动条轨道填充色透明度",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"-",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"trackStroke",paraId:3,tocIndex:3},{value:"滚动条轨道描边色",paraId:3,tocIndex:3},{value:"string",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"style.",paraId:3,tocIndex:3},{value:"trackStrokeOpacity",paraId:3,tocIndex:3},{value:"滚动条轨道描边色透明度",paraId:3,tocIndex:3},{value:"number",paraId:3,tocIndex:3},{value:"–",paraId:3,tocIndex:3},{value:"属性",paraId:4,tocIndex:4},{value:"描述",paraId:4,tocIndex:4},{value:"类型",paraId:4,tocIndex:4},{value:"valuechange",paraId:4,tocIndex:4},{value:"发生滚动变化时触发，通过事件监听",paraId:4,tocIndex:4},{value:"function(e)",paraId:4,tocIndex:4},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  // 开启 X 轴缩略轴\n  .scrollbar('x', {});\n\nchart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document.querySelector('.g2-scrollbar').addEventListener('valuechange', (evt) => {\n    console.info(evt.detail);\n  });\n});\n\nchart.render();\n",paraId:5,tocIndex:4}]},39375:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70340);const t=[{value:"缩略轴（slider）是一种辅助看数据的组件，它将大量数据浓缩到一个轴上，既可以缩小宏观看数据全貌，又可以放大微观看数据的片段，同时还可以拖拽观察数据在一定区间内的演变。",paraId:0},{value:"缩略轴是值域数据的浓缩，它跟位置通道 ",paraId:1,tocIndex:0},{value:"x",paraId:1,tocIndex:0},{value:", ",paraId:1,tocIndex:0},{value:"y",paraId:1,tocIndex:0},{value:" 对应的比例尺的类型息息相关。一般来说时间类型上使用缩略轴的频率高，连续轴使用缩略轴频次低、分类轴几乎不会使用到缩略轴。",paraId:1,tocIndex:0},{value:"时间轴，数据跨度非常大，【高频使用】，比如一组时序数据跨度 10 年，需观察这期间数据变化趋势时，建议开启缩略轴；",paraId:2,tocIndex:0},{value:"时间轴，数据密度很高，【高频使用】，比如分钟级更新的实时数据，当需要查看一天内的数据走势时，建议开启缩略轴；",paraId:2,tocIndex:0},{value:"连续轴，数据密度很高，【低频使用】比如查看 1-100 岁平均身高分布，开启缩略轴可以全局查看身高分布；",paraId:2,tocIndex:0},{value:"分类轴【不建议使用】。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  // 开启 Y 方向缩略轴\n  .slider('y', {});\n\nchart.render();\n",paraId:3,tocIndex:1},{value:"属性",paraId:4,tocIndex:3},{value:"描述",paraId:4,tocIndex:3},{value:"类型",paraId:4,tocIndex:3},{value:"默认值",paraId:4,tocIndex:3},{value:"values",paraId:4,tocIndex:3},{value:"初始选区范围，位于 0 ～ 1 区间",paraId:4,tocIndex:3},{value:"[number, number]",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"slidable",paraId:4,tocIndex:3},{value:"是否允许拖动选取和手柄",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"true",paraId:4,tocIndex:3},{value:"brushable",paraId:4,tocIndex:3},{value:"是否启用刷选",paraId:4,tocIndex:3},{value:"boolean",paraId:4,tocIndex:3},{value:"true",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"padding",paraId:4,tocIndex:3},{value:"迷你图的内边距",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:" | ",paraId:4,tocIndex:3},{value:"number[]",paraId:4,tocIndex:3},{value:"0",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"selectionFill",paraId:4,tocIndex:3},{value:"缩略轴选区填充色",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"selectionFillOpacity",paraId:4,tocIndex:3},{value:"缩略轴选区填充色透明度",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"-",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"selectionStroke",paraId:4,tocIndex:3},{value:"缩略轴选区描边色",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"selectionStrokeOpacity",paraId:4,tocIndex:3},{value:"缩略轴选区描边色透明度",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"trackFill",paraId:4,tocIndex:3},{value:"缩略轴滑轨填充色",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"trackFillOpacity",paraId:4,tocIndex:3},{value:"缩略轴滑轨填充色透明度",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"trackStroke",paraId:4,tocIndex:3},{value:"缩略轴滑轨描边色",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"style.",paraId:4,tocIndex:3},{value:"trackStrokeOpacity",paraId:4,tocIndex:3},{value:"缩略轴滑轨描边色透明度",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"–",paraId:4,tocIndex:3},{value:"属性",paraId:5,tocIndex:4},{value:"描述",paraId:5,tocIndex:4},{value:"类型",paraId:5,tocIndex:4},{value:"默认值",paraId:5,tocIndex:4},{value:"showHandle",paraId:5,tocIndex:4},{value:"是否显示拖动手柄",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"showLabel",paraId:5,tocIndex:4},{value:"是否显示拖动手柄文本",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"showLabelOnInteraction",paraId:5,tocIndex:4},{value:"在调整手柄或刷选时才显示手柄文本，在 showLabel 为 false 时生效",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"false",paraId:5,tocIndex:4},{value:"autoFitLabel",paraId:5,tocIndex:4},{value:"是否自动调整拖动手柄文本位置",paraId:5,tocIndex:4},{value:"boolean",paraId:5,tocIndex:4},{value:"true",paraId:5,tocIndex:4},{value:"formatter",paraId:5,tocIndex:4},{value:"拖动手柄标签格式化",paraId:5,tocIndex:4},{value:"(value: number)=>string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleIconSize",paraId:5,tocIndex:4},{value:"缩略轴手柄大小",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"10",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleIconFill",paraId:5,tocIndex:4},{value:"缩略轴手柄填充色",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleIconFillOpacity",paraId:5,tocIndex:4},{value:"缩略轴手柄填充色透明度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleIconStroke",paraId:5,tocIndex:4},{value:"缩略轴手柄描边色",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleIconStrokeOpacity",paraId:5,tocIndex:4},{value:"缩略轴手柄描边色透明度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleLabelFontSize",paraId:5,tocIndex:4},{value:"缩略轴手柄标签字体大小",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleLabelFontWeight",paraId:5,tocIndex:4},{value:"缩略轴手柄标签字体权重高",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:" | ",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleLabelStroke",paraId:5,tocIndex:4},{value:"缩略轴手柄标签字体颜色",paraId:5,tocIndex:4},{value:"string",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"style.",paraId:5,tocIndex:4},{value:"handleLabelStrokeOpacity",paraId:5,tocIndex:4},{value:"缩略轴手柄标签字体透明度",paraId:5,tocIndex:4},{value:"number",paraId:5,tocIndex:4},{value:"-",paraId:5,tocIndex:4},{value:"属性",paraId:6,tocIndex:5},{value:"描述",paraId:6,tocIndex:5},{value:"类型",paraId:6,tocIndex:5},{value:"默认值",paraId:6,tocIndex:5},{value:"sparklineType",paraId:6,tocIndex:5},{value:"迷你图类型：折线图、直方图",paraId:6,tocIndex:5},{value:"line",paraId:6,tocIndex:5},{value:" | ",paraId:6,tocIndex:5},{value:"column",paraId:6,tocIndex:5},{value:"line",paraId:6,tocIndex:5},{value:"sparklineIsStack",paraId:6,tocIndex:5},{value:"是否对数据进行堆叠",paraId:6,tocIndex:5},{value:"boolean",paraId:6,tocIndex:5},{value:"false",paraId:6,tocIndex:5},{value:"sparklineRange",paraId:6,tocIndex:5},{value:"指定值范围，未指定时将使用 data 的最小值和最大值",paraId:6,tocIndex:5},{value:"[number, number]",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineColor",paraId:6,tocIndex:5},{value:"指定颜色",paraId:6,tocIndex:5},{value:"string",paraId:6,tocIndex:5},{value:" | ",paraId:6,tocIndex:5},{value:"string[]",paraId:6,tocIndex:5},{value:" | ",paraId:6,tocIndex:5},{value:"(index: number)=>string",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineSmooth",paraId:6,tocIndex:5},{value:"适用于折线图，平滑曲线",paraId:6,tocIndex:5},{value:"boolean",paraId:6,tocIndex:5},{value:"false",paraId:6,tocIndex:5},{value:"sparklineLineStroke",paraId:6,tocIndex:5},{value:"适用于折线图，线条颜色",paraId:6,tocIndex:5},{value:"string",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineLineStrokeOpacity",paraId:6,tocIndex:5},{value:"适用于折线图，线条透明度",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineLineLineDash",paraId:6,tocIndex:5},{value:"适用于折线图，线条的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:5},{value:"[number,number]",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineAreaFill",paraId:6,tocIndex:5},{value:"适用于折线图，填充区域颜色",paraId:6,tocIndex:5},{value:"string",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineAreaFillOpacity",paraId:6,tocIndex:5},{value:"适用于折线图，填充区域透明度",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineColumnFill",paraId:6,tocIndex:5},{value:"适用于直方图，条形颜色",paraId:6,tocIndex:5},{value:"string",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineColumnFillOpacity",paraId:6,tocIndex:5},{value:"适用于直方图，条形透明度",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"-",paraId:6,tocIndex:5},{value:"sparklineIsGroup",paraId:6,tocIndex:5},{value:"适用于直方图，是否分组显示",paraId:6,tocIndex:5},{value:"boolean",paraId:6,tocIndex:5},{value:"false",paraId:6,tocIndex:5},{value:"sparklineSpacing",paraId:6,tocIndex:5},{value:"适用于直方图，分组直方的间距",paraId:6,tocIndex:5},{value:"number",paraId:6,tocIndex:5},{value:"0",paraId:6,tocIndex:5},{value:"属性",paraId:7,tocIndex:6},{value:"描述",paraId:7,tocIndex:6},{value:"类型",paraId:7,tocIndex:6},{value:"valuechange",paraId:7,tocIndex:6},{value:"选区发生变化时触发，通过事件监听",paraId:7,tocIndex:6},{value:"function(e)",paraId:7,tocIndex:6},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  // 开启 X 轴缩略轴\n  .slider('x', {});\n\nchart.on('afterrender', () => {\n  const { canvas } = chart.getContext();\n  const { document } = canvas;\n  document.querySelector('.slider').addEventListener('valuechange', (evt) => {\n    console.info(evt.detail);\n  });\n});\n\nchart.render();\n",paraId:8,tocIndex:6}]},19093:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(9687);const t=[{value:"用于一句话概要说明图表要展示的数据，图表的标题是比较常用的组件，支持标题和副标题，以及他们的样式和位置设置。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.title('This is the title of chart.');\n\n// ...\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"标题 title 的设置，最简单的设置方式，就是直接指定一个字符串作为标题，这个时候使用默认的样式和位置。当然也可以使用完整的配置项去做一些灵活的自定义。",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"size",paraId:3,tocIndex:1},{value:"标题的高度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"36",paraId:3,tocIndex:1},{value:"title",paraId:3,tocIndex:1},{value:"标题文本",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitle",paraId:3,tocIndex:1},{value:"副标题文本",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"align",paraId:3,tocIndex:1},{value:"标题的对齐方式",paraId:3,tocIndex:1},{value:"left",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"center",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"right",paraId:3,tocIndex:1},{value:"left",paraId:3,tocIndex:1},{value:"spacing",paraId:3,tocIndex:1},{value:"主标题、副标题之间的上下间距",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"2",paraId:3,tocIndex:1},{value:"titleFontSize",paraId:3,tocIndex:1},{value:"标题文字大小",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"titleFontFamily",paraId:3,tocIndex:1},{value:"标题文字字体",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"titleFontWeight",paraId:3,tocIndex:1},{value:"标题字体粗细",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"titleFill",paraId:3,tocIndex:1},{value:"标题字体颜色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"titleFillOpacity",paraId:3,tocIndex:1},{value:"标题字体颜色透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"titleStroke",paraId:3,tocIndex:1},{value:"标题字体描边颜色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"titleStrokeOpacity",paraId:3,tocIndex:1},{value:"标题字体描边颜色透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitleFontSize",paraId:3,tocIndex:1},{value:"副标题文字大小",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitleFontFamily",paraId:3,tocIndex:1},{value:"副标题文字字体",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitleFontWeight",paraId:3,tocIndex:1},{value:"副标题字体粗细",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitleFill",paraId:3,tocIndex:1},{value:"副标题字体颜色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"subtitleFillOpacity",paraId:3,tocIndex:1},{value:"副标题字体颜色透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"subtitleStroke",paraId:3,tocIndex:1},{value:"副标题字体描边颜色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"subtitleStrokeOpacity",paraId:3,tocIndex:1},{value:"副标题字体描边颜色透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1}]},4062:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(40549);const t=[{value:"提示（Tooltip）可以提供关于数据点的额外信息，帮助用户更好地理解和解释可视化。",paraId:0},{value:"chart\n  .line()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  })\n  .encode('x', (d) => new Date(d.Date))\n  .encode('y', 'Close')\n  .encode('color', 'Symbol')\n  .encode('key', 'Symbol')\n  .scale('y', { type: 'log' })\n  .tooltip({\n    title: 'Date',\n    items: [{ channel: 'y' }],\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"title",paraId:2,tocIndex:1},{value:"标题，支持一段文本或 innerHTML 字符串",paraId:2,tocIndex:1},{value:"TooltipItem",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"items",paraId:2,tocIndex:1},{value:"定义每一个提示项的配置",paraId:2,tocIndex:1},{value:"TooltipItem",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"type TooltipItem =\n  | string\n  | false\n  | {\n      name?: string;\n      color?: string;\n      channel?: string;\n      field?: string;\n      value?: string;\n      // 格式化 tooltip item 的值（支持 d3-format 对应的字符串）\n      valueFormatter?: string | ((d: any) => string);\n    };\n",paraId:3,tocIndex:1},{value:"mark.tooltip({\n  title: 'name', // 字段\n});\n\nmark.tooltip({\n  title: (d) => (d.value > 100 ? d.name : d.age), // transform\n});\n",paraId:4,tocIndex:3},{value:"// 单个字段\nmark.tooltip('a');\nmark.tooltip({ field: 'a' });\n\n// 单个通道\nmark.tooltip({ channel: 'y' });\n\n// transform\nmark.tooltip((d) => (d.value > 100 ? d.name : d.age));\n\n// 格式化\nmark.tooltip({ channel: 'y', valueFormatter: (d) => d.toFixed(1) });\n\n// d3-format 支持的字符\n// https://github.com/d3/d3-format\nmark.tooltip({ channel: 'y', valueFormatter: '~s' });\n\n// 完整信息\nmark.tooltip({ name: 'name', color: 'red', value: 'color' });\n\n// 回调\nmark.tooltip(\n  (\n    d, // 每一个数据项\n    index, // 索引\n    data, // 完整数据\n    column, // 通道\n  ) => ({\n    value: `${column.y.value[index]} - ${column.y1.value[index]}`,\n  }),\n);\n\n// 多个 item\nmark.tooltip({ channel: 'y' }).tooltip({ channel: 'x' });\n",paraId:5,tocIndex:4},{value:"mark.tooltip({\n  title: 'a',\n  items: [{ channel: 'x' }, { channel: 'y' }],\n});\n",paraId:6,tocIndex:5}]},77556:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(67009);const t=[{value:"根据字段分片数据，利用圆形划分空间，然就进行各个分面的数据可视化。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst M = [\n  'Jan.',\n  'Feb.',\n  'Mar.',\n  'Apr.',\n  'May',\n  'Jun.',\n  'Jul.',\n  'Aug.',\n  'Sept.',\n  'Oct.',\n  'Nov.',\n  'Dec.',\n];\nconst N = ['A', 'B', 'C', 'D'];\nconst data = M.flatMap((month) =>\n  N.map((name) => ({\n    month,\n    name,\n    value: Math.random(),\n  })),\n);\n\nconst chart = new Chart({\n  container: 'container',\n  width: 480,\n  height: 480,\n});\n\nconst facetCircle = chart.facetCircle().data(data).encode('position', 'month');\n\nfacetCircle\n  .interval()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('color', 'name');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"facetCircle 的底层实现和 mark 一致，所以在配置上有很多是一样的。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"通道设置，见下表",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"padding 大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"facetCircle",paraId:9,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:9,tocIndex:1},{value:"chart.facetCircle().data([1, 2, 3]).encode('position', 'month');\n",paraId:10,tocIndex:1},{value:"对于 facetCircle 有自己独特的 encode 通道。",paraId:11,tocIndex:2},{value:"通道",paraId:12,tocIndex:2},{value:"描述",paraId:12,tocIndex:2},{value:"类型",paraId:12,tocIndex:2},{value:"默认值",paraId:12,tocIndex:2},{value:"position",paraId:12,tocIndex:2},{value:"按照 position 对应的数据去划分圆形空间中的角度",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2}]},83938:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(40813);const t=[{value:"用 row、column 字段维值对空间和数据进行划分，在各个子空间可视化数据片段。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 928,\n  height: 270,\n  paddingBottom: 50,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .attr('paddingBottom', 50)\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/anscombe.json',\n  })\n  .encode('x', 'series');\n\nfacetRect\n  .point()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .style('stroke', '#000')\n  .attr('inset', 10);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"facetRect 的底层实现和 mark 一致，所以在配置上有很多是一样的。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"通道设置，见下表",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"padding 大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"facetRect",paraId:9,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:9,tocIndex:1},{value:"chart.facetRect().data([1, 2, 3]).encode('x', 'type');\n",paraId:10,tocIndex:1},{value:"对于 facetRect 有自己独特的 encode 通道。",paraId:11,tocIndex:2},{value:"通道",paraId:12,tocIndex:2},{value:"描述",paraId:12,tocIndex:2},{value:"类型",paraId:12,tocIndex:2},{value:"默认值",paraId:12,tocIndex:2},{value:"x",paraId:12,tocIndex:2},{value:"指定 x 方向上分面的字段，可以是常年、字段名、回调函数",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2},{value:"y",paraId:12,tocIndex:2},{value:"指定 x 方向上分面的字段，可以是常年、字段名、回调函数",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:" | ",paraId:12,tocIndex:2},{value:"(d, idx, arr) => any",paraId:12,tocIndex:2},{value:"facetRect 是不是和 repeatMatrix 功能上重复？",paraId:13,tocIndex:3},{value:"facetRect 是通过 x, y encode 字段去划分空间，比如指定 ",paraId:14,tocIndex:3},{value:"encode('x', 'sex')",paraId:14,tocIndex:3},{value:"，那么就会根据性别的枚举值，在 x 方向均分为 2 个分面。而 repeatMatrix 是根据字段的个数来分面空间的。",paraId:14,tocIndex:3}]},74669:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(22716);const t=[{value:"根据字段的数量对空间进行划分，然后利用数据在这些子空间可视化。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 300,\n  height: 720,\n  paddingLeft: 50,\n  paddingBottom: 60,\n});\n\nconst repeatMatrix = chart\n  .repeatMatrix()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/weather.json',\n    transform: [\n      {\n        type: 'map',\n        callback: ({ date, ...d }) => ({\n          ...d,\n          date: new Date(date).getMonth() + '',\n        }),\n      },\n    ],\n  })\n  .encode('y', ['temp_max', 'precipitation', 'wind'])\n  .encode('x', 'date');\n\nrepeatMatrix\n  .line()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('color', 'location')\n  .scale('y', { zero: true });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"repeatMatrix 的底层实现和 mark 一致，所以在配置上有很多是一样的。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"data",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"Data",paraId:5,tocIndex:1},{value:"encode",paraId:5,tocIndex:1},{value:"通道设置，见下表",paraId:5,tocIndex:1},{value:"padding",paraId:5,tocIndex:1},{value:"padding 大小",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"paddingBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"margin",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginLeft",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginRight",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginTop",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"marginBottom",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"0",paraId:5,tocIndex:1},{value:"title",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"title",paraId:7,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"scale",paraId:5,tocIndex:1},{value:"参考 ",paraId:5,tocIndex:1},{value:"scale",paraId:8,tocIndex:1},{value:" 相关介绍",paraId:5,tocIndex:1},{value:"repeatMatrix",paraId:9,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:9,tocIndex:1},{value:"chart.repeatMatrix().data([1, 2, 3]).encode('x', ['f1', 'f2', 'f3']);\n",paraId:10,tocIndex:1},{value:"对于 repeatMatrix 有自己独特的 encode 通道。",paraId:11,tocIndex:2},{value:"通道",paraId:12,tocIndex:2},{value:"描述",paraId:12,tocIndex:2},{value:"类型",paraId:12,tocIndex:2},{value:"默认值",paraId:12,tocIndex:2},{value:"x",paraId:12,tocIndex:2},{value:"指定 x 方向上字段列表，用于 x 方向空间分片",paraId:12,tocIndex:2},{value:"string[]",paraId:12,tocIndex:2},{value:"y",paraId:12,tocIndex:2},{value:"指定 y 方向上字段列表，用于 y 方向空间分片",paraId:12,tocIndex:2},{value:"string[]",paraId:12,tocIndex:2}]},49572:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(34759);const t=[{value:"使用类似 css flex 的布局方式来划分空间区域，常用于多图表对比的视图。",paraId:0},{value:"提供一个两层 flex 容器布局的画布。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n});\n\nconst flex = chart\n  .spaceFlex()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .attr('direction', 'col')\n  .attr('ratio', [1, 2]);\n\nflex\n  .interval()\n  .attr('paddingBottom', 0)\n  .attr('paddingRight', 300)\n  .transform({ type: 'groupX', y: 'max' })\n  .axis('x', false)\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', 'temp_max')\n  .encode('color', 'steelblue');\n\nflex\n  .spaceFlex()\n  .attr('ratio', [2, 1])\n  .call((node) =>\n    node\n      .cell()\n      .attr('paddingRight', 0)\n      .attr('paddingBottom', 50)\n      .transform({ type: 'group', color: 'max' })\n      .encode('x', (d) => new Date(d.date).getUTCDate())\n      .encode('y', (d) => new Date(d.date).getUTCMonth())\n      .encode('color', 'temp_max')\n      .style('inset', 0.5)\n      .axis('x', { title: 'Date' })\n      .axis('y', { title: 'Month' })\n      .legend({ color: false })\n      .scale('color', {\n        type: 'sequential',\n        palette: 'gnBu',\n      }),\n  )\n  .call((node) =>\n    node\n      .interval()\n      .attr('paddingBottom', 50)\n      .transform({ type: 'groupX', y: 'max' })\n      .coordinate({ transform: [{ type: 'transpose' }] });\n      .axis('x', false)\n      .encode('x', (d) => new Date(d.date).getUTCMonth())\n      .encode('y', 'temp_max')\n      .encode('color', 'steelblue'),\n  );\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"当前 flex 主要提供了最核心的两个配置，便于空间分片。",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"ratio",paraId:6,tocIndex:1},{value:"设置 flex 容器中的子元素占用空间的比例",paraId:6,tocIndex:1},{value:"number[]",paraId:6,tocIndex:1},{value:"均分",paraId:6,tocIndex:1},{value:"direction",paraId:6,tocIndex:1},{value:"设置 flex 划分空间的方向",paraId:6,tocIndex:1},{value:"col",paraId:6,tocIndex:1},{value:" | ",paraId:6,tocIndex:1},{value:"row",paraId:6,tocIndex:1},{value:"row",paraId:6,tocIndex:1},{value:"data",paraId:6,tocIndex:1},{value:"flex 容器的数据",paraId:6,tocIndex:1},{value:"Data",paraId:6,tocIndex:1},{value:"spaceFlex",paraId:7,tocIndex:1},{value:" 对应的配置都可以使用 API 进行设置，例如：",paraId:7,tocIndex:1},{value:"chart.spaceFlex().attr('ratio', [1, 2, 3]).attr('direction', 'col');\n",paraId:8,tocIndex:1},{value:"怎么使用 spaceFlex 定义复杂的图表布局？",paraId:9,tocIndex:2},{value:"spaceFlex 提供了按照比例横向纵向划分空间，对于复杂的布局，理论上都可以通过不断拆分容器层级结构实现。",paraId:10,tocIndex:2}]},35258:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(44707);const t=[{value:"对空间不做任何划分，多个视图使用同一个空间区域，常用于视图的层叠。",paraId:0},{value:"绘制一个常见的柱饼结合的图表。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nconst layer = chart.spaceLayer().data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  format: 'csv',\n});\n\n// 柱图\nlayer\n  .interval()\n  .attr('paddingLeft', 50)\n  .transform({ type: 'sortX', reverse: true, by: 'y' })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\n// 饼图\nlayer\n  .interval()\n  .attr('paddingLeft', 400)\n  .attr('paddingBottom', 200)\n  .coordinate({ type: 'theta' })\n  .transform({ type: 'stackY' })\n  .legend(false)\n  .encode('y', 'frequency')\n  .encode('color', 'letter');\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"无额外配置项。",paraId:5,tocIndex:1}]},57145:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(18763);const t=[{value:"在不同视图之间执行连续的过渡动画。通过 ",paraId:0},{value:"mark.key",paraId:0},{value:" 和 ",paraId:0},{value:"mark.groupKey",paraId:0},{value:" 去关联图形。",paraId:0},{value:"fetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/fbe4a8c1-ce04-4ba3-912a-0b26d6965333.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const chart = new Chart({\n      container: 'container',\n      paddingTop: 60,\n      paddingLeft: 100,\n    });\n\n    const keyframe = chart\n      .timingKeyframe()\n      .attr('direction', 'alternate')\n      .attr('iterationCount', 4);\n\n    // 条形图\n    keyframe\n      .interval()\n      .data(data)\n      .transform({ type: 'groupX', y: 'mean' })\n      .encode('x', 'gender')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('key', 'gender'); // 指定 key\n\n    // 散点图\n    keyframe\n      .point()\n      .data(data)\n      .encode('x', 'height')\n      .encode('y', 'weight')\n      .encode('color', 'gender')\n      .encode('groupKey', 'gender') // 指定合并的条的 key\n      .encode('shape', 'point');\n\n    chart.render();\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"duration",paraId:2,tocIndex:1},{value:"每一视图的动画过渡时间",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1000",paraId:2,tocIndex:1},{value:"iterationCount",paraId:2,tocIndex:1},{value:"'infinite' | number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1},{value:"direction",paraId:2,tocIndex:1},{value:"'normal' | 'reverse' | 'alternate' | 'reverse-alternate'",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"'normal'",paraId:2,tocIndex:1},{value:"children",paraId:2,tocIndex:1},{value:"执行动画的视图节点",paraId:2,tocIndex:1},{value:"Node[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1}]},53889:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(63039);const t=[{value:"在 2D 笛卡尔坐标系基础上，通过增加 Z 轴扩展而来。",paraId:0},{value:"示例",paraId:1},{value:"import { Runtime, corelib, extend } from '@antv/g2';\nimport { threedlib } from '@antv/g2-extension-3d';\n\nconst Chart = extend(Runtime, { ...corelib(), ...threedlib() });\n\nconst chart = new Chart({\n  container: 'container',\n  renderer,\n  depth: 400,\n});\n\nchart.coordinate({\n  type: 'cartesian3D',\n});\n\nchart\n  .point3D()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Miles_per_Gallon')\n  .encode('z', 'Weight_in_lbs')\n  .encode('size', 'Origin')\n  .encode('color', 'Cylinders')\n  .encode('shape', 'cube')\n  .scale('x', { nice: true })\n  .scale('y', { nice: true })\n  .scale('z', { nice: true })\n  .legend(false)\n  .axis('x', { gridLineWidth: 2 })\n  .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n  .axis('z', { gridLineWidth: 2 });\n\nchart.render();\n",paraId:2,tocIndex:0}]},66277:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(98326);const t=[{value:"鱼眼坐标系变换对输入的维度应用笛卡尔鱼眼效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart();\n\nchart.coordinate({\n  transform: [{ type: 'fisheye', focusX: 0.5, focusY: 0.5 }],\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  })\n  .encode('x', 'GDP')\n  .encode('y', 'LifeExpectancy')\n  .encode('size', 'Population')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .style('fillOpacity', 0.3)\n  .style('lineWidth', 1)\n  .scale('size', {\n    type: 'log',\n    range: [4, 20],\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"参数",paraId:2,tocIndex:1},{value:"说明",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"focusX",paraId:2,tocIndex:1},{value:"鱼眼变换中心点 x 方向位置",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"focusY",paraId:2,tocIndex:1},{value:"鱼眼变换中心点 y 方向位置",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"distortionX",paraId:2,tocIndex:1},{value:"鱼眼变换 x 方向畸变大小",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"2",paraId:2,tocIndex:1},{value:"distortionY",paraId:2,tocIndex:1},{value:"鱼眼变换 y 方向畸变大小",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"2",paraId:2,tocIndex:1},{value:"visual",paraId:2,tocIndex:1},{value:"focusX 和 focusY 的值是否是视觉坐标点",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1}]},65889:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(35059);const t=[{value:"Parallel 是平行坐标系变换，将笛卡尔直角坐标系坐标变换为平行坐标系下的坐标。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  width: 720,\n  paddingLeft: 60,\n});\n\nchart.coordinate({ type: 'parallel' });\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/96cd81b5-54a4-4fe8-b778-502b2114df58.json',\n    callback: (d) => Object.assign(d, { year: new Date(d.year) }),\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => defined(d.Horsepower) && defined(d.Miles_per_Gallon),\n      },\n    ],\n  })\n  .encode('position', [\n    'Cylinders',\n    'Displacement',\n    'Weight_in_lbs',\n    'Horsepower',\n    'Acceleration',\n    'Miles_per_Gallon',\n    'Year',\n  ])\n  .encode('color', 'Origin')\n  .encode('size', 1.01)\n  .style('strokeOpacity', 0.3)\n  .scale('position', { nice: true })\n  .scale('position1', { nice: true })\n  .scale('position2', { nice: true })\n  .scale('position3', { nice: true })\n  .scale('position4', { nice: true })\n  .scale('position5', { nice: true })\n  .axis('position', { zIndex: 1 })\n  .axis('position1', { zIndex: 1 })\n  .axis('position2', { zIndex: 1 })\n  .axis('position3', { zIndex: 1 })\n  .axis('position4', { zIndex: 1 })\n  .axis('position5', { zIndex: 1 });\n\nchart.render();\n",paraId:1,tocIndex:0}]},23823:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(29529);const t=[{value:"Polar 是极坐标系变换，将笛卡尔直角坐标系坐标变换为极坐标系下的坐标，常用于玫瑰图和柱状图之间的转换。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n});\n\nchart.coordinate({ type: 'polar' });\n\nchart\n  .interval()\n  .transform({ type: 'groupX', y: 'sum' })\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n  })\n  .encode('x', 'year')\n  .encode('y', 'people')\n  .scale('y', { type: 'sqrt' })\n  .axis('y', {\n    labelFormatter: '~s',\n    tickCount: 5,\n    tickFilter: (d, i) => i !== 0,\n    direction: 'right',\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"参数",paraId:2,tocIndex:1},{value:"说明",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"startAngle",paraId:2,tocIndex:1},{value:"极坐标系起始弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"-Math.PI / 2",paraId:2,tocIndex:1},{value:"endAngle",paraId:2,tocIndex:1},{value:"极坐标系结束弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"(Math.PI \\* 3) / 2",paraId:2,tocIndex:1},{value:"innerRadius",paraId:2,tocIndex:1},{value:"极坐标内半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"outerRadius",paraId:2,tocIndex:1},{value:"极坐标半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1}]},37672:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(14161);const t=[{value:"Radial 是一种特殊的极坐标系，常用于绘制玉钰图。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 500,\n});\n\nchart.coordinate({\n  type: 'radial',\n  innerRadius: 0.1,\n  endAngle: Math.PI,\n});\n\nchart\n  .interval()\n  .data([\n    { question: '问题 1', percent: 0.21 },\n    { question: '问题 2', percent: 0.4 },\n    { question: '问题 3', percent: 0.49 },\n    { question: '问题 4', percent: 0.52 },\n    { question: '问题 5', percent: 0.53 },\n    { question: '问题 6', percent: 0.84 },\n    { question: '问题 7', percent: 1.0 },\n    { question: '问题 8', percent: 1.2 },\n  ])\n  .encode('x', 'question')\n  .encode('y', 'percent')\n  .encode('color', 'percent')\n  .style('stroke', 'white')\n  .scale('color', {\n    range: '#BAE7FF-#1890FF-#0050B3',\n  })\n  .legend({\n    color: {\n      length: 400,\n      position: 'bottom',\n      layout: { justifyContent: 'center' },\n    },\n  })\n  .axis('y', {\n    tickFilter: (d, i) => i !== 0,\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"参数",paraId:2,tocIndex:1},{value:"说明",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"startAngle",paraId:2,tocIndex:1},{value:"极坐标系起始弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"-Math.PI / 2",paraId:2,tocIndex:1},{value:"endAngle",paraId:2,tocIndex:1},{value:"极坐标系结束弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"(Math.PI \\* 3) / 2",paraId:2,tocIndex:1},{value:"innerRadius",paraId:2,tocIndex:1},{value:"极坐标内半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"outerRadius",paraId:2,tocIndex:1},{value:"极坐标半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1}]},8722:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(31550);const t=[{value:"Theta 是一种特殊的极坐标系，半径长度固定，仅将数据映射到角度，常用于饼图和柱状图之间的转换。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n});\n\nchart.coordinate({ type: 'theta' });\n\nchart\n  .interval()\n  .transform({ type: 'stackY' })\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/79fd9317-d2af-4bc4-90fa-9d07357398fd.csv',\n  })\n  .encode('y', 'value')\n  .encode('color', 'name')\n  .style('stroke', 'white')\n  .scale('color', {\n    palette: 'spectral',\n    offset: (t) => t * 0.8 + 0.1,\n  })\n  .legend(false)\n  .label({\n    text: 'name',\n    radius: 0.8,\n    style: {\n      fontSize: 10,\n      fontWeight: 'bold',\n    },\n  })\n  .label({\n    text: (d, i, data) => (i < data.length - 3 ? d.value : ''),\n    radius: 0.8,\n    style: {\n      fontSize: 9,\n      dy: 8,\n    },\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"参数",paraId:2,tocIndex:1},{value:"说明",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"startAngle",paraId:2,tocIndex:1},{value:"极坐标系起始弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"-Math.PI / 2",paraId:2,tocIndex:1},{value:"endAngle",paraId:2,tocIndex:1},{value:"极坐标系结束弧度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"(Math.PI \\* 3) / 2",paraId:2,tocIndex:1},{value:"innerRadius",paraId:2,tocIndex:1},{value:"极坐标内半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"outerRadius",paraId:2,tocIndex:1},{value:"极坐标半径，范围 0-1",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1}]},29829:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(62083);const t=[{value:"Transpose 是坐标系的转置变换，将 (x, y) 变换成 (y, x)，常用于条形图和柱状图之间的转换。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n    format: 'csv',\n  })\n  .transform({\n    type: 'sortX',\n    reverse: true,\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'steelblue')\n  .axis('y', { labelFormatter: '.0%' })\n  .label({\n    text: 'frequency',\n    formatter: '.1%',\n    style: {\n      textAnchor: (d) => (+d.frequency > 0.008 ? 'right' : 'start'),\n      fill: (d) => (+d.frequency > 0.008 ? '#fff' : '#000'),\n      dx: (d) => (+d.frequency > 0.008 ? -5 : 5),\n    },\n  });\n\nchart.render();\n",paraId:1,tocIndex:0}]},50120:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(51686);const t=[{value:"使用自定义函数的方式来进行数据的加工和处理，这是最为灵活的一种方式。",paraId:0},{value:"chart\n  .data({\n    type: 'custom',\n    callback: (data) => {\n      /* your code */\n      return [];\n    }\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"callback",paraId:2,tocIndex:1},{value:"函数，传入当前数据，输出处理后的数据",paraId:2,tocIndex:1},{value:"(data: any) => any",paraId:2,tocIndex:1},{value:"(d) => d",paraId:2,tocIndex:1}]},80346:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(40317);const t=[{value:"EMA（Exponential Moving Average）是一种常用的平滑算法，用于计算数据的指数移动平均值。它通过给较近的数据赋予权重来平滑数据，从而减少噪声和波动。",paraId:0},{value:"在模型训练中，可以使用EMA来平滑数据，观察数据变化趋势。",paraId:1},{value:"如下公式显示，α越大平滑效果更明显",paraId:2},{value:"$EMA_t =  (1 - \\alpha) \\cdot P_t +  \\alpha \\cdot EMA_{t-1}$",paraId:3},{value:"具体细节可参考",paraId:4},{value:"文档",paraId:4},{value:"const data = [\n  { x: 1, y: 2 },\n  { x: 4, y: 5 },\n  { x: 5, y: 8 },\n];\n\nchart\n  .data({\n    type: 'line',\n    value: data,\n    transform: [\n      {\n        type: 'ema',\n        field: 'y',\n        alpha: 0.6,\n        as: 'other'\n      },\n    ],\n  });\n",paraId:5,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:6,tocIndex:0},{value:'[\n  {\n    "x": 1,\n    "y": 2,\n    "other": 2,\n  },\n  {\n    "x": 4,\n    "y": 3.2,\n    "other": 3.2,\n  },\n  {\n    "x": 5,\n    "y": 5.12,\n    "other": 5.12,\n  }\n];\n',paraId:7,tocIndex:0},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'view',\n    children: [\n      {\n        type: 'line',\n        data: {\n          type: 'fetch',\n          value: 'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n          transform: [\n            {\n              type: 'ema',\n              field: 'close',\n              alpha: 0.8,\n            },\n          ],\n        },\n      },\n      {\n        type: 'line',\n        style: {\n          opacity: 0.3,\n        },\n        data: {\n          type: 'fetch',\n          value: 'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n        },\n      },\n    ],\n    encode: {\n      x: 'date',\n      y: 'close',\n    },\n  });\n\n  return chart.render().then((chart) => chart.getContainer());\n})();\n",paraId:8,tocIndex:1},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"field",paraId:9,tocIndex:2},{value:"需要处理的字段列表",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2},{value:"alpha",paraId:9,tocIndex:2},{value:"平滑因子,范围在0-1",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:"0.6",paraId:9,tocIndex:2},{value:"as",paraId:9,tocIndex:2},{value:"存储的字段, 默认是field传入的值，可自定义字段避免覆盖原字段数据",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:"y",paraId:9,tocIndex:2}]},25850:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(56908);const t=[{value:"Load data from a ",paraId:0},{value:"url",paraId:0},{value:" specified by the ",paraId:0},{value:"value",paraId:0},{value:" option. G2 will infer the data type from the file extension by default. The format of input data can also be specified by the ",paraId:0},{value:"format",paraId:0},{value:" option.",paraId:0},{value:"// Spec\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n});\n",paraId:1},{value:"// API\nchart.data({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n  },\n});\n",paraId:2},{value:"(() => {\n  const chart = new G2.Chart();\n\n  chart.options({\n    type: 'point',\n    data: {\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/antvdemo/assets/data/scatter.json',\n    },\n    encode: {\n      x: 'weight',\n      y: 'height',\n      color: 'gender',\n    },\n  });\n\n  return chart.render().then((chart) => chart.getContainer());\n})();\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"value",paraId:4,tocIndex:1},{value:"requested url",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"format",paraId:4,tocIndex:1},{value:"data format",paraId:4,tocIndex:1},{value:"'json' | 'csv'",paraId:4,tocIndex:1},{value:"json",paraId:4,tocIndex:1},{value:"delimiter",paraId:4,tocIndex:1},{value:"delimiter for parsing for csv data",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:",",paraId:4,tocIndex:1},{value:"autoType",paraId:4,tocIndex:1},{value:"wether infers the types of values for csv data or not",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"true",paraId:4,tocIndex:1},{value:"transform",paraId:4,tocIndex:1},{value:"data transform for loaded data",paraId:4,tocIndex:1},{value:"DataTransform",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1}]},94659:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(40420);const t=[{value:"对数据进行指定条件的过滤。类似于 ",paraId:0},{value:"Array.prototypo.filter",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.a < 3,\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"callback",paraId:4,tocIndex:1},{value:"函数，传入当前数据，输出处理后的数据",paraId:4,tocIndex:1},{value:"(d: any, idx: number, arr: any[]) => boolean",paraId:4,tocIndex:1},{value:"(d) => d !== undefined && d !== null && !Number.isNaN(d)",paraId:4,tocIndex:1}]},23058:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(73442);const t=[{value:"将多个字段展开成按照指定的 key value 组织形式。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'fold',\n      fields: ['a', 'b'],\n      key: 'key',\n      value: 'value',\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3, key: 'a', value: 1 },\n  { a: 1, b: 2, c: 3, key: 'b', value: 2 },\n  { a: 4, b: 5, c: 6, key: 'a', value: 4 },\n  { a: 4, b: 5, c: 6, key: 'b', value: 5 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"fields",paraId:4,tocIndex:1},{value:"需要展开的字段列表",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"key",paraId:4,tocIndex:1},{value:"展开之后，字段枚举值对应字段名",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"key",paraId:4,tocIndex:1},{value:"value",paraId:4,tocIndex:1},{value:"展开之后，数据值对应字段名",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"value",paraId:4,tocIndex:1}]},47767:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(16125);const t=[{value:"使用内联数据。",paraId:0},{value:"// 完整写法\nchart.data({\n  type: 'inline',\n  value: [\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ],\n});\n\n// 语法糖\nchart.data([\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n]);\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"value",paraId:2,tocIndex:1},{value:"具体的 object 数组数据",paraId:2,tocIndex:1},{value:"object[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"transform",paraId:2,tocIndex:1},{value:"针对数据 inline 数据进行变换",paraId:2,tocIndex:1},{value:"DataTransform",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1}]},25609:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71232);const t=[{value:"类似 SQL 的方式，将两份数据连接到一起。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nconst joinData = [\n  { c: 1, d: 2, e: 3 },\n  { c: 4, d: 5, e: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'join',\n        join: joinData,\n        on: ['a', 'c'],\n        select: ['d', 'e'],\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3, d: 2, e: 3 },\n  { a: 4, b: 5, c: 6, d: 5, e: 6 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"join",paraId:4,tocIndex:1},{value:"需要连接的数据源",paraId:4,tocIndex:1},{value:"object[]",paraId:4,tocIndex:1},{value:"on",paraId:4,tocIndex:1},{value:"两个数据源连接的字段",paraId:4,tocIndex:1},{value:"[string | ((d: any) => string), string | ((d: any) => string)]",paraId:4,tocIndex:1},{value:"select",paraId:4,tocIndex:1},{value:"从被连接的数据源中获取指定字段的数据",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"as",paraId:4,tocIndex:1},{value:"为 ",paraId:4,tocIndex:1},{value:"select",paraId:4,tocIndex:1},{value:" 出来的字段重命名",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"不做重命名",paraId:4,tocIndex:1},{value:"unknown",paraId:4,tocIndex:1},{value:"如果没有匹配到可连接数据，指定一个默认值",paraId:4,tocIndex:1},{value:"any",paraId:4,tocIndex:1},{value:"NaN",paraId:4,tocIndex:1}]},75195:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(5095);const t=[{value:"对指定的数据，进行核密度算法（Kernel Density Estimation）处理，底层使用开源库 ",paraId:0},{value:"pdfast",paraId:0},{value:"。",paraId:0},{value:"chart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'kde',\n      field: 'y',\n      groupBy: ['x', 'species'],\n      as: ['y', 'size'],\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据会增加 y、size 字段，均为数字数组。",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"field",paraId:3,tocIndex:1},{value:"进行核密度算法的数据字段",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"groupBy",paraId:3,tocIndex:1},{value:"对数据进行分组的分组字段，可以指定多个",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"as",paraId:3,tocIndex:1},{value:"进行 KDE 处理之后，存储的字段",paraId:3,tocIndex:1},{value:"[number, number]",paraId:3,tocIndex:1},{value:"['y', 'size']",paraId:3,tocIndex:1},{value:"min",paraId:3,tocIndex:1},{value:"指定处理范围的最小值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"数据最小值",paraId:3,tocIndex:1},{value:"max",paraId:3,tocIndex:1},{value:"指定处理范围的最大值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"数据最小值",paraId:3,tocIndex:1},{value:"size",paraId:3,tocIndex:1},{value:"算法最终生成数据的条数",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"10",paraId:3,tocIndex:1},{value:"width",paraId:3,tocIndex:1},{value:"确定一个元素左右影响多少点，类似于 bandWidth",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"2",paraId:3,tocIndex:1}]},85322:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(68259);const t=[{value:"将当前数据变换（Data Transform）流中的片面数据打印到控制台，用于开发者调试数据处理过程。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      { type: 'slice', start: 1 },\n      { type: 'log' },\n      { type: 'filter', callback: (d) => d.a < 3 },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述 ",paraId:2,tocIndex:0},{value:"log",paraId:2,tocIndex:0},{value:" 加入之后，会打印出经过 ",paraId:2,tocIndex:0},{value:"slice",paraId:2,tocIndex:0},{value:" 处理之后的数据，并且这个数据会作为下一个 transform ",paraId:2,tocIndex:0},{value:"filter",paraId:2,tocIndex:0},{value:" 的输入。",paraId:2,tocIndex:0}]},80901:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(26520);const t=[{value:"对数据进行过滤。类似于 ",paraId:0},{value:"Array.prototypo.map",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'map',\n        callback: (datum, idx) => { ...datum, idx },\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2, c: 3, idx: 0 },\n  { a: 4, b: 5, c: 6, idx: 1 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"callback",paraId:4,tocIndex:1},{value:"函数，传入当前数据，输出处理后的数据",paraId:4,tocIndex:1},{value:"(datum: any) => any",paraId:4,tocIndex:1},{value:"(d) => d",paraId:4,tocIndex:1}]},1535:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(94308);const t=[{value:"G2 支持多种数据来源和数据变换，以应对不同的数据源来源。一个完整的数据由两部分构成：",paraId:0},{value:"connector - 获得数据的方式",paraId:1},{value:"transform - 预处理数据",paraId:1},{value:"const data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [{ type: 'sort', callback: (a, b) => a.sold - b.sold }],\n});\n",paraId:2,tocIndex:0}]},39717:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(7950);const t=[{value:"从数据中，按照字段抽取一个数据子集。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'pick',\n        fields: ['a', 'b'],\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 1, b: 2 },\n  { a: 4, b: 5 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"fields",paraId:4,tocIndex:1},{value:"抽取的数据字段",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1}]},82827:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(14193);const t=[{value:"重命名数据中的一些字段。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'rename',\n        a: 'x',\n        b: 'y'\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { x: 1, y: 2, c: 3 },\n  { x: 4, y: 5, c: 6 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"[key]",paraId:4,tocIndex:1},{value:"重命名数据中的字段 [key] 为 指定的名称",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1}]},63486:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70480);const t=[{value:"对数据进行分片，获得子集。类似于 ",paraId:0},{value:"Array.prototypo.slice",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart\n  .data({\n    type: 'inline',\n    value: data,\n    transform: [\n      {\n        type: 'slice',\n        start: 1,\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 4, b: 5, c: 6 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"start",paraId:4,tocIndex:1},{value:"分片的起始索引",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"end",paraId:4,tocIndex:1},{value:"分片的结束索引",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"arr.length - 1",paraId:4,tocIndex:1}]},43453:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(42376);const t=[{value:"对数据按照指定的 callback 进行排序。类似于 ",paraId:0},{value:"Array.prototypo.sort",paraId:0},{value:"。",paraId:0},{value:"const data = [\n  { a: 1, b: 2, c: 3 },\n  { a: 4, b: 5, c: 6 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'sort',\n      callback: (a, b) => b.a - a.a,\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"上述例子处理之后，数据变成为：",paraId:2,tocIndex:0},{value:"[\n  { a: 4, b: 5, c: 6 },\n  { a: 1, b: 2, c: 3 },\n];\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"callback",paraId:4,tocIndex:1},{value:"Array.sort 的 comparator，返回 1，0，-1 代表 > = <",paraId:4,tocIndex:1},{value:"(a: any, b: any) => number",paraId:4,tocIndex:1},{value:"(a, b) => 0",paraId:4,tocIndex:1}]},36206:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(75353);const t=[{value:"对数据按照指定的字段进行排序。",paraId:0},{value:"const data = [\n  { genre: 'Sports', sold: 275 },\n  { genre: 'Strategy', sold: 115 },\n  { genre: 'Action', sold: 120 },\n  { genre: 'Shooter', sold: 350 },\n  { genre: 'Other', sold: 150 },\n];\n\nchart.data({\n  type: 'inline',\n  value: data,\n  transform: [\n    {\n      type: 'sortBy',\n      fields: ['sold'], // 根据 sold 字段排序\n    },\n  ],\n});\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"fields",paraId:2,tocIndex:1},{value:"排序的字段",paraId:2,tocIndex:1},{value:"(string | [string, boolean])[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1}]},27419:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(98271);const t=[{value:"geoPath",paraId:0},{value:" 可以用来结合 geojson 绘制地图。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { feature } from 'topojson';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/us-10m.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/unemployment2.json').then((res) =>\n    res.json(),\n  ),\n]).then((values) => {\n  const [us, unemployment] = values;\n  const counties = feature(us, us.objects.counties).features;\n\n  const chart = new Chart({\n    container: 'container',\n  });\n\n  chart\n    .geoPath()\n    .projection({ type: 'albersUsa' })\n    .data({\n      value: counties,\n      transform: [\n        {\n          type: 'join',\n          join: unemployment,\n          on: ['id', 'id'],\n          select: ['rate'],\n        },\n      ],\n    })\n    .scale('color', {\n      type: 'sequential',\n      palette: 'ylGnBu',\n      unknown: '#fff',\n    })\n    .encode('color', 'rate');\n\n  chart.render();\n});\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 ",paraId:4,tocIndex:1},{value:"geoPath",paraId:4,tocIndex:1},{value:" 除了和通用 mark 相同的 API 和配置项，还有一个特殊的就是 ",paraId:4,tocIndex:1},{value:"projection",paraId:4,tocIndex:1},{value:" 映射，当前 G2 内置了 ",paraId:4,tocIndex:1},{value:"d3-geo",paraId:4,tocIndex:1},{value:" 的所有映射。",paraId:4,tocIndex:1},{value:"地图最终是由 geojson 数据决定，所以需要找到一个中国行政地图的 geojson，并将此数据应用于当前的示例 DEMO 中。",paraId:5,tocIndex:3},{value:"chart\n  .geoPath()\n  .data(geojson)\n  .encode('latitude', 'latitude')\n  .encode('longitude', 'longitude')\n  .encode('color', 'rate');\n  .scale('color', {\n    type: 'sequential',\n    palette: 'ylGnBu',\n    unknown: '#fff',\n  });\n\n  chart.render();\n",paraId:6,tocIndex:3}]},25919:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(14962);const t=[{value:"geoView",paraId:0},{value:" 是绘制地图的容器，用于多 geoPath 图层叠加。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/geo_layer_line_london.html\n */\nimport { Chart } from '@antv/g2';\nimport { feature } from 'topojson';\n\nPromise.all([\n  fetch('https://assets.antv.antgroup.com/g2/londonBoroughs.json').then((res) =>\n    res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonCentroids.json').then(\n    (res) => res.json(),\n  ),\n  fetch('https://assets.antv.antgroup.com/g2/londonTubeLines.json').then(\n    (res) => res.json(),\n  ),\n]).then((values) => {\n  const [londonBoroughs, londonCentroids, londonTubeLines] = values;\n  const london = feature(\n    londonBoroughs,\n    londonBoroughs.objects.boroughs,\n  ).features;\n  const line = feature(londonTubeLines, londonTubeLines.objects.line).features;\n\n  const chart = new Chart({\n    container: 'container',\n    autoFit: true,\n  });\n\n  const geoView = chart.geoView();\n\n  geoView\n    .geoPath()\n    .data(london)\n    .style('fill', 'lightgray')\n    .style('stroke', 'white')\n    .style('strokeWidth', 2);\n\n  geoView\n    .text()\n    .data(londonCentroids)\n    .encode('x', 'cx')\n    .encode('y', 'cy')\n    .encode('text', (d) => d.name.split(/\\W/)[0])\n    .style('fontSize', 8)\n    .style('opacity', 0.6);\n\n  geoView\n    .geoPath()\n    .data(line)\n    .encode('color', 'id')\n    .encode('shape', 'hollow')\n    .scale('color', {\n      domain: [\n        'Bakerloo',\n        'Central',\n        'Circle',\n        'District',\n        'DLR',\n        'Hammersmith & City',\n        'Jubilee',\n        'Metropolitan',\n        'Northern',\n        'Piccadilly',\n        'Victoria',\n        'Waterloo & City',\n      ],\n      range: [\n        'rgb(137,78,36)',\n        'rgb(220,36,30)',\n        'rgb(255,206,0)',\n        'rgb(1,114,41)',\n        'rgb(0,175,173)',\n        'rgb(215,153,175)',\n        'rgb(106,114,120)',\n        'rgb(114,17,84)',\n        'rgb(0,0,0)',\n        'rgb(0,24,168)',\n        'rgb(0,160,226)',\n        'rgb(106,187,170)',\n      ],\n    });\n\n  chart.render();\n});\n",paraId:1,tocIndex:0},{value:"目前 ",paraId:2,tocIndex:1},{value:"geoView",paraId:2,tocIndex:1},{value:" 容器具备 geoPath 全部的属性，除了 geoPath 作为 mark 独有的 ",paraId:2,tocIndex:1},{value:"encode",paraId:2,tocIndex:1},{value:" 方法。",paraId:2,tocIndex:1},{value:"同样，对于 ",paraId:3,tocIndex:1},{value:"projection",paraId:3,tocIndex:1},{value:" 映射，当前 G2 内置了 ",paraId:3,tocIndex:1},{value:"d3-geo",paraId:3,tocIndex:1},{value:" 的所有映射。",paraId:3,tocIndex:1}]},63523:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87649);const t=[{value:"力导布局图是一种用来呈现复杂关系网络的图表。在力导布局图中，系统中的每个节点都可以看成是一个放电粒子，粒子间存在某种斥力。同时，这些粒子间被它们之间的“边”所牵连，从而产生引力。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .forceGraph()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/miserable.json',\n  })\n  .scale('color', { range: schemeTableau10 });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"ForceTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"nodeLabels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"linkLabels",paraId:2,tocIndex:1},{value:"自定义连接线数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"joint",paraId:3,tocIndex:2},{value:"离散力布局或引力布局",paraId:3,tocIndex:2},{value:"boolean",paraId:3,tocIndex:2},{value:"true",paraId:3,tocIndex:2},{value:"nodeStrength",paraId:3,tocIndex:2},{value:"节点引力",paraId:3,tocIndex:2},{value:"number | (d => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"linkStrength",paraId:3,tocIndex:2},{value:"连接线间引力",paraId:3,tocIndex:2},{value:"number | (d => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3},{value:"<node>",paraId:5,tocIndex:3},{value:": 节点配置的前缀，例如：",paraId:5,tocIndex:3},{value:"nodeFill",paraId:5,tocIndex:3},{value:" 设置节点的填充颜色。",paraId:5,tocIndex:3},{value:"<link>",paraId:5,tocIndex:3},{value:": 连接线配置的前缀，例如：",paraId:5,tocIndex:3},{value:"linkStrokeWidth",paraId:5,tocIndex:3},{value:" 设置连接线的宽度。",paraId:5,tocIndex:3}]},31119:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(75309);const t=[{value:"打包图 (",paraId:0},{value:"Circle Packing",paraId:0},{value:") 是树形结构图的变体，使用圆形（而非矩形）一层又一层地代表整个层次结构。常用于描述数据间的包含关系。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { interpolateHcl } from 'd3-interpolate';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 20,\n});\n\nchart\n  .pack()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  })\n  .layout({\n    padding: 5,\n  })\n  .encode('value', 'value')\n  .encode('color', 'depth')\n  .scale('color', {\n    domain: [0, 5],\n    range: ['hsl(152,80%,80%)', 'hsl(228,30%,40%)'],\n    interpolate: interpolateHcl,\n  })\n  .style('labelText', (d) =>\n    d.r >= 10 && d.height === 0 ? `${d.data.name}` : '',\n  )\n  .axis(false)\n  .legend(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"TreeTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"labels",paraId:2,tocIndex:1},{value:"自定义数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"sort",paraId:3,tocIndex:2},{value:"排序方式",paraId:3,tocIndex:2},{value:"((a, b) => number)",paraId:3,tocIndex:2},{value:"(a, b) => b.value - a.value",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"内间距",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3}]},58347:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(96709);const t=[{value:"桑基图 (",paraId:0},{value:"Sankey Diagram",paraId:0},{value:")，是一种特定类型的流图，用于描述一组值到另一组值的流向。桑基图的特点如下：\n起始流量和结束流量相同，所有主支宽度的总和与所有分出去的分支宽度总和相等，保持能量的平衡；\n在内部，不同的线条代表了不同的流量分流情况，它的宽度成比例地显示此分支占有的流量；\n节点不同的宽度代表了特定状态下的流量大小。\n桑基图通常应用于能源、材料成分、金融等数据的可视化分析。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 10,\n});\n\nchart\n  .sankey()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/energy.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: (data) => ({ links: data }),\n      },\n    ],\n  })\n  .layout({\n    nodeAlign: 'center',\n    nodePadding: 0.03,\n  })\n  .scale('color', { range: schemeTableau10 })\n  .style('labelSpacing', 3)\n  .style('labelFontWeight', 'bold')\n  .style('nodeStrokeWidth', 1.2)\n  .style('linkFillOpacity', 0.4);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"SankeyTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"nodeLabels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"linkLabels",paraId:2,tocIndex:1},{value:"自定义连接线数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"nodeId",paraId:3,tocIndex:2},{value:"起始流量字段",paraId:3,tocIndex:2},{value:"(node: any) => string",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"nodeSort",paraId:3,tocIndex:2},{value:"起始流量排序方式",paraId:3,tocIndex:2},{value:"((a: any, b: any) => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"linkSort",paraId:3,tocIndex:2},{value:"去向流量排序方式",paraId:3,tocIndex:2},{value:"((a: any, b: any) => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"nodeAlign",paraId:3,tocIndex:2},{value:"节点对齐方式",paraId:3,tocIndex:2},{value:"'left' | 'right' | 'center' | 'justify' | ((node: any, n: number) => number)",paraId:3,tocIndex:2},{value:"'left'",paraId:3,tocIndex:2},{value:"nodeWidth",paraId:3,tocIndex:2},{value:"节点宽度",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0.008",paraId:3,tocIndex:2},{value:"nodePadding",paraId:3,tocIndex:2},{value:"节点间距",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0.03 ",paraId:3,tocIndex:2},{value:"nodeDepth",paraId:3,tocIndex:2},{value:"节点层级",paraId:3,tocIndex:2},{value:"(datum: any, maxDepth: number) => number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"iterations",paraId:3,tocIndex:2},{value:"布局计算迭代次数，次数越多，布局越合理",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"6",paraId:3,tocIndex:2},{value:"更多 ",paraId:4,tocIndex:2},{value:"layout",paraId:4,tocIndex:2},{value:" 配置，详见 ",paraId:4,tocIndex:2},{value:"d3-sankey",paraId:4,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:5,tocIndex:3},{value:"<label>",paraId:6,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:6,tocIndex:3},{value:"labelText",paraId:6,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:6,tocIndex:3},{value:"<node>",paraId:6,tocIndex:3},{value:": 节点配置的前缀，例如：",paraId:6,tocIndex:3},{value:"nodeFill",paraId:6,tocIndex:3},{value:" 设置节点的填充颜色。",paraId:6,tocIndex:3},{value:"<link>",paraId:6,tocIndex:3},{value:": 连接线配置的前缀，例如：",paraId:6,tocIndex:3},{value:"linkStrokeWidth",paraId:6,tocIndex:3},{value:" 设置连接线的宽度。",paraId:6,tocIndex:3}]},12377:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(9356);const t=[{value:"树图 (",paraId:0},{value:"Tree",paraId:0},{value:") 能将事物或现象分解成树枝状，又称树型图或系统图。在树形结构中，树根结点没有前驱结点，其余每个结点有且只有一个前驱结点。叶子结点没有后续结点，其余每个结点的后续节点数可以是一个也可以是多个。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 1500,\n  width: 800,\n});\n\nchart\n  .tree()\n  .coordinate({ transform: [{ type: 'transpose' }] })\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare.json',\n  })\n  .layout({\n    sortBy: (a, b) => a.value - b.value,\n  })\n  .style('nodeFill', (d) => (d.height === 0 ? '#999' : '#000'))\n  .style('linkStroke', '#999')\n  .style('labelText', (d) => d.data.name || '-')\n  .style('labelFontSize', (d) => (d.height === 0 ? 7 : 12))\n  .style('labelTextAlign', (d) => (d.height === 0 ? 'start' : 'end'))\n  .style('labelPosition', (d) => (d.height !== 0 ? 'left' : 'right'))\n  .style('labelDx', (d) => (d.height === 0 ? 5 : -5))\n  .style('labelBackground', true)\n  .style('labelBackgroundFill', '#fff');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"TreeTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"nodeLabels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"linkLabels",paraId:2,tocIndex:1},{value:"自定义连接线数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"nodeSize",paraId:3,tocIndex:2},{value:"节点大小",paraId:3,tocIndex:2},{value:"(node: any) => string",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"sortBy",paraId:3,tocIndex:2},{value:"排序方式",paraId:3,tocIndex:2},{value:"((a, b) => number)",paraId:3,tocIndex:2},{value:"(a, b) => b.value - a.value",paraId:3,tocIndex:2},{value:"separation",paraId:3,tocIndex:2},{value:"相邻节点间距",paraId:3,tocIndex:2},{value:"(a, b) => number",paraId:3,tocIndex:2},{value:"(a, b) => a.parent == b.parent ? 1 : 2",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3},{value:"<node>",paraId:5,tocIndex:3},{value:": 节点配置的前缀，例如：",paraId:5,tocIndex:3},{value:"nodeFill",paraId:5,tocIndex:3},{value:" 设置节点的填充颜色。",paraId:5,tocIndex:3},{value:"<link>",paraId:5,tocIndex:3},{value:": 连接线配置的前缀，例如：",paraId:5,tocIndex:3},{value:"linkStrokeWidth",paraId:5,tocIndex:3},{value:" 设置连接线的宽度。",paraId:5,tocIndex:3},{value:"如何绘制圆形树图？\n需要指定 ",paraId:6,tocIndex:4},{value:"coordinate: 'polar'",paraId:6,tocIndex:4}]},82752:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70527);const t=[{value:"矩阵树图根据每个节点的关联值递归地将空间划分为矩形，适用于展示带权的树形数据。\n矩形树图适合展现具有层级关系的数据，能够直观体现同级之间的比较。一个 Tree 状结构转化为平面空间矩形的状态。矩形树图的好处在于，相比起传统的树形结构图，矩形树图能更有效得利用空间，并且拥有展示占比的功能。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .treemap()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare-treemap.json',\n  })\n  .layout({\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  })\n  .encode('value', 'size')\n  .scale('color', { range: schemeTableau10 })\n  .style(\n    'labelText',\n    (d) =>\n      d.data.name\n        .split('.')\n        .pop()\n        .split(/(?=[A-Z][a-z])/g)[0],\n  )\n  .style('labelFill', '#000')\n  .style('labelPosition', 'top-left')\n  .style('fillOpacity', 0.5);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"TreemapLayout",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"labels",paraId:2,tocIndex:1},{value:"自定义数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"tile",paraId:3,tocIndex:2},{value:"布局方式",paraId:3,tocIndex:2},{value:"'treemapBinary' | 'treemapDice' | 'treemapSlice' | 'treemapSliceDice' | 'treemapSquarify' | 'treemapResquarify'",paraId:3,tocIndex:2},{value:"'treemapSquarify'",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"外间距，另外还有 ",paraId:3,tocIndex:2},{value:"paddingInner | paddingOuter | paddingTop | paddingBottom | paddingRight | paddingLeft",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"sort",paraId:3,tocIndex:2},{value:"排序规则",paraId:3,tocIndex:2},{value:"(a: any, b: any): number",paraId:3,tocIndex:2},{value:"(a, b) => b.value - a.value",paraId:3,tocIndex:2},{value:"layer",paraId:3,tocIndex:2},{value:"渲染层级",paraId:3,tocIndex:2},{value:"number | (d) => number",paraId:3,tocIndex:2},{value:"0",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3}]},97060:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(68405);const t=[{value:"框选坐标轴高亮，常常用于平行坐标系。",paraId:0},{value:"/**\n * A recreation of this demo: https://observablehq.com/@d3/parallel-coordinates\n */\nimport { Chart } from '@antv/g2';\n\nconst axis = {\n  zIndex: 1,\n  titlePosition: 'right',\n  line: true,\n  style: {\n    labelStroke: '#fff',\n    labelStrokeWidth: 5,\n    labelFontSize: 10,\n    labelStrokeLineJoin: 'round',\n    titleStroke: '#fff',\n    titleFontSize: 10,\n    titleStrokeWidth: 5,\n    titleStrokeLineJoin: 'round',\n    titleTransform: 'translate(-50%, 0) rotate(-90)',\n    lineStroke: 'black',\n    tickStroke: 'black',\n    lineStrokeWidth: 1,\n  },\n};\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.coordinate({ type: 'parallel' });\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/cars3.json',\n  })\n  .encode('position', [\n    'economy (mpg)',\n    'cylinders',\n    'displacement (cc)',\n    'power (hp)',\n    'weight (lb)',\n    '0-60 mph (s)',\n    'year',\n  ])\n  .encode('color', 'weight (lb)')\n  .style('strokeWidth', 1.5)\n  .style('strokeOpacity', 0.4)\n  .scale('color', {\n    type: 'sequential',\n    palette: 'brBG',\n    offset: (t) => 1 - t,\n  })\n  .legend({\n    color: { length: 400, layout: { justifyContent: 'center' } },\n  })\n  .axis('position', axis)\n  .axis('position1', axis)\n  .axis('position2', axis)\n  .axis('position3', axis)\n  .axis('position4', axis)\n  .axis('position5', axis)\n  .axis('position6', axis)\n  .axis('position7', axis)\n  .state('inactive', { stroke: '#eee' }); // 设置交互状态\n\nchart\n  .interaction('brushAxisHighlight', true) // 指定交互\n  .interaction('tooltip', false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"chart.on('brushAxis:highlight', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('brushAxis:highlight', data);\n});\n\nchart.on('brushAxis:remove', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('brushAxis:remove', data);\n});\n",paraId:3,tocIndex:3},{value:"chart.emit('brushAxis:highlight', {\n  data: { selection: [[20, 30], undefined, [100, 300]] },\n});\n\nchart.emit('brushAxis:remove', {});\n",paraId:4,tocIndex:4}]},31212:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(69071);const t=[{value:"框选筛选元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushFilter', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"获得当前筛选数据，会在每次筛选和重置的时候触发以下事件：",paraId:3,tocIndex:2},{value:"chart.on('brush:filter', (event) => {\n  const { selection } = event.data;\n  const [domainX, domainY] = selection;\n  const [minX, maxX] = domainX;\n  const [minY, maxY] = domainY;\n  console.log(minX, maxX, minY, maxY);\n});\n",paraId:4,tocIndex:2}]},98262:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70885);const t=[{value:"框选高亮元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushHighlight', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"是否是系列元素",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"facet",paraId:2,tocIndex:1},{value:"是否跨分面",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number| string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"支持八个方向的 resize 和自定义对应的 handle。",paraId:3,tocIndex:2},{value:"八个方向的 handle 的名字分别如下（按照东南西北命名），按照 ",paraId:4,tocIndex:4},{value:"mask[handleName][styleAttribute]",paraId:4,tocIndex:4},{value:" 格式设置对应的属性，也可以通过 ",paraId:4,tocIndex:4},{value:"maskHandleSize",paraId:4,tocIndex:4},{value:" 设置宽度。",paraId:4,tocIndex:4},{value:"chart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  },\n  encode: {\n    color: 'species',\n    x: 'culmen_length_mm',\n    y: 'culmen_depth_mm',\n  },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n  },\n  interaction: {\n    brushHighlight: {\n      maskHandleNFill: 'blue',\n      maskHandleEFill: 'red',\n      maskHandleSFill: 'green',\n      maskHandleWFill: 'yellow',\n      maskHandleNWFill: 'black',\n      maskHandleNEFill: 'steelblue',\n      maskHandleSEFill: 'pink',\n      maskHandleSWFill: 'orange',\n    },\n  },\n});\n",paraId:5,tocIndex:4},{value:"可以通过 ",paraId:6,tocIndex:5},{value:"mask[handleName]Render",paraId:6,tocIndex:5},{value:" 指定 handle 的渲染函数，用于渲染自定义的 handle。其中该函数签名如下。",paraId:6,tocIndex:5},{value:"function render(\n  g, // 挂载容器\n  options, // 样式属性，通过 mask[handleName][styleAttribute] 设置\n  document, // 画布 document，用于创建自图形\n) {\n  // 需要返回创建的图形\n}\n",paraId:7,tocIndex:5},{value:"下面是一个创建 path handle 的例子：",paraId:8,tocIndex:5},{value:"function renderPath(group, options, document) {\n  // 创建逻辑\n  // 如果是第一次渲染，就创建并且挂在图形\n  if (!group.handle) {\n    // 通过 document.createElement 去新建图形\n    const path = document.createElement('path');\n    group.handle = path;\n    group.appendChild(group.handle);\n  }\n\n  // 更新逻辑\n  const { handle } = group;\n  const { width, height, ...rest } = options;\n  if (width === undefined || height === undefined) return handle;\n  handle.attr(rest);\n\n  // 返回对应的 shape\n  return handle;\n}\n",paraId:9,tocIndex:5},{value:"function createPathRender(path) {\n  return (group, options, document) => {\n    if (!group.handle) {\n      const path = document.createElement('path');\n      group.handle = path;\n      group.appendChild(group.handle);\n    }\n    const { handle } = group;\n    const { x, y, width, height, ...rest } = options;\n    if (width === undefined || height === undefined) return handle;\n    handle.style.d = path(x, y, width, height);\n    handle.attr(rest);\n    return handle;\n  };\n}\n\nchart.options({\n  type: 'point',\n  data: {\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  },\n  encode: {\n    color: 'species',\n    x: 'culmen_length_mm',\n    y: 'culmen_depth_mm',\n  },\n  state: {\n    inactive: { stroke: 'gray', opacity: 0.5 },\n  },\n  interaction: {\n    brushHighlight: {\n      maskHandleSize: 30,\n      maskHandleNRender: createPathRender((x, y, width, height) => {\n        return `M${x},${y + height / 2}L${x + width / 2},${y - height / 2}L${\n          x + width\n        },${y + height / 2},Z`;\n      }),\n      maskHandleERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + (width * 3) / 2},${y + height / 2}L${\n            x + width / 2\n          },${y + height},Z`,\n      ),\n      maskHandleSRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y + height / 2}L${x + width / 2},${y + (height / 2) * 3}L${\n            x + width\n          },${y + height / 2},Z`,\n      ),\n      maskHandleWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x - width},${y + height / 2}L${\n            x + width / 2\n          },${y + height},Z`,\n      ),\n      maskHandleNWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y}L${x + width},${y + height / 2}L${x + width / 2},${\n            y + height\n          },Z`,\n      ),\n      maskHandleNERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x},${y + height / 2}L${x + width},${y}L${x + width / 2},${\n            y + height\n          },Z`,\n      ),\n      maskHandleSERender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + width},${y + height}L${x},${\n            y + height / 2\n          },Z`,\n      ),\n      maskHandleSWRender: createPathRender(\n        (x, y, width, height) =>\n          `M${x + width / 2},${y}L${x + width},${y + height / 2}L${x},${\n            y + height\n          },Z`,\n      ),\n      maskHandleNFill: 'blue',\n      maskHandleEFill: 'red',\n      maskHandleSFill: 'green',\n      maskHandleWFill: 'yellow',\n      maskHandleNWFill: 'black',\n      maskHandleNEFill: 'steelblue',\n      maskHandleSEFill: 'pink',\n      maskHandleSWFill: 'orange',\n    },\n  },\n});\n",paraId:10,tocIndex:5},{value:"支持以下的事件：",paraId:11,tocIndex:6},{value:"brush:start",paraId:12,tocIndex:6},{value:" - 开始创建 brush 的时候触发",paraId:12,tocIndex:6},{value:"brush:end",paraId:12,tocIndex:6},{value:" - brush 更新大小和位置完成时候触发",paraId:12,tocIndex:6},{value:"brush:remove",paraId:12,tocIndex:6},{value:" - brush 移除的时候触发",paraId:12,tocIndex:6},{value:"brush:highlight",paraId:12,tocIndex:6},{value:" - brush 改变大小和位置时触发",paraId:12,tocIndex:6},{value:"chart.on('brush:highlight', (e) => {\n  console.log(e.data.selection);\n  console.log(e.nativeEvent);\n});\n",paraId:13,tocIndex:6},{value:"支持以下的事件：",paraId:14,tocIndex:7},{value:"brush:highlight",paraId:15,tocIndex:7},{value:" - 高亮数据",paraId:15,tocIndex:7},{value:"brush:remove",paraId:15,tocIndex:7},{value:" - 移除 brush",paraId:15,tocIndex:7},{value:"chart.emit('brush:remove');\n",paraId:16,tocIndex:7}]},61799:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(60369);const t=[{value:"x 方向框选筛选元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushXFilter', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},91966:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(24322);const t=[{value:"x 方向框选高亮元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushXHighlight', {\n  maskFill: 'red',\n  maskOpacity: 0.5,\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"是否是系列元素",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"facet",paraId:2,tocIndex:1},{value:"是否跨分面",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number| string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},23315:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(44745);const t=[{value:"y 方向筛选高亮元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'data/penguins.csv',\n  })\n  .encode('x', 'culmen_length_mm')\n  .encode('y', 'culmen_depth_mm')\n  .encode('color', 'species')\n  .state('inactive', { stroke: 'gray' });\n\nchart.interaction('brushYFilter', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"brush 是否反转",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"mask${StyleAttrs}",paraId:2,tocIndex:1},{value:"brush 的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},14801:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(76026);const t=[{value:"查看折线图相对于某个时间点的相对趋势。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/indices.json',\n  })\n  .encode('x', (d) => new Date(d.Date))\n  .encode('y', 'Close')\n  .encode('color', 'Symbol')\n  .encode('key', 'Symbol')\n  .encode('title', (d) => d.Date.toLocaleString())\n  .axis('y', { title: '↑ Change in price (%)', labelAutoRotate: false })\n  .scale('y', { type: 'log' })\n  .label({\n    text: 'Symbol',\n    selector: 'last',\n    style: {\n      fontSize: 10,\n    },\n  });\n\nchart.interaction('chartIndex', {\n  ruleStroke: '#aaa',\n  labelDx: 5,\n  labelTextAlign: 'center',\n  labelStroke: '#fff',\n  labelLineWidth: 5,\n  labelFormatter: (d) => `${d.toLocaleDateString()}`,\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"labelFormatter",paraId:2,tocIndex:1},{value:"格式化日期",paraId:2,tocIndex:1},{value:"FormatterFunction",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"rule${StyleAttrs}",paraId:2,tocIndex:1},{value:"指示线的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"label${StyleAttrs}",paraId:2,tocIndex:1},{value:"文本的样式",paraId:2,tocIndex:1},{value:"number             | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},96380:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(40246);const t=[{value:"高亮鼠标悬浮的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' })\n  .state('active', { fill: 'orange' })\n  .state('inactive', { opacity: 0.5 });\n\nchart.interaction('elementHighlight', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"chart.emit('element:highlight', {\n  data: { data: { population: 5038433 } },\n});\n\nchart.emit('element:unhighlight', {});\n",paraId:3,tocIndex:3},{value:"chart.on('element:highlight', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('element:highlight', data);\n});\n\nchart.on('element:unhighlight', (event) => {\n  const { nativeEvent } = event;\n  if (nativeEvent) console.log('reset');\n});\n",paraId:4,tocIndex:4}]},12926:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(75343);const t=[{value:"高亮和鼠标悬浮的元素拥有相同 color 通道值的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 5 })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .state('active', { fill: 'red', linkFillOpacity: 0.5 })\n  .state('inactive', { opacity: 0.5 });\n\nchart.interaction('elementHighlightByColor', {\n  link: true,\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"link",paraId:2,tocIndex:1},{value:"是否展示连接线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"link${StyleAttrs}",paraId:2,tocIndex:1},{value:"连接线样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},37174:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(55750);const t=[{value:"高亮和鼠标悬浮的元素拥有相同 x 通道值的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .state('active', { fill: 'red' })\n  .state('inactive', { opacity: 0.5 });\n\nchart.interaction('elementHighlightByX', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},55979:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(62848);const t=[]},98757:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(59617);const t=[{value:"选择和鼠标点击的元素拥有相同 color 通道值的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 5 })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .state('selected', { fill: 'red', linkFillOpacity: 0.5 })\n  .state('unselected', { opacity: 0.5 });\n\nchart.interaction('elementSelectByColor', {\n  link: true,\n});\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"link",paraId:2,tocIndex:1},{value:"是否展示连接线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"link${StyleAttrs}",paraId:2,tocIndex:1},{value:"连接线样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"link",paraId:2,tocIndex:1},{value:"是否展示连接带",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1}]},62007:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(77186);const t=[{value:"选择和鼠标点击的元素拥有相同 x 通道值的元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .state('selected', { fill: 'red' })\n  .state('unselected', { opacity: 0.5 });\n\nchart.interaction('elementSelectByX', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"link",paraId:2,tocIndex:1},{value:"是否展示连接线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"background",paraId:2,tocIndex:1},{value:"是否高亮背景",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"主方向的偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"link${StyleAttrs}",paraId:2,tocIndex:1},{value:"连接线样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"background${StyleAttrs}",paraId:2,tocIndex:1},{value:"背景的样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"single",paraId:2,tocIndex:1},{value:"是否单选",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1}]},71692:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(2275);const t=[{value:"鱼眼交互，用于聚焦于局部数据。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  })\n  .encode('x', 'GDP')\n  .encode('y', 'LifeExpectancy')\n  .encode('size', 'Population')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('size', { type: 'log', range: [4, 20] })\n  .style('fillOpacity', 0.3)\n  .style('lineWidth', 1);\n\nchart.interaction('fisheye');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"wait",paraId:2,tocIndex:1},{value:"鱼眼更新的时间间隔，单位为毫秒",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"30",paraId:2,tocIndex:1},{value:"leading",paraId:2,tocIndex:1},{value:"是否在时间间隔开始的时候更新鱼眼",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"trailing",paraId:2,tocIndex:1},{value:"是否在时间间隔结束的时候更新鱼眼",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1}]},41571:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(44494);const t=[{value:"图例筛选元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .data(temperatures)\n  .encode('x', 'month')\n  .encode('y', 'temperature')\n  .encode('color', 'city')\n  .call((chart) => chart.line())\n  .call((chart) => chart.point());\n\nchart.interaction('legendFilter', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"chart.emit('legend:filter', {\n  data: { channel: 'color', values: ['Sports', 'Strategy'] },\n});\n\nchart.emit('legend:reset', {});\n",paraId:2,tocIndex:2},{value:"chart.on('legend:filter', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  console.log(data);\n});\n\nchart.on('legend:reset', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  console.log('end');\n});\n",paraId:3,tocIndex:3}]},59024:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(43724);const t=[{value:"图例高亮元素。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data(profit)\n  .axis('y', { labelFormatter: '~s' })\n  .encode('x', 'month')\n  .encode('y', ['end', 'start'])\n  .encode(\n    'color',\n    d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n  )\n  .state('inactive', { opacity: 0.5 })\n  .legend('color', {\n    state: { inactive: { labelOpacity: 0.5, markerOpacity: 0.5 } },\n  });\n\nchart.interaction('legendHighlight', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"chart.on('legend:highlight', (e) => {\n  const { nativeEvent, data } = e;\n  if (!nativeEvent) return;\n  console.log(data);\n});\n\nchart.on('legend:unhighlight', (e) => {\n  const { nativeEvent } = e;\n  if (!nativeEvent) return;\n  console.log('unhighlight');\n});\n",paraId:2,tocIndex:2},{value:"chart.emit('legend:highlight', {\n  data: { channel: 'color', value: 'Increase' },\n});\n\nchart.emit('legend:unhighlight', {});\n",paraId:3,tocIndex:3}]},57295:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(66883);const t=[{value:"提示缩略文本。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { schemeTableau10 } from 'd3-scale-chromatic';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 900,\n  width: 1100,\n});\n\nchart\n  .treemap()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/flare-treemap.json',\n  })\n  .layout({\n    path: (d) => d.name.replace(/\\./g, '/'),\n    tile: 'treemapBinary',\n    paddingInner: 1,\n  })\n  .encode('value', 'size')\n  .scale('color', { range: schemeTableau10 })\n  .style(\n    'labelText',\n    (d) =>\n      d.data.name\n        .split('.')\n        .pop()\n        .split(/(?=[A-Z][a-z])/g)[0],\n  )\n  .style('labelFill', '#000')\n  .style('labelPosition', 'top-left')\n  .style('fillOpacity', 0.5);\n\nchart.interaction('poptip', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"offsetX",paraId:2,tocIndex:1},{value:"x 方向偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"8",paraId:2,tocIndex:1},{value:"offsetY",paraId:2,tocIndex:1},{value:"y 方向偏移量",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"8",paraId:2,tocIndex:1},{value:"tip${StyleAttrs}",paraId:2,tocIndex:1},{value:"poptip 样式",paraId:2,tocIndex:1},{value:"StyleAttrs",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},24811:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(31249);const t=[{value:"滚动条筛选是一个默认交互，当设置了 scrollbar 默认就会有这个交互。关于 scrollbar 组件的配置，见文档 ",paraId:0},{value:"component/scrollbar",paraId:1},{value:"。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .scrollbar('y', { ratio: 0.3 }) // y domain 的比例\n  .scrollbar('x', { ratio: 0.5 }); // x domain 的比例\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"chart.emit('scrollbarX:filter', {\n  data: { selection: [['2001-03'], undefined] },\n});\n\nchart.emit('scrollbarY:filter', {\n  data: { selection: [undefined, [50, 550]] },\n});\n",paraId:3,tocIndex:2},{value:"chart.on('scrollbarX:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('scrollbarX:filter', data.selection);\n});\n\nchart.on('scrollbarY:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('scrollbarY:filter', data.selection);\n});\n",paraId:4,tocIndex:3}]},31194:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(57019);const t=[{value:"缩略轴筛选是一个默认交互，当设置了 slider 默认就会有这个交互。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close')\n  .slider('y', true)\n  .slider('x', true);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"chart.emit('sliderX:filter', {\n  data: { selection: [['2001-01', '2001-03'], undefined] },\n});\n\nchart.emit('sliderY:filter', {\n  data: { selection: [undefined, [50, 550]] },\n});\n",paraId:2,tocIndex:2},{value:"chart.on('sliderX:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('sliderX:filter', data.selection);\n});\n\nchart.on('sliderY:filter', (event) => {\n  const { data, nativeEvent } = event;\n  if (nativeEvent) console.log('sliderY:filter', data.selection);\n});\n",paraId:3,tocIndex:3}]},83950:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(944);const t=[{value:"展示提示信息。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' });\n\nchart.interaction('tooltip');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"wait",paraId:2,tocIndex:1},{value:"提示信息更新的时间间隔，单位为毫秒",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"50",paraId:2,tocIndex:1},{value:"leading",paraId:2,tocIndex:1},{value:"是否在时间间隔开始的时候更新提示信息",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"trailing",paraId:2,tocIndex:1},{value:"是否在时间间隔结束的时候更新提示信息",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"shared",paraId:2,tocIndex:1},{value:"相同 x 的元素是否共享 tooltip",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"是否是系列元素的 tooltip",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"body",paraId:2,tocIndex:1},{value:"是否展示 tooltip",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"marker",paraId:2,tocIndex:1},{value:"是否展示 marker",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"groupName",paraId:2,tocIndex:1},{value:"是否使用 groupName",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"position",paraId:2,tocIndex:1},{value:"tooltip 位置",paraId:2,tocIndex:1},{value:"TooltipPosition",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"mount",paraId:2,tocIndex:1},{value:"tooltip 渲染的 dom 节点",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"HTMLElement",paraId:2,tocIndex:1},{value:"图表容器",paraId:2,tocIndex:1},{value:"bounding",paraId:2,tocIndex:1},{value:"tooltip 渲染的限制区域，超出会自动调整位置",paraId:2,tocIndex:1},{value:"BBox",paraId:2,tocIndex:1},{value:"图表区域大小",paraId:2,tocIndex:1},{value:"offset",paraId:2,tocIndex:1},{value:"tooltip 离鼠标的偏离位置",paraId:2,tocIndex:1},{value:"[number, number]",paraId:2,tocIndex:1},{value:"[10, 10]",paraId:2,tocIndex:1},{value:"crosshairs",paraId:2,tocIndex:1},{value:"是否展示指示线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"crosshairsX",paraId:2,tocIndex:1},{value:"是否展示 X 方向指示线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"crosshairsY",paraId:2,tocIndex:1},{value:"是否展示 Y 方向指示线",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"crosshairs${StyleAttrs}",paraId:2,tocIndex:1},{value:"指示线的样式",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"crosshairsX${StyleAttrs}",paraId:2,tocIndex:1},{value:"X 方向指示线的样式（优先级更高）",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"crosshairsY${StyleAttrs}",paraId:2,tocIndex:1},{value:"Y 方向指示线的样式 （优先级更高）",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"marker${StyleAttrs}",paraId:2,tocIndex:1},{value:"marker 的样式",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"markerType",paraId:2,tocIndex:1},{value:"marker 的类型",paraId:2,tocIndex:1},{value:"'hollow' | undefined",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"render",paraId:2,tocIndex:1},{value:"自定义 tooltip 渲染函数",paraId:2,tocIndex:1},{value:"(event, options) => HTMLElement | string",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"sort",paraId:2,tocIndex:1},{value:"item 排序器",paraId:2,tocIndex:1},{value:"(d: TooltipItemValue) => any",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"filter",paraId:2,tocIndex:1},{value:"item 筛选器",paraId:2,tocIndex:1},{value:"(d: TooltipItemValue) => any",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"disableNative",paraId:2,tocIndex:1},{value:"是否响应原生事件（pointerover 和 pointerout）",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"css",paraId:2,tocIndex:1},{value:"设置容器的 ",paraId:2,tocIndex:1},{value:"css",paraId:3,tocIndex:1},{value:" 样式",paraId:2,tocIndex:1},{value:"Record<string, any>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"type TooltipPosition =\n  | 'top'\n  | 'bottom'\n  | 'left'\n  | 'right'\n  | 'top-left'\n  | 'top-right'\n  | 'bottom-left'\n  | 'bottom-right';\n\ntype BBox = { x: number; y: number; width: number; height: number };\n",paraId:4,tocIndex:1},{value:"import React from 'react';\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .transform([{ type: 'sortX', by: 'y', reverse: true, slice: 5 }])\n  .encode('x', 'letter')\n  .encode('y', 'frequency');\n\nchart.interaction('tooltip', {\n  // render 回调方法返回一个innerHTML 或者 ReactNode\n  render: (event, { title, items }) =>\n    `<div>Your custom render content here.</div>`,\n});\n\nchart.render();\n",paraId:5,tocIndex:3},{value:"chart.on('tooltip:show', (event) => {\n  console.log(event.data.data);\n});\n\nchart.on('tooltip:hide', () => {\n  console.log('hide');\n});\n",paraId:6,tocIndex:4},{value:"对于 Interval、Point 等非系列 Mark，控制展示的方式如下：",paraId:7,tocIndex:5},{value:"// 条形图、点图等\nchart\n  .interval()\n  .data([\n    { genre: 'Sports', sold: 275 },\n    { genre: 'Strategy', sold: 115 },\n    { genre: 'Action', sold: 120 },\n    { genre: 'Shooter', sold: 350 },\n    { genre: 'Other', sold: 150 },\n  ])\n  .encode('x', 'genre')\n  .encode('y', 'sold')\n  .encode('color', 'genre');\n\nchart.render().then((chart) =>\n  chart.emit('tooltip:show', {\n    offsetX: 10, // 相对于 plot 区域的位置\n    offsetX: 20, // 相对于 plot 区域的位置\n    data: {\n      data: { genre: 'Sports' }, // 会找从原始数据里面找到匹配的数据\n    },\n  }),\n);\n",paraId:8,tocIndex:5},{value:"对于 Line、Area 等系列 Mark，控制展示的方式如下：",paraId:9,tocIndex:5},{value:"chart\n  .line()\n  .data({ type: 'fetch', value: 'data/aapl.csv' })\n  .encode('x', 'date')\n  .encode('y', 'close');\n\n// 根据数据拾取\nchart.render((chart) =>\n  chart.emit('tooltip:show', {\n    data: {\n      data: { x: new Date('2010-11-16') },\n    },\n  }),\n);\n\n// 根据像素拾取\nchart.render((chart) =>\n  chart.emit('tooltip:show', {\n    offsetX: 200,\n    offsetY: 200,\n  }),\n);\n",paraId:10,tocIndex:5},{value:"隐藏的方式如下：",paraId:11,tocIndex:5},{value:"chart.emit('tooltip:hide');\n",paraId:12,tocIndex:5},{value:"chart.emit('tooltip:disable'); // 禁用 tooltip\nchart.emit('tooltip:enable'); // 启用交互\n",paraId:13,tocIndex:6},{value:"默认情况下，",paraId:14,tocIndex:7},{value:"crossharisY",paraId:14,tocIndex:7},{value:"是开启的，",paraId:14,tocIndex:7},{value:"crosshairsX",paraId:14,tocIndex:7},{value:"是关闭的，所以如果要开启十字辅助线，有以下两种方式。",paraId:14,tocIndex:7},{value:"设置",paraId:15,tocIndex:7},{value:"crosshairs",paraId:15,tocIndex:7},{value:"为",paraId:15,tocIndex:7},{value:"true",paraId:15,tocIndex:7},{value:"。",paraId:15,tocIndex:7},{value:"chart.interaction('tooltip', {\n  crosshairs: true, // 开启十字辅助线\n  crosshairsXStroke: 'red', // 设置 X 轴辅助线颜色为'red'\n  crosshairsYStroke: 'blue', // 设置 Y 轴辅助线颜色为'blue'\n});\n",paraId:16,tocIndex:7},{value:"设置",paraId:17,tocIndex:7},{value:"crosshairsX",paraId:17,tocIndex:7},{value:"为",paraId:17,tocIndex:7},{value:"true",paraId:17,tocIndex:7},{value:"。",paraId:17,tocIndex:7},{value:"chart.interaction('tooltip', {\n  crosshairsX: true, // 开启crosshairsX辅助线\n  crosshairsXStroke: 'red', // 设置 X 轴辅助线颜色为'red'\n  crosshairsYStroke: 'blue', // 设置 Y 轴辅助线颜色为'blue'\n});\n",paraId:18,tocIndex:7},{value:"crosshairsX",paraId:19,tocIndex:7},{value:"的优先级大于",paraId:19,tocIndex:7},{value:"crosshairs",paraId:19,tocIndex:7},{value:"的优先级。",paraId:19,tocIndex:7},{value:"chart.interaction('tooltip', {\n  markerType: 'hollow', // 设置提示点的样式为空心圆\n});\n",paraId:20,tocIndex:8}]},45089:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(24374);const t=[{value:"contrastReverse",paraId:0},{value:" 标签颜色在图形背景上",paraId:0},{value:"颜色对比度",paraId:0},{value:"低的情况下，从指定色板选择一个对比度最优的颜色。",paraId:0},{value:"chart\n  .interval()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  /* ... */\n  .label({\n    text: 'frequency',\n    position: 'inside',\n    transform: [\n      {\n        type: 'contrastReverse',\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"threshold",paraId:2,tocIndex:1},{value:"标签和背景图形的颜色对比度阈值，超过阈值才会推荐颜色提升对比度",paraId:2,tocIndex:1},{value:"Type",paraId:2,tocIndex:1},{value:"4.5",paraId:2,tocIndex:1},{value:"palette",paraId:2,tocIndex:1},{value:"对比度提升算法中，备选的颜色色板",paraId:2,tocIndex:1},{value:"Type",paraId:2,tocIndex:1},{value:"['#000', '#fff']",paraId:2,tocIndex:1}]},84290:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(8343);const t=[{value:"exceedAdjust",paraId:0},{value:" 会自动对标签做溢出检测和矫正，即当标签超出视图区域时，会对标签自动做反方向的位移。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'type')\n  /* ... */\n  .label({\n    text: 'frequency',\n    transform: [\n      {\n        type: 'exceedAdjust',\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"暂无",paraId:2,tocIndex:1}]},67714:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(20103);const t=[{value:"overflowHide",paraId:0},{value:" 对于标签在图形上放置不下的时候，隐藏标签。",paraId:0},{value:"chart\n  .interval()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  /* ... */\n  .label({\n    text: 'frequency',\n    position: 'inside',\n    transform: [\n      {\n        type: 'overflowHide',\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"暂无。",paraId:2,tocIndex:1}]},55839:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(11918);const t=[{value:"overlapDodgeY",paraId:0},{value:" 位置碰撞的标签在 y 方向上进行调整，防止标签重叠。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'type')\n  /* ... */\n  .label({\n    text: 'frequency',\n    transform: [\n      {\n        type: 'overlapDodgeY',\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"maxIterations",paraId:2,tocIndex:1},{value:"位置调整的最大迭代次数。",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"10",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"期望调整之后，标签和标签之间的间距",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1},{value:"maxError",paraId:2,tocIndex:1},{value:"最大误差，指实际间距和期望间距 ",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:" 之间的误差",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0.1",paraId:2,tocIndex:1}]},8946:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(18198);const t=[{value:"overlapHide",paraId:0},{value:" 对位置碰撞的标签进行隐藏。算法逻辑是碰撞的两个标签，保留前一个，隐藏后一个。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  /* ... */\n  .label({\n    text: 'frequency',\n    transform: [\n      {\n        type: 'overlapHide',\n      },\n    ],\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"priority",paraId:2,tocIndex:1},{value:"标签排序的优先级，通过设置一个排序比较器，实现优先级",paraId:2,tocIndex:1},{value:"(a, b) => number",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1}]},22410:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(77702);const t=[{value:"Label 是将图形的一些数据信息，比如值，名称等映射到图形的文本上的方法。使用方式如下:",paraId:0},{value:"[mark].label(options: LabelOptions);\n",paraId:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 720,\n  height: 720,\n});\n\nchart.coordinate({ type: 'polar', outerRadius: 0.85 });\n\nchart\n  .interval()\n  .transform({ type: 'groupX', y: 'sum' })\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n  })\n  .encode('x', 'year')\n  .encode('color', 'year')\n  .encode('y', 'people')\n  .scale('y', { type: 'sqrt' })\n  .scale('x', { padding: 0 })\n  .axis('y', false)\n  .axis('x', false)\n  .label({\n    text: 'people',\n    position: 'outside',\n    transform: [{ type: 'overlapDodgeY' }],\n  });\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"Label 继承 G Text 所有属性样式配置，此外还有 ",paraId:3,tocIndex:1},{value:"position",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"selector",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"connector",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"background",paraId:3,tocIndex:1},{value:" 和 ",paraId:3,tocIndex:1},{value:"transform",paraId:3,tocIndex:1},{value:" 等更多配置。",paraId:3,tocIndex:1},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"fontSize",paraId:4,tocIndex:1},{value:"文字大小",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"fontFamily",paraId:4,tocIndex:1},{value:"文字字体",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"fontWeight",paraId:4,tocIndex:1},{value:"字体粗细",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"lineHeight",paraId:4,tocIndex:1},{value:"文字的行高",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"textAlign",paraId:4,tocIndex:1},{value:"设置文本内容的当前对齐方式, 支持的属性：",paraId:4,tocIndex:1},{value:"center",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"end",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"left",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"right",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"start",paraId:4,tocIndex:1},{value:"，默认值为",paraId:4,tocIndex:1},{value:"start",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"textBaseline",paraId:4,tocIndex:1},{value:"设置在绘制文本时使用的当前文本基线, 支持的属性:",paraId:4,tocIndex:1},{value:"top",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"middle",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"bottom",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"alphabetic",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"hanging",paraId:4,tocIndex:1},{value:"。默认值为",paraId:4,tocIndex:1},{value:"bottom",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"fill",paraId:4,tocIndex:1},{value:"图形的填充色",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"fillOpacity",paraId:4,tocIndex:1},{value:"图形的填充透明度",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"stroke",paraId:4,tocIndex:1},{value:"图形的描边",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"strokeOpacity",paraId:4,tocIndex:1},{value:"描边透明度",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"lineWidth",paraId:4,tocIndex:1},{value:"图形描边的宽度",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"lineDash",paraId:4,tocIndex:1},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:4,tocIndex:1},{value:"[number,number]",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<[number, number]>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"opacity",paraId:4,tocIndex:1},{value:"图形的整体透明度",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"shadowColor",paraId:4,tocIndex:1},{value:"图形阴影颜色",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"shadowBlur",paraId:4,tocIndex:1},{value:"图形阴影的高斯模糊系数",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"shadowOffsetX",paraId:4,tocIndex:1},{value:"设置阴影距图形的水平距离",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"shadowOffsetY",paraId:4,tocIndex:1},{value:"设置阴影距图形的垂直距离",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<number>",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"cursor",paraId:4,tocIndex:1},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"Function<string>",paraId:4,tocIndex:1},{value:"'default'",paraId:4,tocIndex:1},{value:"position",paraId:4,tocIndex:1},{value:"标签位置配置",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"selector",paraId:4,tocIndex:1},{value:"标签选择器。mark 通过指定的通道分组，通过指定选择器可以针对序列进行过滤索引，从序列中提取单个或多个值。分组的默认通道是系列。",paraId:4,tocIndex:1},{value:"string|function",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"connector",paraId:4,tocIndex:1},{value:"是否展示文本和目标点之间的连接线，默认不展示",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"background",paraId:4,tocIndex:1},{value:"是否展示文本背景框，默认不展示",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"transform",paraId:4,tocIndex:1},{value:"标签转换，主要用于调整标签 ",paraId:4,tocIndex:1},{value:"(x,y)",paraId:4,tocIndex:1},{value:" 位置，标签偏移、对齐等属性以实现想要的标签效果，内置多种标签布局，同时也支持回调的方式处理",paraId:4,tocIndex:1},{value:"array|function",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"formatter",paraId:4,tocIndex:1},{value:"标签文本格式化",paraId:4,tocIndex:1},{value:"type Formatter = (text:string, datum: Datum, index:number, data: Data) => string",paraId:4,tocIndex:1},{value:"-",paraId:4,tocIndex:1},{value:"标签",paraId:5,tocIndex:1},{value:"连接线样式",paraId:5,tocIndex:1},{value:"配置，格式为: ",paraId:5,tocIndex:1},{value:"connector${style}",paraId:5,tocIndex:1},{value:", 如: ",paraId:5,tocIndex:1},{value:"connectorStroke",paraId:5,tocIndex:1},{value:" 代表连接线描边色。",paraId:5,tocIndex:1},{value:"参数",paraId:6,tocIndex:1},{value:"说明",paraId:6,tocIndex:1},{value:"类型",paraId:6,tocIndex:1},{value:"默认值",paraId:6,tocIndex:1},{value:"connectorStroke",paraId:6,tocIndex:1},{value:"连接线描边色",paraId:6,tocIndex:1},{value:"string",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"connectorLineWidth",paraId:6,tocIndex:1},{value:"连接线描边线宽",paraId:6,tocIndex:1},{value:"number",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"connector${style}",paraId:6,tocIndex:1},{value:"更多连接线样式配置，参考 ",paraId:6,tocIndex:1},{value:"PathStyleProps",paraId:6,tocIndex:1},{value:" 属性值",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"-",paraId:6,tocIndex:1},{value:"标签",paraId:7,tocIndex:1},{value:"文本背景框样式",paraId:7,tocIndex:1},{value:"配置，格式为: ",paraId:7,tocIndex:1},{value:"background${style}",paraId:7,tocIndex:1},{value:", 如: ",paraId:7,tocIndex:1},{value:"backgroundFill",paraId:7,tocIndex:1},{value:" 代表背景框填充色。",paraId:7,tocIndex:1},{value:"参数",paraId:8,tocIndex:1},{value:"说明",paraId:8,tocIndex:1},{value:"类型",paraId:8,tocIndex:1},{value:"默认值",paraId:8,tocIndex:1},{value:"backgroundFill",paraId:8,tocIndex:1},{value:"背景框填充色",paraId:8,tocIndex:1},{value:"string",paraId:8,tocIndex:1},{value:"-",paraId:8,tocIndex:1},{value:"backgroundRadius",paraId:8,tocIndex:1},{value:"背景框圆角半径",paraId:8,tocIndex:1},{value:"number",paraId:8,tocIndex:1},{value:"-",paraId:8,tocIndex:1},{value:"backgroundPadding",paraId:8,tocIndex:1},{value:"背景框内间距",paraId:8,tocIndex:1},{value:"number[]",paraId:8,tocIndex:1},{value:"-",paraId:8,tocIndex:1},{value:"background${style}",paraId:8,tocIndex:1},{value:"更多背景框样式配置，参考 ",paraId:8,tocIndex:1},{value:"RectStyleProps",paraId:8,tocIndex:1},{value:" 属性值",paraId:8,tocIndex:1},{value:"-",paraId:8,tocIndex:1},{value:"-",paraId:8,tocIndex:1},{value:"数据标签支持使用 HTML 自定义标签，具体配置为：",paraId:9,tocIndex:1},{value:"参数",paraId:10,tocIndex:1},{value:"说明",paraId:10,tocIndex:1},{value:"类型",paraId:10,tocIndex:1},{value:"默认值",paraId:10,tocIndex:1},{value:"render",paraId:10,tocIndex:1},{value:"返回 HTML string 或者 HTMElement，使用 HTML 自定义复杂标签",paraId:10,tocIndex:1},{value:"RenderFunc",paraId:10,tocIndex:1},{value:"-",paraId:10,tocIndex:1},{value:"type RenderFunc = (text: string, datum: object, index: number, {channel: Record<string, Channel>}) => String | HTMLElement;\n",paraId:11,tocIndex:1},{value:"chart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  })\n  .transform({\n    type: 'groupX',\n    y: 'max',\n  })\n  .encode('x', 'clarity')\n  .encode('y', 'price')\n  .axis('y', { labelFormatter: '~s' })\n  .label({ text: (d, i, data, { channel }) => channel.y[i] }) // 聚合图形的数据标签\n  .style(\n    'fill',\n    (\n      d,\n      i,\n      data,\n      { channel, element }, // 聚合图形的样式 & label所依赖元素\n    ) => (channel.y[i] < 11700 ? '#E49361' : '#4787F7'),\n  );\n",paraId:12,tocIndex:1},{value:"在笛卡尔坐标系下，支持 9 种位置：",paraId:13,tocIndex:3},{value:"'top'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'left'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'right'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'bottom'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'top-left'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'top-right'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'bottom-left'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'bottom-right'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'inside'",paraId:13,tocIndex:3},{value:"。非笛卡尔坐标系下，支持 ",paraId:13,tocIndex:3},{value:"'outside'",paraId:13,tocIndex:3},{value:", ",paraId:13,tocIndex:3},{value:"'inside'",paraId:13,tocIndex:3},{value:" 两种。",paraId:13,tocIndex:3},{value:"此外，针对面积图提供特殊 ",paraId:14,tocIndex:3},{value:"area",paraId:14,tocIndex:3},{value:"，见 ",paraId:14,tocIndex:3},{value:"面积图特殊标签",paraId:15,tocIndex:3},{value:"。针对 radial 类型的图标，增加了 ",paraId:14,tocIndex:3},{value:"spider",paraId:14,tocIndex:3},{value:"、",paraId:14,tocIndex:3},{value:"surround",paraId:14,tocIndex:3},{value:" 两种类型。",paraId:14,tocIndex:3},{value:"position",paraId:16,tocIndex:3},{value:"用途",paraId:16,tocIndex:3},{value:"使用前",paraId:16,tocIndex:3},{value:"使用后",paraId:16,tocIndex:3},{value:"spider",paraId:16,tocIndex:3},{value:"调整标签沿坐标轴边沿两端对齐，适用于 polar 坐标系",paraId:16,tocIndex:3},{value:"surround",paraId:16,tocIndex:3},{value:"调整标签环形环绕做坐标系，适用于 polar 坐标系下的玫瑰图",paraId:16,tocIndex:3},{value:"area",paraId:16,tocIndex:3},{value:"将面积图的标签显示在面积区域中心，并设置一定的旋转角度",paraId:16,tocIndex:3},{value:"selector 选择器可以对系列数据进行过滤索引。",paraId:17,tocIndex:4},{value:"通常适用于折线图、面积图等一个几何图形会对应一组数据的 mark，见 ",paraId:18,tocIndex:4},{value:"折线图尾随标签",paraId:19,tocIndex:4},{value:"内置选择器有：",paraId:20,tocIndex:4},{value:"'last'",paraId:20,tocIndex:4},{value:", ",paraId:20,tocIndex:4},{value:"'first'",paraId:20,tocIndex:4},{value:"，同时也支持 ",paraId:20,tocIndex:4},{value:"function",paraId:20,tocIndex:4},{value:" 回调的方式自定义，如下：",paraId:20,tocIndex:4},{value:"{\n  selector: (data) => {\n    if (data.length) {\n      // 对于每个系列的数据，只保留索引等于 2 的标签\n      return data.filter((d, index) => index === 2);\n    }\n    return data;\n  };\n}\n",paraId:21,tocIndex:4},{value:"所有的 transform 有单独具体的文档，具体参考 ",paraId:22,tocIndex:5},{value:"Label.transform",paraId:23,tocIndex:5},{value:"。",paraId:22,tocIndex:5},{value:"使用 label 配置手册中的 ",paraId:24,tocIndex:6},{value:"render",paraId:24,tocIndex:6},{value:" 即可，具体使用可以参考 ",paraId:24,tocIndex:6},{value:"DEMO",paraId:25,tocIndex:6},{value:"。",paraId:24,tocIndex:6}]},30463:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(54298);const t=[{value:"Area",paraId:0},{value:" 图形标记大部分场景用来绘制我们常见的面积图，它是在折线图的基础上，将包围的区域使用颜色或者纹理填充，可以用来更好的突出趋势，以及趋势的堆积信息。",paraId:0},{value:"在视觉通道设计上，",paraId:1},{value:"Area",paraId:1},{value:" 除了和 ",paraId:1},{value:"Line",paraId:1},{value:" 不同的地方在于，可以设置 ",paraId:1},{value:"y",paraId:1},{value:" 为长度为 2 的数组，分别代表面积的上边界和下边界，默认下边界为 0。",paraId:1},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/aapl.json',\n  transform: [\n    {\n      type: 'map',\n      callback: (d) => ({\n        ...d,\n        date: new Date(d.date),\n      }),\n    },\n  ],\n});\n\nchart.area().encode('x', 'date').encode('y', 'close');\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"更多的案例，可以查看",paraId:3,tocIndex:0},{value:"图表示例",paraId:4,tocIndex:0},{value:"页面。",paraId:3,tocIndex:0},{value:"目前 area 有以下几个内置 shape 图形，默认为 ",paraId:5,tocIndex:1},{value:"area",paraId:5,tocIndex:1},{value:"。",paraId:5,tocIndex:1},{value:"图形",paraId:6,tocIndex:1},{value:"描述",paraId:6,tocIndex:1},{value:"示例",paraId:6,tocIndex:1},{value:"area",paraId:6,tocIndex:1},{value:"绘制直线连接的面积图",paraId:6,tocIndex:1},{value:"smooth",paraId:6,tocIndex:1},{value:"绘制平滑曲线的面积图",paraId:6,tocIndex:1},{value:"vh",paraId:6,tocIndex:1},{value:"绘制阶梯面积图，先竖线后横线连接",paraId:6,tocIndex:1},{value:"hv",paraId:6,tocIndex:1},{value:"绘制阶梯面积图，先横线后竖线连接",paraId:6,tocIndex:1},{value:"hvh",paraId:6,tocIndex:1},{value:"绘制阶梯面积图，竖横竖，中点连接",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"connect",paraId:7,tocIndex:2},{value:"是否连接空值",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"false",paraId:7,tocIndex:2},{value:"connect[Style]",paraId:7,tocIndex:2},{value:"connector 对应的属性样式",paraId:7,tocIndex:2},{value:"和对应 ",paraId:7,tocIndex:2},{value:"style",paraId:7,tocIndex:2},{value:" 保持一致",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"defined",paraId:7,tocIndex:2},{value:"决定数据是否为空值",paraId:7,tocIndex:2},{value:"(v: any) = boolean",paraId:7,tocIndex:2},{value:"!(NaN || null || undefine)",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2},{value:"和 ",paraId:8,tocIndex:3},{value:"area",paraId:8,tocIndex:3},{value:" 配置相同。",paraId:8,tocIndex:3},{value:"和 ",paraId:9,tocIndex:4},{value:"area",paraId:9,tocIndex:4},{value:" 配置相同。",paraId:9,tocIndex:4},{value:"和 ",paraId:10,tocIndex:5},{value:"area",paraId:10,tocIndex:5},{value:" 配置相同。",paraId:10,tocIndex:5},{value:"和 ",paraId:11,tocIndex:6},{value:"area",paraId:11,tocIndex:6},{value:" 配置相同。",paraId:11,tocIndex:6},{value:"使用 connect 功能时，怎么决定什么样的数据为空值？",paraId:12,tocIndex:7},{value:"可以使用 ",paraId:13,tocIndex:7},{value:"defined",paraId:13,tocIndex:7},{value:" 配置去决定是否为非空值，默认 NaN、undefined、null 为空值。假设需要数据为 ",paraId:13,tocIndex:7},{value:"0",paraId:13,tocIndex:7},{value:" 的时候是空值连接。",paraId:13,tocIndex:7},{value:"chart\n  .area()\n  // ...\n  .style('defined', (v) => v === 0);\n",paraId:14,tocIndex:7}]},40307:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(22676);const t=[{value:"Box",paraId:0},{value:" 图形是用来绘制箱线图（boxplot）又叫盒须图、盒式图，通常用来展示一组数据分布情况的统计图，一般包括几种数据：",paraId:0},{value:"最小值",paraId:0},{value:"、",paraId:0},{value:"下四分位数",paraId:0},{value:"、",paraId:0},{value:"中位数",paraId:0},{value:"、",paraId:0},{value:"上四分位数",paraId:0},{value:"、",paraId:0},{value:"最大值",paraId:0},{value:"，另外可以结合 ",paraId:0},{value:"point",paraId:0},{value:" mark 绘制异常点数据。",paraId:0},{value:"Box 特殊的一点在于 ",paraId:1},{value:"y",paraId:1},{value:" 通道对应的数据是一组统计数据的数组，最后会将数据映射为箱线图所需求的 14 个点集合。",paraId:1},{value:"/**\n *\n * p0           p2          p1\n *    ──────────┬──────────\n *              │\n *              │\n *              │\n *              │ p3\n * p4 ┌─────────┴──────────┐ p5\n *    │                    │\n *    │                    │\n * p8 ├────────────────────┤ p9\n *    │                    │\n *    │        p10         │\n * p7 └─────────┬──────────┘ p6\n *              │\n *              │\n *              │\n *   ───────────┴───────────\n * p12         p11           p13\n */\n",paraId:2},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  { x: 'Oceania', y: [1, 9, 16, 22, 24] },\n  { x: 'East Europe', y: [1, 5, 8, 12, 16] },\n  { x: 'Australia', y: [1, 8, 12, 19, 26] },\n  { x: 'South America', y: [2, 8, 12, 21, 28] },\n  { x: 'North Africa', y: [1, 8, 14, 18, 24] },\n  { x: 'North America', y: [3, 10, 17, 28, 30] },\n  { x: 'West Europe', y: [1, 7, 10, 17, 22] },\n  { x: 'West Africa', y: [1, 6, 8, 13, 16] },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .box()\n  .data(data)\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .scale('x', { paddingInner: 0.6, paddingOuter: 0.3 })\n  .scale('y', { zero: true })\n  .legend(false)\n  .style('stroke', 'black');\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前有图形 ",paraId:6,tocIndex:1},{value:"box",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"violin",paraId:6,tocIndex:1},{value:"，下面描述一下所有的 ",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:" 配置项。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2},{value:"同 ",paraId:8,tocIndex:3},{value:"box",paraId:8,tocIndex:3},{value:" 图形配置。",paraId:8,tocIndex:3},{value:"怎么在前端进行数据分布情况的分析？",paraId:9,tocIndex:4},{value:"G2 的 ",paraId:10,tocIndex:4},{value:"transform",paraId:10,tocIndex:4},{value:" 可以进行数据的转换，这里就可以实现对数据进行 ",paraId:10,tocIndex:4},{value:"最小值",paraId:10,tocIndex:4},{value:"、",paraId:10,tocIndex:4},{value:"下四分位数",paraId:10,tocIndex:4},{value:"、",paraId:10,tocIndex:4},{value:"中位数",paraId:10,tocIndex:4},{value:"、",paraId:10,tocIndex:4},{value:"上四分位数",paraId:10,tocIndex:4},{value:"、",paraId:10,tocIndex:4},{value:"最大值",paraId:10,tocIndex:4},{value:" 的统计，当然也可以调用社区提供的",paraId:10,tocIndex:4},{value:"算法库",paraId:10,tocIndex:4},{value:"。",paraId:10,tocIndex:4},{value:"chart.box().data({\n  type: 'connector',\n  value: [\n    /* your detail data */\n  ],\n  callback: (data) => {\n    // todo: aggregate your data, and return it.\n    return data;\n  },\n});\n",paraId:11,tocIndex:4},{value:"当然也可以直接使用 ",paraId:12,tocIndex:4},{value:"boxplot",paraId:13,tocIndex:4},{value:" 图形标记。",paraId:12,tocIndex:4}]},88396:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(36005);const t=[{value:"Boxplot",paraId:0},{value:" 和 ",paraId:0},{value:"Box",paraId:1},{value:" 非常相似，都是用来绘制箱线图（boxplot）又叫盒须图、盒式图，通常用来展示一组数据分布情况的统计图，一般包括几种数据：",paraId:0},{value:"最小值",paraId:0},{value:"、",paraId:0},{value:"下四分位数",paraId:0},{value:"、",paraId:0},{value:"中位数",paraId:0},{value:"、",paraId:0},{value:"上四分位数",paraId:0},{value:"、",paraId:0},{value:"最大值",paraId:0},{value:"。不同点在于：",paraId:0},{value:"Boxplot",paraId:2},{value:" 是高阶 mark，自带数据分组和数据统计聚合；",paraId:2},{value:"Box",paraId:2},{value:" 是原子 mark，需要开发者手动指定 5 个点的数据；",paraId:2},{value:"所以 ",paraId:3},{value:"Boxplot",paraId:3},{value:" 更适合用于前端数据的探索和分析过程，而 ",paraId:3},{value:"Box",paraId:3},{value:" 更适用于后端对超大数据进行计算和统计之后，可视化展示。",paraId:3},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 60,\n  inset: 6,\n});\n\nchart\n  .boxplot()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/morley.json',\n  })\n  .encode('x', 'Expt')\n  .encode('y', 'Speed');\n\nchart.render();\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0},{value:"属性",paraId:7,tocIndex:1},{value:"描述",paraId:7,tocIndex:1},{value:"类型",paraId:7,tocIndex:1},{value:"默认值",paraId:7,tocIndex:1},{value:"extend",paraId:7,tocIndex:1},{value:"数据展示模式，",paraId:7,tocIndex:1},{value:"true",paraId:7,tocIndex:1},{value:" 的时候，Q1 Q4 点分别最小、最大值，否则按照本文概述的图来计算",paraId:7,tocIndex:1},{value:"boolean",paraId:7,tocIndex:1},{value:"false",paraId:7,tocIndex:1},{value:"pointFill",paraId:7,tocIndex:1},{value:"图形的填充色",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointFillOpacity",paraId:7,tocIndex:1},{value:"图形的填充透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointStroke",paraId:7,tocIndex:1},{value:"图形的描边",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointLineWidth",paraId:7,tocIndex:1},{value:"图形描边的宽度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointllineDash",paraId:7,tocIndex:1},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:1},{value:"[number,number]",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<[number, number]>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointLineOpacity",paraId:7,tocIndex:1},{value:"描边透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointOpacity",paraId:7,tocIndex:1},{value:"图形的整体透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointShadowColor",paraId:7,tocIndex:1},{value:"图形阴影颜色",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointShadowBlur",paraId:7,tocIndex:1},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointShadowOffsetX",paraId:7,tocIndex:1},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointShadowOffsetY",paraId:7,tocIndex:1},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"pointCursor",paraId:7,tocIndex:1},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"'default'",paraId:7,tocIndex:1},{value:"boxFill",paraId:7,tocIndex:1},{value:"图形的填充色",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxFillOpacity",paraId:7,tocIndex:1},{value:"图形的填充透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxStroke",paraId:7,tocIndex:1},{value:"图形的描边",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxLineWidth",paraId:7,tocIndex:1},{value:"图形描边的宽度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxLineDash",paraId:7,tocIndex:1},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:1},{value:"[number,number]",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<[number, number]>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxLineOpacity",paraId:7,tocIndex:1},{value:"描边透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxOpacity",paraId:7,tocIndex:1},{value:"图形的整体透明度",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxShadowColor",paraId:7,tocIndex:1},{value:"图形阴影颜色",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxShadowBlur",paraId:7,tocIndex:1},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxShadowOffsetX",paraId:7,tocIndex:1},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxShadowOffsetY",paraId:7,tocIndex:1},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:1},{value:"number",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<number>",paraId:7,tocIndex:1},{value:"-",paraId:7,tocIndex:1},{value:"boxCursor",paraId:7,tocIndex:1},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:" | ",paraId:7,tocIndex:1},{value:"Function<string>",paraId:7,tocIndex:1},{value:"'default'",paraId:7,tocIndex:1},{value:"数据量很大，把异常点以及四分位点的数据放到服务端计算，改怎么绘制箱线图？",paraId:8,tocIndex:2},{value:"这种情况使用 ",paraId:9,tocIndex:2},{value:"box",paraId:9,tocIndex:2},{value:" mark 去绘制是最优的，参考 ",paraId:9,tocIndex:2},{value:"box",paraId:10,tocIndex:2},{value:"。",paraId:9,tocIndex:2}]},89332:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(39207);const t=[{value:"根据 x, y 将空间划分成一个子单元格，然后进行可视化绘制，常见于一些方块图，如日历图、聚合热力图等。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/rect_heatmap_weather.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 300,\n});\n\nchart\n  .cell()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .transform({ type: 'group', color: 'max' })\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', (d) => new Date(d.date).getUTCMonth())\n  .encode('color', 'temp_max')\n  .style('inset', 0.5)\n  .scale('color', {\n    type: 'sequential',\n    palette: 'gnBu',\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 cell 有以下几个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"cell",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"cell",paraId:5,tocIndex:1},{value:"矩形",paraId:5,tocIndex:1},{value:"hollow",paraId:5,tocIndex:1},{value:"空心矩形",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"radius",paraId:6,tocIndex:2},{value:"矩形的四个圆角大小",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopLeft",paraId:6,tocIndex:2},{value:"左上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopRight",paraId:6,tocIndex:2},{value:"右上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomRight",paraId:6,tocIndex:2},{value:"右下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomLeft",paraId:6,tocIndex:2},{value:"左下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"inset",paraId:6,tocIndex:2},{value:"矩形四个方向的内边距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetLeft",paraId:6,tocIndex:2},{value:"左边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetRight",paraId:6,tocIndex:2},{value:"右边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetBottom",paraId:6,tocIndex:2},{value:"下面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetTop",paraId:6,tocIndex:2},{value:"上面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"和 ",paraId:7,tocIndex:3},{value:"rect",paraId:7,tocIndex:3},{value:" 配置相同。",paraId:7,tocIndex:3}]},72508:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(35323);const t=[{value:'<embed src="@/docs/spec/mark/chord.zh.md"></embed>',paraId:0}]},68717:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(19362);const t=[{value:"接受核密度数据，一般用于用于绘制小提琴图。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/species.json',\n  transform: [\n    {\n      type: 'kde',\n      field: 'y',\n      groupBy: ['x'],\n      size: 20,\n    },\n  ],\n});\n\nchart\n  .density()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .encode('size', 'size')\n  .tooltip(false);\n\nchart.render();\n\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"fill",paraId:2,tocIndex:1},{value:"图形的填充色",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<string>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"fillOpacity",paraId:2,tocIndex:1},{value:"图形的填充透明度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"stroke",paraId:2,tocIndex:1},{value:"图形的描边",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<string>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"strokeOpacity",paraId:2,tocIndex:1},{value:"描边透明度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"lineWidth",paraId:2,tocIndex:1},{value:"图形描边的宽度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"lineDash",paraId:2,tocIndex:1},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:2,tocIndex:1},{value:"[number,number]",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<[number, number]>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"opacity",paraId:2,tocIndex:1},{value:"图形的整体透明度",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"shadowColor",paraId:2,tocIndex:1},{value:"图形阴影颜色",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<string>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"shadowBlur",paraId:2,tocIndex:1},{value:"图形阴影的高斯模糊系数",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"shadowOffsetX",paraId:2,tocIndex:1},{value:"设置阴影距图形的水平距离",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"shadowOffsetY",paraId:2,tocIndex:1},{value:"设置阴影距图形的垂直距离",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<number>",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"cursor",paraId:2,tocIndex:1},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"Function<string>",paraId:2,tocIndex:1},{value:"'default'",paraId:2,tocIndex:1}]},34947:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(29409);const t=[{value:"仪表盘",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .gauge()\n  .data({\n    value: {\n      target: 120,\n      total: 400,\n      name: 'score',\n    },\n  })\n  .legend(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"data",paraId:2,tocIndex:1},{value:"数据",paraId:2,tocIndex:1},{value:"GaugeData",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"labels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"target",paraId:3,tocIndex:2},{value:"目标值",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"total",paraId:3,tocIndex:2},{value:"总计值",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"percent",paraId:3,tocIndex:2},{value:"百分比",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"thresholds",paraId:3,tocIndex:2},{value:"阈值区间",paraId:3,tocIndex:2},{value:"number[]",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3}]},64549:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(41276);const t=[{value:"用于绘制密度热力图，使用的时候，需要指定数据通道 encode 中的 ",paraId:0},{value:"x",paraId:0},{value:"，",paraId:0},{value:"y",paraId:0},{value:"，",paraId:0},{value:"color",paraId:0},{value:"。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n  padding: 0,\n});\n\nchart.axis(false);\n\nchart\n  .image()\n  .style(\n    'src',\n    'https://gw.alipayobjects.com/zos/rmsportal/NeUTMwKtPcPxIFNTWZOZ.png',\n  )\n  .style('x', '50%')\n  .style('y', '50%')\n  .style('width', '100%')\n  .style('height', '100%')\n  .tooltip(false);\n\nchart\n  .heatmap()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/heatmap.json',\n  })\n  .encode('x', 'g')\n  .encode('y', 'l')\n  .encode('color', 'tmp')\n  .style('opacity', 0)\n  .tooltip(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"对于 heatmap 图形的样式配置中，主要有以下：",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"gradient",paraId:3,tocIndex:1},{value:"图形对应的渐变色配置",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Array<[number, string]>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"opacity",paraId:3,tocIndex:1},{value:"热力图的透明度 ，如果设置，则会覆盖 ",paraId:3,tocIndex:1},{value:"maxOpacity",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"minOpacity",paraId:3,tocIndex:1},{value:" 配置，范围 0 ~ 1",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0.6",paraId:3,tocIndex:1},{value:"maxOpacity",paraId:3,tocIndex:1},{value:"热力图像素点透明度最大值，在 ",paraId:3,tocIndex:1},{value:"opacity = 0",paraId:3,tocIndex:1},{value:" 时候生效，范围 0 ~ 1",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"1",paraId:3,tocIndex:1},{value:"minOpacity",paraId:3,tocIndex:1},{value:"热力图像素点透明度最小值，在 ",paraId:3,tocIndex:1},{value:"opacity = 0",paraId:3,tocIndex:1},{value:" 时候生效，范围 0 ~ 1",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"blur",paraId:3,tocIndex:1},{value:"热力图的模糊因子，范围 0 ~ 1，越大图形约平滑",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0.85",paraId:3,tocIndex:1},{value:"useGradientOpacity",paraId:3,tocIndex:1},{value:"图形的填充色",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"fill",paraId:3,tocIndex:1},{value:"图形的填充色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<string>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"fillOpacity",paraId:3,tocIndex:1},{value:"图形的填充透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"stroke",paraId:3,tocIndex:1},{value:"图形的描边",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<string>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"strokeOpacity",paraId:3,tocIndex:1},{value:"描边透明度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"lineWidth",paraId:3,tocIndex:1},{value:"图形描边的宽度",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"lineDash",paraId:3,tocIndex:1},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:3,tocIndex:1},{value:"[number,number]",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<[number, number]>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"shadowColor",paraId:3,tocIndex:1},{value:"图形阴影颜色",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<string>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"shadowBlur",paraId:3,tocIndex:1},{value:"图形阴影的高斯模糊系数",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"shadowOffsetX",paraId:3,tocIndex:1},{value:"设置阴影距图形的水平距离",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"shadowOffsetY",paraId:3,tocIndex:1},{value:"设置阴影距图形的垂直距离",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<number>",paraId:3,tocIndex:1},{value:"-",paraId:3,tocIndex:1},{value:"cursor",paraId:3,tocIndex:1},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"Function<string>",paraId:3,tocIndex:1},{value:"'default'",paraId:3,tocIndex:1},{value:"关于 ",paraId:4,tocIndex:1},{value:"gradient",paraId:4,tocIndex:1},{value:" 配置，来一个示例如下，也是 G2 默认内置的渐变色：",paraId:4,tocIndex:1},{value:"const gradient = [\n  [0.25, 'rgb(0,0,255)'],\n  [0.55, 'rgb(0,255,0)'],\n  [0.85, 'yellow'],\n  [1.0, 'rgb(255,0,0)'],\n];\n\nconst gradient = '0.25:rgb(0,0,255) 0.55:rgb(0,255,0) 0.85:yellow 1.0:rgb(255,0,0)';\n",paraId:5,tocIndex:1}]},18548:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(24397);const t=[{value:"Image",paraId:0},{value:" 标记和 ",paraId:0},{value:"Point",paraId:1},{value:" 标记很类似，都是以 ",paraId:0},{value:"x",paraId:0},{value:"，",paraId:0},{value:"y",paraId:0},{value:" 数据通道作为位置居中定位，区别在于 ",paraId:0},{value:"Image",paraId:0},{value:" 提供一个特殊的 ",paraId:0},{value:"src",paraId:0},{value:" 数据通道，来指定图片的远程地址或者 base64。",paraId:0},{value:"这里有一个简单的浏览器占比数据，我们对它进行可视化，便于看到不同浏览器的占比对比。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst data = [\n  {\n    name: 'Internet Explorer',\n    value: 26,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/eOYRaLPOmkieVvjyjTzM.png',\n  },\n  {\n    name: 'Chrome',\n    value: 40,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/dWJWRLWfpOEbwCyxmZwu.png',\n  },\n  {\n    name: 'Firefox',\n    value: 30,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/ZEPeDluKmAoTioCABBTc.png',\n  },\n  {\n    name: 'Safari',\n    value: 24,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/eZYhlLzqWLAYwOHQAXmc.png',\n  },\n  {\n    name: 'Opera',\n    value: 15,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/vXiGOWCGZNKuVVpVYQAw.png',\n  },\n  {\n    name: 'Undetectable',\n    value: 8,\n    url: 'https://gw.alipayobjects.com/zos/rmsportal/NjApYXminrnhBgOXyuaK.png',\n  },\n];\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data(data);\n\nchart\n  .link()\n  .encode('x', ['name', 'name'])\n  .encode('y', (d) => [0, d.value])\n  .style('stroke', '#dfdfdf')\n  .style('lineDash', [2, 2]);\n\nchart\n  .line()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('shape', 'smooth')\n  .scale('x', { type: 'band' })\n  .scale('y', { domain: [0, 50] })\n  .style('opacity', 0.5);\n\nchart\n  .image()\n  .encode('x', 'name')\n  .encode('y', 'value')\n  .encode('src', 'url')\n  .scale('x', { type: 'band' })\n  .scale('y', { domain: [0, 50] });\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前仅有一种同名的图形 ",paraId:6,tocIndex:1},{value:"image",paraId:6,tocIndex:1},{value:"，下面描述一下所有的 ",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:" 配置项。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2},{value:"图片的 src 通道支持哪些数据类型？",paraId:8,tocIndex:3},{value:"最终的绘制都是调用 G 去渲染，所以支持的数据类型和 G 的原子 Image 图形保持一致，支持：",paraId:9,tocIndex:3},{value:"远程地址",paraId:9,tocIndex:3},{value:"、",paraId:9,tocIndex:3},{value:"base64",paraId:9,tocIndex:3},{value:"、",paraId:9,tocIndex:3},{value:"blob",paraId:9,tocIndex:3},{value:"、",paraId:9,tocIndex:3},{value:"file",paraId:9,tocIndex:3},{value:"。",paraId:9,tocIndex:3}]},71881:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(23658);const t=[{value:"通常用来绘制柱形图、条形图、饼图等，通过坐标系、比例尺、数据 Transform 等的变化，可以产生多种多样的可视化表现样式，是图形语法中，最常用的 Mark。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/bar_layered_transparent.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    format: 'csv',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.year === 2000,\n      },\n    ],\n  })\n  .transform({ type: 'groupX', y: 'sum' })\n  .encode('x', 'age')\n  .encode('y', 'people')\n  .encode('color', 'sex')\n  .scale('color', { type: 'ordinal', range: ['#ca8861', '#675193'] })\n  .axis('y', { labelFormatter: '~s' })\n  .style('fillOpacity', 0.7);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 interval 有以下几个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"rect",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"rect",paraId:5,tocIndex:1},{value:"绘制填充的矩形",paraId:5,tocIndex:1},{value:"hollow",paraId:5,tocIndex:1},{value:"绘制空心的矩形",paraId:5,tocIndex:1},{value:"funnel",paraId:5,tocIndex:1},{value:"绘制漏斗图",paraId:5,tocIndex:1},{value:"pyramid",paraId:5,tocIndex:1},{value:"绘制金字塔形状",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"minWidth",paraId:6,tocIndex:2},{value:"柱子的最小宽度，单位为像素",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:"-Infinity",paraId:6,tocIndex:2},{value:"maxWidth",paraId:6,tocIndex:2},{value:"柱子的最大宽度，单位为像素",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:"Infinity",paraId:6,tocIndex:2},{value:"minHeight",paraId:6,tocIndex:2},{value:"柱子的最小高度，单位为像素",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:"-Infinity",paraId:6,tocIndex:2},{value:"radius",paraId:6,tocIndex:2},{value:"外层矩形的四个圆角大小",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopLeft",paraId:6,tocIndex:2},{value:"外层左上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopRight",paraId:6,tocIndex:2},{value:"外层右上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomRight",paraId:6,tocIndex:2},{value:"外层右下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomLeft",paraId:6,tocIndex:2},{value:"外层左下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"innerRadius",paraId:6,tocIndex:2},{value:"内层矩形的四个圆角大小",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"innerRadiusTopLeft",paraId:6,tocIndex:2},{value:"内层左上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"innerRadiusTopRight",paraId:6,tocIndex:2},{value:"内层右上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"innerRadiusBottomRight",paraId:6,tocIndex:2},{value:"内层右下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"innerRadiusBottomLeft",paraId:6,tocIndex:2},{value:"内层左下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"inset",paraId:6,tocIndex:2},{value:"矩形四个方向的内边距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetLeft",paraId:6,tocIndex:2},{value:"左边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetRight",paraId:6,tocIndex:2},{value:"右边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetBottom",paraId:6,tocIndex:2},{value:"下面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetTop",paraId:6,tocIndex:2},{value:"上面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"和 ",paraId:7,tocIndex:3},{value:"rect",paraId:7,tocIndex:3},{value:" 配置相同。",paraId:7,tocIndex:3},{value:"和 ",paraId:8,tocIndex:4},{value:"rect",paraId:8,tocIndex:4},{value:" 配置相同。",paraId:8,tocIndex:4},{value:"和 ",paraId:9,tocIndex:5},{value:"rect",paraId:9,tocIndex:5},{value:" 配置相同。",paraId:9,tocIndex:5},{value:"怎么绘制圆角的柱形图",paraId:10,tocIndex:6},{value:"使用 ",paraId:11,tocIndex:6},{value:"radius",paraId:11,tocIndex:6},{value:" 样式配置即可。",paraId:11,tocIndex:6},{value:"chart\n  .interval()\n  // ...\n  .style('radius', 4);\n",paraId:12,tocIndex:6}]},32489:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(66286);const t=[{value:"根据一系列的点，绘制折线，通常用来绘制折线图，最常用的 mark 之一。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .line()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/551d80c6-a6be-4f3c-a82a-abd739e12977.csv',\n  })\n  .encode('x', 'date')\n  .encode('y', 'close');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 line 有以下几个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"line",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"line",paraId:5,tocIndex:1},{value:"绘制直线连接的折线图",paraId:5,tocIndex:1},{value:"smooth",paraId:5,tocIndex:1},{value:"绘制平滑曲线的折线图",paraId:5,tocIndex:1},{value:"vh",paraId:5,tocIndex:1},{value:"绘制阶梯折线图，先竖线后横线连接",paraId:5,tocIndex:1},{value:"hv",paraId:5,tocIndex:1},{value:"绘制阶梯折线图，先横线后竖线连接",paraId:5,tocIndex:1},{value:"hvh",paraId:5,tocIndex:1},{value:"绘制阶梯折线图，竖横竖，中点连接",paraId:5,tocIndex:1},{value:"trail",paraId:5,tocIndex:1},{value:"绘制轨迹，类似一个笔迹",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"connect",paraId:6,tocIndex:2},{value:"是否连接空值",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"connect[Style]",paraId:6,tocIndex:2},{value:"connector 对应的属性样式",paraId:6,tocIndex:2},{value:"和对应 ",paraId:6,tocIndex:2},{value:"style",paraId:6,tocIndex:2},{value:" 保持一致",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"defined",paraId:6,tocIndex:2},{value:"决定数据是否为空值",paraId:6,tocIndex:2},{value:"(v: any) = boolean",paraId:6,tocIndex:2},{value:"!(NaN || null || undefine)",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"和 ",paraId:7,tocIndex:3},{value:"line",paraId:7,tocIndex:3},{value:" 配置相同。",paraId:7,tocIndex:3},{value:"和 ",paraId:8,tocIndex:4},{value:"line",paraId:8,tocIndex:4},{value:" 配置相同。",paraId:8,tocIndex:4},{value:"和 ",paraId:9,tocIndex:5},{value:"line",paraId:9,tocIndex:5},{value:" 配置相同。",paraId:9,tocIndex:5},{value:"和 ",paraId:10,tocIndex:6},{value:"line",paraId:10,tocIndex:6},{value:" 配置相同。",paraId:10,tocIndex:6}]},35924:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(67350);const t=[{value:"指定 ",paraId:0},{value:"x",paraId:0},{value:" 通道来绘制垂直于 x 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_histogram_global_mean.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/movies.json',\n  transform: [{\n    type: 'filter',\n    callback: (d) => d[IMDB Rating] > 0,\n  }],\n});\n\nchart\n  .rect()\n  .transform({ type: 'binX', y: 'count', thresholds: 9 })\n  .encode('x', 'IMDB Rating')\n  .scale('y', { domainMax: 1000 })\n  .style('inset', 1);\n\nchart\n  .lineX()\n  .transform({ type: 'groupColor', y: 'mean' })\n  .encode('x', 'IMDB Rating')\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 5);\n\nchart.render();\n\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 lineX 只有一种 ",paraId:4,tocIndex:1},{value:"line",paraId:4,tocIndex:1},{value:" 的 shape 图形。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"fill",paraId:5,tocIndex:2},{value:"图形的填充色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"fillOpacity",paraId:5,tocIndex:2},{value:"图形的填充透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"stroke",paraId:5,tocIndex:2},{value:"图形的描边",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"strokeOpacity",paraId:5,tocIndex:2},{value:"描边透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineWidth",paraId:5,tocIndex:2},{value:"图形描边的宽度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineDash",paraId:5,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:5,tocIndex:2},{value:"[number,number]",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<[number, number]>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"opacity",paraId:5,tocIndex:2},{value:"图形的整体透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowColor",paraId:5,tocIndex:2},{value:"图形阴影颜色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowBlur",paraId:5,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetX",paraId:5,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetY",paraId:5,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"cursor",paraId:5,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"'default'",paraId:5,tocIndex:2}]},47097:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(35990);const t=[{value:"指定 ",paraId:0},{value:"y",paraId:0},{value:" 通道来绘制垂直于 y 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_precipitation_mean.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n});\n\nchart\n  .interval()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('x', (d) => new Date(d.date).getUTCMonth())\n  .encode('y', 'precipitation')\n  .scale('y', { tickCount: 5, domainMax: 6 });\n\nchart\n  .lineY()\n  .transform({ type: 'groupX', y: 'mean' })\n  .encode('y', 'precipitation')\n  .style('stroke', '#F4664A')\n  .style('strokeOpacity', 1)\n  .style('lineWidth', 2);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 lineY 只有一种 ",paraId:4,tocIndex:1},{value:"line",paraId:4,tocIndex:1},{value:" 的 shape 图形。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"fill",paraId:5,tocIndex:2},{value:"图形的填充色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"fillOpacity",paraId:5,tocIndex:2},{value:"图形的填充透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"stroke",paraId:5,tocIndex:2},{value:"图形的描边",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"strokeOpacity",paraId:5,tocIndex:2},{value:"描边透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineWidth",paraId:5,tocIndex:2},{value:"图形描边的宽度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineDash",paraId:5,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:5,tocIndex:2},{value:"[number,number]",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<[number, number]>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"opacity",paraId:5,tocIndex:2},{value:"图形的整体透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowColor",paraId:5,tocIndex:2},{value:"图形阴影颜色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowBlur",paraId:5,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetX",paraId:5,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetY",paraId:5,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"cursor",paraId:5,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"'default'",paraId:5,tocIndex:2}]},16144:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(58212);const t=[{value:"Link",paraId:0},{value:" 标记使用两个用 (x, y) 定位的点，绘制一条带方向的直线。通过指定 ",paraId:0},{value:"x",paraId:0},{value:"，",paraId:0},{value:"y",paraId:0},{value:" 通道为长度为 2 的字段数组即可。",paraId:0},{value:"/**\n * A recreation of this demo: https://observablehq.com/@observablehq/plot-link?collection=@observablehq/plot\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .link()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/SM13%24lHuYH/metros.json',\n  })\n  .encode('x', ['POP_1980', 'POP_2015'])\n  .encode('y', ['R90_10_1980', 'R90_10_2015'])\n  .encode('color', (d) => d.R90_10_2015 - d.R90_10_1980)\n  .scale('x', { type: 'log' })\n  .style('arrowSize', 6)\n  .axis('x', { labelFormatter: '~s', label: { autoHide: true } })\n  .legend(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前仅有一种同名的图形 ",paraId:4,tocIndex:1},{value:"link",paraId:4,tocIndex:1},{value:"，下面描述一下所有的 ",paraId:4,tocIndex:1},{value:"style",paraId:4,tocIndex:1},{value:" 配置项。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"arrowSize",paraId:5,tocIndex:2},{value:"箭头图标的大小，可以指定像素值、也可以指定箭头长度的相对值。",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:"'40%'",paraId:5,tocIndex:2},{value:"fill",paraId:5,tocIndex:2},{value:"图形的填充色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"fillOpacity",paraId:5,tocIndex:2},{value:"图形的填充透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"stroke",paraId:5,tocIndex:2},{value:"图形的描边",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"strokeOpacity",paraId:5,tocIndex:2},{value:"描边透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineWidth",paraId:5,tocIndex:2},{value:"图形描边的宽度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineDash",paraId:5,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:5,tocIndex:2},{value:"[number,number]",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<[number, number]>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"opacity",paraId:5,tocIndex:2},{value:"图形的整体透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowColor",paraId:5,tocIndex:2},{value:"图形阴影颜色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowBlur",paraId:5,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetX",paraId:5,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetY",paraId:5,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"cursor",paraId:5,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"'default'",paraId:5,tocIndex:2},{value:"怎么指定箭头图标的长度？",paraId:6,tocIndex:3},{value:"有两种指定箭头图标长度的方式，一种是通过填写像素值，比如 ",paraId:7,tocIndex:3},{value:"40",paraId:7,tocIndex:3},{value:"，来指定为固定长度；另外一种是通过指定一个百分比，比如 ",paraId:7,tocIndex:3},{value:"30%",paraId:7,tocIndex:3},{value:"，来指定参考箭头长度的相对长度。默认值为 ",paraId:7,tocIndex:3},{value:"40%",paraId:7,tocIndex:3},{value:"。如下示例：",paraId:7,tocIndex:3},{value:"chart\n  .link()\n  // ...\n  .style({\n    arrowSize: 40,\n    // arrowSize: '30%',\n  });\n",paraId:8,tocIndex:3}]},48265:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(97098);const t=[{value:"水波图",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nchart\n  .liquid()\n  .data(0.3)\n  .style({\n    outlineBorder: 4,\n    outlineDistance: 8,\n    waveLength: 128,\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"data",paraId:2,tocIndex:1},{value:"数据",paraId:2,tocIndex:1},{value:"GaugeData",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"对水波图中的三个部分",paraId:3,tocIndex:2},{value:"属性",paraId:4,tocIndex:2},{value:"描述",paraId:4,tocIndex:2},{value:"类型",paraId:4,tocIndex:2},{value:"默认值",paraId:4,tocIndex:2},{value:"outlineBorder",paraId:4,tocIndex:2},{value:"边框宽度",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"outlineDistance",paraId:4,tocIndex:2},{value:"内间距",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"outlineStroke",paraId:4,tocIndex:2},{value:"边框颜色",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"waveLength",paraId:4,tocIndex:2},{value:"波长",paraId:4,tocIndex:2},{value:"number",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"backgroundFill",paraId:4,tocIndex:2},{value:"背景颜色",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"textFill",paraId:4,tocIndex:2},{value:"文本颜色",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"textFontSize",paraId:4,tocIndex:2},{value:"文本大小",paraId:4,tocIndex:2},{value:"string",paraId:4,tocIndex:2},{value:"-",paraId:4,tocIndex:2},{value:"目前 liquid 有以下几个内置 shape 图形，默认为 ",paraId:5,tocIndex:3},{value:"circle",paraId:5,tocIndex:3},{value:"。",paraId:5,tocIndex:3},{value:"图形",paraId:6,tocIndex:3},{value:"描述",paraId:6,tocIndex:3},{value:"示例",paraId:6,tocIndex:3},{value:"rect",paraId:6,tocIndex:3},{value:"矩形",paraId:6,tocIndex:3},{value:"circle",paraId:6,tocIndex:3},{value:"圆形",paraId:6,tocIndex:3},{value:"pin",paraId:6,tocIndex:3},{value:"水滴",paraId:6,tocIndex:3},{value:"triangle",paraId:6,tocIndex:3},{value:"三角",paraId:6,tocIndex:3},{value:"为自定义 shape 形状提供回调, ",paraId:7,tocIndex:3},{value:"(x, y, r, w, h) => string",paraId:7,tocIndex:3},{value:", 传入参数分别为 x y 中心点坐标， r 图表可画圆最大半径， w h 图表可画宽高。",paraId:7,tocIndex:3}]},56597:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(19079);const t=[{value:"主要用于绘制散点图，利用点的粒度来分析数据的分布情况。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/bubble.json',\n  })\n  .encode('x', 'GDP')\n  .encode('y', 'LifeExpectancy')\n  .encode('size', 'Population')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('size', { type: 'log', range: [4, 20] })\n  .style('fillOpacity', 0.3)\n  .style('lineWidth', 1);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 point 有以下几个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"hollow",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"hollow",paraId:5,tocIndex:1},{value:"绘制空心圆",paraId:5,tocIndex:1},{value:"hollowDiamond",paraId:5,tocIndex:1},{value:"绘制空心钻石",paraId:5,tocIndex:1},{value:"hollowHexagon",paraId:5,tocIndex:1},{value:"绘制空心六边形",paraId:5,tocIndex:1},{value:"hollowSquare",paraId:5,tocIndex:1},{value:"绘制空心方块",paraId:5,tocIndex:1},{value:"hollowTriangleDown",paraId:5,tocIndex:1},{value:"绘制空心向下三角形",paraId:5,tocIndex:1},{value:"hollowTriangle",paraId:5,tocIndex:1},{value:"绘制空心三角形",paraId:5,tocIndex:1},{value:"hollowBowtie",paraId:5,tocIndex:1},{value:"绘制空心蝴蝶结",paraId:5,tocIndex:1},{value:"point",paraId:5,tocIndex:1},{value:"绘制圆",paraId:5,tocIndex:1},{value:"plus",paraId:5,tocIndex:1},{value:"绘制加号",paraId:5,tocIndex:1},{value:"diamond",paraId:5,tocIndex:1},{value:"绘制钻石",paraId:5,tocIndex:1},{value:"square",paraId:5,tocIndex:1},{value:"绘制方块",paraId:5,tocIndex:1},{value:"triangle",paraId:5,tocIndex:1},{value:"绘制三角形",paraId:5,tocIndex:1},{value:"triangleDown",paraId:5,tocIndex:1},{value:"绘制向下三角形",paraId:5,tocIndex:1},{value:"hexagon",paraId:5,tocIndex:1},{value:"绘制六边形",paraId:5,tocIndex:1},{value:"cross",paraId:5,tocIndex:1},{value:"绘制交叉符号",paraId:5,tocIndex:1},{value:"bowtie",paraId:5,tocIndex:1},{value:"绘制蝴蝶结",paraId:5,tocIndex:1},{value:"hyphen",paraId:5,tocIndex:1},{value:"绘制连字符",paraId:5,tocIndex:1},{value:"line",paraId:5,tocIndex:1},{value:"绘制竖线",paraId:5,tocIndex:1},{value:"tick",paraId:5,tocIndex:1},{value:"绘制 tick",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"其他的 point 图形配置项和 ",paraId:7,tocIndex:2},{value:"hollow",paraId:7,tocIndex:2},{value:" 一致。",paraId:7,tocIndex:2}]},6941:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(34069);const t=[{value:"Polygon 利用一组 (x, y) 数据点，来连接形成一个闭合的图形，一般都是结合社区上的可视化布局算法计算之后的数据进行可视化展示。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport * as d3 from 'd3-voronoi';\n\nconst layout = (data) => {\n  return d3\n    .voronoi()\n    .x((d) => d.x)\n    .y((d) => d.y)\n    .extent([\n      [0, 0],\n      [800, 600],\n    ])\n    .polygons(data)\n    .map((p) =>\n      Object.assign({}, p, {\n        x: p.map((pi) => pi[0]),\n        y: p.map((pi) => pi[1]),\n      }),\n    );\n};\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 0,\n  paddingRight: 0,\n  paddingTop: 0,\n  paddingBottom: 0,\n});\n\nchart\n  .polygon()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/voronoi.json',\n    transform: [\n      {\n        type: 'custom',\n        callback: layout,\n      },\n    ],\n  })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', (d) => d.data.value)\n  .scale('x', { domain: [0, 800] })\n  .scale('y', { domain: [0, 600] })\n  .axis(false)\n  .style('stroke', '#fff')\n  .style('fillOpacity', 0.65);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 polygon 有 2 个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"polygon",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"polygon",paraId:5,tocIndex:1},{value:"绘制一个闭合的多边形",paraId:5,tocIndex:1},{value:"ribbon",paraId:5,tocIndex:1},{value:"绘制一个彩带，需要 p0，p1，p2，p3 四个点，p0 p1 为起点，p2 p3 为终点",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"arrowSize",paraId:6,tocIndex:2},{value:"箭头图标的大小，可以指定像素值、也可以指定箭头长度的相对值。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:"'40%'",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"属性",paraId:7,tocIndex:3},{value:"描述",paraId:7,tocIndex:3},{value:"类型",paraId:7,tocIndex:3},{value:"默认值",paraId:7,tocIndex:3},{value:"arrowSize",paraId:7,tocIndex:3},{value:"箭头图标的大小，可以指定像素值、也可以指定箭头长度的相对值。",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:"'40%'",paraId:7,tocIndex:3},{value:"fill",paraId:7,tocIndex:3},{value:"图形的填充色",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<string>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"fillOpacity",paraId:7,tocIndex:3},{value:"图形的填充透明度",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"stroke",paraId:7,tocIndex:3},{value:"图形的描边",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<string>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"lineWidth",paraId:7,tocIndex:3},{value:"图形描边的宽度",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"lineDash",paraId:7,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:3},{value:"[number,number]",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<[number, number]>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"strokeOpacity",paraId:7,tocIndex:3},{value:"描边透明度",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"opacity",paraId:7,tocIndex:3},{value:"图形的整体透明度",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"shadowColor",paraId:7,tocIndex:3},{value:"图形阴影颜色",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<string>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"shadowBlur",paraId:7,tocIndex:3},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"shadowOffsetX",paraId:7,tocIndex:3},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"shadowOffsetY",paraId:7,tocIndex:3},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:3},{value:"number",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<number>",paraId:7,tocIndex:3},{value:"-",paraId:7,tocIndex:3},{value:"cursor",paraId:7,tocIndex:3},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:3},{value:"string",paraId:7,tocIndex:3},{value:" | ",paraId:7,tocIndex:3},{value:"Function<string>",paraId:7,tocIndex:3},{value:"'default'",paraId:7,tocIndex:3}]},69719:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(89795);const t=[{value:"使用一组 ",paraId:0},{value:"x",paraId:0},{value:"(x1, x2) 和一组 ",paraId:0},{value:"y",paraId:0},{value:"(y1, y2) 来定位一个矩形区域，常用于绘制辅助背景区域。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/0b37279d-1674-42b4-b285-29683747ad9a.json',\n});\n\nchart.lineX().data([0]);\nchart.lineY().data([0]);\n\nchart\n  .range()\n  .data([\n    { x: [-25, 0], y: [-30, 0], region: '1' },\n    { x: [-25, 0], y: [0, 20], region: '2' },\n    { x: [0, 5], y: [-30, 0], region: '2' },\n    { x: [0, 5], y: [0, 20], region: '1' },\n  ])\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'region')\n  .scale('color', {\n    range: ['#d8d0c0', '#a3dda1'],\n    independent: true,\n    guide: null,\n  })\n  .style('fillOpacity', 0.2);\n\nchart\n  .point()\n  .encode('x', 'change in female rate')\n  .encode('y', 'change in male rate')\n  .encode('size', 'pop')\n  .encode('color', 'continent')\n  .encode('shape', 'point')\n  .scale('color', {\n    range: ['#ffd500', '#82cab2', '#193442', '#d18768', '#7e827a'],\n  })\n  .axis('x', { title: false })\n  .axis('y', { title: false })\n  .scale('x', { domain: [-25, 5] })\n  .scale('y', { domain: [-30, 20] })\n  .scale('size', { range: [4, 30] })\n  .style('stroke', '#bbb')\n  .style('fillOpacity', 0.8);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 range 只有一种同名的 shape 图形。",paraId:4,tocIndex:1},{value:"属性",paraId:5,tocIndex:2},{value:"描述",paraId:5,tocIndex:2},{value:"类型",paraId:5,tocIndex:2},{value:"默认值",paraId:5,tocIndex:2},{value:"fill",paraId:5,tocIndex:2},{value:"图形的填充色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"fillOpacity",paraId:5,tocIndex:2},{value:"图形的填充透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"stroke",paraId:5,tocIndex:2},{value:"图形的描边",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"strokeOpacity",paraId:5,tocIndex:2},{value:"描边透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineWidth",paraId:5,tocIndex:2},{value:"图形描边的宽度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"lineDash",paraId:5,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:5,tocIndex:2},{value:"[number,number]",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<[number, number]>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"opacity",paraId:5,tocIndex:2},{value:"图形的整体透明度",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowColor",paraId:5,tocIndex:2},{value:"图形阴影颜色",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowBlur",paraId:5,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetX",paraId:5,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"shadowOffsetY",paraId:5,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:5,tocIndex:2},{value:"number",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<number>",paraId:5,tocIndex:2},{value:"-",paraId:5,tocIndex:2},{value:"cursor",paraId:5,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:5,tocIndex:2},{value:"string",paraId:5,tocIndex:2},{value:" | ",paraId:5,tocIndex:2},{value:"Function<string>",paraId:5,tocIndex:2},{value:"'default'",paraId:5,tocIndex:2}]},46946:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(68189);const t=[{value:"使用一组 ",paraId:0},{value:"x",paraId:0},{value:"(x1, x2) 来定位一个绘制于 x 轴的矩形区域，常用于对特定区域进行高亮显示。",paraId:0},{value:"/**\n * A recreation of this demo: https://vega.github.io/vega-lite/examples/layer_falkensee.html\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 360,\n  paddingLeft: 60,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/year-population.json',\n});\n\nchart\n  .rangeX()\n  .data([\n    { year: [new Date('1933'), new Date('1945')], event: 'Nazi Rule' },\n    { year: [new Date('1948'), new Date('1989')], event: 'GDR (East Germany)' },\n  ])\n  .encode('x', 'year')\n  .encode('color', 'event')\n  .scale('color', { independent: true, range: ['#FAAD14', '#30BF78'] })\n  .style('fillOpacity', 0.75);\n\nchart\n  .line()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'population')\n  .encode('color', '#333');\n\nchart\n  .point()\n  .encode('x', (d) => new Date(d.year))\n  .encode('y', 'population')\n  .encode('color', '#333')\n  .style('lineWidth', 1.5);\n\nchart.render();\n\n",paraId:1,tocIndex:0},{value:"此外，rangeX 还提供了简便写法：",paraId:2,tocIndex:0},{value:"chart\n  .rangeX()\n  .data([[new Date('2010'), new Date('2011')]])\n  .encode('x', d => d);  \n\n// it can be simplified as follows:\nchart\n  .rangeX()\n  .data([new Date('2010'), new Date('2011')]);\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前 rangeX 只有 range 一种 shape 图形。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2}]},2835:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(13358);const t=[{value:"使用一组 ",paraId:0},{value:"y",paraId:0},{value:"(y1, y2) 来定位一个绘制于 y 轴的矩形区域，常用于对特定区域进行高亮显示。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/basement_prod/6b4aa721-b039-49b9-99d8-540b3f87d339.json',\n  })\n  .encode('x', 'height')\n  .encode('y', 'weight')\n  .encode('color', 'gender');\n\nchart\n  .rangeY()\n  .data([{ y: [54, 72] }])\n  .encode('y', 'y');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"此外，rangeY 还提供了简便写法：",paraId:2,tocIndex:0},{value:"chart\n  .rangeY()\n  .data([[54, 60], [65, 72]])\n  .encode('y', d => d);\n\n// it can be simplified as follows:\nchart\n  .rangeY()\n  .data([[54, 60], [65, 72]]);\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前 rangeY 只有 range 一种 shape 图形。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2}]},49753:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(59578);const t=[{value:"使用两组 x，两组 y 来定位一个矩形区域，常用于直方图、矩阵树图等。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .rect()\n  .data({\n    type: 'fetch',\n    value: 'data/athletes.csv',\n  })\n  .encode('x', 'weight')\n  .encode('y', 'height')\n  .encode('color', 'sex')\n  .transform([{ type: 'bin', opacity: 'count' }])\n  .style('inset', 0.5)\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"更多的案例，可以查看",paraId:2,tocIndex:0},{value:"图表示例",paraId:3,tocIndex:0},{value:"页面。",paraId:2,tocIndex:0},{value:"目前 rect 有以下几个内置 shape 图形，默认为 ",paraId:4,tocIndex:1},{value:"rect",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"图形",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"rect",paraId:5,tocIndex:1},{value:"矩形",paraId:5,tocIndex:1},{value:"hollow",paraId:5,tocIndex:1},{value:"空心矩形",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"radius",paraId:6,tocIndex:2},{value:"矩形的四个圆角大小",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopLeft",paraId:6,tocIndex:2},{value:"左上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusTopRight",paraId:6,tocIndex:2},{value:"右上角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomRight",paraId:6,tocIndex:2},{value:"右下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"radiusBottomLeft",paraId:6,tocIndex:2},{value:"左下角的圆角",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"inset",paraId:6,tocIndex:2},{value:"矩形四个方向的内边距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetLeft",paraId:6,tocIndex:2},{value:"左边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetRight",paraId:6,tocIndex:2},{value:"右边的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetBottom",paraId:6,tocIndex:2},{value:"下面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"insetTop",paraId:6,tocIndex:2},{value:"上面的内间距",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"0",paraId:6,tocIndex:2},{value:"fill",paraId:6,tocIndex:2},{value:"图形的填充色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"fillOpacity",paraId:6,tocIndex:2},{value:"图形的填充透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"图形的描边",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"描边透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"图形描边的宽度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:6,tocIndex:2},{value:"[number,number]",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<[number, number]>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"opacity",paraId:6,tocIndex:2},{value:"图形的整体透明度",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"图形阴影颜色",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:6,tocIndex:2},{value:"number",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<number>",paraId:6,tocIndex:2},{value:"-",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:6,tocIndex:2},{value:"string",paraId:6,tocIndex:2},{value:" | ",paraId:6,tocIndex:2},{value:"Function<string>",paraId:6,tocIndex:2},{value:"'default'",paraId:6,tocIndex:2},{value:"和 ",paraId:7,tocIndex:3},{value:"rect",paraId:7,tocIndex:3},{value:" 配置相同。",paraId:7,tocIndex:3}]},23121:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(79979);const t=[{value:"shape",paraId:0},{value:" 是 G2 比较特殊的一个 mark，它通常用来在图表上绘制一个静态的自定义图形，灵活性非常高，当然技术成本也会高一些，需要了解 ",paraId:0},{value:"G",paraId:0},{value:" 的 API 去绘制图形。",paraId:0},{value:"上图中的「数据保密」的徽章图案就是使用 ",paraId:1,tocIndex:0},{value:"shape",paraId:1,tocIndex:0},{value:" 绘制。在绘制图形时，可以从图表上下文中获取 ",paraId:1,tocIndex:0},{value:"document",paraId:1,tocIndex:0},{value:" 对象，随后使用 ",paraId:1,tocIndex:0},{value:"document.createElement",paraId:1,tocIndex:0},{value:" 创建基础图形。在下面的示例中我们创建了一个 ",paraId:1,tocIndex:0},{value:"Circle",paraId:1,tocIndex:0},{value:"。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nfunction point(style) {\n  const { x, y, fill } = style;\n\n  const {\n    canvas: { document },\n  } = chart.getContext();\n\n  return document.createElement('circle', {\n    style: {\n      cx: x,\n      cy: y,\n      fill,\n    },\n  });\n}\n\nchart.shape().style({\n  x: '50%',\n  y: '50%',\n  fill: 'red',\n  render: point,\n});\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"可以查看",paraId:3,tocIndex:0},{value:"图表徽章水印",paraId:4,tocIndex:0},{value:"具体示例。",paraId:3,tocIndex:0},{value:"属性",paraId:5,tocIndex:1},{value:"描述",paraId:5,tocIndex:1},{value:"类型",paraId:5,tocIndex:1},{value:"默认值",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:"设置图形的位置 x，支持百分比（",paraId:5,tocIndex:1},{value:"'50%'",paraId:5,tocIndex:1},{value:"）和像素值（",paraId:5,tocIndex:1},{value:"200",paraId:5,tocIndex:1},{value:"）",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"x",paraId:5,tocIndex:1},{value:"设置图形的位置 y，支持百分比（",paraId:5,tocIndex:1},{value:"'50%'",paraId:5,tocIndex:1},{value:"）和像素值（",paraId:5,tocIndex:1},{value:"200",paraId:5,tocIndex:1},{value:"）",paraId:5,tocIndex:1},{value:"number",paraId:5,tocIndex:1},{value:"string",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"render",paraId:5,tocIndex:1},{value:"对应的自定义渲染函数，函数需要返回 G 的 DisplayObject",paraId:5,tocIndex:1},{value:"(style: object) => DisplayObject",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1},{value:"{ ...rest }",paraId:5,tocIndex:1},{value:"自定义图形的额外参数，都会作为 ",paraId:5,tocIndex:1},{value:"render",paraId:5,tocIndex:1},{value:" 函数的参数",paraId:5,tocIndex:1},{value:"object",paraId:5,tocIndex:1},{value:"-",paraId:5,tocIndex:1}]},96224:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(98660);const t=[{value:"文字是传达信息最传统的方式，",paraId:0},{value:"Text",paraId:0},{value:" 标记具备有大量的视觉映射通道：",paraId:0},{value:"x",paraId:0},{value:"，",paraId:0},{value:"y",paraId:0},{value:"，",paraId:0},{value:"color",paraId:0},{value:"，",paraId:0},{value:"fontSize",paraId:0},{value:"，",paraId:0},{value:"rotate",paraId:0},{value:" 等，除此之外，还有大量的文本样式相关的配置，可以通过可视化映射的方式，让文本可视化具备有更强的表达性。一般用于几个场景：",paraId:0},{value:"文本可视化",paraId:1},{value:"数据的标注和辅助",paraId:1},{value:"绘制一个简单的柱形图，然后使用 ",paraId:2,tocIndex:0},{value:"Text",paraId:2,tocIndex:0},{value:" 标记去绘制数据标签，辅助看数。",paraId:2,tocIndex:0},{value:"/**\n * A recreation of this demo: https://observablehq.com/@d3/bar-chart\n */\nimport { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n});\n\nchart\n  .interval()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .axis('y', { labelFormatter: '.0%' });\n\nchart\n  .text()\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('text', 'frequency')\n  .style('fill', 'black')\n  .style('textAlign', 'center')\n  .style('dy', -5);\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前 area 有以下几个内置的 shape 图形，默认为 text。",paraId:6,tocIndex:1},{value:"图形",paraId:7,tocIndex:1},{value:"描述",paraId:7,tocIndex:1},{value:"示例",paraId:7,tocIndex:1},{value:"text",paraId:7,tocIndex:1},{value:"绘制文本",paraId:7,tocIndex:1},{value:"badge",paraId:7,tocIndex:1},{value:"绘制带有标记的文本，形如一个气球",paraId:7,tocIndex:1},{value:"属性",paraId:8,tocIndex:2},{value:"描述",paraId:8,tocIndex:2},{value:"类型",paraId:8,tocIndex:2},{value:"默认值",paraId:8,tocIndex:2},{value:"fontSize",paraId:8,tocIndex:2},{value:"文字大小",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"fontFamily",paraId:8,tocIndex:2},{value:"文字字体",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"fontWeight",paraId:8,tocIndex:2},{value:"字体粗细",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"lineHeight",paraId:8,tocIndex:2},{value:"文字的行高",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"textAlign",paraId:8,tocIndex:2},{value:"设置文本内容的当前对齐方式, 支持的属性：",paraId:8,tocIndex:2},{value:"center",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"end",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"left",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"right",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"start",paraId:8,tocIndex:2},{value:"，默认值为",paraId:8,tocIndex:2},{value:"start",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"textBaseline",paraId:8,tocIndex:2},{value:"设置在绘制文本时使用的当前文本基线, 支持的属性:",paraId:8,tocIndex:2},{value:"top",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"middle",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"bottom",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"alphabetic",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"hanging",paraId:8,tocIndex:2},{value:"。默认值为",paraId:8,tocIndex:2},{value:"bottom",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"fill",paraId:8,tocIndex:2},{value:"图形的填充色",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"fillOpacity",paraId:8,tocIndex:2},{value:"图形的填充透明度",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"stroke",paraId:8,tocIndex:2},{value:"图形的描边",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"strokeOpacity",paraId:8,tocIndex:2},{value:"描边透明度",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"lineWidth",paraId:8,tocIndex:2},{value:"图形描边的宽度",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"lineDash",paraId:8,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:8,tocIndex:2},{value:"[number,number]",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<[number, number]>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"opacity",paraId:8,tocIndex:2},{value:"图形的整体透明度",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"shadowColor",paraId:8,tocIndex:2},{value:"图形阴影颜色",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"shadowBlur",paraId:8,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"shadowOffsetX",paraId:8,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"shadowOffsetY",paraId:8,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:8,tocIndex:2},{value:"number",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<number>",paraId:8,tocIndex:2},{value:"-",paraId:8,tocIndex:2},{value:"cursor",paraId:8,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:8,tocIndex:2},{value:"string",paraId:8,tocIndex:2},{value:" | ",paraId:8,tocIndex:2},{value:"Function<string>",paraId:8,tocIndex:2},{value:"'default'",paraId:8,tocIndex:2},{value:"除了 ",paraId:9,tocIndex:3},{value:"text",paraId:9,tocIndex:3},{value:" 的配置之外，还有以下配置。",paraId:9,tocIndex:3},{value:"属性",paraId:10,tocIndex:3},{value:"描述",paraId:10,tocIndex:3},{value:"类型",paraId:10,tocIndex:3},{value:"默认值",paraId:10,tocIndex:3},{value:"markerSize",paraId:10,tocIndex:3},{value:"标记大小",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"24",paraId:10,tocIndex:3},{value:"markerFill",paraId:10,tocIndex:3},{value:"标记填充色",paraId:10,tocIndex:3},{value:"string",paraId:10,tocIndex:3},{value:"markerFillOpacity",paraId:10,tocIndex:3},{value:"标记填充色透明度",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"markerStroke",paraId:10,tocIndex:3},{value:"标记描边色",paraId:10,tocIndex:3},{value:"string",paraId:10,tocIndex:3},{value:"markerStrokeOpacity",paraId:10,tocIndex:3},{value:"标记描边色 透明度",paraId:10,tocIndex:3},{value:"number",paraId:10,tocIndex:3},{value:"怎么指定箭头图标的长度？",paraId:11,tocIndex:4},{value:"有两种指定箭头图标长度的方式，一种是通过填写像素值，比如 ",paraId:12,tocIndex:4},{value:"40",paraId:12,tocIndex:4},{value:"，来指定为固定长度；另外一种是通过指定一个百分比，比如 ",paraId:12,tocIndex:4},{value:"30%",paraId:12,tocIndex:4},{value:"，来指定参考箭头长度的相对长度。默认值为 ",paraId:12,tocIndex:4},{value:"40%",paraId:12,tocIndex:4},{value:"。如下示例：",paraId:12,tocIndex:4},{value:"chart\n  .vector()\n  // ...\n  .shape('vector')\n  .style({\n    arrowSize: 40,\n    // arrowSize: '30%',\n  });\n",paraId:13,tocIndex:4}]},87176:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(19707);const t=[{value:"Vector 图形是将数据映射成为",paraId:0},{value:"箭头",paraId:0},{value:"的样式去可视化展示，通过控制箭头的位置、大小、颜色、角度等信息，去可视化一些向量场数据。它具备有以下视觉通道：",paraId:0},{value:"x",paraId:1},{value:"：水平方向的位置，对 x 轴刻度对应",paraId:1},{value:"y",paraId:1},{value:"：垂直方向的位置，对 y 轴刻度对应，位置锚点定位为箭头的中心",paraId:1},{value:"color",paraId:1},{value:"：箭头的颜色",paraId:1},{value:"size",paraId:1},{value:"：箭头的长度",paraId:1},{value:"rotate",paraId:1},{value:"：箭头的旋转角度，起始角度为直角坐标系中的 ",paraId:1},{value:"右边",paraId:1},{value:"，旋转方向为 ",paraId:1},{value:"顺时针",paraId:1},{value:"Vector 图形标记会将数据通过上述通道映射成向量数据：",paraId:2},{value:"[start, end]",paraId:2},{value:"。",paraId:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .vector()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antfincdn/F5VcgnqRku/wind.json',\n  })\n  .encode('x', 'longitude')\n  .encode('y', 'latitude')\n  .encode('rotate', ({ u, v }) => (Math.atan2(v, u) * 180) / Math.PI)\n  .encode('size', ({ u, v }) => Math.hypot(v, u))\n  .encode('color', ({ u, v }) => Math.hypot(v, u))\n  .scale('size', { range: [6, 20] })\n  .scale('color', { type: 'sequential', palette: 'viridis' })\n  .axis('x', { grid: false })\n  .axis('y', { grid: false })\n  .legend(false);\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"更多的案例，可以查看",paraId:4,tocIndex:0},{value:"图表示例",paraId:5,tocIndex:0},{value:"页面。",paraId:4,tocIndex:0},{value:"目前仅有一种同名的图形 ",paraId:6,tocIndex:1},{value:"vector",paraId:6,tocIndex:1},{value:"，下面描述一下所有的 ",paraId:6,tocIndex:1},{value:"style",paraId:6,tocIndex:1},{value:" 配置项。",paraId:6,tocIndex:1},{value:"属性",paraId:7,tocIndex:2},{value:"描述",paraId:7,tocIndex:2},{value:"类型",paraId:7,tocIndex:2},{value:"默认值",paraId:7,tocIndex:2},{value:"arrowSize",paraId:7,tocIndex:2},{value:"箭头图标的大小，可以指定像素值、也可以指定箭头长度的相对值。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:"'40%'",paraId:7,tocIndex:2},{value:"fill",paraId:7,tocIndex:2},{value:"图形的填充色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"fillOpacity",paraId:7,tocIndex:2},{value:"图形的填充透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"stroke",paraId:7,tocIndex:2},{value:"图形的描边",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"strokeOpacity",paraId:7,tocIndex:2},{value:"描边透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineWidth",paraId:7,tocIndex:2},{value:"图形描边的宽度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"lineDash",paraId:7,tocIndex:2},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:7,tocIndex:2},{value:"[number,number]",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<[number, number]>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"opacity",paraId:7,tocIndex:2},{value:"图形的整体透明度",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowColor",paraId:7,tocIndex:2},{value:"图形阴影颜色",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowBlur",paraId:7,tocIndex:2},{value:"图形阴影的高斯模糊系数",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetX",paraId:7,tocIndex:2},{value:"设置阴影距图形的水平距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"shadowOffsetY",paraId:7,tocIndex:2},{value:"设置阴影距图形的垂直距离",paraId:7,tocIndex:2},{value:"number",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<number>",paraId:7,tocIndex:2},{value:"-",paraId:7,tocIndex:2},{value:"cursor",paraId:7,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:7,tocIndex:2},{value:"string",paraId:7,tocIndex:2},{value:" | ",paraId:7,tocIndex:2},{value:"Function<string>",paraId:7,tocIndex:2},{value:"'default'",paraId:7,tocIndex:2},{value:"怎么指定箭头图标的长度？",paraId:8,tocIndex:3},{value:"有两种指定箭头图标长度的方式，一种是通过填写像素值，比如 ",paraId:9,tocIndex:3},{value:"40",paraId:9,tocIndex:3},{value:"，来指定为固定长度；另外一种是通过指定一个百分比，比如 ",paraId:9,tocIndex:3},{value:"30%",paraId:9,tocIndex:3},{value:"，来指定参考箭头长度的相对长度。默认值为 ",paraId:9,tocIndex:3},{value:"40%",paraId:9,tocIndex:3},{value:"。如下示例：",paraId:9,tocIndex:3},{value:"chart\n  .vector()\n  // ...\n  .shape('vector')\n  .style({\n    arrowSize: 40,\n    // arrowSize: '30%',\n  });\n",paraId:10,tocIndex:3}]},554:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(63370);const t=[{value:"词云图能通过形成“关键词云层”或“关键词渲染”，对文本中出现频率较高的“关键词”在视觉上的突出，便于读者找到关键信息。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  padding: 0,\n});\n\nchart\n  .wordCloud()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/philosophy-word.json',\n  })\n  .layout({\n    spiral: 'rectangular',\n  })\n  .encode('color', 'text')\n  .axis(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"layout",paraId:2,tocIndex:1},{value:"布局配置",paraId:2,tocIndex:1},{value:"ForceTransform",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"style",paraId:2,tocIndex:1},{value:"配置图形样式和标签样式",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"-",paraId:2,tocIndex:1},{value:"labels",paraId:2,tocIndex:1},{value:"自定义节点数据标签的配置",paraId:2,tocIndex:1},{value:"label[]",paraId:2,tocIndex:1},{value:"[]",paraId:2,tocIndex:1},{value:"属性",paraId:3,tocIndex:2},{value:"描述",paraId:3,tocIndex:2},{value:"类型",paraId:3,tocIndex:2},{value:"默认值",paraId:3,tocIndex:2},{value:"padding",paraId:3,tocIndex:2},{value:"内间距",paraId:3,tocIndex:2},{value:"number",paraId:3,tocIndex:2},{value:"1",paraId:3,tocIndex:2},{value:"rotate",paraId:3,tocIndex:2},{value:"文字旋转角度",paraId:3,tocIndex:2},{value:"number | (word => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"random",paraId:3,tocIndex:2},{value:"随机方式",paraId:3,tocIndex:2},{value:"number | (word => number)",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"spiral",paraId:3,tocIndex:2},{value:"外观图形",paraId:3,tocIndex:2},{value:"'archimedean' | 'rectangular'",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"imageMask",paraId:3,tocIndex:2},{value:"图片蒙层",paraId:3,tocIndex:2},{value:"'HTMLImageElement | string",paraId:3,tocIndex:2},{value:"-",paraId:3,tocIndex:2},{value:"复合图形标记需要通过不同的前缀来区分图形的配置。",paraId:4,tocIndex:3},{value:"<label>",paraId:5,tocIndex:3},{value:": 数据标签的前缀，例如：",paraId:5,tocIndex:3},{value:"labelText",paraId:5,tocIndex:3},{value:" 设置标签的 text 文本。",paraId:5,tocIndex:3}]},96262:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(25319);const t=[{value:"G2 是一个简洁的、渐进式的可视化语法。文档将按照下面的顺序去分别介绍每一个模块，你可以把它当做一个字典去搜索和查询。",paraId:0},{value:"Data",paraId:1},{value:"获得和转换数据。",paraId:2,tocIndex:0},{value:"fetch",paraId:3,tocIndex:0},{value:" - 获取远程数据。",paraId:4,tocIndex:0},{value:"inline",paraId:5,tocIndex:0},{value:" - 获取内联数据。",paraId:4,tocIndex:0},{value:"下面是支持的数据转换：",paraId:6,tocIndex:0},{value:"sort",paraId:7,tocIndex:0},{value:" - 将数据按照指定的比较器字段排序。",paraId:8,tocIndex:0},{value:"sortBy",paraId:9,tocIndex:0},{value:" - 将数据按照指定的字段排序。",paraId:8,tocIndex:0},{value:"pick",paraId:10,tocIndex:0},{value:" - 从数据中挑选出部分字段组成新的数据。",paraId:8,tocIndex:0},{value:"rename",paraId:11,tocIndex:0},{value:" - 重命名数据中的一些字段。",paraId:8,tocIndex:0},{value:"fold",paraId:12,tocIndex:0},{value:" - 将多个字段打包成按照指定的 key value 组织形式。",paraId:8,tocIndex:0},{value:"filter",paraId:13,tocIndex:0},{value:" - 对数据进行指定条件的过滤。",paraId:8,tocIndex:0},{value:"slice",paraId:14,tocIndex:0},{value:" - 对数据进行分片，获得子集。",paraId:8,tocIndex:0},{value:"map",paraId:15,tocIndex:0},{value:" - 对数据进行映射，返回新的数组。",paraId:8,tocIndex:0},{value:"join",paraId:16,tocIndex:0},{value:" - 类似 SQL 的方式，将两份数据连接到一起。",paraId:8,tocIndex:0},{value:"custom",paraId:17,tocIndex:0},{value:" - 使用自定义的方式对数据进行变换。",paraId:8,tocIndex:0},{value:"kde",paraId:18,tocIndex:0},{value:" - 核密度处理算法。",paraId:8,tocIndex:0},{value:"log",paraId:19,tocIndex:0},{value:" - 用于开发者调试，打印当前数据处理片面的数据。",paraId:8,tocIndex:0},{value:"绘制数据驱动的图形。",paraId:20,tocIndex:1},{value:"interval",paraId:21,tocIndex:1},{value:" - 通常用来绘制柱、条形图，饼图等相关图表。",paraId:22,tocIndex:1},{value:"point",paraId:23,tocIndex:1},{value:" - 主要用于绘制散点图，利用点的粒度来分析数据的分布情况。",paraId:22,tocIndex:1},{value:"line",paraId:24,tocIndex:1},{value:" - 根据一系列的点，绘制折线，通常用来绘制折线图。",paraId:22,tocIndex:1},{value:"area",paraId:25,tocIndex:1},{value:" - 通常用来绘制我们常见的面积图，通过填充，可以更好突出趋势堆积信息。",paraId:22,tocIndex:1},{value:"cell",paraId:26,tocIndex:1},{value:" - 根据 x, y 将空间划分成一个子空间，然后进行可视化绘制，常见于一些方块图，如日历图、聚合热力图等。",paraId:22,tocIndex:1},{value:"rect",paraId:27,tocIndex:1},{value:" - 使用两组 x，两组 y 来定位一个矩形区域，常用于直方图、矩阵树图等。",paraId:22,tocIndex:1},{value:"link",paraId:28,tocIndex:1},{value:" - 标记使用两个用 (x, y) 定位的点，绘制一条带方向的直线。通过指定 ",paraId:22,tocIndex:1},{value:"x",paraId:22,tocIndex:1},{value:"，",paraId:22,tocIndex:1},{value:"y",paraId:22,tocIndex:1},{value:" 通道为长度为 2 的字段数组即可。",paraId:22,tocIndex:1},{value:"vector",paraId:29,tocIndex:1},{value:" - 用 ",paraId:22,tocIndex:1},{value:"start",paraId:22,tocIndex:1},{value:"，",paraId:22,tocIndex:1},{value:"end",paraId:22,tocIndex:1},{value:" 两个点来表示一个向量，通常用于绘制具备向量含义的数据，比如风向量场等。",paraId:22,tocIndex:1},{value:"box",paraId:30,tocIndex:1},{value:" - 用来绘制箱线图，通常用来展示一组数据分布情况的统计图。",paraId:22,tocIndex:1},{value:"boxplot",paraId:31,tocIndex:1},{value:" - 用来绘制箱线图，并且内置数据的聚合操作。",paraId:22,tocIndex:1},{value:"text",paraId:32,tocIndex:1},{value:" - 通过指定文本的样式通道，可以在画布上绘制和数据绑定的文本字符。",paraId:22,tocIndex:1},{value:"image",paraId:33,tocIndex:1},{value:" - 利用 ",paraId:22,tocIndex:1},{value:"src",paraId:22,tocIndex:1},{value:" 通道在画布上绘制图片。",paraId:22,tocIndex:1},{value:"shape",paraId:34,tocIndex:1},{value:" - 使用自定义函数灵活绘制自定义图形。",paraId:22,tocIndex:1},{value:"lineX",paraId:35,tocIndex:1},{value:" - 指定 ",paraId:22,tocIndex:1},{value:"x",paraId:22,tocIndex:1},{value:" 通道来绘制垂直于 x 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:22,tocIndex:1},{value:"lineY",paraId:36,tocIndex:1},{value:" - 指定 ",paraId:22,tocIndex:1},{value:"y",paraId:22,tocIndex:1},{value:" 通道来绘制垂直于 y 轴的辅助线，常用于绘制平均值或其他聚合数据辅助线。",paraId:22,tocIndex:1},{value:"range",paraId:37,tocIndex:1},{value:" - 使用一组 ",paraId:22,tocIndex:1},{value:"x",paraId:22,tocIndex:1},{value:"(x1, x2) 和一组 ",paraId:22,tocIndex:1},{value:"y",paraId:22,tocIndex:1},{value:"(y1, y2) 来定位一个矩形区域，常用于绘制高亮指定区域的辅助区域。",paraId:22,tocIndex:1},{value:"rangeX",paraId:38,tocIndex:1},{value:" - 使用一组 ",paraId:22,tocIndex:1},{value:"x",paraId:22,tocIndex:1},{value:"(x1, x2) 来定位一个垂直于 x 轴的矩形区域，常用于绘制高亮指定区域的辅助区域。",paraId:22,tocIndex:1},{value:"rangeY",paraId:39,tocIndex:1},{value:" - 使用一组 ",paraId:22,tocIndex:1},{value:"y",paraId:22,tocIndex:1},{value:"(y1, y2) 来定位一个垂直于 y 轴的矩形区域，常用于绘制高亮指定区域的辅助区域。",paraId:22,tocIndex:1},{value:"polygon",paraId:40,tocIndex:1},{value:" - 利用多组 (x, y) 数据点，在画布中绘制闭合的多边形，通常结合一些社区布局算法使用。",paraId:22,tocIndex:1},{value:"wordCloud",paraId:41,tocIndex:1},{value:" - 绘制词云图。",paraId:22,tocIndex:1},{value:"density",paraId:42,tocIndex:1},{value:" - 渲染核密度数据，多用于小提琴图。",paraId:22,tocIndex:1},{value:"heatmap",paraId:43,tocIndex:1},{value:" - 接受热力数据，多用于绘制热力图。",paraId:22,tocIndex:1},{value:"派生数据。",paraId:44,tocIndex:2},{value:"bin",paraId:45,tocIndex:2},{value:" - 对连续的 x 和 连续的 y 通道进行分箱，并且对通道根据指定的 reducer 进行聚合。",paraId:46,tocIndex:2},{value:"binX",paraId:47,tocIndex:2},{value:" - 对 x 通道进行分箱，如果希望对 y 通道进行分箱，使用 binX + transpose 坐标系。",paraId:46,tocIndex:2},{value:"diffY",paraId:48,tocIndex:2},{value:" - 对 y 和 y1 通道求差集。",paraId:46,tocIndex:2},{value:"dodgeX",paraId:49,tocIndex:2},{value:" - 生成 series 通道值为 color 通道的值，根据 series 通道实现分组效果。",paraId:46,tocIndex:2},{value:"flexX",paraId:50,tocIndex:2},{value:" - 根据指定通道设置 x 比例尺的 flex 属性，实现不等宽矩形的效果。",paraId:46,tocIndex:2},{value:"group",paraId:51,tocIndex:2},{value:" - 对离散的 x 和 连续的 y 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:46,tocIndex:2},{value:"groupColor",paraId:52,tocIndex:2},{value:" - 对离散的 color 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:46,tocIndex:2},{value:"groupX",paraId:53,tocIndex:2},{value:" - 对离散的 x 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:46,tocIndex:2},{value:"groupY",paraId:54,tocIndex:2},{value:" - 对离散的 y 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:46,tocIndex:2},{value:"jitter",paraId:55,tocIndex:2},{value:" - 根据离散的 x 和 离散的 y 比例尺，生成 dy 和 dx 通道，实现在某个区域散开的效果。",paraId:46,tocIndex:2},{value:"jitterX",paraId:56,tocIndex:2},{value:" - 根据离散的 x 比例尺，生成 dx 通道，实现在某个区域的 x 方向散开的效果。",paraId:46,tocIndex:2},{value:"jitterY",paraId:57,tocIndex:2},{value:" - 根据离散的 y 比例尺，生成 dy 通道，实现在某个区域的 y 方向散开的效果。",paraId:46,tocIndex:2},{value:"normalizeY",paraId:58,tocIndex:2},{value:" - 对 y 和 y1 通道根据指定的 basis 进行归一化处理。",paraId:46,tocIndex:2},{value:"select",paraId:59,tocIndex:2},{value:" - 按照指定通道进行分组，根据指定通道和 selector 从每组选择出数据。",paraId:46,tocIndex:2},{value:"selectX",paraId:60,tocIndex:2},{value:" - 按照指定通道进行分组，根据 x 通道和 selector 从每组选择出数据。",paraId:46,tocIndex:2},{value:"selectY",paraId:61,tocIndex:2},{value:" - 按照指定的通道进行分组，根据 y 通道和 selector 从每组选择出数据。",paraId:46,tocIndex:2},{value:"pack",paraId:62,tocIndex:2},{value:" - 生成 transform 和 scale 属性，从而让图形在空间中紧凑排列。",paraId:46,tocIndex:2},{value:"sample",paraId:63,tocIndex:2},{value:" - 当数据量远大于屏幕像素的时候，开启一些内置的采样策略，提升图表绘制性能。",paraId:46,tocIndex:2},{value:"sortColor",paraId:64,tocIndex:2},{value:" - 对离散的 color 比例尺的定义域根据指定通道排序。",paraId:46,tocIndex:2},{value:"sortX",paraId:65,tocIndex:2},{value:" - 对离散的 x 比例尺的定义域根据指定通道排序。",paraId:46,tocIndex:2},{value:"sortY",paraId:66,tocIndex:2},{value:" - 对离散的 y 比例尺的定义域根据指定通道排序。",paraId:46,tocIndex:2},{value:"stackEnter",paraId:67,tocIndex:2},{value:" - 对 enterDuration 和 enterDelay 通道进行堆叠，实现分组动画的效果。",paraId:46,tocIndex:2},{value:"stackY",paraId:68,tocIndex:2},{value:" - 按照指定通道分组，对每组的 y 和 y1 通道进行堆叠，实现堆叠效果。",paraId:46,tocIndex:2},{value:"symmetryY",paraId:69,tocIndex:2},{value:" - 按照指定通道分组，给每组的 y 和 y1 通道添加偏移，实现对称效果。",paraId:46,tocIndex:2},{value:"将抽象的数据映射为视觉数据。",paraId:70,tocIndex:3},{value:"band",paraId:71,tocIndex:3},{value:" - 特殊的 ",paraId:72,tocIndex:3},{value:"ordinal",paraId:73,tocIndex:3},{value:" 比例尺，它的值域范围是一个连续的范围。",paraId:72,tocIndex:3},{value:"linear",paraId:74,tocIndex:3},{value:" - 针对连续数据，对数据进行连续映射的比例尺。",paraId:72,tocIndex:3},{value:"sqrt",paraId:75,tocIndex:3},{value:" - 指数固定为 ",paraId:72,tocIndex:3},{value:"0.5",paraId:72,tocIndex:3},{value:" 的 ",paraId:72,tocIndex:3},{value:"pow",paraId:72,tocIndex:3},{value:" 比例尺。",paraId:72,tocIndex:3},{value:"pow",paraId:76,tocIndex:3},{value:" - 类似于 ",paraId:72,tocIndex:3},{value:"linear",paraId:72,tocIndex:3},{value:" 比例尺，但是映射函数为指数函数（exponential）。",paraId:72,tocIndex:3},{value:"log",paraId:77,tocIndex:3},{value:" - 类似于 ",paraId:72,tocIndex:3},{value:"linear",paraId:72,tocIndex:3},{value:" 比例尺，但是映射函数为对数函数（logarithmic）。",paraId:72,tocIndex:3},{value:"ordinal",paraId:78,tocIndex:3},{value:" - 将离散的数据映射到另外一个离散数据中。",paraId:72,tocIndex:3},{value:"point",paraId:79,tocIndex:3},{value:" - 特殊 ",paraId:72,tocIndex:3},{value:"band",paraId:80,tocIndex:3},{value:" 比例尺，固定配置 ",paraId:72,tocIndex:3},{value:"bandWith = 0",paraId:72,tocIndex:3},{value:"。",paraId:72,tocIndex:3},{value:"quantize",paraId:81,tocIndex:3},{value:" - 类似于 ",paraId:72,tocIndex:3},{value:"threshold",paraId:72,tocIndex:3},{value:"，但是计算切片的方式是基于元素的数据值。",paraId:72,tocIndex:3},{value:"quantile",paraId:82,tocIndex:3},{value:" - 类似于 ",paraId:72,tocIndex:3},{value:"threshold",paraId:72,tocIndex:3},{value:"， 但是计算切片的方式是基于元素在数据中的索引。",paraId:72,tocIndex:3},{value:"threshold",paraId:83,tocIndex:3},{value:" - 将连续的值域范围划分为多个切片，并将这些切片映射到一个离散的数据中。",paraId:72,tocIndex:3},{value:"time",paraId:84,tocIndex:3},{value:" - 特殊的 ",paraId:72,tocIndex:3},{value:"linear",paraId:85,tocIndex:3},{value:" 比例尺，它的值域是一组有时间顺序的数据。",paraId:72,tocIndex:3},{value:"对空间通道应用点变换。",paraId:86,tocIndex:4},{value:"polar",paraId:87,tocIndex:4},{value:" - 常用于绘制玫瑰图等。",paraId:88,tocIndex:4},{value:"theta",paraId:89,tocIndex:4},{value:" - 常用于绘制饼图等。",paraId:88,tocIndex:4},{value:"radial",paraId:90,tocIndex:4},{value:" - 常用于绘制玉珏图等。",paraId:88,tocIndex:4},{value:"parallel",paraId:91,tocIndex:4},{value:" - 绘制平行坐标系。",paraId:88,tocIndex:4},{value:"以下是支持的坐标系变换。",paraId:92,tocIndex:4},{value:"transpose",paraId:93,tocIndex:4},{value:" - 改变图表绘制方向。",paraId:94,tocIndex:4},{value:"fisheye",paraId:95,tocIndex:4},{value:" - 鱼眼坐标系。",paraId:94,tocIndex:4},{value:"视图复合相关的内容。",paraId:96,tocIndex:5},{value:"spaceLayer",paraId:97,tocIndex:5},{value:" - 对空间不做任何划分，多个视图使用同一个空间区域，常用于视图的层叠。",paraId:98,tocIndex:5},{value:"spaceFlex",paraId:99,tocIndex:5},{value:" - 使用类似 css flex 的布局方式来划分空间区域，常用于多图表对比的视图。",paraId:98,tocIndex:5},{value:"facetRect",paraId:100,tocIndex:5},{value:" - 用 row、column 字段维值对空间和数据进行划分，在各个子空间可视化数据片段。",paraId:98,tocIndex:5},{value:"facetCircle",paraId:101,tocIndex:5},{value:" - 根据字段分片数据，利用圆形划分空间，然就进行各个分面的数据可视化。",paraId:98,tocIndex:5},{value:"repeatMatrix",paraId:102,tocIndex:5},{value:" - 根据字段的数量对空间进行划分和可视化。",paraId:98,tocIndex:5},{value:"timingKeyframe",paraId:103,tocIndex:5},{value:" - 在不同时间片之间播放不同的可视化视图帧。",paraId:98,tocIndex:5},{value:"绘制辅助视觉元素。",paraId:104,tocIndex:6},{value:"title",paraId:105,tocIndex:6},{value:" - 绘制图表标题和副标题。",paraId:106,tocIndex:6},{value:"axis",paraId:107,tocIndex:6},{value:" - 绘制坐标轴。",paraId:106,tocIndex:6},{value:"legend",paraId:108,tocIndex:6},{value:" - 绘制图例。",paraId:106,tocIndex:6},{value:"scrollbar",paraId:109,tocIndex:6},{value:" - 绘制滚动条。",paraId:106,tocIndex:6},{value:"slider",paraId:110,tocIndex:6},{value:" - 绘制拖动条。",paraId:106,tocIndex:6},{value:"Label",paraId:111,tocIndex:6},{value:"绘制数据标签和标签属性的变换。",paraId:112,tocIndex:7},{value:"contrastReverse",paraId:113,tocIndex:7},{value:" - 标签颜色在图形背景上对比度低的情况下，从指定色板选择一个对比度最优的颜色。",paraId:114,tocIndex:7},{value:"overflowHide",paraId:115,tocIndex:7},{value:" - 对于标签在图形上放置不下的时候，隐藏标签。",paraId:114,tocIndex:7},{value:"overlapDodgeY",paraId:116,tocIndex:7},{value:" - 对位置碰撞的标签在 y 方向上进行调整，防止标签重叠。",paraId:114,tocIndex:7},{value:"overlapHide",paraId:117,tocIndex:7},{value:" - 对位置碰撞的标签进行隐藏，默认保留前一个，隐藏后一个。",paraId:114,tocIndex:7},{value:"Animation",paraId:118,tocIndex:7},{value:"数据驱动的动画和连续的形变动画。",paraId:119,tocIndex:8},{value:"fadeIn",paraId:120,tocIndex:8},{value:" - 渐现动画。",paraId:121,tocIndex:8},{value:"fadeOut",paraId:122,tocIndex:8},{value:" - 渐隐动画。",paraId:121,tocIndex:8},{value:"growInX",paraId:123,tocIndex:8},{value:" - 容器沿着 x 方向放大的矩阵动画，多用于 G.Group 容器类进行动画。",paraId:121,tocIndex:8},{value:"growInY",paraId:124,tocIndex:8},{value:" - 容器沿着 y 方向放大的矩阵动画，多用于 G.Group 容器类进行动画。",paraId:121,tocIndex:8},{value:"morphing",paraId:125,tocIndex:8},{value:" - 图形之间的形变动画。",paraId:121,tocIndex:8},{value:"pathIn",paraId:126,tocIndex:8},{value:" - Path 路径入场动画。",paraId:121,tocIndex:8},{value:"scaleInX",paraId:127,tocIndex:8},{value:" - 单个图形沿着 x 方向的生长动画。",paraId:121,tocIndex:8},{value:"scaleInY",paraId:128,tocIndex:8},{value:" - 单个图形沿着 y 方向的生长动画。",paraId:121,tocIndex:8},{value:"scaleOutX",paraId:129,tocIndex:8},{value:" - 单个图形沿着 x 方向的消退动画。",paraId:121,tocIndex:8},{value:"scaleOutY",paraId:130,tocIndex:8},{value:" - 单个图形沿着 y 方向的消退动画。",paraId:121,tocIndex:8},{value:"waveIn",paraId:131,tocIndex:8},{value:" - 划入入场动画效果，不同坐标系下效果不同。",paraId:121,tocIndex:8},{value:"zoomIn",paraId:132,tocIndex:8},{value:" - 沿着图形中心点的放大动画。",paraId:121,tocIndex:8},{value:"zoomOut",paraId:133,tocIndex:8},{value:" - 沿着图形中心点的缩小动画。",paraId:121,tocIndex:8},{value:"操作视图并且展现详细信息。",paraId:134,tocIndex:9},{value:"brushFilter",paraId:135,tocIndex:9},{value:" - 框选筛选。",paraId:136,tocIndex:9},{value:"brushXFilter",paraId:137,tocIndex:9},{value:" - x 方向框选筛选。",paraId:136,tocIndex:9},{value:"brushYFilter",paraId:138,tocIndex:9},{value:" - y 方向框选筛选。",paraId:136,tocIndex:9},{value:"brushHighlight",paraId:139,tocIndex:9},{value:" - 框选高亮。",paraId:136,tocIndex:9},{value:"brushXHighlight",paraId:140,tocIndex:9},{value:" - x 方向框选高亮。",paraId:136,tocIndex:9},{value:"brushYHighlight",paraId:141,tocIndex:9},{value:" - y 方向框选高亮。",paraId:136,tocIndex:9},{value:"brushAxisHighlight",paraId:142,tocIndex:9},{value:" - 坐标轴框选高亮。",paraId:136,tocIndex:9},{value:"legendHighlight",paraId:143,tocIndex:9},{value:" - 图例高亮。",paraId:136,tocIndex:9},{value:"legendFilter",paraId:144,tocIndex:9},{value:" - 图例筛选。",paraId:136,tocIndex:9},{value:"tooltip",paraId:145,tocIndex:9},{value:" - 展现提示信息。",paraId:136,tocIndex:9},{value:"elementHighlight",paraId:146,tocIndex:9},{value:" - 高亮元素。",paraId:136,tocIndex:9},{value:"elementHighlightByX",paraId:147,tocIndex:9},{value:" - 高亮具有相同 x 通道值的元素。",paraId:136,tocIndex:9},{value:"elementHighlightByColor",paraId:148,tocIndex:9},{value:" - 高亮具有相同 color 通道的元素。",paraId:136,tocIndex:9},{value:"elementSelect",paraId:149,tocIndex:9},{value:" - 选择元素。",paraId:136,tocIndex:9},{value:"elementSelectByX",paraId:150,tocIndex:9},{value:" - 选择拥有相同 x 通道值的元素。",paraId:136,tocIndex:9},{value:"elementSelectByColor",paraId:151,tocIndex:9},{value:" - 选择拥有相同 color 通道值的元素。",paraId:136,tocIndex:9},{value:"fisheye",paraId:152,tocIndex:9},{value:" - 鱼眼交互。",paraId:136,tocIndex:9},{value:"charIndex",paraId:153,tocIndex:9},{value:" - 索引图表。",paraId:136,tocIndex:9},{value:"poptip",paraId:154,tocIndex:9},{value:" - 展现提示文本。",paraId:136,tocIndex:9},{value:"sliderFilter",paraId:155,tocIndex:9},{value:" - 拖动条筛选。",paraId:136,tocIndex:9},{value:"关系图相关的绘制。",paraId:156,tocIndex:10},{value:"sankey",paraId:157,tocIndex:10},{value:" - 绘制桑基图。",paraId:158,tocIndex:10},{value:"treemap",paraId:159,tocIndex:10},{value:" - 绘制矩阵树图。",paraId:158,tocIndex:10},{value:"pack",paraId:160,tocIndex:10},{value:" - 绘制打包图。",paraId:158,tocIndex:10},{value:"forceGraph",paraId:161,tocIndex:10},{value:" - 绘制力导向图。",paraId:158,tocIndex:10},{value:"tree",paraId:162,tocIndex:10},{value:" - 绘制树图。",paraId:158,tocIndex:10},{value:"地图相关的图形绘制。",paraId:163,tocIndex:11},{value:"geoPath",paraId:164,tocIndex:11},{value:" - 可以用来结合 geojson 绘制地图。",paraId:165,tocIndex:11},{value:"geoView",paraId:166,tocIndex:11},{value:" - 绘制地图的容器，用于多 geoPath 图层叠加。",paraId:165,tocIndex:11},{value:"Theme",paraId:167,tocIndex:11},{value:"主题相关内容。",paraId:168,tocIndex:12},{value:"academy",paraId:169,tocIndex:12},{value:" - 学术风格的主题。",paraId:170,tocIndex:12},{value:"classic",paraId:171,tocIndex:12},{value:" - 经典主题。",paraId:170,tocIndex:12},{value:"classicDark",paraId:172,tocIndex:12},{value:" - 经典暗黑主题。",paraId:170,tocIndex:12},{value:"基于 G 插件相关的内容。",paraId:173,tocIndex:13},{value:"renderer",paraId:174,tocIndex:13},{value:" - ",paraId:175,tocIndex:13},{value:"Canvas",paraId:175,tocIndex:13},{value:"、",paraId:175,tocIndex:13},{value:"SVG",paraId:175,tocIndex:13},{value:" 两大渲染器。",paraId:175,tocIndex:13},{value:"rough",paraId:176,tocIndex:13},{value:" - 绘制手绘图的插件。",paraId:175,tocIndex:13},{value:"lottie",paraId:177,tocIndex:13},{value:" - 可以在图表中播放 lottie 动画的插件。",paraId:175,tocIndex:13},{value:"公共配置。",paraId:178,tocIndex:14},{value:"style",paraId:179,tocIndex:14},{value:" - 绘制图表标题和副标题。",paraId:180,tocIndex:14}]},52977:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87744);const t=[{value:"G2 提供了一些内置的色板，可以直接使用，并支持 ",paraId:0},{value:"d3-scale-chromatic",paraId:0},{value:"的色板。",paraId:0},{value:"import { chart } from '@antv/g2';\n\nconst chart = new Chart({ container: 'container' });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/fb9db6b7-23a5-4c23-bbef-c54a55fee580.csv',\n  })\n  .encode('x', 'letter')\n  .encode('y', 'frequency')\n  .encode('color', 'letter')\n  .axis('y', { labelFormatter: '.0%' })\n  .scale('color', { palette: 'tableau10' }); // 指定色板\n\nchart.render();\n",paraId:1,tocIndex:0}]},55665:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(4151);const t=[{value:"Lottie",paraId:0},{value:" 能极大丰富动画的描述能力。在可视化叙事中也有不错的使用场景。",paraId:0},{value:"在 G2 中通过 ",paraId:1},{value:"@antv/g-lottie-player",paraId:1},{value:" 可以将 Lottie 加入画布。同时提供简单的动画控制方法例如播放、暂停以及跳转到指定时刻或帧，加入到画布后就可以像基础图形一样任意操作它们。",paraId:1},{value:"首先安装 ",paraId:2,tocIndex:0},{value:"@antv/g-lottie-player",paraId:2,tocIndex:0},{value:" 播放器：",paraId:2,tocIndex:0},{value:"npm install @antv/g-lottie-player --save\n",paraId:3,tocIndex:0},{value:"等待画布初始化、Lottie 文件加载完成后，即可创建 Lottie 动画对象，随后渲染到画布得到一个 ",paraId:4,tocIndex:0},{value:"Group",paraId:4,tocIndex:0},{value:"，可任意对它进行变换，例如缩放或者移动到指定地点：",paraId:4,tocIndex:0},{value:"import { loadAnimation } from '@antv/g-lottie-player';\n\n(async () => {\n  // 从上下文中获取画布\n  const { canvas } = chart.getContext();\n  await canvas.ready;\n\n  // 加载 Lottie 文件\n  const lottieJSON = await fetch(\n    'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/file/A*C9f6TaadHikAAAAAAAAAAAAADmJ7AQ',\n  ).then((res) => res.json());\n\n  // 创建动画\n  const animation = loadAnimation(lottieJSON, { loop: true, autoplay: true });\n  // 渲染到画布，得到 Group 容器\n  const wrapper = animation.render(canvas);\n  // 任意操作容器，例如移动到指定位置\n  wrapper.scale(0.5);\n  wrapper.translate(160, 100);\n})();\n",paraId:5,tocIndex:0},{value:"效果如下：",paraId:6,tocIndex:0},{value:"更多动画控制选项可以参考：",paraId:7,tocIndex:0},{value:"Lottie Animation 文档",paraId:7,tocIndex:0},{value:"。",paraId:7,tocIndex:0}]},31289:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(11340);const t=[{value:"G2 底层基于 AntV ",paraId:0},{value:"G",paraId:0},{value:" 来进行渲染，所以在渲染器能力上继承 G 的能力，目前支持了 Canvas、SVG、WebGL 三大 Web 标准，其中 Canvas 渲染器作为 G2 内置默认的渲染器。更多渲染器可以看 ",paraId:0},{value:"G 文档",paraId:0},{value:"。",paraId:0},{value:"import { Chart } from '@antv/g2';\nimport { Renderer as CanvasRenderer } from '@antv/g-canvas';\nimport { Renderer as SVGRenderer } from '@antv/g-svg';\nimport { Renderer as WebGLRenderer } from '@antv/g-webgl';\n\nconst chart = new Chart({\n  container: 'container',\n  // 或者选择 WebGLRenderer 渲染器，不设置默认为 CanvasRenderer.\n  renderer: new SVGRenderer(),\n});\n",paraId:1,tocIndex:0},{value:"当然使用之前，是先使用 npm 或者 yarn 等包管理工具安装他们，当前为了 G2 整体包大小，所以仅仅内置 Canvas 渲染器。具体案例可以参考 ",paraId:2,tocIndex:0},{value:"渲染器",paraId:2,tocIndex:0},{value:"。",paraId:2,tocIndex:0},{value:"G 渲染器的使用都是使用：",paraId:3,tocIndex:1},{value:"new Renderer({ /_ options _/ });",paraId:4,tocIndex:1},{value:"分三个渲染器分别介绍创建他们的配置项。",paraId:5,tocIndex:1},{value:"属性",paraId:6,tocIndex:2},{value:"描述",paraId:6,tocIndex:2},{value:"类型",paraId:6,tocIndex:2},{value:"默认值",paraId:6,tocIndex:2},{value:"enableDirtyRectangleRendering",paraId:6,tocIndex:2},{value:"是否开启“脏矩形”渲染",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:"enableDirtyRectangleRenderingDebug",paraId:6,tocIndex:2},{value:"是否开启“脏矩形”渲染调试模式",paraId:6,tocIndex:2},{value:"boolean",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"属性",paraId:7,tocIndex:3},{value:"描述",paraId:7,tocIndex:3},{value:"类型",paraId:7,tocIndex:3},{value:"默认值",paraId:7,tocIndex:3},{value:"outputSVGElementId",paraId:7,tocIndex:3},{value:"生成 SVGElement 时是否添加 id 属性",paraId:7,tocIndex:3},{value:"boolean",paraId:7,tocIndex:3},{value:"true",paraId:7,tocIndex:3},{value:"属性",paraId:8,tocIndex:4},{value:"描述",paraId:8,tocIndex:4},{value:"类型",paraId:8,tocIndex:4},{value:"默认值",paraId:8,tocIndex:4},{value:"targets",paraId:8,tocIndex:4},{value:"选择渲染环境，并按顺序自动降级",paraId:8,tocIndex:4},{value:"string[]",paraId:8,tocIndex:4},{value:"['webgl2', 'webgl1']",paraId:8,tocIndex:4},{value:"当需要替换掉内置的 Canvas 渲染器，例如改换成 SVG 时，需要引入特定版本的 G2 UMD 文件。",paraId:9,tocIndex:5},{value:"在线示例",paraId:10,tocIndex:5},{value:"首先引入 ",paraId:11,tocIndex:5},{value:"@antv/g",paraId:11,tocIndex:5},{value:" 和 ",paraId:11,tocIndex:5},{value:"@antv/g-svg",paraId:11,tocIndex:5},{value:" 的 UMD 版本：",paraId:11,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g"><\/script>\n<script src="https://unpkg.com/@antv/g-svg"><\/script>\n',paraId:12,tocIndex:5},{value:"然后引入剔除了 ",paraId:13,tocIndex:5},{value:"@antv/g",paraId:13,tocIndex:5},{value:" 和 ",paraId:13,tocIndex:5},{value:"@antv/g-svg",paraId:13,tocIndex:5},{value:" 的 G2 UMD 版本，我们称之为 lite 版：",paraId:13,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g2@5.0.5/dist/g2-lite.min.js"><\/script>\n',paraId:14,tocIndex:5},{value:"在命名空间 ",paraId:15,tocIndex:5},{value:"window.G.SVG",paraId:15,tocIndex:5},{value:" 下找到 ",paraId:15,tocIndex:5},{value:"Renderer",paraId:15,tocIndex:5},{value:" 并实例化：",paraId:15,tocIndex:5},{value:"const { Chart } = window.G2;\n\nconst chart = new Chart({\n  container: 'container',\n  renderer: new window.G.SVG.Renderer(), // 传入 SVG Renderer\n});\n",paraId:16,tocIndex:5},{value:"提供 lite 版主要考虑到：",paraId:17,tocIndex:5},{value:"剔除了 ",paraId:18,tocIndex:5},{value:"@antv/g",paraId:18,tocIndex:5},{value:" 和内置的 ",paraId:18,tocIndex:5},{value:"@antv/g-canvas",paraId:18,tocIndex:5},{value:" 渲染器之后，便于按需替换其他渲染器，不会存在冗余的内置渲染器",paraId:18,tocIndex:5},{value:"和其他使用 ",paraId:18,tocIndex:5},{value:"@antv/g",paraId:18,tocIndex:5},{value:" 的包使用时，可以共享同一份核心和渲染器代码，节省总体的包体积大小，例如：",paraId:18,tocIndex:5},{value:'<script src="https://unpkg.com/@antv/g"><\/script>\n<script src="https://unpkg.com/@antv/g-svg"><\/script>\n<script src="https://unpkg.com/@antv/g2@5.0.5/dist/g2-lite.min.js"><\/script>\n<script src="https://unpkg.com/@antv/g6-lite"><\/script>\n',paraId:19,tocIndex:5}]},78404:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(70909);const t=[{value:"相比方方正正的常规图形，手绘风格能带给人可爱轻松之感。",paraId:0},{value:"有不少基于 ",paraId:1},{value:"rough.js",paraId:1},{value:" 的图表库就是这么做的，例如 ",paraId:1},{value:"roughViz.js",paraId:1},{value:"、",paraId:1},{value:"rough-charts",paraId:1},{value:" 等。",paraId:1},{value:"借助开箱即用的渲染插件，在 G2 中我们也能轻松完成手绘风格的切换。",paraId:2},{value:"首先安装 ",paraId:3,tocIndex:0},{value:"@antv/g-plugin-rough-canvas-renderer",paraId:3,tocIndex:0},{value:"：",paraId:3,tocIndex:0},{value:"npm install @antv/g-plugin-rough-canvas-renderer --save\n",paraId:4,tocIndex:0},{value:"然后在插件列表中引入：",paraId:5,tocIndex:0},{value:"import { Plugin } from '@antv/g-plugin-rough-canvas-renderer';\n\nconst chart = new Chart({\n  container: 'container',\n  plugins: [new Plugin()],\n});\n",paraId:6,tocIndex:0},{value:"仅需要一行改动即可完成风格转换。在该",paraId:7,tocIndex:0},{value:"示例",paraId:8,tocIndex:0},{value:"中，我们通过 ",paraId:7,tocIndex:0},{value:"fillStyle",paraId:7,tocIndex:0},{value:" 指定了 ",paraId:7,tocIndex:0},{value:"'zigzag'",paraId:7,tocIndex:0},{value:" 这种类似连续涂鸦笔迹的填充风格：",paraId:7,tocIndex:0},{value:"chart\n  .interval()\n  .data([\n    { month: 'Jan.', profit: 387264, start: 0, end: 387264 },\n    //...\n  ])\n  .encode('x', 'month')\n  .encode('y', ['end', 'start'])\n  .encode('color', (d) =>\n    d.month === 'Total' ? 'Total' : d.profit > 0 ? 'Increase' : 'Decrease',\n  )\n  .style('strokeWidth', 2)\n  .style('fillStyle', 'zigzag'); // 指定填充风格\n\nchart.render();\n",paraId:9,tocIndex:0},{value:"效果如下，可以看到原本的填充色活泼了起来！\n",paraId:10,tocIndex:0},{value:"当然 ",paraId:11,tocIndex:0},{value:"fillStyle",paraId:11,tocIndex:0},{value:" 还有很多填充方式，下图展示了目前支持的所有效果。更多选项详见 ",paraId:11,tocIndex:0},{value:"@antv/g-plugin-rough-canvas-renderer 文档",paraId:11,tocIndex:0},{value:"：",paraId:11,tocIndex:0},{value:"最后，选择一款手绘风格的字体能让整体风格趋于统一。在上面的",paraId:12,tocIndex:0},{value:"示例",paraId:13,tocIndex:0},{value:"中我们选择了 ",paraId:12,tocIndex:0},{value:"'Gaegu'",paraId:12,tocIndex:0},{value:"，可以参考",paraId:12,tocIndex:0},{value:"如何加载外部字体",paraId:12,tocIndex:0},{value:"。",paraId:12,tocIndex:0},{value:"G2 使用 ",paraId:14,tocIndex:2},{value:"g-canvas",paraId:14,tocIndex:2},{value:" 作为默认渲染器。如果切换到 ",paraId:14,tocIndex:2},{value:"g-svg",paraId:14,tocIndex:2},{value:"，也有对应的手绘风格插件可以选择：",paraId:14,tocIndex:2},{value:"@antv/plugin-rough-svg-renderer",paraId:14,tocIndex:2},{value:"，使用方式完全一致。",paraId:14,tocIndex:2},{value:"使用 ",paraId:15,tocIndex:3},{value:"fillStyle",paraId:15,tocIndex:3},{value:" 代替 ",paraId:15,tocIndex:3},{value:"fill",paraId:15,tocIndex:3},{value:" 能实现类似 Pattern 的效果，因此在无障碍模式下也有不错的应用场景，例如考虑色弱人士和黑白打印。",paraId:15,tocIndex:3},{value:"在下面的",paraId:16,tocIndex:3},{value:"示例",paraId:17,tocIndex:3},{value:"中，我们将 ",paraId:16,tocIndex:3},{value:"fill/stroke",paraId:16,tocIndex:3},{value:" 都设置和黑色，将 ",paraId:16,tocIndex:3},{value:"fillStyle",paraId:16,tocIndex:3},{value:" 作为颜色属性：",paraId:16,tocIndex:3},{value:"chart\n  .interval()\n  //... 省略 data, transform 等\n  .scale('color', {\n    range: [\n      'hachure',\n      'solid',\n      'zigzag',\n      'cross-hatch',\n      'dots',\n      'dashed',\n      'zigzag-line',\n    ],\n  })\n  .style('fill', 'black')\n  .style('stroke', 'black')\n  .style('strokeWidth', '4')\n  .style('colorAttribute', 'fillStyle');\n",paraId:18,tocIndex:3},{value:"效果如下：",paraId:19,tocIndex:3}]},82095:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(38500);const t=[{value:"band 是特殊的 ",paraId:0},{value:"ordinal",paraId:1},{value:" 比例尺，它的值域范围是一个连续的范围。",paraId:0},{value:"band 比例尺经常用于柱形图的 x 通道。",paraId:2,tocIndex:0},{value:"chart\n  .interval()\n  .encode('x', 'type')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'band',\n    /* 其他配置项 */\n  });\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"domain",paraId:4,tocIndex:1},{value:"设置定义域数组",paraId:4,tocIndex:1},{value:"number[] | string[] | Date[]",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"range",paraId:4,tocIndex:1},{value:"设置数据映射的值域范围",paraId:4,tocIndex:1},{value:"number[]",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"[0, 1]",paraId:4,tocIndex:1},{value:"unknown",paraId:4,tocIndex:1},{value:"对于 ",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"， ",paraId:4,tocIndex:1},{value:"NaN",paraId:4,tocIndex:1},{value:"，",paraId:4,tocIndex:1},{value:"null",paraId:4,tocIndex:1},{value:" 空值，返回的数据",paraId:4,tocIndex:1},{value:"any",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"round",paraId:4,tocIndex:1},{value:"输出值去四舍五入",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"paddingInner",paraId:4,tocIndex:1},{value:"设置比例尺的内部间距，在 [0, 1] 范围内",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"paddingOuter",paraId:4,tocIndex:1},{value:"设置比例尺的外部间距，在 [0, 1] 范围内",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"padding",paraId:4,tocIndex:1},{value:"同时设置 ",paraId:4,tocIndex:1},{value:"paddingInner",paraId:4,tocIndex:1},{value:" 和 ",paraId:4,tocIndex:1},{value:"paddingOuter",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"align",paraId:4,tocIndex:1},{value:"对齐方式，在 [0, 1] 范围内",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"0.5",paraId:4,tocIndex:1},{value:"compare",paraId:4,tocIndex:1},{value:"对定义域进行映射前的排序",paraId:4,tocIndex:1},{value:"(a: string or number, b: string or number) => number",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"flex",paraId:4,tocIndex:1},{value:"设置分配比例",paraId:4,tocIndex:1},{value:"number[]",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"|<------------------------------------------- range -------------------------------------------\x3e|\n|             |                   |             |                   |             |             |\n|<--step*PO--\x3e|<----bandWidth----\x3e|<--step*PI--\x3e|<----bandWidth----\x3e|<--step*PI--\x3e|<--step*PO--\x3e|\n|             | ***************** |             | ***************** |             |             |\n|             | ******* A ******* |             | ******* B ******* |             |             |\n|             | ***************** |             | ***************** |             |             |\n|             |<--------------step-------------\x3e|                                               |\n|-----------------------------------------------------------------------------------------------|\n",paraId:5,tocIndex:1},{value:"怎么设置柱形图，柱子之间的间距？",paraId:6,tocIndex:2},{value:"chart\n  .interval()\n  // ...\n  .scale('x', {\n    type: 'band',\n    padding: 0.5,\n  });\n",paraId:7,tocIndex:2}]},64773:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71584);const t=[{value:"针对连续数据，对数据进行连续映射的比例尺，本质是一个线性公式：",paraId:0},{value:"y = ax + b",paraId:0},{value:"，从一个数值范围映射到另外一个数值范围。",paraId:0},{value:"linear 比例尺常规用于将数据映射到归一化坐标上。",paraId:1,tocIndex:0},{value:"chart\n  .line()\n  .encode('x', 'year')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'linear',\n    range: [0.2, 0.8],\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"这个例子中会将 y 通道的比例尺设置它的映射方式，从而影响到图形在画布上的位置。",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"domain",paraId:4,tocIndex:1},{value:"设置数据的定义域范围",paraId:4,tocIndex:1},{value:"number[]",paraId:4,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:4,tocIndex:1},{value:"domainMin",paraId:4,tocIndex:1},{value:"设置数据的定义域最小值",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"输入数据的最小值",paraId:4,tocIndex:1},{value:"domainMax",paraId:4,tocIndex:1},{value:"设置数据的定义域最大值",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"输入数据的最大",paraId:4,tocIndex:1},{value:"range",paraId:4,tocIndex:1},{value:"设置数据映射的值域范围",paraId:4,tocIndex:1},{value:"number[]",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"[0, 1]",paraId:4,tocIndex:1},{value:"rangeMin",paraId:4,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:4,tocIndex:1},{value:"number | string",paraId:4,tocIndex:1},{value:"0",paraId:4,tocIndex:1},{value:"rangeMax",paraId:4,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:4,tocIndex:1},{value:"number | string",paraId:4,tocIndex:1},{value:"1",paraId:4,tocIndex:1},{value:"unknown",paraId:4,tocIndex:1},{value:"对于 ",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"， ",paraId:4,tocIndex:1},{value:"NaN",paraId:4,tocIndex:1},{value:"，",paraId:4,tocIndex:1},{value:"null",paraId:4,tocIndex:1},{value:" 空值，返回的数据",paraId:4,tocIndex:1},{value:"any",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"tickCount",paraId:4,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:4,tocIndex:1},{value:"number",paraId:4,tocIndex:1},{value:"5",paraId:4,tocIndex:1},{value:"tickMethod",paraId:4,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:4,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:4,tocIndex:1},{value:"d3-ticks",paraId:4,tocIndex:1},{value:"round",paraId:4,tocIndex:1},{value:"输出值去四舍五入",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"clamp",paraId:4,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"nice",paraId:4,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"interpolate",paraId:4,tocIndex:1},{value:"自定义差值函数",paraId:4,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:4,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:4,tocIndex:1},{value:"怎么自定义 y 轴的刻度？",paraId:5,tocIndex:2},{value:"比如只需要在刻度上显示 0, 100, 600，那就以下方式设置 y 比例尺。",paraId:6,tocIndex:2},{value:"chart\n  .line()\n  // ...\n  .scale('y', {\n    type: 'linear',\n    domain: [0, 700],\n    tickMethod: () => [0, 100, 600]\n  });\n",paraId:7,tocIndex:2}]},77049:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(74544);const t=[{value:"log 是使用对数函数进行数据映射，它的映射函数为 ",paraId:0},{value:"y = log(x) + b",paraId:0},{value:"。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'year')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'log',\n    /* 其他配置项 */\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"domain",paraId:2,tocIndex:1},{value:"设置数据的定义域范围",paraId:2,tocIndex:1},{value:"number[]",paraId:2,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:2,tocIndex:1},{value:"domainMin",paraId:2,tocIndex:1},{value:"设置数据的定义域最小值",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"输入数据的最小值",paraId:2,tocIndex:1},{value:"domainMax",paraId:2,tocIndex:1},{value:"设置数据的定义域最大值",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"输入数据的最大",paraId:2,tocIndex:1},{value:"range",paraId:2,tocIndex:1},{value:"设置数据映射的值域范围",paraId:2,tocIndex:1},{value:"number[]",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"string[]",paraId:2,tocIndex:1},{value:"[0, 1]",paraId:2,tocIndex:1},{value:"rangeMin",paraId:2,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"rangeMax",paraId:2,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1},{value:"unknown",paraId:2,tocIndex:1},{value:"对于 ",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"， ",paraId:2,tocIndex:1},{value:"NaN",paraId:2,tocIndex:1},{value:"，",paraId:2,tocIndex:1},{value:"null",paraId:2,tocIndex:1},{value:" 空值，返回的数据",paraId:2,tocIndex:1},{value:"any",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"tickCount",paraId:2,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"5",paraId:2,tocIndex:1},{value:"tickMethod",paraId:2,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:2,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:2,tocIndex:1},{value:"calculateLogTicks",paraId:2,tocIndex:1},{value:"round",paraId:2,tocIndex:1},{value:"输出值去四舍五入",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"clamp",paraId:2,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"nice",paraId:2,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"interpolate",paraId:2,tocIndex:1},{value:"自定义差值函数",paraId:2,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:2,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:2,tocIndex:1},{value:"base",paraId:2,tocIndex:1},{value:"设定对数底",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"10",paraId:2,tocIndex:1},{value:"log 底数默认为 10，怎么设定 log 的底数",paraId:3,tocIndex:1},{value:"chart\n  .line()\n  // ...\n  .scale('y', {\n    type: 'log',\n    base: 100,\n  });\n",paraId:4,tocIndex:1}]},27048:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(22603);const t=[{value:"ordinal 是将有序且离散的定义域映射到有序离散的值域，通常用于分类的数据，比如：班级、商品类别等形式的数据。",paraId:0},{value:"linear 比例尺常规用于将数据映射到归一化坐标上。",paraId:1,tocIndex:0},{value:"chart\n  .line()\n  .encode('x', 'type')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'ordinal',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"这个例子中会将 y 通道的比例尺设置它的映射方式，从而影响到图形在画布上的位置。",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"domain",paraId:4,tocIndex:1},{value:"设置数据的定义域范围",paraId:4,tocIndex:1},{value:"any[]",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"range",paraId:4,tocIndex:1},{value:"设置数据映射的值域范围",paraId:4,tocIndex:1},{value:"any[]",paraId:4,tocIndex:1},{value:"[]",paraId:4,tocIndex:1},{value:"unknown",paraId:4,tocIndex:1},{value:"对于 ",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"， ",paraId:4,tocIndex:1},{value:"NaN",paraId:4,tocIndex:1},{value:"，",paraId:4,tocIndex:1},{value:"null",paraId:4,tocIndex:1},{value:" 空值，返回的数据",paraId:4,tocIndex:1},{value:"any",paraId:4,tocIndex:1},{value:"undefined",paraId:4,tocIndex:1},{value:"compare",paraId:4,tocIndex:1},{value:"比较两个值，用于排序的比较器",paraId:4,tocIndex:1},{value:"`(a: number",paraId:4,tocIndex:1},{value:"string, b: number",paraId:4,tocIndex:1},{value:"柱形图怎么指定柱子的颜色色板？",paraId:5,tocIndex:2},{value:"chart\n  .interval()\n  // ...\n  .encode('color', 'type')\n  .scale('color', {\n    type: 'ordinal',\n    range: ['red', 'green', 'blue'],\n  });\n",paraId:6,tocIndex:2}]},82078:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(83700);const t=[{value:"point 是一个特殊 ",paraId:0},{value:"band",paraId:1},{value:" 比例尺，固定配置 ",paraId:0},{value:"bandWith = 0",paraId:0},{value:"。",paraId:0},{value:"chart\n  .interval()\n  .encode('x', 'type')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'point',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置定义域数组",paraId:3,tocIndex:1},{value:"number[] | string[] | Date[]",paraId:3,tocIndex:1},{value:"[]",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"[0, 1]",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"， ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"round",paraId:3,tocIndex:1},{value:"输出值去四舍五入",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"paddingInner",paraId:3,tocIndex:1},{value:"设置比例尺的内部间距，在 [0, 1] 范围内",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"paddingOuter",paraId:3,tocIndex:1},{value:"设置比例尺的外部间距，在 [0, 1] 范围内",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"padding",paraId:3,tocIndex:1},{value:"同时设置 ",paraId:3,tocIndex:1},{value:"paddingInner",paraId:3,tocIndex:1},{value:" 和 ",paraId:3,tocIndex:1},{value:"paddingOuter",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"align",paraId:3,tocIndex:1},{value:"对齐方式，在 [0, 1] 范围内",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0.5",paraId:3,tocIndex:1},{value:"compare",paraId:3,tocIndex:1},{value:"对定义域进行映射前的排序",paraId:3,tocIndex:1},{value:"(a: string or number, b: string or number) => number",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"|<------------------------------------------- range -------------------------------------------\x3e|\n|             |                                 |                                 |             |\n|<--step*PO--\x3e|<--------------step-------------\x3e|<--------------step-------------\x3e|<--step*PO--\x3e|\n|             |                                 |                                 |             |\n|             A                                 B                                 C             |\n|-----------------------------------------------------------------------------------------------|\n",paraId:4,tocIndex:1}]},28742:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(23537);const t=[{value:"pow 是使用指数函数进行数据映射，它的映射函数为 ",paraId:0},{value:"y = x ^ exp + b",paraId:0},{value:"。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'year')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'pow',\n    /* 其他配置项 */\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"domain",paraId:2,tocIndex:1},{value:"设置数据的定义域范围",paraId:2,tocIndex:1},{value:"number[]",paraId:2,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:2,tocIndex:1},{value:"domainMin",paraId:2,tocIndex:1},{value:"设置数据的定义域最小值",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"输入数据的最小值",paraId:2,tocIndex:1},{value:"domainMax",paraId:2,tocIndex:1},{value:"设置数据的定义域最大值",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"输入数据的最大",paraId:2,tocIndex:1},{value:"range",paraId:2,tocIndex:1},{value:"设置数据映射的值域范围",paraId:2,tocIndex:1},{value:"number[]",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"string[]",paraId:2,tocIndex:1},{value:"[0, 1]",paraId:2,tocIndex:1},{value:"rangeMin",paraId:2,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"rangeMax",paraId:2,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:2,tocIndex:1},{value:"number | string",paraId:2,tocIndex:1},{value:"1",paraId:2,tocIndex:1},{value:"unknown",paraId:2,tocIndex:1},{value:"对于 ",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"， ",paraId:2,tocIndex:1},{value:"NaN",paraId:2,tocIndex:1},{value:"，",paraId:2,tocIndex:1},{value:"null",paraId:2,tocIndex:1},{value:" 空值，返回的数据",paraId:2,tocIndex:1},{value:"any",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"tickCount",paraId:2,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"5",paraId:2,tocIndex:1},{value:"tickMethod",paraId:2,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:2,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:2,tocIndex:1},{value:"calculatePowTicks",paraId:2,tocIndex:1},{value:"round",paraId:2,tocIndex:1},{value:"输出值去四舍五入",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"clamp",paraId:2,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"nice",paraId:2,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"interpolate",paraId:2,tocIndex:1},{value:"自定义差值函数",paraId:2,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:2,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:2,tocIndex:1},{value:"exponent",paraId:2,tocIndex:1},{value:"设定指数",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"2",paraId:2,tocIndex:1}]},6549:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(50157);const t=[{value:"quantile 类似于 ",paraId:0},{value:"threshold",paraId:1},{value:"，但是计算切片的方式是基于元素在数据中的索引。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'price')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'quantile',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置数据的定义域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:"[]",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"any[]",paraId:3,tocIndex:1},{value:"[]",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"， ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickCount",paraId:3,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"5",paraId:3,tocIndex:1},{value:"tickMethod",paraId:3,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:3,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:3,tocIndex:1},{value:"wilkinson-extended",paraId:3,tocIndex:1},{value:"nice",paraId:3,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1}]},71977:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(31566);const t=[{value:"quantize 类似于 ",paraId:0},{value:"threshold",paraId:1},{value:"，但是计算切片的方式是基于元素的数据值。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'price')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'quantize',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置数据的定义域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:"[]",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"any[]",paraId:3,tocIndex:1},{value:"[]",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"， ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickCount",paraId:3,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"5",paraId:3,tocIndex:1},{value:"tickMethod",paraId:3,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:3,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:3,tocIndex:1},{value:"wilkinson-extended",paraId:3,tocIndex:1},{value:"nice",paraId:3,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1}]},68746:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(12723);const t=[{value:"sqrt 是指数固定为 ",paraId:0},{value:"0.5",paraId:0},{value:" 的 ",paraId:0},{value:"pow",paraId:1},{value:" 比例尺，它的映射函数为 ",paraId:0},{value:"y = x ^ 0.5 + b",paraId:0},{value:"。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'year')\n  .encode('y', 'sale')\n  .scale('y', {\n    type: 'sqrt',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置数据的定义域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:3,tocIndex:1},{value:"domainMin",paraId:3,tocIndex:1},{value:"设置数据的定义域最小值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"输入数据的最小值",paraId:3,tocIndex:1},{value:"domainMax",paraId:3,tocIndex:1},{value:"设置数据的定义域最大值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"输入数据的最大",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"number[]",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"[0, 1]",paraId:3,tocIndex:1},{value:"rangeMin",paraId:3,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:3,tocIndex:1},{value:"number | string",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"rangeMax",paraId:3,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:3,tocIndex:1},{value:"number | string",paraId:3,tocIndex:1},{value:"1",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"， ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickCount",paraId:3,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"5",paraId:3,tocIndex:1},{value:"tickMethod",paraId:3,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:3,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:3,tocIndex:1},{value:"d3-ticks",paraId:3,tocIndex:1},{value:"round",paraId:3,tocIndex:1},{value:"输出值去四舍五入",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"clamp",paraId:3,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"nice",paraId:3,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"interpolate",paraId:3,tocIndex:1},{value:"自定义差值函数",paraId:3,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:3,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:3,tocIndex:1},{value:"exponent",paraId:3,tocIndex:1},{value:"设定指数",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0.5",paraId:3,tocIndex:1}]},71322:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(24009);const t=[{value:"threshold 是将连续的值域范围划分为多个切片，并将这些切片映射到一个离散的数据中。",paraId:0},{value:"chart\n  .line()\n  .encode('x', 'price')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'threshold',\n    /* 其他配置项 */\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"domain",paraId:2,tocIndex:1},{value:"设置数据的定义域范围",paraId:2,tocIndex:1},{value:"number[]",paraId:2,tocIndex:1},{value:"[0.5]",paraId:2,tocIndex:1},{value:"range",paraId:2,tocIndex:1},{value:"设置数据映射的值域范围",paraId:2,tocIndex:1},{value:"any[]",paraId:2,tocIndex:1},{value:"[0, 1]",paraId:2,tocIndex:1},{value:"unknown",paraId:2,tocIndex:1},{value:"对于 ",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1},{value:"， ",paraId:2,tocIndex:1},{value:"NaN",paraId:2,tocIndex:1},{value:"，",paraId:2,tocIndex:1},{value:"null",paraId:2,tocIndex:1},{value:" 空值，返回的数据",paraId:2,tocIndex:1},{value:"any",paraId:2,tocIndex:1},{value:"undefined",paraId:2,tocIndex:1}]},10161:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(71018);const t=[{value:"time 是特殊的 ",paraId:0},{value:"linear",paraId:1},{value:" 比例尺，它的值域是一组时间顺序的数据，映射函数为 ",paraId:0},{value:"y = x.getTime() + b",paraId:0},{value:"。",paraId:0},{value:"chart\n  .interval()\n  .encode('x', 'time')\n  .encode('y', 'sale')\n  .scale('x', {\n    type: 'time',\n    /* 其他配置项 */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"domain",paraId:3,tocIndex:1},{value:"设置数据的定义域范围",paraId:3,tocIndex:1},{value:"Date[]",paraId:3,tocIndex:1},{value:"输入数据的最大最小值范围",paraId:3,tocIndex:1},{value:"domainMin",paraId:3,tocIndex:1},{value:"设置数据的定义域最小值",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"输入数据的最小值",paraId:3,tocIndex:1},{value:"domainMax",paraId:3,tocIndex:1},{value:"设置数据的定义域最大值",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"输入数据的最大",paraId:3,tocIndex:1},{value:"range",paraId:3,tocIndex:1},{value:"设置数据映射的值域范围",paraId:3,tocIndex:1},{value:"Date[]",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"[0, 1]",paraId:3,tocIndex:1},{value:"rangeMin",paraId:3,tocIndex:1},{value:"设置数据映射的值域最小值",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"rangeMax",paraId:3,tocIndex:1},{value:"设置数据映射的值域最大值",paraId:3,tocIndex:1},{value:"Date",paraId:3,tocIndex:1},{value:"1",paraId:3,tocIndex:1},{value:"unknown",paraId:3,tocIndex:1},{value:"对于 ",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"， ",paraId:3,tocIndex:1},{value:"NaN",paraId:3,tocIndex:1},{value:"，",paraId:3,tocIndex:1},{value:"null",paraId:3,tocIndex:1},{value:" 空值，返回的数据",paraId:3,tocIndex:1},{value:"any",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickCount",paraId:3,tocIndex:1},{value:"设置推荐的 tick 生成数量，tickCount 只是建议值，不会完全按照这个值产生 tick",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"5",paraId:3,tocIndex:1},{value:"tickInterval",paraId:3,tocIndex:1},{value:"设置推荐的 tick 之间的间隔，tickInterval 优先级高于 tickCount。",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"tickMethod",paraId:3,tocIndex:1},{value:"设置生成 tick 的方法，常用于自定义 tick",paraId:3,tocIndex:1},{value:"(min: number, max: number, count: number) => number[]",paraId:3,tocIndex:1},{value:"d3Time",paraId:3,tocIndex:1},{value:"round",paraId:3,tocIndex:1},{value:"输出值去四舍五入",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"clamp",paraId:3,tocIndex:1},{value:"将映射值限定在 range 的范围内",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"nice",paraId:3,tocIndex:1},{value:"扩展 domain 范围，让输出的 tick 展示得更加友好",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"mask",paraId:3,tocIndex:1},{value:"设置时间显示的格式，底层使用 ",paraId:3,tocIndex:1},{value:"fetcha",paraId:3,tocIndex:1},{value:".",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"undefined",paraId:3,tocIndex:1},{value:"utc",paraId:3,tocIndex:1},{value:"是否 utc",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"interpolate",paraId:3,tocIndex:1},{value:"自定义差值函数",paraId:3,tocIndex:1},{value:"(a: number, b: number) => (t: number) => T",paraId:3,tocIndex:1},{value:"(a, b) => (t) => a * (1 - t) + b * t",paraId:3,tocIndex:1}]},20785:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(80835);const t=[{value:"学术风格的主题。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 80,\n  theme: 'academy',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .axis('x', { zIndex: 1 });\n\nchart\n  .interaction('tooltip', { shared: true })\n  .interaction('elementHighlight', { background: true });\n\nchart.render();\n",paraId:1,tocIndex:0}]},78564:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(87390);const t=[{value:"经典主题。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 80,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .axis('x', { zIndex: 1 });\n\nchart\n  .interaction('tooltip', { shared: true })\n  .interaction('elementHighlight', { background: true });\n\nchart.render();\n",paraId:1,tocIndex:0}]},88634:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(61638);const t=[{value:"经典暗黑主题。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 80,\n  theme: 'classicDark',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' })\n  .axis('x', { zIndex: 1 });\n\nchart\n  .interaction('tooltip', { shared: true })\n  .interaction('elementHighlight', { background: true });\n\nchart.render();\n",paraId:1,tocIndex:0}]},35541:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(81213);const t=[{value:"主要用于绘制 3D 条形图。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴，最后在场景中添加光源。",paraId:3,tocIndex:0},{value:"(() => {\n  // Create a WebGL renderer.\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  const data = [];\n  for (let x = 0; x < 5; ++x) {\n    for (let z = 0; z < 5; ++z) {\n      data.push({\n        x: `x-${x}`,\n        z: `z-${z}`,\n        y: 10 - x - z,\n        color: Math.random() < 0.33 ? 0 : Math.random() < 0.67 ? 1 : 2,\n      });\n    }\n  }\n\n  chart\n    .interval3D()\n    .data({\n      type: 'inline',\n      value: data,\n    })\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('z', 'z')\n    .encode('color', 'color')\n    .encode('shape', 'cube')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 })\n    .style('opacity', 0.7);\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 50, 1280 / 960);\n    camera.setType(g.CameraType.ORBITING);\n    camera.rotate(-20, -20, 0);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 2.5,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0},{value:"目前 interval3D 有以下内置 shape 图形：",paraId:7,tocIndex:1},{value:"图形",paraId:8,tocIndex:1},{value:"描述",paraId:8,tocIndex:1},{value:"示例",paraId:8,tocIndex:1},{value:"cube",paraId:8,tocIndex:1},{value:"绘制立方体",paraId:8,tocIndex:1},{value:"cylinder",paraId:8,tocIndex:1},{value:"绘制圆柱",paraId:8,tocIndex:1},{value:"cone",paraId:8,tocIndex:1},{value:"绘制圆锥",paraId:8,tocIndex:1},{value:"属性",paraId:9,tocIndex:2},{value:"描述",paraId:9,tocIndex:2},{value:"类型",paraId:9,tocIndex:2},{value:"默认值",paraId:9,tocIndex:2},{value:"fill",paraId:9,tocIndex:2},{value:"图形的填充色",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<string>",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"opacity",paraId:9,tocIndex:2},{value:"图形的整体透明度",paraId:9,tocIndex:2},{value:"number",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<number>",paraId:9,tocIndex:2},{value:"-",paraId:9,tocIndex:2},{value:"cursor",paraId:9,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:9,tocIndex:2},{value:"string",paraId:9,tocIndex:2},{value:" | ",paraId:9,tocIndex:2},{value:"Function<string>",paraId:9,tocIndex:2},{value:"'default'",paraId:9,tocIndex:2}]},36766:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(13312);const t=[{value:"主要用于绘制 3D 折线图。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴。无需在场景中添加光源。",paraId:3,tocIndex:0},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  const pointCount = 31;\n  let r;\n  const data = [];\n\n  for (let i = 0; i < pointCount; i++) {\n    r = 10 * Math.cos(i / 10);\n    data.push({\n      x: r * Math.cos(i),\n      y: r * Math.sin(i),\n      z: i,\n    });\n  }\n\n  chart\n    .line3D()\n    .data(data)\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('z', 'z')\n    .encode('size', 4)\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0}]},88282:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(6187);const t=[{value:"主要用于绘制 3D 散点图，利用点的粒度来分析数据的分布情况。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴，最后在场景中添加光源。",paraId:3,tocIndex:0},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Cylinders')\n    .encode('shape', 'cube')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0},{value:"目前 point3D 有以下几个内置 shape 图形，包含 3D 和 2D：",paraId:7,tocIndex:1},{value:"图形",paraId:8,tocIndex:1},{value:"描述",paraId:8,tocIndex:1},{value:"示例",paraId:8,tocIndex:1},{value:"cube",paraId:8,tocIndex:1},{value:"绘制立方体",paraId:8,tocIndex:1},{value:"sphere",paraId:8,tocIndex:1},{value:"绘制球体",paraId:8,tocIndex:1},{value:"hollow",paraId:8,tocIndex:1},{value:"绘制空心圆",paraId:8,tocIndex:1},{value:"hollowDiamond",paraId:8,tocIndex:1},{value:"绘制空心钻石",paraId:8,tocIndex:1},{value:"hollowHexagon",paraId:8,tocIndex:1},{value:"绘制空心六边形",paraId:8,tocIndex:1},{value:"hollowSquare",paraId:8,tocIndex:1},{value:"绘制空心方块",paraId:8,tocIndex:1},{value:"hollowTriangleDown",paraId:8,tocIndex:1},{value:"绘制空心向下三角形",paraId:8,tocIndex:1},{value:"hollowTriangle",paraId:8,tocIndex:1},{value:"绘制空心三角形",paraId:8,tocIndex:1},{value:"hollowBowtie",paraId:8,tocIndex:1},{value:"绘制空心蝴蝶结",paraId:8,tocIndex:1},{value:"point",paraId:8,tocIndex:1},{value:"绘制圆",paraId:8,tocIndex:1},{value:"plus",paraId:8,tocIndex:1},{value:"绘制加号",paraId:8,tocIndex:1},{value:"diamond",paraId:8,tocIndex:1},{value:"绘制钻石",paraId:8,tocIndex:1},{value:"square",paraId:8,tocIndex:1},{value:"绘制方块",paraId:8,tocIndex:1},{value:"triangle",paraId:8,tocIndex:1},{value:"绘制三角形",paraId:8,tocIndex:1},{value:"triangleDown",paraId:8,tocIndex:1},{value:"绘制向下三角形",paraId:8,tocIndex:1},{value:"hexagon",paraId:8,tocIndex:1},{value:"绘制六边形",paraId:8,tocIndex:1},{value:"cross",paraId:8,tocIndex:1},{value:"绘制交叉符号",paraId:8,tocIndex:1},{value:"bowtie",paraId:8,tocIndex:1},{value:"绘制蝴蝶结",paraId:8,tocIndex:1},{value:"hyphen",paraId:8,tocIndex:1},{value:"绘制连字符",paraId:8,tocIndex:1},{value:"line",paraId:8,tocIndex:1},{value:"绘制竖线",paraId:8,tocIndex:1},{value:"tick",paraId:8,tocIndex:1},{value:"绘制 tick",paraId:8,tocIndex:1},{value:"使用球体效果如下：",paraId:9,tocIndex:1},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Cylinders')\n    .encode('shape', 'sphere')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n\n    // Add a directional light into scene.\n    const light = new gPlugin3d.DirectionalLight({\n      style: {\n        intensity: 3,\n        fill: 'white',\n        direction: [-1, 0, 1],\n      },\n    });\n    canvas.appendChild(light);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:10,tocIndex:1},{value:"而在使用 2D 图形时，无需添加光源：",paraId:11,tocIndex:1},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  chart\n    .point3D()\n    .data({\n      type: 'fetch',\n      value:\n        'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n    })\n    .encode('x', 'Horsepower')\n    .encode('y', 'Miles_per_Gallon')\n    .encode('z', 'Weight_in_lbs')\n    .encode('color', 'Cylinders')\n    .encode('shape', 'triangle')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 2 })\n    .axis('y', { gridLineWidth: 2, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 2 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 5000, 45, 500 / 500);\n    camera.setType(g.CameraType.ORBITING);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:12,tocIndex:1},{value:"属性",paraId:13,tocIndex:2},{value:"描述",paraId:13,tocIndex:2},{value:"类型",paraId:13,tocIndex:2},{value:"默认值",paraId:13,tocIndex:2},{value:"fill",paraId:13,tocIndex:2},{value:"图形的填充色",paraId:13,tocIndex:2},{value:"string",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<string>",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"opacity",paraId:13,tocIndex:2},{value:"图形的整体透明度",paraId:13,tocIndex:2},{value:"number",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<number>",paraId:13,tocIndex:2},{value:"-",paraId:13,tocIndex:2},{value:"cursor",paraId:13,tocIndex:2},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:13,tocIndex:2},{value:"string",paraId:13,tocIndex:2},{value:" | ",paraId:13,tocIndex:2},{value:"Function<string>",paraId:13,tocIndex:2},{value:"'default'",paraId:13,tocIndex:2},{value:"其他的 point3D 图形配置项和 ",paraId:14,tocIndex:2},{value:"cube",paraId:14,tocIndex:2},{value:" 一致。",paraId:14,tocIndex:2},{value:"属性",paraId:15,tocIndex:3},{value:"描述",paraId:15,tocIndex:3},{value:"类型",paraId:15,tocIndex:3},{value:"默认值",paraId:15,tocIndex:3},{value:"fill",paraId:15,tocIndex:3},{value:"图形的填充色",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"fillOpacity",paraId:15,tocIndex:3},{value:"图形的填充透明度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"stroke",paraId:15,tocIndex:3},{value:"图形的描边",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"strokeOpacity",paraId:15,tocIndex:3},{value:"描边透明度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"lineWidth",paraId:15,tocIndex:3},{value:"图形描边的宽度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"lineDash",paraId:15,tocIndex:3},{value:"描边的虚线配置，第一个值为虚线每个分段的长度，第二个值为分段间隔的距离。lineDash 设为[0, 0]的效果为没有描边。",paraId:15,tocIndex:3},{value:"[number,number]",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<[number, number]>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"opacity",paraId:15,tocIndex:3},{value:"图形的整体透明度",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowColor",paraId:15,tocIndex:3},{value:"图形阴影颜色",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowBlur",paraId:15,tocIndex:3},{value:"图形阴影的高斯模糊系数",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowOffsetX",paraId:15,tocIndex:3},{value:"设置阴影距图形的水平距离",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"shadowOffsetY",paraId:15,tocIndex:3},{value:"设置阴影距图形的垂直距离",paraId:15,tocIndex:3},{value:"number",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<number>",paraId:15,tocIndex:3},{value:"-",paraId:15,tocIndex:3},{value:"cursor",paraId:15,tocIndex:3},{value:"鼠标样式。同 css 的鼠标样式，默认 'default'。",paraId:15,tocIndex:3},{value:"string",paraId:15,tocIndex:3},{value:" | ",paraId:15,tocIndex:3},{value:"Function<string>",paraId:15,tocIndex:3},{value:"'default'",paraId:15,tocIndex:3}]},21138:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(16970);const t=[{value:"主要用于绘制 3D 曲面图。",paraId:0},{value:"首先需要使用 ",paraId:1,tocIndex:0},{value:"@antv/g-webgl",paraId:1,tocIndex:0},{value:" 作为渲染器并注册以下两个插件：",paraId:1,tocIndex:0},{value:"g-plugin-3d",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的几何、材质和光照",paraId:2,tocIndex:0},{value:"g-plugin-control",paraId:2,tocIndex:0},{value:" 提供 3D 场景下的相机交互",paraId:2,tocIndex:0},{value:"然后设置 z 通道、scale 和 z 坐标轴。无需在场景中添加光源。",paraId:3,tocIndex:0},{value:"(() => {\n  const renderer = new gWebgl.Renderer();\n  renderer.registerPlugin(new gPluginControl.Plugin());\n  renderer.registerPlugin(new gPlugin3d.Plugin());\n\n  const Chart = G2.extend(G2.Runtime, {\n    ...G2.corelib(),\n    ...g2Extension3d.threedlib(),\n  });\n\n  // 初始化图表实例\n  const chart = new Chart({\n    renderer,\n    width: 500,\n    height: 500,\n    depth: 400,\n  });\n\n  // We set the width/height to 100;\n  const size = 100;\n  const points = [];\n  for (let i = 0; i <= 2 * size; ++i) {\n    const theta = (Math.PI * (i - size)) / size;\n    for (let j = 0; j <= 2 * size; ++j) {\n      var phi = (Math.PI * (j - size)) / size;\n\n      const x = (10.0 + Math.cos(theta)) * Math.cos(phi);\n      const y = (10.0 + Math.cos(theta)) * Math.sin(phi);\n\n      points.push({\n        x: i,\n        y: j,\n        z: Math.sin(theta) * x * y,\n      });\n    }\n  }\n\n  chart\n    .surface3D()\n    .data(points)\n    .encode('x', 'x')\n    .encode('y', 'y')\n    .encode('z', 'z')\n    .coordinate({ type: 'cartesian3D' })\n    .scale('x', { nice: true })\n    .scale('y', { nice: true })\n    .scale('z', { nice: true })\n    .legend(false)\n    .axis('x', { gridLineWidth: 1 })\n    .axis('y', { gridLineWidth: 1, titleBillboardRotation: -Math.PI / 2 })\n    .axis('z', { gridLineWidth: 1 });\n\n  chart.render().then(() => {\n    const { canvas } = chart.getContext();\n    const camera = canvas.getCamera();\n    camera.setPerspective(0.1, 2000, 45, 500 / 500);\n    camera.rotate(30, 30, 0);\n    camera.dolly(60);\n    camera.setType(g.CameraType.ORBITING);\n  });\n\n  return chart.getContainer();\n})();\n",paraId:4,tocIndex:0},{value:"更多的案例，可以查看",paraId:5,tocIndex:0},{value:"图表示例",paraId:6,tocIndex:0},{value:"页面。",paraId:5,tocIndex:0}]},9753:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(21466);const t=[{value:"对连续的 x 和 连续的 y 通道进行分箱，并且对通道根据指定的 reducer 进行聚合。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用 bin 变换。",paraId:1,tocIndex:0},{value:"chart\n  .point()\n  .encode('x', 'x')\n  // ...\n  .transform({\n    type: 'bin',\n    /* options */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"thresholdsX",paraId:3,tocIndex:1},{value:"对 x 分箱的数量",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"d3.thresholdScott",paraId:3,tocIndex:1},{value:"thresholdsY",paraId:3,tocIndex:1},{value:"对 y 分箱的数量",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"d3.thresholdScott",paraId:3,tocIndex:1},{value:"[channel]",paraId:3,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:3,tocIndex:1},{value:"Reducer",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:4,tocIndex:1}]},72977:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(67238);const t=[{value:"对 x 通道进行分箱，如果希望对 y 通道进行分箱，使用 binX + transpose 坐标系。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用 binX 变换。",paraId:1,tocIndex:0},{value:"chart\n  .point()\n  .encode('x', 'x')\n  // ...\n  .transform({\n    type: 'binX',\n    /* options */\n  });\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"thresholds",paraId:3,tocIndex:1},{value:"对 x 分箱的数量",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"d3.thresholdScott",paraId:3,tocIndex:1},{value:"[channel]",paraId:3,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:3,tocIndex:1},{value:"Reducer",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:4,tocIndex:1}]},47524:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(56023);const t=[{value:"对 y 和 y1 通道求差集。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/temperature-compare.json',\n  transforms: [\n    {\n      type: 'map',\n      callback: (d) => (d) => ({\n        ...d,\n        date: new Date(d.date),\n      })\n    }\n  ]\n});\n\nchart\n  .area()\n  .data({\n    transform: [\n      {\n        type: 'fold',\n        fields: ['New York', 'San Francisco'],\n        key: 'city',\n        value: 'temperature',\n      },\n    ],\n  })\n  .transform([{ type: 'diffY' }]) // Diff the 2 area shape.\n  .encode('x', 'date')\n  .encode('y', 'temperature')\n  .encode('color', 'city')\n  .encode('shape', 'hvh')\n  .scale('color', { range: ['#67a9cf', '#ef8a62'] });\n\nchart\n  .line()\n  .encode('x', 'date')\n  .encode('y', 'San Francisco')\n  .encode('shape', 'hvh')\n  .style('stroke', '#000');\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"groupBy",paraId:3,tocIndex:1},{value:"按照哪个通道分组数据",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"x",paraId:3,tocIndex:1},{value:"series",paraId:3,tocIndex:1},{value:"是否存在分组",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"true",paraId:3,tocIndex:1}]},80583:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(7050);const t=[{value:"生成 series 通道值为 color 通道的值，根据 series 通道实现分组效果。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 50,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'sortX', by: 'y', reverse: true, slice: 6 })\n  .transform({ type: 'dodgeX' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' });\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"groupBy",paraId:3,tocIndex:1},{value:"按照哪个通道分组数据",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"x",paraId:3,tocIndex:1},{value:"reverse",paraId:3,tocIndex:1},{value:"是否逆序",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"orderBy",paraId:3,tocIndex:1},{value:"排序方式",paraId:3,tocIndex:1},{value:"TransformOrder",paraId:3,tocIndex:1},{value:"() => null",paraId:3,tocIndex:1},{value:"padding",paraId:3,tocIndex:1},{value:"分组数据之间的间距（0 ~ 1）",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"0",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype TransformOrder =\n  | 'value'\n  | 'sum'\n  | 'series'\n  | 'maxIndex'\n  | string[]\n  | null\n  | ((data: Record<string, Primitive>) => Primitive);\n",paraId:4,tocIndex:1},{value:"怎么设置分组柱形图，柱子之间的间距？",paraId:5,tocIndex:2},{value:"使用 ",paraId:6,tocIndex:2},{value:"dodgeX",paraId:6,tocIndex:2},{value:" 的 paddig 配置。",paraId:6,tocIndex:2},{value:"chart\n  .interval()\n  .transform({ type: 'dodgeX', padding: 0.5 }) // <----\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age');\n",paraId:7,tocIndex:2}]},61363:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(4356);const t=[{value:"根据指定通道设置 x 比例尺的 flex 属性，实现不等宽矩形的效果。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 1000,\n  paddingBottom: 100,\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/90873879-09d7-4842-a493-03fb560267bc.csv',\n  })\n  .transform({ type: 'flexX', field: 'gdp' })\n  .encode('x', 'country')\n  .encode('y', 'value')\n  .encode('color', 'country')\n  .axis('y', { labelFormatter: '~s' });\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"field",paraId:3,tocIndex:1},{value:"指定生成权重数组的字段，优先级比 channel 高",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"(d: any) => Primitive[]",paraId:3,tocIndex:1},{value:"channel",paraId:3,tocIndex:1},{value:"指定生成权重数组的通道",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"y",paraId:3,tocIndex:1},{value:"reducer",paraId:3,tocIndex:1},{value:"聚合每一组权重的函数",paraId:3,tocIndex:1},{value:"Reducer",paraId:3,tocIndex:1},{value:"sum",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer = 'sum' | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:4,tocIndex:1}]},34735:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(27065);const t=[{value:"对离散的 x 和 连续的 y 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 300,\n});\n\nchart\n  .cell()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/seattle-weather.json',\n  })\n  .transform({ type: 'group', color: 'max' })\n  .encode('x', (d) => new Date(d.date).getUTCDate())\n  .encode('y', (d) => new Date(d.date).getUTCMonth())\n  .encode('color', 'temp_max')\n  .style('inset', 0.5)\n  .scale('color', {\n    type: 'sequential',\n    palette: 'gnBu',\n  });\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"channels",paraId:3,tocIndex:1},{value:"针对哪些通道做数据分组聚合",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"['x', 'y']",paraId:3,tocIndex:1},{value:"[channel]",paraId:3,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:3,tocIndex:1},{value:"Reducer",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:4,tocIndex:1}]},19059:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(99588);const t=[{value:"对离散的 color 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  height: 120,\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  })\n  .transform({ type: 'groupColor', y: 'count' })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'normalizeY' })\n  .axis('y', { labelFormatter: '.0%' })\n  .encode('color', 'sex')\n  .label({ text: 'sex', position: 'inside' });\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"[channel]",paraId:3,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:3,tocIndex:1},{value:"Reducer",paraId:3,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:4,tocIndex:1}]},52195:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(78845);const t=[{value:"对离散的 x 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。等效于 ",paraId:0},{value:"channels = ['x']",paraId:0},{value:" 的 ",paraId:0},{value:"group",paraId:1},{value:"。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 800,\n  height: 1200,\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart.data({\n  type: 'fetch',\n  value:\n    'https://gw.alipayobjects.com/os/bmw-prod/b6f2ff26-b232-447d-a613-0df5e30104a0.csv',\n});\n\nchart\n  .link()\n  .scale('y', { formatter: '.0%' })\n  .transform({ type: 'groupX', y: 'min', y1: 'max' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .style('stroke', '#000');\n\nchart\n  .point()\n  .scale('color', { palette: 'spectral' })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('shape', 'point')\n  .encode('color', 'age');\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"[channel]",paraId:4,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:4,tocIndex:1},{value:"Reducer",paraId:4,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:5,tocIndex:1}]},16991:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(55938);const t=[{value:"对离散的 y 通道进行分组，并且对通道根据指定的 Reducer 进行聚合。等效于 ",paraId:0},{value:"channels = ['y']",paraId:0},{value:" 的 ",paraId:0},{value:"group",paraId:1},{value:"。",paraId:0},{value:"在对应的 mark 中有 transform 方法可以使用数据的变换。",paraId:2,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  paddingLeft: 80,\n  height: 180,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/penguins.json',\n  transform: [\n    {\n      type: 'map',\n      callback: (d) => ({ ...d, body_mass_g: +d.body_mass_g }),\n    },\n  ],\n});\n\nchart\n  .point()\n  .encode('x', 'body_mass_g')\n  .encode('y', 'species')\n  .style('stroke', '#000');\n\nchart\n  .link()\n  .transform({ type: 'groupY', x: 'min', x1: 'max' })\n  .encode('x', 'body_mass_g')\n  .encode('y', 'species')\n  .style('stroke', '#000');\n\nchart\n  .point()\n  .transform({ type: 'groupY', x: 'median' })\n  .encode('y', 'species')\n  .encode('x', 'body_mass_g')\n  .encode('shape', 'line')\n  .encode('size', 12)\n  .style('stroke', 'red');\n\nchart.render();\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"[channel]",paraId:4,tocIndex:1},{value:"输出到具体 mark 的 channel 数据的聚合方式",paraId:4,tocIndex:1},{value:"Reducer",paraId:4,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'mean'\n  | 'max'\n  | 'count'\n  | 'min'\n  | 'median'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:5,tocIndex:1}]},98320:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(61185);const t=[{value:"根据离散的 x 和 离散的 y 比例尺，生成 dy 和 dx 通道，实现在某个区域散开的效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.coordinate({ type: 'polar' });\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value: 'https://gw.alipayobjects.com/os/antvdemo/assets/data/diamond.json',\n  })\n  .transform({ type: 'jitter' })\n  .encode('x', 'clarity')\n  .encode('color', 'clarity')\n  .legend(false);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"分组在 x,y 方向上的间距 [0 ~ 1]",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"paddingX",paraId:2,tocIndex:1},{value:"分组在 x 方向的间距 [0 ~ 1]",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"paddingY",paraId:2,tocIndex:1},{value:"分组在 y 方向的间距 [0 ~ 1]",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"random",paraId:2,tocIndex:1},{value:"随机函数，返回值为 [0, 1)",paraId:2,tocIndex:1},{value:"() => number",paraId:2,tocIndex:1},{value:"Math.random",paraId:2,tocIndex:1}]},89751:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(59633);const t=[{value:"根据离散的 x 比例尺，生成 dx 通道，实现在某个区域的 x 方向散开的效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .transform({ type: 'sortX', channel: 'x' })\n  .transform({ type: 'jitterX' })\n  .encode('y', 'Horsepower')\n  .encode('x', 'Cylinders')\n  .encode('shape', 'hollow')\n  .encode('color', 'Cylinders')\n  .scale('x', { type: 'point' })\n  .scale('color', { type: 'ordinal' });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"每个分组之间的间距 [0 ~ 1]",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"random",paraId:2,tocIndex:1},{value:"随机函数，返回值为 [0, 1)",paraId:2,tocIndex:1},{value:"() => number",paraId:2,tocIndex:1},{value:"Math.random",paraId:2,tocIndex:1}]},34466:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(18493);const t=[{value:"根据离散的 y 比例尺，生成 dy 通道，实现在某个区域的 y 方向散开的效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .point()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/2c813e2d-2276-40b9-a9af-cf0a0fb7e942.csv',\n  })\n  .transform({ type: 'sortY' })\n  .transform({ type: 'jitterY' })\n  .encode('x', 'Horsepower')\n  .encode('y', 'Cylinders')\n  .encode('color', 'Cylinders')\n  .scale('y', { type: 'point' })\n  .scale('color', { type: 'ordinal' });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"每个分组之间的间距 [0 ~ 1]",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"random",paraId:2,tocIndex:1},{value:"随机函数，返回值为 [0, 1)",paraId:2,tocIndex:1},{value:"() => number",paraId:2,tocIndex:1},{value:"Math.random",paraId:2,tocIndex:1}]},98129:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(37107);const t=[{value:"对 y 和 y1 通道根据指定的 basis 进行归一化处理。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/87b2ff47-2a33-4509-869c-dae4cdd81163.csv',\n    transform: [\n      {\n        type: 'filter',\n        callback: (d) => d.year === 2000,\n      },\n    ],\n  })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'normalizeY' })\n  .encode('x', 'age')\n  .encode('y', 'people')\n  .encode('color', 'sex')\n  .scale('color', { type: 'ordinal', range: ['#ca8861', '#675193'] })\n  .axis('y', { labelFormatter: '.0%' })\n  .label({ text: 'people', position: 'inside', style: { fill: 'white' } });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"groupBy",paraId:2,tocIndex:1},{value:"按照哪个通道分组数据",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"string[]",paraId:2,tocIndex:1},{value:"x",paraId:2,tocIndex:1},{value:"basis",paraId:2,tocIndex:1},{value:"使用某一个聚合数据进行归一化计算",paraId:2,tocIndex:1},{value:"Basis",paraId:2,tocIndex:1},{value:"max",paraId:2,tocIndex:1},{value:"type Basis =\n  | 'deviation'\n  | 'first'\n  | 'last'\n  | 'max'\n  | 'mean'\n  | 'median'\n  | 'min'\n  | 'sum'\n  | (I, Y) => number;\n",paraId:3,tocIndex:1}]},38657:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(79966);const t=[{value:"让元素在空间中紧凑排列，常常有用于单元可视化。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  autoFit: true,\n});\n\nconst facetRect = chart\n  .facetRect()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/titanic.json',\n    transform: [\n      {\n        type: 'sortBy',\n        fields: ['survived'],\n      },\n      {\n        type: 'map',\n        callback: ({ survived, ...d }) => ({\n          ...d,\n          survived: survived + '',\n        }),\n      },\n    ],\n  })\n  .encode('x', 'pclass');\n\nfacetRect\n  .point()\n  .transform({ type: 'pack' }) // 指定 pack transform\n  .legend('color', { labelFormatter: (d) => (d === '1' ? 'Yes' : 'No') })\n  .encode('color', 'survived')\n  .encode('shape', 'point')\n  .encode('size', 3)\n  .tooltip({\n    title: '',\n    items: ['pclass', 'survived'],\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"padding",paraId:2,tocIndex:1},{value:"每个元素之间的间距，单位为px",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"0",paraId:2,tocIndex:1},{value:"direction",paraId:2,tocIndex:1},{value:"元素的堆叠方向",paraId:2,tocIndex:1},{value:"'row' | 'col'",paraId:2,tocIndex:1},{value:"col",paraId:2,tocIndex:1}]},30830:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(24241);const t=[{value:"针对线、柱、条、散点类图表，当数据量远大于屏幕像素的时候，开启一些内置的采样策略，可以有效的优化图表的绘制效率，默认关闭，也就是按照原始数据全部渲染。",paraId:0},{value:"这是使用 ",paraId:1,tocIndex:0},{value:"sample",paraId:1,tocIndex:0},{value:" 的示例",paraId:1,tocIndex:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data(data);\n\nchart\n  .line()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .transform({\n    type: 'sample',\n    thresholds: 500,\n    strategy: 'max',\n  })\n\nchart.render();\n",paraId:2,tocIndex:0},{value:"属性",paraId:3,tocIndex:1},{value:"描述",paraId:3,tocIndex:1},{value:"类型",paraId:3,tocIndex:1},{value:"默认值",paraId:3,tocIndex:1},{value:"groupBy",paraId:3,tocIndex:1},{value:"数据分组的字段",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:" | ",paraId:3,tocIndex:1},{value:"string[]",paraId:3,tocIndex:1},{value:"series",paraId:3,tocIndex:1},{value:"thresholds",paraId:3,tocIndex:1},{value:"采样策略启用的数据量阈值",paraId:3,tocIndex:1},{value:"number",paraId:3,tocIndex:1},{value:"2000",paraId:3,tocIndex:1},{value:"strategy",paraId:3,tocIndex:1},{value:"采用指定的采样策略",paraId:3,tocIndex:1},{value:"Strategy",paraId:3,tocIndex:1},{value:"median",paraId:3,tocIndex:1},{value:"strategy",paraId:4,tocIndex:1},{value:" 内置有 6 种策略，分别为：",paraId:4,tocIndex:1},{value:"lttb",paraId:5,tocIndex:1},{value:" - 采用 Largest-Triangle-Three-Bucket 算法，可以最大程度保证采样后线条的趋势，形状和极值。",paraId:5,tocIndex:1},{value:"median ",paraId:5,tocIndex:1},{value:" - 取过滤点的中位数",paraId:5,tocIndex:1},{value:"max",paraId:5,tocIndex:1},{value:" - 取过滤点的最大值",paraId:5,tocIndex:1},{value:"min",paraId:5,tocIndex:1},{value:" - 取过滤点的最小值",paraId:5,tocIndex:1},{value:"first",paraId:5,tocIndex:1},{value:" - 取第一个值",paraId:5,tocIndex:1},{value:"last",paraId:5,tocIndex:1},{value:" - 取第最后一个值",paraId:5,tocIndex:1},{value:"(I: number[], X: number[], Y: number[], thresholds: number) => number[]",paraId:5,tocIndex:1},{value:" - 使用自定义的函数进行采样",paraId:5,tocIndex:1},{value:"怎么做自定义的抽样策略？",paraId:6,tocIndex:2},{value:"function strategy(I: number[], X: number[], Y: number[], thresholds: number) {\n  // 这里对这一组数据进行抽样，返回一个数据的索引值\n  return [1, 101, 202 /*...*/];\n}\n\nchart\n  .line()\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .transform([{ type: 'sample', strategy }]);\n",paraId:7,tocIndex:2}]},1089:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(9516);const t=[{value:"按照指定通道进行分组，根据指定通道和 selector 从每组选择出数据。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 800,\n  paddingLeft: 50,\n  paddingRight: 100,\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/indices.json',\n});\n\nchart\n  .line()\n  .encode('x', (d) => new Date(d.Date))\n  .encode('y', 'Close')\n  .encode('color', 'Symbol')\n  .axis('y', { title: '↑ Change in price (%)' });\n\nchart\n  .text()\n  .encode('x', (d) => new Date(d.Date))\n  .encode('y', 'Close')\n  .encode('series', 'Symbol')\n  .encode('color', 'Symbol')\n  .encode('text', 'Symbol')\n  .transform({ type: 'select', channel: 'series', selector: 'last' })\n  .style('dx', 12);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"groupBy",paraId:2,tocIndex:1},{value:"针对指定的通道进行分组",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:" | ",paraId:2,tocIndex:1},{value:"string[]",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"channel",paraId:2,tocIndex:1},{value:"针对每个分组，使用指定的通道进行指定的数据抽取",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:"selector",paraId:2,tocIndex:1},{value:"针对每个分组，指定对应的数据抽取操作",paraId:2,tocIndex:1},{value:"Selector",paraId:2,tocIndex:1},{value:"first",paraId:2,tocIndex:1},{value:"type Selector =\n  | 'min'\n  | 'max'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: number[]) => number[]);\n",paraId:3,tocIndex:1}]},33556:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(13780);const t=[{value:"按照指定通道进行分组，根据 x 通道和 selector 从每组选择出数据。",paraId:0},{value:"具体案例可以参考 ",paraId:1,tocIndex:0},{value:"select",paraId:2,tocIndex:0},{value:"，下面伪代码示意一下。",paraId:1,tocIndex:0},{value:"chart\n  .point()\n  // ...\n  .transform({\n    type: 'selectX',\n    selector: 'mean',\n    /* options */\n  });\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"groupBy",paraId:4,tocIndex:1},{value:"针对指定的通道进行分组",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"series",paraId:4,tocIndex:1},{value:"selector",paraId:4,tocIndex:1},{value:"针对每个分组，使用指定的通道进行指定的数据抽取，输出到 x 通道",paraId:4,tocIndex:1},{value:"Selector",paraId:4,tocIndex:1},{value:"first",paraId:4,tocIndex:1},{value:"type Selector =\n  | 'min'\n  | 'max'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: number[]) => number[]);\n",paraId:5,tocIndex:1}]},89805:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(88106);const t=[{value:"按照指定通道进行分组，根据 x 通道和 selector 从每组选择出数据。",paraId:0},{value:"具体案例可以参考 ",paraId:1,tocIndex:0},{value:"select",paraId:2,tocIndex:0},{value:"，下面伪代码示意一下。",paraId:1,tocIndex:0},{value:"chart\n  .point()\n  // ...\n  .transform({\n    type: 'selectX',\n    selector: 'mean',\n    /* options */\n  });\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"groupBy",paraId:4,tocIndex:1},{value:"针对指定的通道进行分组",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:" | ",paraId:4,tocIndex:1},{value:"string[]",paraId:4,tocIndex:1},{value:"series",paraId:4,tocIndex:1},{value:"selector",paraId:4,tocIndex:1},{value:"针对每个分组，使用指定的通道进行指定的数据抽取，输出到 x 通道",paraId:4,tocIndex:1},{value:"Selector",paraId:4,tocIndex:1},{value:"first",paraId:4,tocIndex:1},{value:"type Selector =\n  | 'min'\n  | 'max'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: number[]) => number[]);\n",paraId:5,tocIndex:1}]},41137:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(17278);const t=[{value:"对离散的 color 比例尺的定义域根据指定通道排序。",paraId:0},{value:"案例可以参考 ",paraId:1,tocIndex:0},{value:"sortX",paraId:2,tocIndex:0},{value:"，下面是伪代码示意。",paraId:1,tocIndex:0},{value:"chart\n  .interval()\n  // ...\n  .transform({\n    type: 'sortColor',\n    /* options */\n  });\n",paraId:3,tocIndex:0},{value:"属性",paraId:4,tocIndex:1},{value:"描述",paraId:4,tocIndex:1},{value:"类型",paraId:4,tocIndex:1},{value:"默认值",paraId:4,tocIndex:1},{value:"reverse",paraId:4,tocIndex:1},{value:"是否逆序",paraId:4,tocIndex:1},{value:"boolean",paraId:4,tocIndex:1},{value:"false",paraId:4,tocIndex:1},{value:"by",paraId:4,tocIndex:1},{value:"指定排序的通道",paraId:4,tocIndex:1},{value:"string",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"slice",paraId:4,tocIndex:1},{value:"选择一个分片范围",paraId:4,tocIndex:1},{value:"number | [number, number]",paraId:4,tocIndex:1},{value:"y",paraId:4,tocIndex:1},{value:"reducer",paraId:4,tocIndex:1},{value:"分组聚合，用于比较大小",paraId:4,tocIndex:1},{value:"Reducer",paraId:4,tocIndex:1},{value:"max",paraId:4,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:5,tocIndex:1}]},77695:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(35723);const t=[{value:"对离散的 x 比例尺的定义域根据指定通道排序。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst labelFormatter = (d) => Math.abs(d) + (d < 0 ? 'BC' : d > 0 ? 'AC' : '');\nconst left = (d) => d.end > -1500 && d.start > -3000;\n\nconst chart = new Chart({\n  container: 'container',\n  width: 900,\n  height: 1000,\n  paddingRight: 80,\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value: 'https://assets.antv.antgroup.com/g2/world-history.json',\n  })\n  .transform({ type: 'sortX', by: 'y' })\n  .transform({ type: 'sortColor', by: 'y', reducer: 'min' })\n  .axis('y', [\n    {\n      tickCount: 5,\n      labelFormatter,\n      grid: null,\n      title: null,\n      labelTextAlign: 'start',\n    },\n    {\n      position: 'top',\n      labelFormatter,\n      title: null,\n      labelTextAlign: 'start',\n    },\n  ])\n  .axis('x', false)\n  .encode('x', 'civilization')\n  .encode('y', ['start', 'end'])\n  .encode('color', 'region')\n  .scale('color', { palette: 'set2' })\n  .label({\n    text: 'civilization',\n    position: (d) => (left(d) ? 'left' : 'right'),\n    style: {\n      textAlign: (d) => (left(d) ? 'end' : 'start'),\n      dx: (d) => (left(d) ? -5 : 5),\n      fontSize: 10,\n    },\n  });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"是否逆序",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"by",paraId:2,tocIndex:1},{value:"指定排序的通道",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"slice",paraId:2,tocIndex:1},{value:"选择一个分片范围",paraId:2,tocIndex:1},{value:"number | [number, number]",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"reducer",paraId:2,tocIndex:1},{value:"分组聚合，用于比较大小",paraId:2,tocIndex:1},{value:"Reducer",paraId:2,tocIndex:1},{value:"max",paraId:2,tocIndex:1},{value:"ordinal",paraId:2,tocIndex:1},{value:"reducer 处理逻辑，若被处理的数据是连续在设置为 ",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:3,tocIndex:1}]},98949:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(42890);const t=[{value:"对离散的 y 比例尺的定义域根据指定通道排序。",paraId:0},{value:"chart\n  .interval()\n  // ...\n  .transform({\n    type: 'sortY',\n    /* options */\n  });\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"是否逆序",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"by",paraId:2,tocIndex:1},{value:"指定排序的通道",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"slice",paraId:2,tocIndex:1},{value:"选择一个分片范围",paraId:2,tocIndex:1},{value:"number | [number, number]",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"reducer",paraId:2,tocIndex:1},{value:"分组聚合，用于比较大小",paraId:2,tocIndex:1},{value:"Reducer",paraId:2,tocIndex:1},{value:"max",paraId:2,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype Reducer =\n  | 'max'\n  | 'min'\n  | 'sum'\n  | 'first'\n  | 'last'\n  | 'mean'\n  | 'median'\n  | ((I: number[], V: Primitive[]) => Primitive);\n",paraId:3,tocIndex:1}]},66522:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(41759);const t=[{value:"对 enterDuration 和 enterDelay 通道进行堆叠，实现分组动画的效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data([\n    { type: 'Apple', year: '2001', value: 260 },\n    { type: 'Orange', year: '2001', value: 100 },\n    { type: 'Banana', year: '2001', value: 90 },\n    { type: 'Apple', year: '2002', value: 210 },\n    { type: 'Orange', year: '2002', value: 150 },\n    { type: 'Banana', year: '2002', value: 30 },\n  ])\n  .transform({ type: 'stackEnter', groupBy: 'x' })\n  .encode('x', 'year')\n  .encode('y', 'value')\n  .encode('color', 'type')\n  .encode('series', 'type')\n  .encode('enterDuration', 1000);\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"groupBy",paraId:2,tocIndex:1},{value:"选择一个分组通道",paraId:2,tocIndex:1},{value:"string | string[]",paraId:2,tocIndex:1},{value:"x",paraId:2,tocIndex:1},{value:"orderBy",paraId:2,tocIndex:1},{value:"排序的通道",paraId:2,tocIndex:1},{value:"string",paraId:2,tocIndex:1},{value:"null",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"是否逆序",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"duration",paraId:2,tocIndex:1},{value:"动画间隔",paraId:2,tocIndex:1},{value:"number",paraId:2,tocIndex:1},{value:"3000",paraId:2,tocIndex:1},{value:"reducer",paraId:2,tocIndex:1},{value:"分组取值方式",paraId:2,tocIndex:1},{value:"(I: number[], V: any[]) => any",paraId:2,tocIndex:1},{value:"(I, V) => V[I[0]]",paraId:2,tocIndex:1}]},3665:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(76280);const t=[{value:"按照指定通道分组，对每组的 y 和 y1 通道进行堆叠，实现堆叠效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart\n  .interval()\n  .data({\n    type: 'fetch',\n    value:\n      'https://gw.alipayobjects.com/os/bmw-prod/f129b517-158d-41a9-83a3-3294d639b39e.csv',\n    format: 'csv',\n  })\n  .transform({ type: 'stackY' })\n  .transform({ type: 'sortX', by: 'y', reverse: true })\n  .encode('x', 'state')\n  .encode('y', 'population')\n  .encode('color', 'age')\n  .axis('y', { labelFormatter: '~s' });\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"groupBy",paraId:2,tocIndex:1},{value:"指定分组通道",paraId:2,tocIndex:1},{value:"string | string[]",paraId:2,tocIndex:1},{value:"x",paraId:2,tocIndex:1},{value:"orderBy",paraId:2,tocIndex:1},{value:"指定排序的数据",paraId:2,tocIndex:1},{value:"TransformOrder",paraId:2,tocIndex:1},{value:"null",paraId:2,tocIndex:1},{value:"y",paraId:2,tocIndex:1},{value:"y 通道选择的数据通道来源",paraId:2,tocIndex:1},{value:"`'y'\\",paraId:2,tocIndex:1},{value:"'y1'`",paraId:2,tocIndex:1},{value:"y1",paraId:2,tocIndex:1},{value:"y1 通道选择的数据通道来源",paraId:2,tocIndex:1},{value:"`'y'\\",paraId:2,tocIndex:1},{value:"'y1'`",paraId:2,tocIndex:1},{value:"reverse",paraId:2,tocIndex:1},{value:"是否逆序",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"series",paraId:2,tocIndex:1},{value:"是否有分组字段",paraId:2,tocIndex:1},{value:"boolean",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"type Primitive = number | string | boolean | Date;\n\ntype TransformOrder =\n  | 'value'\n  | 'sum'\n  | 'series'\n  | 'maxIndex'\n  | string[]\n  | null\n  | ((data: Record<string, Primitive>) => Primitive);\n",paraId:3,tocIndex:1}]},89582:function(a,e,n){n.r(e),n.d(e,{texts:function(){return t}});n(69424);const t=[{value:"按照指定通道分组，给每组的 y 和 y1 通道添加偏移，实现对称效果。",paraId:0},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n});\n\nchart.data({\n  type: 'fetch',\n  value: 'https://assets.antv.antgroup.com/g2/unemployment-by-industry.json',\n  transform: [{\n    type: 'map',\n    callback: (d) => ({\n      ...d,\n      date: new Date(d.date),\n    })\n  }],\n});\n\nchart\n  .area()\n  .transform({ type: 'stackY' })\n  .transform({ type: 'symmetryY' })\n  .encode('x', 'date')\n  .encode('y', 'unemployed')\n  .encode('color', 'industry');\n\nchart.render();\n",paraId:1,tocIndex:0},{value:"属性",paraId:2,tocIndex:1},{value:"描述",paraId:2,tocIndex:1},{value:"类型",paraId:2,tocIndex:1},{value:"默认值",paraId:2,tocIndex:1},{value:"groupBy",paraId:2,tocIndex:1},{value:"指定分组通道",paraId:2,tocIndex:1},{value:"string | string[]",paraId:2,tocIndex:1},{value:"x",paraId:2,tocIndex:1},{value:"怎么绘制一个对称的条形图？",paraId:3,tocIndex:2},{value:"同样的，使用这个 transform 即可，如下：",paraId:4,tocIndex:2},{value:"import { Chart } from '@antv/g2';\n\nconst chart = new Chart({\n  container: 'container',\n  width: 800,\n  height: 300,\n});\n\nchart.coordinate({ transform: [{ type: 'transpose' }] });\n\nchart\n  .interval()\n  .data([\n    { x: 'A', y: 100 },\n    { x: 'B', y: 200 },\n    { x: 'C', y: 300 },\n    { x: 'D', y: 250 },\n  ])\n  .transform({ type: 'stackY' })\n  .transform({ type: 'symmetryY' })\n  .encode('x', 'x')\n  .encode('y', 'y')\n  .encode('color', 'x')\n  .scale('x', { padding: 0.5 })\n  .legend(false);\n\nchart.render();\n",paraId:5,tocIndex:2}]}}]);